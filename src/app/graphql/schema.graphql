"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `AspNetRoleClaim`."""
  allAspNetRoleClaims(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AspNetRoleClaim`."""
    orderBy: [AspNetRoleClaimsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AspNetRoleClaimCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AspNetRoleClaimFilter
  ): AspNetRoleClaimsConnection

  """Reads and enables pagination through a set of `AspNetRole`."""
  allAspNetRoles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AspNetRole`."""
    orderBy: [AspNetRolesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AspNetRoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AspNetRoleFilter
  ): AspNetRolesConnection

  """Reads and enables pagination through a set of `AspNetUserClaim`."""
  allAspNetUserClaims(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AspNetUserClaim`."""
    orderBy: [AspNetUserClaimsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AspNetUserClaimCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AspNetUserClaimFilter
  ): AspNetUserClaimsConnection

  """Reads and enables pagination through a set of `AspNetUserLogin`."""
  allAspNetUserLogins(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AspNetUserLogin`."""
    orderBy: [AspNetUserLoginsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AspNetUserLoginCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AspNetUserLoginFilter
  ): AspNetUserLoginsConnection

  """Reads and enables pagination through a set of `AspNetUserRole`."""
  allAspNetUserRoles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AspNetUserRole`."""
    orderBy: [AspNetUserRolesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AspNetUserRoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AspNetUserRoleFilter
  ): AspNetUserRolesConnection

  """Reads and enables pagination through a set of `AspNetUserToken`."""
  allAspNetUserTokens(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AspNetUserToken`."""
    orderBy: [AspNetUserTokensOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AspNetUserTokenCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AspNetUserTokenFilter
  ): AspNetUserTokensConnection

  """Reads and enables pagination through a set of `AspNetUser`."""
  allAspNetUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AspNetUser`."""
    orderBy: [AspNetUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AspNetUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AspNetUserFilter
  ): AspNetUsersConnection

  """Reads and enables pagination through a set of `RefreshToken`."""
  allRefreshTokens(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RefreshToken`."""
    orderBy: [RefreshTokensOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RefreshTokenCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RefreshTokenFilter
  ): RefreshTokensConnection

  """Reads and enables pagination through a set of `Adre`."""
  allAdres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Adre`."""
    orderBy: [AdresOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdreFilter
  ): AdresConnection

  """Reads and enables pagination through a set of `Land`."""
  allLands(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Land`."""
    orderBy: [LandsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LandCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LandFilter
  ): LandsConnection

  """Reads and enables pagination through a set of `Aco`."""
  allAcos(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Aco`."""
    orderBy: [AcosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AcoCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AcoFilter
  ): AcosConnection

  """Reads and enables pagination through a set of `Action`."""
  allActions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ActionFilter
  ): ActionsConnection

  """Reads and enables pagination through a set of `AdresMv`."""
  allAdresMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AdresMv`."""
    orderBy: [AdresMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdresMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdresMvFilter
  ): AdresMvsConnection

  """Reads and enables pagination through a set of `Application`."""
  allApplications(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationsConnection

  """Reads and enables pagination through a set of `AreaEntity`."""
  allAreaEntities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AreaEntity`."""
    orderBy: [AreaEntitiesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AreaEntityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AreaEntityFilter
  ): AreaEntitiesConnection

  """Reads and enables pagination through a set of `Area`."""
  allAreas(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Area`."""
    orderBy: [AreasOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AreaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AreaFilter
  ): AreasConnection

  """Reads and enables pagination through a set of `Aro`."""
  allAros(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Aro`."""
    orderBy: [ArosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AroCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AroFilter
  ): ArosConnection

  """Reads and enables pagination through a set of `ArosAco`."""
  allArosAcos(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ArosAco`."""
    orderBy: [ArosAcosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArosAcoCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArosAcoFilter
  ): ArosAcosConnection

  """Reads and enables pagination through a set of `Artikel`."""
  allArtikels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Artikel`."""
    orderBy: [ArtikelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArtikelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArtikelFilter
  ): ArtikelsConnection

  """Reads and enables pagination through a set of `Artikel2`."""
  allArtikel2S(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Artikel2`."""
    orderBy: [Artikel2SOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Artikel2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Artikel2Filter
  ): Artikel2SConnection

  """Reads and enables pagination through a set of `ArtikelAssemblyIndex`."""
  allArtikelAssemblyIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ArtikelAssemblyIndex`."""
    orderBy: [ArtikelAssemblyIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArtikelAssemblyIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArtikelAssemblyIndexFilter
  ): ArtikelAssemblyIndicesConnection

  """Reads and enables pagination through a set of `ArtikelComponenten`."""
  allArtikelComponentens(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ArtikelComponenten`."""
    orderBy: [ArtikelComponentensOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArtikelComponentenCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArtikelComponentenFilter
  ): ArtikelComponentensConnection

  """Reads and enables pagination through a set of `ArtikelIndex`."""
  allArtikelIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ArtikelIndex`."""
    orderBy: [ArtikelIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArtikelIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArtikelIndexFilter
  ): ArtikelIndicesConnection

  """Reads and enables pagination through a set of `ArtikelIndex2`."""
  allArtikelIndex2S(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ArtikelIndex2`."""
    orderBy: [ArtikelIndex2SOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArtikelIndex2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArtikelIndex2Filter
  ): ArtikelIndex2SConnection

  """Reads and enables pagination through a set of `ArtikelLog`."""
  allArtikelLogs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ArtikelLog`."""
    orderBy: [ArtikelLogsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArtikelLogCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArtikelLogFilter
  ): ArtikelLogsConnection

  """Reads and enables pagination through a set of `ArtikelLogsIndex`."""
  allArtikelLogsIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ArtikelLogsIndex`."""
    orderBy: [ArtikelLogsIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArtikelLogsIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArtikelLogsIndexFilter
  ): ArtikelLogsIndicesConnection

  """Reads and enables pagination through a set of `ArtikelMv`."""
  allArtikelMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ArtikelMv`."""
    orderBy: [ArtikelMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArtikelMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArtikelMvFilter
  ): ArtikelMvsConnection

  """
  Reads and enables pagination through a set of `ArtikelSamenstellingen`.
  """
  allArtikelSamenstellingens(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ArtikelSamenstellingen`."""
    orderBy: [ArtikelSamenstellingensOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArtikelSamenstellingenCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArtikelSamenstellingenFilter
  ): ArtikelSamenstellingensConnection

  """Reads and enables pagination through a set of `Artikelomschr`."""
  allArtikelomschrs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Artikelomschr`."""
    orderBy: [ArtikelomschrsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArtikelomschrCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArtikelomschrFilter
  ): ArtikelomschrsConnection

  """Reads and enables pagination through a set of `ArtikelomschrMv`."""
  allArtikelomschrMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ArtikelomschrMv`."""
    orderBy: [ArtikelomschrMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArtikelomschrMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArtikelomschrMvFilter
  ): ArtikelomschrMvsConnection

  """Reads and enables pagination through a set of `Artsamcomponenten`."""
  allArtsamcomponentens(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Artsamcomponenten`."""
    orderBy: [ArtsamcomponentensOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArtsamcomponentenCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArtsamcomponentenFilter
  ): ArtsamcomponentensConnection

  """Reads and enables pagination through a set of `ArtsamcomponentenMv`."""
  allArtsamcomponentenMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ArtsamcomponentenMv`."""
    orderBy: [ArtsamcomponentenMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArtsamcomponentenMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArtsamcomponentenMvFilter
  ): ArtsamcomponentenMvsConnection

  """Reads and enables pagination through a set of `Artsamenstelling`."""
  allArtsamenstellings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Artsamenstelling`."""
    orderBy: [ArtsamenstellingsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArtsamenstellingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArtsamenstellingFilter
  ): ArtsamenstellingsConnection

  """Reads and enables pagination through a set of `ArtsamenstellingMv`."""
  allArtsamenstellingMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ArtsamenstellingMv`."""
    orderBy: [ArtsamenstellingMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArtsamenstellingMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArtsamenstellingMvFilter
  ): ArtsamenstellingMvsConnection

  """Reads and enables pagination through a set of `Assemblage`."""
  allAssemblages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Assemblage`."""
    orderBy: [AssemblagesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssemblageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssemblageFilter
  ): AssemblagesConnection

  """Reads and enables pagination through a set of `AssemblageMv`."""
  allAssemblageMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssemblageMv`."""
    orderBy: [AssemblageMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssemblageMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssemblageMvFilter
  ): AssemblageMvsConnection

  """Reads and enables pagination through a set of `Assemblageregel`."""
  allAssemblageregels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Assemblageregel`."""
    orderBy: [AssemblageregelsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssemblageregelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssemblageregelFilter
  ): AssemblageregelsConnection

  """Reads and enables pagination through a set of `AssemblageregelMv`."""
  allAssemblageregelMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssemblageregelMv`."""
    orderBy: [AssemblageregelMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssemblageregelMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssemblageregelMvFilter
  ): AssemblageregelMvsConnection

  """Reads and enables pagination through a set of `Assembly`."""
  allAssemblies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Assembly`."""
    orderBy: [AssembliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssemblyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssemblyFilter
  ): AssembliesConnection

  """Reads and enables pagination through a set of `AssemblyEntity`."""
  allAssemblyEntities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssemblyEntity`."""
    orderBy: [AssemblyEntitiesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssemblyEntityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssemblyEntityFilter
  ): AssemblyEntitiesConnection

  """Reads and enables pagination through a set of `AssemblyLineEntity`."""
  allAssemblyLineEntities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssemblyLineEntity`."""
    orderBy: [AssemblyLineEntitiesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssemblyLineEntityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssemblyLineEntityFilter
  ): AssemblyLineEntitiesConnection

  """
  Reads and enables pagination through a set of `AssemblyMultiversEntity`.
  """
  allAssemblyMultiversEntities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssemblyMultiversEntity`."""
    orderBy: [AssemblyMultiversEntitiesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssemblyMultiversEntityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssemblyMultiversEntityFilter
  ): AssemblyMultiversEntitiesConnection

  """Reads and enables pagination through a set of `AssemblyPart`."""
  allAssemblyParts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssemblyPart`."""
    orderBy: [AssemblyPartsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssemblyPartCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssemblyPartFilter
  ): AssemblyPartsConnection

  """Reads and enables pagination through a set of `AssemblyTypePart`."""
  allAssemblyTypeParts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssemblyTypePart`."""
    orderBy: [AssemblyTypePartsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssemblyTypePartCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssemblyTypePartFilter
  ): AssemblyTypePartsConnection

  """Reads and enables pagination through a set of `AssemblyType`."""
  allAssemblyTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssemblyType`."""
    orderBy: [AssemblyTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssemblyTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssemblyTypeFilter
  ): AssemblyTypesConnection

  """Reads and enables pagination through a set of `AssemblyTypesEntity`."""
  allAssemblyTypesEntities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssemblyTypesEntity`."""
    orderBy: [AssemblyTypesEntitiesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssemblyTypesEntityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssemblyTypesEntityFilter
  ): AssemblyTypesEntitiesConnection

  """Reads and enables pagination through a set of `Besteladvy`."""
  allBesteladvies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Besteladvy`."""
    orderBy: [BesteladviesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BesteladvyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BesteladvyFilter
  ): BesteladviesConnection

  """Reads and enables pagination through a set of `BieStatus`."""
  allBieStatuses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BieStatus`."""
    orderBy: [BieStatusesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BieStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BieStatusFilter
  ): BieStatusesConnection

  """Reads and enables pagination through a set of `Building`."""
  allBuildings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Building`."""
    orderBy: [BuildingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BuildingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BuildingFilter
  ): BuildingsConnection

  """Reads and enables pagination through a set of `CalGas`."""
  allCalGases(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CalGas`."""
    orderBy: [CalGasesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CalGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CalGasFilter
  ): CalGasesConnection

  """Reads and enables pagination through a set of `CalgasEntity`."""
  allCalgasEntities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CalgasEntity`."""
    orderBy: [CalgasEntitiesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CalgasEntityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CalgasEntityFilter
  ): CalgasEntitiesConnection

  """Reads and enables pagination through a set of `CatalogGroup`."""
  allCatalogGroups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CatalogGroup`."""
    orderBy: [CatalogGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CatalogGroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CatalogGroupFilter
  ): CatalogGroupsConnection

  """Reads and enables pagination through a set of `CatalogItemFile`."""
  allCatalogItemFiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CatalogItemFile`."""
    orderBy: [CatalogItemFilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CatalogItemFileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CatalogItemFileFilter
  ): CatalogItemFilesConnection

  """Reads and enables pagination through a set of `CatalogItemRelation`."""
  allCatalogItemRelations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CatalogItemRelation`."""
    orderBy: [CatalogItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CatalogItemRelationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CatalogItemRelationFilter
  ): CatalogItemRelationsConnection

  """Reads and enables pagination through a set of `CatalogItem`."""
  allCatalogItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CatalogItem`."""
    orderBy: [CatalogItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CatalogItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CatalogItemFilter
  ): CatalogItemsConnection

  """Reads and enables pagination through a set of `CatalogSubGroup`."""
  allCatalogSubGroups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CatalogSubGroup`."""
    orderBy: [CatalogSubGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CatalogSubGroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CatalogSubGroupFilter
  ): CatalogSubGroupsConnection

  """Reads and enables pagination through a set of `CdartikelJoin`."""
  allCdartikelJoins(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CdartikelJoin`."""
    orderBy: [CdartikelJoinsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CdartikelJoinCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CdartikelJoinFilter
  ): CdartikelJoinsConnection

  """Reads and enables pagination through a set of `ChemicalCompound`."""
  allChemicalCompounds(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChemicalCompound`."""
    orderBy: [ChemicalCompoundsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChemicalCompoundCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChemicalCompoundFilter
  ): ChemicalCompoundsConnection

  """Reads and enables pagination through a set of `ContactpersoonMv`."""
  allContactpersoonMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ContactpersoonMv`."""
    orderBy: [ContactpersoonMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactpersoonMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactpersoonMvFilter
  ): ContactpersoonMvsConnection

  """Reads and enables pagination through a set of `Crediteur`."""
  allCrediteurs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Crediteur`."""
    orderBy: [CrediteursOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CrediteurCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CrediteurFilter
  ): CrediteursConnection

  """Reads and enables pagination through a set of `CrediteurMv`."""
  allCrediteurMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CrediteurMv`."""
    orderBy: [CrediteurMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CrediteurMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CrediteurMvFilter
  ): CrediteurMvsConnection

  """Reads and enables pagination through a set of `Debiteur`."""
  allDebiteurs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Debiteur`."""
    orderBy: [DebiteursOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DebiteurCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DebiteurFilter
  ): DebiteursConnection

  """Reads and enables pagination through a set of `DebiteurMv`."""
  allDebiteurMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DebiteurMv`."""
    orderBy: [DebiteurMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DebiteurMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DebiteurMvFilter
  ): DebiteurMvsConnection

  """Reads and enables pagination through a set of `DetectorEntity`."""
  allDetectorEntities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorEntity`."""
    orderBy: [DetectorEntitiesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorEntityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorEntityFilter
  ): DetectorEntitiesConnection

  """Reads and enables pagination through a set of `DetectorIndex`."""
  allDetectorIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorIndex`."""
    orderBy: [DetectorIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorIndexFilter
  ): DetectorIndicesConnection

  """Reads and enables pagination through a set of `DetectorLocation`."""
  allDetectorLocations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorLocation`."""
    orderBy: [DetectorLocationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorLocationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorLocationFilter
  ): DetectorLocationsConnection

  """Reads and enables pagination through a set of `DetectorOrder`."""
  allDetectorOrders(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorOrder`."""
    orderBy: [DetectorOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorOrderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorOrderFilter
  ): DetectorOrdersConnection

  """Reads and enables pagination through a set of `DetectorSensorIndex`."""
  allDetectorSensorIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorSensorIndex`."""
    orderBy: [DetectorSensorIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorSensorIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorSensorIndexFilter
  ): DetectorSensorIndicesConnection

  """
  Reads and enables pagination through a set of `DetectorSensorLocation`.
  """
  allDetectorSensorLocations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorSensorLocation`."""
    orderBy: [DetectorSensorLocationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorSensorLocationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorSensorLocationFilter
  ): DetectorSensorLocationsConnection

  """
  Reads and enables pagination through a set of `DetectorSensorLocationsEndUser`.
  """
  allDetectorSensorLocationsEndUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorSensorLocationsEndUser`."""
    orderBy: [DetectorSensorLocationsEndUsersOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorSensorLocationsEndUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorSensorLocationsEndUserFilter
  ): DetectorSensorLocationsEndUsersConnection

  """
  Reads and enables pagination through a set of `DetectorSensorLocationsIndex`.
  """
  allDetectorSensorLocationsIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorSensorLocationsIndex`."""
    orderBy: [DetectorSensorLocationsIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorSensorLocationsIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorSensorLocationsIndexFilter
  ): DetectorSensorLocationsIndicesConnection

  """Reads and enables pagination through a set of `DetectorSensorType`."""
  allDetectorSensorTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorSensorType`."""
    orderBy: [DetectorSensorTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorSensorTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorSensorTypeFilter
  ): DetectorSensorTypesConnection

  """Reads and enables pagination through a set of `DetectorSensor`."""
  allDetectorSensors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorSensor`."""
    orderBy: [DetectorSensorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorSensorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorSensorFilter
  ): DetectorSensorsConnection

  """Reads and enables pagination through a set of `DetectorType`."""
  allDetectorTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorType`."""
    orderBy: [DetectorTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorTypeFilter
  ): DetectorTypesConnection

  """Reads and enables pagination through a set of `DetectorTypesEntity`."""
  allDetectorTypesEntities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorTypesEntity`."""
    orderBy: [DetectorTypesEntitiesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorTypesEntityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorTypesEntityFilter
  ): DetectorTypesEntitiesConnection

  """Reads and enables pagination through a set of `Detector`."""
  allDetectors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Detector`."""
    orderBy: [DetectorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorFilter
  ): DetectorsConnection

  """Reads and enables pagination through a set of `DetectorsChecklist`."""
  allDetectorsChecklists(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorsChecklist`."""
    orderBy: [DetectorsChecklistsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorsChecklistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorsChecklistFilter
  ): DetectorsChecklistsConnection

  """Reads and enables pagination through a set of `DpCard`."""
  allDpCards(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DpCard`."""
    orderBy: [DpCardsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DpCardCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DpCardFilter
  ): DpCardsConnection

  """Reads and enables pagination through a set of `ElectrolyteEntity`."""
  allElectrolyteEntities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ElectrolyteEntity`."""
    orderBy: [ElectrolyteEntitiesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ElectrolyteEntityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ElectrolyteEntityFilter
  ): ElectrolyteEntitiesConnection

  """Reads and enables pagination through a set of `Electrolyte`."""
  allElectrolytes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Electrolyte`."""
    orderBy: [ElectrolytesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ElectrolyteCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ElectrolyteFilter
  ): ElectrolytesConnection

  """Reads and enables pagination through a set of `EndUser`."""
  allEndUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EndUser`."""
    orderBy: [EndUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EndUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EndUserFilter
  ): EndUsersConnection

  """
  Reads and enables pagination through a set of `FactopdrachtArtikelExclusion`.
  """
  allFactopdrachtArtikelExclusions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FactopdrachtArtikelExclusion`."""
    orderBy: [FactopdrachtArtikelExclusionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactopdrachtArtikelExclusionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactopdrachtArtikelExclusionFilter
  ): FactopdrachtArtikelExclusionsConnection

  """Reads and enables pagination through a set of `Factopdrachtregel`."""
  allFactopdrachtregels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Factopdrachtregel`."""
    orderBy: [FactopdrachtregelsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactopdrachtregelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactopdrachtregelFilter
  ): FactopdrachtregelsConnection

  """
  Reads and enables pagination through a set of `FactopdrachtregelAmount`.
  """
  allFactopdrachtregelAmounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FactopdrachtregelAmount`."""
    orderBy: [FactopdrachtregelAmountsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactopdrachtregelAmountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactopdrachtregelAmountFilter
  ): FactopdrachtregelAmountsConnection

  """
  Reads and enables pagination through a set of `FactopdrachtregelAmounts2`.
  """
  allFactopdrachtregelAmounts2S(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FactopdrachtregelAmounts2`."""
    orderBy: [FactopdrachtregelAmounts2SOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactopdrachtregelAmounts2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactopdrachtregelAmounts2Filter
  ): FactopdrachtregelAmounts2SConnection

  """
  Reads and enables pagination through a set of `FactopdrachtregelFilterView`.
  """
  allFactopdrachtregelFilterViews(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FactopdrachtregelFilterView`."""
    orderBy: [FactopdrachtregelFilterViewsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactopdrachtregelFilterViewCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactopdrachtregelFilterViewFilter
  ): FactopdrachtregelFilterViewsConnection

  """
  Reads and enables pagination through a set of `FactopdrachtregelIndex`.
  """
  allFactopdrachtregelIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FactopdrachtregelIndex`."""
    orderBy: [FactopdrachtregelIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactopdrachtregelIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactopdrachtregelIndexFilter
  ): FactopdrachtregelIndicesConnection

  """
  Reads and enables pagination through a set of `FactopdrachtregelLineDate`.
  """
  allFactopdrachtregelLineDates(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FactopdrachtregelLineDate`."""
    orderBy: [FactopdrachtregelLineDatesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactopdrachtregelLineDateCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactopdrachtregelLineDateFilter
  ): FactopdrachtregelLineDatesConnection

  """
  Reads and enables pagination through a set of `FactopdrachtregelLineDatesIndex`.
  """
  allFactopdrachtregelLineDatesIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FactopdrachtregelLineDatesIndex`."""
    orderBy: [FactopdrachtregelLineDatesIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactopdrachtregelLineDatesIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactopdrachtregelLineDatesIndexFilter
  ): FactopdrachtregelLineDatesIndicesConnection

  """
  Reads and enables pagination through a set of `FactopdrachtregelLineDatesTotal`.
  """
  allFactopdrachtregelLineDatesTotals(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FactopdrachtregelLineDatesTotal`."""
    orderBy: [FactopdrachtregelLineDatesTotalsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactopdrachtregelLineDatesTotalCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactopdrachtregelLineDatesTotalFilter
  ): FactopdrachtregelLineDatesTotalsConnection

  """
  Reads and enables pagination through a set of `FactopdrachtregelLineDatesTotals2`.
  """
  allFactopdrachtregelLineDatesTotals2S(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FactopdrachtregelLineDatesTotals2`."""
    orderBy: [FactopdrachtregelLineDatesTotals2SOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactopdrachtregelLineDatesTotals2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactopdrachtregelLineDatesTotals2Filter
  ): FactopdrachtregelLineDatesTotals2SConnection

  """
  Reads and enables pagination through a set of `FactopdrachtregelLineRemark`.
  """
  allFactopdrachtregelLineRemarks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FactopdrachtregelLineRemark`."""
    orderBy: [FactopdrachtregelLineRemarksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactopdrachtregelLineRemarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactopdrachtregelLineRemarkFilter
  ): FactopdrachtregelLineRemarksConnection

  """
  Reads and enables pagination through a set of `FactopdrachtregelLineRemarksIndex`.
  """
  allFactopdrachtregelLineRemarksIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FactopdrachtregelLineRemarksIndex`."""
    orderBy: [FactopdrachtregelLineRemarksIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactopdrachtregelLineRemarksIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactopdrachtregelLineRemarksIndexFilter
  ): FactopdrachtregelLineRemarksIndicesConnection

  """
  Reads and enables pagination through a set of `FactopdrachtregelLineWeek`.
  """
  allFactopdrachtregelLineWeeks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FactopdrachtregelLineWeek`."""
    orderBy: [FactopdrachtregelLineWeeksOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactopdrachtregelLineWeekCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactopdrachtregelLineWeekFilter
  ): FactopdrachtregelLineWeeksConnection

  """
  Reads and enables pagination through a set of `FactopdrachtregelLineWeeksIndex`.
  """
  allFactopdrachtregelLineWeeksIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FactopdrachtregelLineWeeksIndex`."""
    orderBy: [FactopdrachtregelLineWeeksIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactopdrachtregelLineWeeksIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactopdrachtregelLineWeeksIndexFilter
  ): FactopdrachtregelLineWeeksIndicesConnection

  """Reads and enables pagination through a set of `FactopdrachtregelLine`."""
  allFactopdrachtregelLines(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FactopdrachtregelLine`."""
    orderBy: [FactopdrachtregelLinesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactopdrachtregelLineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactopdrachtregelLineFilter
  ): FactopdrachtregelLinesConnection

  """Reads and enables pagination through a set of `FactopdrachtregelMv`."""
  allFactopdrachtregelMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FactopdrachtregelMv`."""
    orderBy: [FactopdrachtregelMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactopdrachtregelMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactopdrachtregelMvFilter
  ): FactopdrachtregelMvsConnection

  """
  Reads and enables pagination through a set of `FactopdrachtregelTotalAmount`.
  """
  allFactopdrachtregelTotalAmounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FactopdrachtregelTotalAmount`."""
    orderBy: [FactopdrachtregelTotalAmountsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactopdrachtregelTotalAmountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactopdrachtregelTotalAmountFilter
  ): FactopdrachtregelTotalAmountsConnection

  """Reads and enables pagination through a set of `Factureeropdracht`."""
  allFactureeropdrachts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Factureeropdracht`."""
    orderBy: [FactureeropdrachtsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactureeropdrachtCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactureeropdrachtFilter
  ): FactureeropdrachtsConnection

  """
  Reads and enables pagination through a set of `FactureeropdrachtIndex`.
  """
  allFactureeropdrachtIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FactureeropdrachtIndex`."""
    orderBy: [FactureeropdrachtIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactureeropdrachtIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactureeropdrachtIndexFilter
  ): FactureeropdrachtIndicesConnection

  """Reads and enables pagination through a set of `FactureeropdrachtMv`."""
  allFactureeropdrachtMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FactureeropdrachtMv`."""
    orderBy: [FactureeropdrachtMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactureeropdrachtMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactureeropdrachtMvFilter
  ): FactureeropdrachtMvsConnection

  """Reads and enables pagination through a set of `Factuur`."""
  allFactuurs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Factuur`."""
    orderBy: [FactuursOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactuurCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactuurFilter
  ): FactuursConnection

  """Reads and enables pagination through a set of `FilterEntity`."""
  allFilterEntities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FilterEntity`."""
    orderBy: [FilterEntitiesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FilterEntityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FilterEntityFilter
  ): FilterEntitiesConnection

  """Reads and enables pagination through a set of `Filter`."""
  allFilters(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Filter`."""
    orderBy: [FiltersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FilterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FilterFilter
  ): FiltersConnection

  """Reads and enables pagination through a set of `FloorEntity`."""
  allFloorEntities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FloorEntity`."""
    orderBy: [FloorEntitiesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FloorEntityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FloorEntityFilter
  ): FloorEntitiesConnection

  """Reads and enables pagination through a set of `Floor`."""
  allFloors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Floor`."""
    orderBy: [FloorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FloorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FloorFilter
  ): FloorsConnection

  """Reads and enables pagination through a set of `Gas`."""
  allGases(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GasFilter
  ): GasesConnection

  """Reads and enables pagination through a set of `GroupPermission`."""
  allGroupPermissions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GroupPermission`."""
    orderBy: [GroupPermissionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupPermissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupPermissionFilter
  ): GroupPermissionsConnection

  """Reads and enables pagination through a set of `GroupRight`."""
  allGroupRights(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GroupRight`."""
    orderBy: [GroupRightsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupRightCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupRightFilter
  ): GroupRightsConnection

  """Reads and enables pagination through a set of `Group`."""
  allGroups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter
  ): GroupsConnection

  """Reads and enables pagination through a set of `Hardware`."""
  allHardwares(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Hardware`."""
    orderBy: [HardwaresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HardwareCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: HardwareFilter
  ): HardwaresConnection

  """Reads and enables pagination through a set of `IncomingDocument`."""
  allIncomingDocuments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `IncomingDocument`."""
    orderBy: [IncomingDocumentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IncomingDocumentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IncomingDocumentFilter
  ): IncomingDocumentsConnection

  """Reads and enables pagination through a set of `Inkoopgegeven`."""
  allInkoopgegevens(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Inkoopgegeven`."""
    orderBy: [InkoopgegevensOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InkoopgegevenCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InkoopgegevenFilter
  ): InkoopgegevensConnection

  """
  Reads and enables pagination through a set of `InkoopgegevensFactopdrachtregel`.
  """
  allInkoopgegevensFactopdrachtregels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InkoopgegevensFactopdrachtregel`."""
    orderBy: [InkoopgegevensFactopdrachtregelsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InkoopgegevensFactopdrachtregelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InkoopgegevensFactopdrachtregelFilter
  ): InkoopgegevensFactopdrachtregelsConnection

  """Reads and enables pagination through a set of `InkoopgegevensIndex`."""
  allInkoopgegevensIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InkoopgegevensIndex`."""
    orderBy: [InkoopgegevensIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InkoopgegevensIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InkoopgegevensIndexFilter
  ): InkoopgegevensIndicesConnection

  """Reads and enables pagination through a set of `InkoopgegevensLog`."""
  allInkoopgegevensLogs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InkoopgegevensLog`."""
    orderBy: [InkoopgegevensLogsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InkoopgegevensLogCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InkoopgegevensLogFilter
  ): InkoopgegevensLogsConnection

  """
  Reads and enables pagination through a set of `InkoopgegevensLogsIndex`.
  """
  allInkoopgegevensLogsIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InkoopgegevensLogsIndex`."""
    orderBy: [InkoopgegevensLogsIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InkoopgegevensLogsIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InkoopgegevensLogsIndexFilter
  ): InkoopgegevensLogsIndicesConnection

  """Reads and enables pagination through a set of `InkoopgegevensMv`."""
  allInkoopgegevensMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InkoopgegevensMv`."""
    orderBy: [InkoopgegevensMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InkoopgegevensMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InkoopgegevensMvFilter
  ): InkoopgegevensMvsConnection

  """Reads and enables pagination through a set of `Inkooporder`."""
  allInkooporders(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Inkooporder`."""
    orderBy: [InkoopordersOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InkooporderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InkooporderFilter
  ): InkoopordersConnection

  """Reads and enables pagination through a set of `InkooporderIndex`."""
  allInkooporderIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InkooporderIndex`."""
    orderBy: [InkooporderIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InkooporderIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InkooporderIndexFilter
  ): InkooporderIndicesConnection

  """Reads and enables pagination through a set of `InkooporderMv`."""
  allInkooporderMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InkooporderMv`."""
    orderBy: [InkooporderMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InkooporderMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InkooporderMvFilter
  ): InkooporderMvsConnection

  """Reads and enables pagination through a set of `Inkooporderregel`."""
  allInkooporderregels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Inkooporderregel`."""
    orderBy: [InkooporderregelsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InkooporderregelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InkooporderregelFilter
  ): InkooporderregelsConnection

  """
  Reads and enables pagination through a set of `InkooporderregelFilterView`.
  """
  allInkooporderregelFilterViews(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InkooporderregelFilterView`."""
    orderBy: [InkooporderregelFilterViewsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InkooporderregelFilterViewCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InkooporderregelFilterViewFilter
  ): InkooporderregelFilterViewsConnection

  """
  Reads and enables pagination through a set of `InkooporderregelLevertijden`.
  """
  allInkooporderregelLevertijdens(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InkooporderregelLevertijden`."""
    orderBy: [InkooporderregelLevertijdensOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InkooporderregelLevertijdenCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InkooporderregelLevertijdenFilter
  ): InkooporderregelLevertijdensConnection

  """Reads and enables pagination through a set of `InkooporderregelLine`."""
  allInkooporderregelLines(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InkooporderregelLine`."""
    orderBy: [InkooporderregelLinesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InkooporderregelLineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InkooporderregelLineFilter
  ): InkooporderregelLinesConnection

  """Reads and enables pagination through a set of `InkooporderregelMv`."""
  allInkooporderregelMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InkooporderregelMv`."""
    orderBy: [InkooporderregelMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InkooporderregelMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InkooporderregelMvFilter
  ): InkooporderregelMvsConnection

  """
  Reads and enables pagination through a set of `InkooporderregelsFactopdrachtregel`.
  """
  allInkooporderregelsFactopdrachtregels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InkooporderregelsFactopdrachtregel`."""
    orderBy: [InkooporderregelsFactopdrachtregelsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InkooporderregelsFactopdrachtregelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InkooporderregelsFactopdrachtregelFilter
  ): InkooporderregelsFactopdrachtregelsConnection

  """
  Reads and enables pagination through a set of `InkooporderregelsIndex`.
  """
  allInkooporderregelsIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InkooporderregelsIndex`."""
    orderBy: [InkooporderregelsIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InkooporderregelsIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InkooporderregelsIndexFilter
  ): InkooporderregelsIndicesConnection

  """
  Reads and enables pagination through a set of `InkoopprijsChangesIndex`.
  """
  allInkoopprijsChangesIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InkoopprijsChangesIndex`."""
    orderBy: [InkoopprijsChangesIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InkoopprijsChangesIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InkoopprijsChangesIndexFilter
  ): InkoopprijsChangesIndicesConnection

  """Reads and enables pagination through a set of `Item`."""
  allItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ItemFilter
  ): ItemsConnection

  """Reads and enables pagination through a set of `Job`."""
  allJobs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Job`."""
    orderBy: [JobsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JobCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: JobFilter
  ): JobsConnection

  """Reads and enables pagination through a set of `JunctionBox`."""
  allJunctionBoxes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `JunctionBox`."""
    orderBy: [JunctionBoxesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JunctionBoxCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: JunctionBoxFilter
  ): JunctionBoxesConnection

  """Reads and enables pagination through a set of `LandMv`."""
  allLandMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LandMv`."""
    orderBy: [LandMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LandMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LandMvFilter
  ): LandMvsConnection

  """Reads and enables pagination through a set of `Lead`."""
  allLeads(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Lead`."""
    orderBy: [LeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LeadFilter
  ): LeadsConnection

  """Reads and enables pagination through a set of `Levertijden`."""
  allLevertijdens(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Levertijden`."""
    orderBy: [LevertijdensOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LevertijdenCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LevertijdenFilter
  ): LevertijdensConnection

  """Reads and enables pagination through a set of `LevertijdenExcel`."""
  allLevertijdenExcels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LevertijdenExcel`."""
    orderBy: [LevertijdenExcelsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LevertijdenExcelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LevertijdenExcelFilter
  ): LevertijdenExcelsConnection

  """Reads and enables pagination through a set of `LicenseCustomer`."""
  allLicenseCustomers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LicenseCustomer`."""
    orderBy: [LicenseCustomersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCustomerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseCustomerFilter
  ): LicenseCustomersConnection

  """Reads and enables pagination through a set of `LicenseModule`."""
  allLicenseModules(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LicenseModule`."""
    orderBy: [LicenseModulesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseModuleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseModuleFilter
  ): LicenseModulesConnection

  """Reads and enables pagination through a set of `LicenseOrder`."""
  allLicenseOrders(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LicenseOrder`."""
    orderBy: [LicenseOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseOrderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseOrderFilter
  ): LicenseOrdersConnection

  """Reads and enables pagination through a set of `LicenseRegistration`."""
  allLicenseRegistrations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LicenseRegistration`."""
    orderBy: [LicenseRegistrationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseRegistrationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseRegistrationFilter
  ): LicenseRegistrationsConnection

  """Reads and enables pagination through a set of `License`."""
  allLicenses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseFilter
  ): LicensesConnection

  """Reads and enables pagination through a set of `Magazijn`."""
  allMagazijns(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Magazijn`."""
    orderBy: [MagazijnsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MagazijnCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MagazijnFilter
  ): MagazijnsConnection

  """Reads and enables pagination through a set of `MagazijnMv`."""
  allMagazijnMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MagazijnMv`."""
    orderBy: [MagazijnMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MagazijnMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MagazijnMvFilter
  ): MagazijnMvsConnection

  """Reads and enables pagination through a set of `MaintenanceVisitArea`."""
  allMaintenanceVisitAreas(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitArea`."""
    orderBy: [MaintenanceVisitAreasOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitAreaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitAreaFilter
  ): MaintenanceVisitAreasConnection

  """Reads and enables pagination through a set of `MaintenanceVisitLine`."""
  allMaintenanceVisitLines(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitLine`."""
    orderBy: [MaintenanceVisitLinesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitLineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitLineFilter
  ): MaintenanceVisitLinesConnection

  """
  Reads and enables pagination through a set of `MaintenanceVisitLinesMaintain`.
  """
  allMaintenanceVisitLinesMaintains(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitLinesMaintain`."""
    orderBy: [MaintenanceVisitLinesMaintainsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitLinesMaintainCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitLinesMaintainFilter
  ): MaintenanceVisitLinesMaintainsConnection

  """
  Reads and enables pagination through a set of `MaintenanceVisitRemark`.
  """
  allMaintenanceVisitRemarks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitRemark`."""
    orderBy: [MaintenanceVisitRemarksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitRemarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitRemarkFilter
  ): MaintenanceVisitRemarksConnection

  """
  Reads and enables pagination through a set of `MaintenanceVisitRemarksIndex`.
  """
  allMaintenanceVisitRemarksIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitRemarksIndex`."""
    orderBy: [MaintenanceVisitRemarksIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitRemarksIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitRemarksIndexFilter
  ): MaintenanceVisitRemarksIndicesConnection

  """Reads and enables pagination through a set of `MaintenanceVisit`."""
  allMaintenanceVisits(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisit`."""
    orderBy: [MaintenanceVisitsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitFilter
  ): MaintenanceVisitsConnection

  """
  Reads and enables pagination through a set of `MaintenanceVisitsCalGasMaterial`.
  """
  allMaintenanceVisitsCalGasMaterials(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitsCalGasMaterial`."""
    orderBy: [MaintenanceVisitsCalGasMaterialsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitsCalGasMaterialCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitsCalGasMaterialFilter
  ): MaintenanceVisitsCalGasMaterialsConnection

  """Reads and enables pagination through a set of `MaintenanceVisitsEdit`."""
  allMaintenanceVisitsEdits(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitsEdit`."""
    orderBy: [MaintenanceVisitsEditsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitsEditCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitsEditFilter
  ): MaintenanceVisitsEditsConnection

  """
  Reads and enables pagination through a set of `MaintenanceVisitsElectrolyteMaterial`.
  """
  allMaintenanceVisitsElectrolyteMaterials(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    The method to use when ordering `MaintenanceVisitsElectrolyteMaterial`.
    """
    orderBy: [MaintenanceVisitsElectrolyteMaterialsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitsElectrolyteMaterialCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitsElectrolyteMaterialFilter
  ): MaintenanceVisitsElectrolyteMaterialsConnection

  """
  Reads and enables pagination through a set of `MaintenanceVisitsFilterMaterial`.
  """
  allMaintenanceVisitsFilterMaterials(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitsFilterMaterial`."""
    orderBy: [MaintenanceVisitsFilterMaterialsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitsFilterMaterialCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitsFilterMaterialFilter
  ): MaintenanceVisitsFilterMaterialsConnection

  """
  Reads and enables pagination through a set of `MaintenanceVisitsIndex`.
  """
  allMaintenanceVisitsIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitsIndex`."""
    orderBy: [MaintenanceVisitsIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitsIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitsIndexFilter
  ): MaintenanceVisitsIndicesConnection

  """
  Reads and enables pagination through a set of `MaintenanceVisitsMaterialError`.
  """
  allMaintenanceVisitsMaterialErrors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitsMaterialError`."""
    orderBy: [MaintenanceVisitsMaterialErrorsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitsMaterialErrorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitsMaterialErrorFilter
  ): MaintenanceVisitsMaterialErrorsConnection

  """
  Reads and enables pagination through a set of `MaintenanceVisitsMaterial`.
  """
  allMaintenanceVisitsMaterials(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitsMaterial`."""
    orderBy: [MaintenanceVisitsMaterialsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitsMaterialCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitsMaterialFilter
  ): MaintenanceVisitsMaterialsConnection

  """
  Reads and enables pagination through a set of `MaintenanceVisitsMembraneMaterial`.
  """
  allMaintenanceVisitsMembraneMaterials(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitsMembraneMaterial`."""
    orderBy: [MaintenanceVisitsMembraneMaterialsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitsMembraneMaterialCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitsMembraneMaterialFilter
  ): MaintenanceVisitsMembraneMaterialsConnection

  """
  Reads and enables pagination through a set of `MaintenanceVisitsORingMaterial`.
  """
  allMaintenanceVisitsORingMaterials(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitsORingMaterial`."""
    orderBy: [MaintenanceVisitsORingMaterialsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitsORingMaterialCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitsORingMaterialFilter
  ): MaintenanceVisitsORingMaterialsConnection

  """
  Reads and enables pagination through a set of `MaintenanceVisitsPyrolyserMaterial`.
  """
  allMaintenanceVisitsPyrolyserMaterials(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitsPyrolyserMaterial`."""
    orderBy: [MaintenanceVisitsPyrolyserMaterialsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitsPyrolyserMaterialCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitsPyrolyserMaterialFilter
  ): MaintenanceVisitsPyrolyserMaterialsConnection

  """
  Reads and enables pagination through a set of `MaintenanceVisitsSensorMaterial`.
  """
  allMaintenanceVisitsSensorMaterials(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitsSensorMaterial`."""
    orderBy: [MaintenanceVisitsSensorMaterialsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitsSensorMaterialCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitsSensorMaterialFilter
  ): MaintenanceVisitsSensorMaterialsConnection

  """Reads and enables pagination through a set of `MembraneEntity`."""
  allMembraneEntities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MembraneEntity`."""
    orderBy: [MembraneEntitiesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MembraneEntityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MembraneEntityFilter
  ): MembraneEntitiesConnection

  """Reads and enables pagination through a set of `Membrane`."""
  allMembranes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Membrane`."""
    orderBy: [MembranesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MembraneCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MembraneFilter
  ): MembranesConnection

  """Reads and enables pagination through a set of `Notity`."""
  allNotities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notity`."""
    orderBy: [NotitiesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotityFilter
  ): NotitiesConnection

  """Reads and enables pagination through a set of `NotitiesMv`."""
  allNotitiesMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NotitiesMv`."""
    orderBy: [NotitiesMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotitiesMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotitiesMvFilter
  ): NotitiesMvsConnection

  """Reads and enables pagination through a set of `ORingEntity`."""
  allORingEntities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ORingEntity`."""
    orderBy: [ORingEntitiesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ORingEntityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ORingEntityFilter
  ): ORingEntitiesConnection

  """Reads and enables pagination through a set of `ORing`."""
  allORings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ORing`."""
    orderBy: [ORingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ORingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ORingFilter
  ): ORingsConnection

  """Reads and enables pagination through a set of `Offerte`."""
  allOffertes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Offerte`."""
    orderBy: [OffertesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OfferteCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OfferteFilter
  ): OffertesConnection

  """Reads and enables pagination through a set of `OfferteCsv`."""
  allOfferteCsvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OfferteCsv`."""
    orderBy: [OfferteCsvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OfferteCsvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OfferteCsvFilter
  ): OfferteCsvsConnection

  """Reads and enables pagination through a set of `OfferteMv`."""
  allOfferteMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OfferteMv`."""
    orderBy: [OfferteMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OfferteMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OfferteMvFilter
  ): OfferteMvsConnection

  """Reads and enables pagination through a set of `OfferteRemark`."""
  allOfferteRemarks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OfferteRemark`."""
    orderBy: [OfferteRemarksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OfferteRemarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OfferteRemarkFilter
  ): OfferteRemarksConnection

  """Reads and enables pagination through a set of `Offerteregel`."""
  allOfferteregels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Offerteregel`."""
    orderBy: [OfferteregelsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OfferteregelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OfferteregelFilter
  ): OfferteregelsConnection

  """Reads and enables pagination through a set of `OfferteregelMv`."""
  allOfferteregelMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OfferteregelMv`."""
    orderBy: [OfferteregelMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OfferteregelMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OfferteregelMvFilter
  ): OfferteregelMvsConnection

  """Reads and enables pagination through a set of `Opportunity`."""
  allOpportunities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Opportunity`."""
    orderBy: [OpportunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpportunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OpportunityFilter
  ): OpportunitiesConnection

  """Reads and enables pagination through a set of `Overtime`."""
  allOvertimes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Overtime`."""
    orderBy: [OvertimesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OvertimeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OvertimeFilter
  ): OvertimesConnection

  """Reads and enables pagination through a set of `Overtime2`."""
  allOvertime2S(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Overtime2`."""
    orderBy: [Overtime2SOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Overtime2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Overtime2Filter
  ): Overtime2SConnection

  """Reads and enables pagination through a set of `Permission`."""
  allPermissions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Permission`."""
    orderBy: [PermissionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PermissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PermissionFilter
  ): PermissionsConnection

  """Reads and enables pagination through a set of `Persoon`."""
  allPersoons(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Persoon`."""
    orderBy: [PersoonsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersoonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersoonFilter
  ): PersoonsConnection

  """Reads and enables pagination through a set of `PersoonInfo`."""
  allPersoonInfos(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersoonInfo`."""
    orderBy: [PersoonInfosOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersoonInfoCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersoonInfoFilter
  ): PersoonInfosConnection

  """Reads and enables pagination through a set of `PersoonInfoMv`."""
  allPersoonInfoMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersoonInfoMv`."""
    orderBy: [PersoonInfoMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersoonInfoMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersoonInfoMvFilter
  ): PersoonInfoMvsConnection

  """Reads and enables pagination through a set of `PersoonMv`."""
  allPersoonMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersoonMv`."""
    orderBy: [PersoonMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersoonMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersoonMvFilter
  ): PersoonMvsConnection

  """Reads and enables pagination through a set of `PersoonRol`."""
  allPersoonRols(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersoonRol`."""
    orderBy: [PersoonRolsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersoonRolCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PersoonRolFilter
  ): PersoonRolsConnection

  """Reads and enables pagination through a set of `Plug`."""
  allPlugs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Plug`."""
    orderBy: [PlugsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlugCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlugFilter
  ): PlugsConnection

  """Reads and enables pagination through a set of `Principle`."""
  allPrinciples(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Principle`."""
    orderBy: [PrinciplesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PrincipleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PrincipleFilter
  ): PrinciplesConnection

  """Reads and enables pagination through a set of `Production`."""
  allProductions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Production`."""
    orderBy: [ProductionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProductionFilter
  ): ProductionsConnection

  """Reads and enables pagination through a set of `PyrolyserEntity`."""
  allPyrolyserEntities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PyrolyserEntity`."""
    orderBy: [PyrolyserEntitiesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PyrolyserEntityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PyrolyserEntityFilter
  ): PyrolyserEntitiesConnection

  """Reads and enables pagination through a set of `Pyrolyser`."""
  allPyrolysers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Pyrolyser`."""
    orderBy: [PyrolysersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PyrolyserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PyrolyserFilter
  ): PyrolysersConnection

  """Reads and enables pagination through a set of `Range`."""
  allRanges(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Range`."""
    orderBy: [RangesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RangeFilter
  ): RangesConnection

  """Reads and enables pagination through a set of `RcCard`."""
  allRcCards(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RcCard`."""
    orderBy: [RcCardsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RcCardCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RcCardFilter
  ): RcCardsConnection

  """Reads and enables pagination through a set of `AnotherRefreshToken`."""
  allAnotherRefreshTokens(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AnotherRefreshToken`."""
    orderBy: [AnotherRefreshTokensOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnotherRefreshTokenCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnotherRefreshTokenFilter
  ): AnotherRefreshTokensConnection

  """Reads and enables pagination through a set of `Relatie`."""
  allRelaties(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Relatie`."""
    orderBy: [RelatiesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelatieCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RelatieFilter
  ): RelatiesConnection

  """Reads and enables pagination through a set of `RelatieMv`."""
  allRelatieMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RelatieMv`."""
    orderBy: [RelatieMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelatieMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RelatieMvFilter
  ): RelatieMvsConnection

  """Reads and enables pagination through a set of `ReportDetector`."""
  allReportDetectors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReportDetector`."""
    orderBy: [ReportDetectorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportDetectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportDetectorFilter
  ): ReportDetectorsConnection

  """Reads and enables pagination through a set of `ReportItem`."""
  allReportItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReportItem`."""
    orderBy: [ReportItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportItemFilter
  ): ReportItemsConnection

  """Reads and enables pagination through a set of `ReportList`."""
  allReportLists(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReportList`."""
    orderBy: [ReportListsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportListCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportListFilter
  ): ReportListsConnection

  """Reads and enables pagination through a set of `ReportSensor`."""
  allReportSensors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReportSensor`."""
    orderBy: [ReportSensorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportSensorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportSensorFilter
  ): ReportSensorsConnection

  """Reads and enables pagination through a set of `Report`."""
  allReports(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Report`."""
    orderBy: [ReportsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportFilter
  ): ReportsConnection

  """Reads and enables pagination through a set of `Request`."""
  allRequests(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Request`."""
    orderBy: [RequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RequestFilter
  ): RequestsConnection

  """Reads and enables pagination through a set of `RxCard`."""
  allRxCards(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RxCard`."""
    orderBy: [RxCardsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RxCardCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RxCardFilter
  ): RxCardsConnection

  """Reads and enables pagination through a set of `SamplePointEntity`."""
  allSamplePointEntities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SamplePointEntity`."""
    orderBy: [SamplePointEntitiesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SamplePointEntityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SamplePointEntityFilter
  ): SamplePointEntitiesConnection

  """Reads and enables pagination through a set of `SamplePoint`."""
  allSamplePoints(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SamplePoint`."""
    orderBy: [SamplePointsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SamplePointCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SamplePointFilter
  ): SamplePointsConnection

  """Reads and enables pagination through a set of `SensorBaseType`."""
  allSensorBaseTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorBaseType`."""
    orderBy: [SensorBaseTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorBaseTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorBaseTypeFilter
  ): SensorBaseTypesConnection

  """Reads and enables pagination through a set of `SensorElementLocation`."""
  allSensorElementLocations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorElementLocation`."""
    orderBy: [SensorElementLocationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorElementLocationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorElementLocationFilter
  ): SensorElementLocationsConnection

  """Reads and enables pagination through a set of `SensorElementLog`."""
  allSensorElementLogs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorElementLog`."""
    orderBy: [SensorElementLogsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorElementLogCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorElementLogFilter
  ): SensorElementLogsConnection

  """Reads and enables pagination through a set of `SensorElementType`."""
  allSensorElementTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorElementType`."""
    orderBy: [SensorElementTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorElementTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorElementTypeFilter
  ): SensorElementTypesConnection

  """Reads and enables pagination through a set of `SensorElement`."""
  allSensorElements(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorElement`."""
    orderBy: [SensorElementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorElementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorElementFilter
  ): SensorElementsConnection

  """Reads and enables pagination through a set of `SensorIndex`."""
  allSensorIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorIndex`."""
    orderBy: [SensorIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorIndexFilter
  ): SensorIndicesConnection

  """Reads and enables pagination through a set of `SensorOrder`."""
  allSensorOrders(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorOrder`."""
    orderBy: [SensorOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorOrderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorOrderFilter
  ): SensorOrdersConnection

  """Reads and enables pagination through a set of `SensorSensorElement`."""
  allSensorSensorElements(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorSensorElement`."""
    orderBy: [SensorSensorElementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorSensorElementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorSensorElementFilter
  ): SensorSensorElementsConnection

  """Reads and enables pagination through a set of `SensorSetting`."""
  allSensorSettings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorSetting`."""
    orderBy: [SensorSettingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorSettingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorSettingFilter
  ): SensorSettingsConnection

  """Reads and enables pagination through a set of `SensorTestResult`."""
  allSensorTestResults(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorTestResult`."""
    orderBy: [SensorTestResultsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorTestResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorTestResultFilter
  ): SensorTestResultsConnection

  """Reads and enables pagination through a set of `SensorType`."""
  allSensorTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorType`."""
    orderBy: [SensorTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorTypeFilter
  ): SensorTypesConnection

  """Reads and enables pagination through a set of `SensorTypesChecklist`."""
  allSensorTypesChecklists(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorTypesChecklist`."""
    orderBy: [SensorTypesChecklistsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorTypesChecklistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorTypesChecklistFilter
  ): SensorTypesChecklistsConnection

  """Reads and enables pagination through a set of `SensorTypesIndex`."""
  allSensorTypesIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorTypesIndex`."""
    orderBy: [SensorTypesIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorTypesIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorTypesIndexFilter
  ): SensorTypesIndicesConnection

  """Reads and enables pagination through a set of `Sensor`."""
  allSensors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Sensor`."""
    orderBy: [SensorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorFilter
  ): SensorsConnection

  """Reads and enables pagination through a set of `SensorsChecklist`."""
  allSensorsChecklists(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorsChecklist`."""
    orderBy: [SensorsChecklistsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorsChecklistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorsChecklistFilter
  ): SensorsChecklistsConnection

  """Reads and enables pagination through a set of `Software`."""
  allSoftwares(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Software`."""
    orderBy: [SoftwaresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SoftwareCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SoftwareFilter
  ): SoftwaresConnection

  """Reads and enables pagination through a set of `StockGroup`."""
  allStockGroups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StockGroup`."""
    orderBy: [StockGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StockGroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StockGroupFilter
  ): StockGroupsConnection

  """Reads and enables pagination through a set of `StockItem`."""
  allStockItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StockItem`."""
    orderBy: [StockItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StockItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StockItemFilter
  ): StockItemsConnection

  """Reads and enables pagination through a set of `StockSupplier`."""
  allStockSuppliers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StockSupplier`."""
    orderBy: [StockSuppliersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StockSupplierCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StockSupplierFilter
  ): StockSuppliersConnection

  """Reads and enables pagination through a set of `StockSuppliersIndex`."""
  allStockSuppliersIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StockSuppliersIndex`."""
    orderBy: [StockSuppliersIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StockSuppliersIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StockSuppliersIndexFilter
  ): StockSuppliersIndicesConnection

  """
  Reads and enables pagination through a set of `StockSuppliersIndexOld`.
  """
  allStockSuppliersIndexOlds(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StockSuppliersIndexOld`."""
    orderBy: [StockSuppliersIndexOldsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StockSuppliersIndexOldCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StockSuppliersIndexOldFilter
  ): StockSuppliersIndexOldsConnection

  """Reads and enables pagination through a set of `Task`."""
  allTasks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TaskCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TaskFilter
  ): TasksConnection

  """Reads and enables pagination through a set of `TempFactopdrachtregel`."""
  allTempFactopdrachtregels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TempFactopdrachtregel`."""
    orderBy: [TempFactopdrachtregelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TempFactopdrachtregelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TempFactopdrachtregelFilter
  ): TempFactopdrachtregelsConnection

  """Reads and enables pagination through a set of `TempLicense`."""
  allTempLicenses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TempLicense`."""
    orderBy: [TempLicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TempLicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TempLicenseFilter
  ): TempLicensesConnection

  """
  Reads and enables pagination through a set of `TempRegistrationHistory`.
  """
  allTempRegistrationHistories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TempRegistrationHistory`."""
    orderBy: [TempRegistrationHistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TempRegistrationHistoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TempRegistrationHistoryFilter
  ): TempRegistrationHistoriesConnection

  """Reads and enables pagination through a set of `TempRegistration`."""
  allTempRegistrations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TempRegistration`."""
    orderBy: [TempRegistrationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TempRegistrationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TempRegistrationFilter
  ): TempRegistrationsConnection

  """Reads and enables pagination through a set of `TempRegistrations2`."""
  allTempRegistrations2S(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TempRegistrations2`."""
    orderBy: [TempRegistrations2SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TempRegistrations2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TempRegistrations2Filter
  ): TempRegistrations2SConnection

  """Reads and enables pagination through a set of `Test`."""
  allTests(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Test`."""
    orderBy: [TestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TestFilter
  ): TestsConnection

  """Reads and enables pagination through a set of `Tztadvy`."""
  allTztadvies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Tztadvy`."""
    orderBy: [TztadviesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TztadvyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TztadvyFilter
  ): TztadviesConnection

  """Reads and enables pagination through a set of `UserRight`."""
  allUserRights(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserRight`."""
    orderBy: [UserRightsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserRightCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserRightFilter
  ): UserRightsConnection

  """Reads and enables pagination through a set of `UserTask`."""
  allUserTasks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserTask`."""
    orderBy: [UserTasksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserTaskCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserTaskFilter
  ): UserTasksConnection

  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection

  """Reads and enables pagination through a set of `UsersGroup`."""
  allUsersGroups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UsersGroup`."""
    orderBy: [UsersGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UsersGroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UsersGroupFilter
  ): UsersGroupsConnection

  """Reads and enables pagination through a set of `Valuta`."""
  allValutas(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Valuta`."""
    orderBy: [ValutasOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ValutaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ValutaFilter
  ): ValutasConnection

  """Reads and enables pagination through a set of `ValutaMv`."""
  allValutaMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ValutaMv`."""
    orderBy: [ValutaMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ValutaMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ValutaMvFilter
  ): ValutaMvsConnection

  """
  Reads and enables pagination through a set of `VerrekenprijsChangesIndex`.
  """
  allVerrekenprijsChangesIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `VerrekenprijsChangesIndex`."""
    orderBy: [VerrekenprijsChangesIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VerrekenprijsChangesIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: VerrekenprijsChangesIndexFilter
  ): VerrekenprijsChangesIndicesConnection

  """Reads and enables pagination through a set of `VerrekenprijsIndex`."""
  allVerrekenprijsIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `VerrekenprijsIndex`."""
    orderBy: [VerrekenprijsIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VerrekenprijsIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: VerrekenprijsIndexFilter
  ): VerrekenprijsIndicesConnection

  """Reads and enables pagination through a set of `VooradenIndex`."""
  allVooradenIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `VooradenIndex`."""
    orderBy: [VooradenIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VooradenIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: VooradenIndexFilter
  ): VooradenIndicesConnection

  """Reads and enables pagination through a set of `Voorraden`."""
  allVoorradens(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Voorraden`."""
    orderBy: [VoorradensOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VoorradenCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: VoorradenFilter
  ): VoorradensConnection

  """Reads and enables pagination through a set of `VoorradenLog`."""
  allVoorradenLogs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `VoorradenLog`."""
    orderBy: [VoorradenLogsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VoorradenLogCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: VoorradenLogFilter
  ): VoorradenLogsConnection

  """Reads and enables pagination through a set of `VoorradenLogsIndex`."""
  allVoorradenLogsIndices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `VoorradenLogsIndex`."""
    orderBy: [VoorradenLogsIndicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VoorradenLogsIndexCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: VoorradenLogsIndexFilter
  ): VoorradenLogsIndicesConnection

  """Reads and enables pagination through a set of `VoorradenMv`."""
  allVoorradenMvs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `VoorradenMv`."""
    orderBy: [VoorradenMvsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VoorradenMvCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: VoorradenMvFilter
  ): VoorradenMvsConnection

  """Reads and enables pagination through a set of `WeeklyHourRemark`."""
  allWeeklyHourRemarks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WeeklyHourRemark`."""
    orderBy: [WeeklyHourRemarksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WeeklyHourRemarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WeeklyHourRemarkFilter
  ): WeeklyHourRemarksConnection

  """Reads and enables pagination through a set of `WeeklyHour`."""
  allWeeklyHours(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WeeklyHour`."""
    orderBy: [WeeklyHoursOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WeeklyHourCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WeeklyHourFilter
  ): WeeklyHoursConnection

  """Reads and enables pagination through a set of `WeeklyHoursWeekTotal`."""
  allWeeklyHoursWeekTotals(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WeeklyHoursWeekTotal`."""
    orderBy: [WeeklyHoursWeekTotalsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WeeklyHoursWeekTotalCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WeeklyHoursWeekTotalFilter
  ): WeeklyHoursWeekTotalsConnection
  aspNetRoleClaimById(id: Int!): AspNetRoleClaim
  aspNetRoleById(id: String!): AspNetRole
  aspNetUserClaimById(id: Int!): AspNetUserClaim
  aspNetUserLoginByLoginProviderAndProviderKey(loginProvider: String!, providerKey: String!): AspNetUserLogin
  aspNetUserRoleByUserIdAndRoleId(userId: String!, roleId: String!): AspNetUserRole
  aspNetUserTokenByUserIdAndLoginProviderAndName(userId: String!, loginProvider: String!, name: String!): AspNetUserToken
  aspNetUserById(id: String!): AspNetUser
  refreshTokenById(id: Int!): RefreshToken
  _adreByAdresGuid(adresGuid: String!): _Adre
  _landByCdland(cdland: String!): _Land
  acoById(id: Int!): Aco
  actionById(id: Int!): Action
  applicationById(id: Int!): Application
  applicationByName(name: String!): Application
  areaById(id: Int!): Area
  areaByFloorIdAndName(floorId: Int!, name: String!): Area
  aroById(id: Int!): Aro
  arosAcoById(id: Int!): ArosAco
  artikelByCdartikel(cdartikel: String!): Artikel
  artikelLogById(id: Int!): ArtikelLog
  artikelomschrByCdartikelAndCdtaal(cdartikel: String!, cdtaal: String!): Artikelomschr
  assemblyById(id: Int!): Assembly
  assemblyByCode(code: String!): Assembly
  assemblyPartById(id: Int!): AssemblyPart
  assemblyPartByAssemblyIdAndCdartikel(assemblyId: Int!, cdartikel: String!): AssemblyPart
  assemblyTypePartById(id: Int!): AssemblyTypePart
  assemblyTypePartByAssemblyTypeIdAndCdartikel(assemblyTypeId: Int!, cdartikel: String!): AssemblyTypePart
  assemblyTypeById(id: Int!): AssemblyType
  buildingById(id: Int!): Building
  buildingByEndUserIdAndName(endUserId: Int!, name: String!): Building
  calGasById(id: Int!): CalGas
  calGasByConcentrationAndEngineeringUnitsAndGasId(concentration: Float!, engineeringUnits: String!, gasId: Int!): CalGas
  catalogGroupById(id: Int!): CatalogGroup
  catalogItemFileById(id: Int!): CatalogItemFile
  catalogItemRelationById(id: Int!): CatalogItemRelation
  catalogItemById(id: Int!): CatalogItem
  catalogSubGroupById(id: Int!): CatalogSubGroup
  chemicalCompoundById(id: Int!): ChemicalCompound
  detectorLocationById(id: Int!): DetectorLocation
  detectorLocationByDetectorId(detectorId: Int!): DetectorLocation
  detectorOrderById(id: Int!): DetectorOrder
  detectorOrderByFactuuropdrachtAndDetectorId(factuuropdracht: String!, detectorId: Int!): DetectorOrder
  detectorSensorLocationById(id: Int!): DetectorSensorLocation
  detectorSensorLocationByDetectorSensorId(detectorSensorId: Int!): DetectorSensorLocation
  detectorSensorLocationByLicenseIdAndSimsChannel(licenseId: Int!, simsChannel: Int!): DetectorSensorLocation
  detectorSensorTypeById(id: Int!): DetectorSensorType
  detectorSensorTypeByDetectorIdAndDetectorPosition(detectorId: Int!, detectorPosition: Int!): DetectorSensorType
  detectorSensorById(id: Int!): DetectorSensor
  detectorSensorByDetectorIdAndDetectorPosition(detectorId: Int!, detectorPosition: Int!): DetectorSensor
  detectorSensorBySensorId(sensorId: Int!): DetectorSensor
  detectorTypeById(id: Int!): DetectorType
  detectorTypeByPrefixAndCodeAndSuffix(prefix: String!, code: String!, suffix: String!): DetectorType
  detectorById(id: Int!): Detector
  detectorBySerialNumberAndDetectorTypeId(serialNumber: String!, detectorTypeId: Int!): Detector
  dpCardById(id: Int!): DpCard
  electrolyteById(id: Int!): Electrolyte
  electrolyteByName(name: String!): Electrolyte
  endUserById(id: Int!): EndUser
  endUserByNameAndLocationAndSubLocation(name: String!, location: String!, subLocation: String!): EndUser
  factopdrachtArtikelExclusionById(id: Int!): FactopdrachtArtikelExclusion
  factopdrachtArtikelExclusionByFactuuropdrachtAndCdartikel(factuuropdracht: String!, cdartikel: String!): FactopdrachtArtikelExclusion
  factopdrachtregelLineDateById(id: Int!): FactopdrachtregelLineDate
  factopdrachtregelLineRemarkById(id: Int!): FactopdrachtregelLineRemark
  factopdrachtregelLineByFactopdrRglGuid(factopdrRglGuid: String!): FactopdrachtregelLine
  factopdrachtregelLineById(id: Int!): FactopdrachtregelLine
  factureeropdrachtByFactuuropdracht(factuuropdracht: String!): Factureeropdracht
  factuurById(id: Int!): Factuur
  factuurByFactuuropdracht(factuuropdracht: String!): Factuur
  filterById(id: Int!): Filter
  filterByName(name: String!): Filter
  floorById(id: Int!): Floor
  floorByBuildingIdAndName(buildingId: Int!, name: String!): Floor
  gasById(id: Int!): Gas
  gasByName(name: String!): Gas
  groupPermissionById(id: Int!): GroupPermission
  groupPermissionByGroupId(groupId: Int!): GroupPermission
  groupRightById(id: Int!): GroupRight
  groupRightByGroupIdAndPath(groupId: Int!, path: String!): GroupRight
  groupById(id: Int!): Group
  hardwareById(id: Int!): Hardware
  incomingDocumentById(id: Int!): IncomingDocument
  inkoopgegevenByCdartikelAndInkvolgnr(cdartikel: String!, inkvolgnr: Int!): Inkoopgegeven
  inkoopgegevensLogById(id: Int!): InkoopgegevensLog
  inkooporderregelLineByInkopdrRglGuid(inkopdrRglGuid: String!): InkooporderregelLine
  inkooporderregelLineById(id: Int!): InkooporderregelLine
  itemById(id: Int!): Item
  itemByCdartikelAndSerialNumber(cdartikel: String!, serialNumber: String!): Item
  jobById(id: Int!): Job
  junctionBoxById(id: Int!): JunctionBox
  leadById(id: Int!): Lead
  licenseCustomerById(id: Int!): LicenseCustomer
  licenseModuleById(id: Int!): LicenseModule
  licenseOrderById(id: Int!): LicenseOrder
  licenseOrderByLicenseIdAndFactuuropdracht(licenseId: Int!, factuuropdracht: String!): LicenseOrder
  licenseOrderByLicenseRegistrationIdAndFactuuropdracht(licenseRegistrationId: Int!, factuuropdracht: String!): LicenseOrder
  licenseRegistrationById(id: Int!): LicenseRegistration
  licenseById(id: Int!): License
  maintenanceVisitLineById(id: Int!): MaintenanceVisitLine
  maintenanceVisitLineByMaintenanceVisitIdAndDetectorSensorLocationId(maintenanceVisitId: Int!, detectorSensorLocationId: Int!): MaintenanceVisitLine
  maintenanceVisitRemarkById(id: Int!): MaintenanceVisitRemark
  maintenanceVisitRemarkByMaintenanceVisitIdAndLine(maintenanceVisitId: Int!, line: Int!): MaintenanceVisitRemark
  maintenanceVisitById(id: Int!): MaintenanceVisit
  membraneById(id: Int!): Membrane
  membraneByName(name: String!): Membrane
  oRingById(id: Int!): ORing
  oRingByName(name: String!): ORing
  offerteRemarkById(id: Int!): OfferteRemark
  offerteRemarkByOfferteId(offerteId: String!): OfferteRemark
  opportunityById(id: Int!): Opportunity
  permissionById(id: Int!): Permission
  persoonRolByPersoonRolGuid(persoonRolGuid: String!): PersoonRol
  plugById(id: Int!): Plug
  plugByName(name: String!): Plug
  principleById(id: Int!): Principle
  principleByName(name: String!): Principle
  productionById(id: Int!): Production
  pyrolyserById(id: Int!): Pyrolyser
  pyrolyserByName(name: String!): Pyrolyser
  rangeById(id: Int!): Range
  rangeByLowEuAndHighEuAndEngineeringUnitsAndGasId(lowEu: Float!, highEu: Float!, engineeringUnits: String!, gasId: Int!): Range
  rcCardById(id: Int!): RcCard
  reportDetectorById(id: Int!): ReportDetector
  reportDetectorByReportIdAndDetectorId(reportId: Int!, detectorId: Int!): ReportDetector
  reportItemById(id: Int!): ReportItem
  reportSensorById(id: Int!): ReportSensor
  reportSensorByReportIdAndSensorId(reportId: Int!, sensorId: Int!): ReportSensor
  reportById(id: Int!): Report
  reportByFilename(filename: String!): Report
  reportByTsrNumberAndVersion(tsrNumber: String!, version: String!): Report
  requestById(id: Int!): Request
  rxCardById(id: Int!): RxCard
  samplePointById(id: Int!): SamplePoint
  samplePointByAreaIdAndName(areaId: Int!, name: String!): SamplePoint
  sensorBaseTypeById(id: Int!): SensorBaseType
  sensorBaseTypeByPrefixAndSuffix(prefix: String!, suffix: String!): SensorBaseType
  sensorElementLocationById(id: Int!): SensorElementLocation
  sensorElementLocationBySensorElementId(sensorElementId: Int!): SensorElementLocation
  sensorElementLogById(id: Int!): SensorElementLog
  sensorElementTypeById(id: Int!): SensorElementType
  sensorElementById(id: Int!): SensorElement
  sensorOrderById(id: Int!): SensorOrder
  sensorOrderBySensorIdAndFactuuropdracht(sensorId: Int!, factuuropdracht: String!): SensorOrder
  sensorSensorElementById(id: Int!): SensorSensorElement
  sensorSensorElementBySensorIdAndSensorPosition(sensorId: Int!, sensorPosition: Int!): SensorSensorElement
  sensorSensorElementBySensorElementId(sensorElementId: Int!): SensorSensorElement
  sensorSettingById(id: Int!): SensorSetting
  sensorSettingByTypeTarget(typeTarget: String!): SensorSetting
  sensorTestResultById(id: Int!): SensorTestResult
  sensorTypeById(id: Int!): SensorType
  sensorTypeBySensorTypeId(sensorTypeId: Int!): SensorType
  sensorTypeBySensorBaseTypeIdAndRangeIdAndCodeAndModelAndPyrolyserId(sensorBaseTypeId: Int!, rangeId: Int!, code: String!, model: String!, pyrolyserId: Int!): SensorType
  sensorById(id: Int!): Sensor
  sensorBySerialNumberAndSensorTypeId(serialNumber: String!, sensorTypeId: Int!): Sensor
  softwareById(id: Int!): Software
  stockGroupById(id: Int!): StockGroup
  stockItemById(id: Int!): StockItem
  stockItemByStockGroupIdAndCdartikel(stockGroupId: Int!, cdartikel: String!): StockItem
  stockSupplierById(id: Int!): StockSupplier
  taskById(id: Int!): Task
  tempFactopdrachtregelById(id: String!): TempFactopdrachtregel
  tempFactopdrachtregelByFactuuropdrachtAndFactuurregel(factuuropdracht: String!, factuurregel: Int!): TempFactopdrachtregel
  tempLicenseById(id: Int!): TempLicense
  tempRegistrationHistoryById(id: Int!): TempRegistrationHistory
  tempRegistrationById(id: Int!): TempRegistration
  tempRegistrations2ById(id: Int!): TempRegistrations2
  testById(id: Int!): Test
  userRightById(id: Int!): UserRight
  userRightByUserIdAndPath(userId: Int!, path: String!): UserRight
  userTaskById(id: Int!): UserTask
  userTaskByUserIdAndTaskId(userId: Int!, taskId: Int!): UserTask
  userById(id: Int!): User
  userByUsername(username: String!): User
  usersGroupById(id: Int!): UsersGroup
  usersGroupByUserIdAndGroupId(userId: Int!, groupId: Int!): UsersGroup
  voorradenByCdartikelAndCdmagazijn(cdartikel: String!, cdmagazijn: String!): Voorraden
  voorradenLogById(id: Int!): VoorradenLog
  weeklyHourRemarkById(id: Int!): WeeklyHourRemark
  weeklyHourRemarkByUserIdAndTaskIdAndDate(userId: Int!, taskId: Int!, date: Date!): WeeklyHourRemark
  weeklyHourById(id: Int!): WeeklyHour
  currentReadIds: [Int]

  """Reads and enables pagination through a set of `Permission`."""
  currentReadPermissions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PermissionFilter
  ): PermissionsConnection
  currentUserId: Int
  currentUsername: String
  currentWriteIds: [Int]

  """Reads and enables pagination through a set of `Permission`."""
  currentWritePermissions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PermissionFilter
  ): PermissionsConnection
  detectorTypeByType(type: String): DetectorType

  """Reads and enables pagination through a set of `Area`."""
  findAreas(
    endUserName: String
    buildingName: String
    floorName: String
    areaName: String
    samplePointName: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AreaFilter
  ): AreasConnection

  """Reads and enables pagination through a set of `Building`."""
  findBuildings(
    endUserName: String
    buildingName: String
    floorName: String
    areaName: String
    samplePointName: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BuildingFilter
  ): BuildingsConnection

  """Reads and enables pagination through a set of `DetectorType`."""
  findDetectorTypes(
    typeName: String
    serialNumber: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorTypeFilter
  ): DetectorTypesConnection

  """Reads and enables pagination through a set of `Detector`."""
  findDetectors(
    typeName: String
    serialNumber: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorFilter
  ): DetectorsConnection

  """Reads and enables pagination through a set of `EndUser`."""
  findEndUsers(
    endUserName: String
    buildingName: String
    floorName: String
    areaName: String
    samplePointName: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EndUserFilter
  ): EndUsersConnection

  """Reads and enables pagination through a set of `Range`."""
  findEngineeringUnits(
    typeName: String
    serialNumber: String
    lowEu: Float
    highEu: Float
    engineeringUnits: String
    gasName: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RangeFilter
  ): RangesConnection

  """Reads and enables pagination through a set of `Floor`."""
  findFloors(
    endUserName: String
    buildingName: String
    floorName: String
    areaName: String
    samplePointName: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FloorFilter
  ): FloorsConnection

  """Reads and enables pagination through a set of `Gas`."""
  findGasNames(
    typeName: String
    serialNumber: String
    lowEu: Float
    highEu: Float
    engineeringUnits: String
    gasName: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GasFilter
  ): GasesConnection

  """Reads and enables pagination through a set of `Range`."""
  findHighEus(
    typeName: String
    serialNumber: String
    lowEu: Float
    highEu: Float
    engineeringUnits: String
    gasName: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RangeFilter
  ): RangesConnection

  """Reads and enables pagination through a set of `Range`."""
  findLowEus(
    typeName: String
    serialNumber: String
    lowEu: Float
    highEu: Float
    engineeringUnits: String
    gasName: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RangeFilter
  ): RangesConnection

  """Reads and enables pagination through a set of `SamplePoint`."""
  findSamplePointNames(
    endUserName: String
    buildingName: String
    floorName: String
    areaName: String
    samplePointName: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SamplePointFilter
  ): SamplePointsConnection

  """Reads and enables pagination through a set of `Sensor`."""
  findSensorSerialNumbers(
    typeName: String
    serialNumber: String
    lowEu: Float
    highEu: Float
    engineeringUnits: String
    gasName: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorFilter
  ): SensorsConnection

  """Reads and enables pagination through a set of `SensorType`."""
  findSensorTypeNames(
    typeName: String
    serialNumber: String
    lowEu: Float
    highEu: Float
    engineeringUnits: String
    gasName: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorTypeFilter
  ): SensorTypesConnection

  """Reads and enables pagination through a set of `Artikel`."""
  getArtikelByCdartikel(
    cdartikelParam: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArtikelFilter
  ): ArtikelsConnection

  """Reads and enables pagination through a set of `Artikel`."""
  pyrolyserArtikelByCdartikel(
    cdartikelParam: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArtikelFilter
  ): ArtikelsConnection

  """Reads and enables pagination through a set of `Artikel`."""
  pyrolysersArtikelByCdartikel(
    cdartikelParam: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArtikelFilter
  ): ArtikelsConnection

  """Reads a single `AspNetRoleClaim` using its globally unique `ID`."""
  aspNetRoleClaim(
    """
    The globally unique `ID` to be used in selecting a single `AspNetRoleClaim`.
    """
    nodeId: ID!
  ): AspNetRoleClaim

  """Reads a single `AspNetRole` using its globally unique `ID`."""
  aspNetRole(
    """
    The globally unique `ID` to be used in selecting a single `AspNetRole`.
    """
    nodeId: ID!
  ): AspNetRole

  """Reads a single `AspNetUserClaim` using its globally unique `ID`."""
  aspNetUserClaim(
    """
    The globally unique `ID` to be used in selecting a single `AspNetUserClaim`.
    """
    nodeId: ID!
  ): AspNetUserClaim

  """Reads a single `AspNetUserLogin` using its globally unique `ID`."""
  aspNetUserLogin(
    """
    The globally unique `ID` to be used in selecting a single `AspNetUserLogin`.
    """
    nodeId: ID!
  ): AspNetUserLogin

  """Reads a single `AspNetUserRole` using its globally unique `ID`."""
  aspNetUserRole(
    """
    The globally unique `ID` to be used in selecting a single `AspNetUserRole`.
    """
    nodeId: ID!
  ): AspNetUserRole

  """Reads a single `AspNetUserToken` using its globally unique `ID`."""
  aspNetUserToken(
    """
    The globally unique `ID` to be used in selecting a single `AspNetUserToken`.
    """
    nodeId: ID!
  ): AspNetUserToken

  """Reads a single `AspNetUser` using its globally unique `ID`."""
  aspNetUser(
    """
    The globally unique `ID` to be used in selecting a single `AspNetUser`.
    """
    nodeId: ID!
  ): AspNetUser

  """Reads a single `RefreshToken` using its globally unique `ID`."""
  refreshToken(
    """
    The globally unique `ID` to be used in selecting a single `RefreshToken`.
    """
    nodeId: ID!
  ): RefreshToken

  """Reads a single `_Adre` using its globally unique `ID`."""
  _adre(
    """The globally unique `ID` to be used in selecting a single `_Adre`."""
    nodeId: ID!
  ): _Adre

  """Reads a single `_Land` using its globally unique `ID`."""
  _land(
    """The globally unique `ID` to be used in selecting a single `_Land`."""
    nodeId: ID!
  ): _Land

  """Reads a single `Aco` using its globally unique `ID`."""
  aco(
    """The globally unique `ID` to be used in selecting a single `Aco`."""
    nodeId: ID!
  ): Aco

  """Reads a single `Action` using its globally unique `ID`."""
  action(
    """The globally unique `ID` to be used in selecting a single `Action`."""
    nodeId: ID!
  ): Action

  """Reads a single `Application` using its globally unique `ID`."""
  application(
    """
    The globally unique `ID` to be used in selecting a single `Application`.
    """
    nodeId: ID!
  ): Application

  """Reads a single `Area` using its globally unique `ID`."""
  area(
    """The globally unique `ID` to be used in selecting a single `Area`."""
    nodeId: ID!
  ): Area

  """Reads a single `Aro` using its globally unique `ID`."""
  aro(
    """The globally unique `ID` to be used in selecting a single `Aro`."""
    nodeId: ID!
  ): Aro

  """Reads a single `ArosAco` using its globally unique `ID`."""
  arosAco(
    """The globally unique `ID` to be used in selecting a single `ArosAco`."""
    nodeId: ID!
  ): ArosAco

  """Reads a single `Artikel` using its globally unique `ID`."""
  artikel(
    """The globally unique `ID` to be used in selecting a single `Artikel`."""
    nodeId: ID!
  ): Artikel

  """Reads a single `ArtikelLog` using its globally unique `ID`."""
  artikelLog(
    """
    The globally unique `ID` to be used in selecting a single `ArtikelLog`.
    """
    nodeId: ID!
  ): ArtikelLog

  """Reads a single `Artikelomschr` using its globally unique `ID`."""
  artikelomschr(
    """
    The globally unique `ID` to be used in selecting a single `Artikelomschr`.
    """
    nodeId: ID!
  ): Artikelomschr

  """Reads a single `Assembly` using its globally unique `ID`."""
  assembly(
    """The globally unique `ID` to be used in selecting a single `Assembly`."""
    nodeId: ID!
  ): Assembly

  """Reads a single `AssemblyPart` using its globally unique `ID`."""
  assemblyPart(
    """
    The globally unique `ID` to be used in selecting a single `AssemblyPart`.
    """
    nodeId: ID!
  ): AssemblyPart

  """Reads a single `AssemblyTypePart` using its globally unique `ID`."""
  assemblyTypePart(
    """
    The globally unique `ID` to be used in selecting a single `AssemblyTypePart`.
    """
    nodeId: ID!
  ): AssemblyTypePart

  """Reads a single `AssemblyType` using its globally unique `ID`."""
  assemblyType(
    """
    The globally unique `ID` to be used in selecting a single `AssemblyType`.
    """
    nodeId: ID!
  ): AssemblyType

  """Reads a single `Building` using its globally unique `ID`."""
  building(
    """The globally unique `ID` to be used in selecting a single `Building`."""
    nodeId: ID!
  ): Building

  """Reads a single `CalGas` using its globally unique `ID`."""
  calGas(
    """The globally unique `ID` to be used in selecting a single `CalGas`."""
    nodeId: ID!
  ): CalGas

  """Reads a single `CatalogGroup` using its globally unique `ID`."""
  catalogGroup(
    """
    The globally unique `ID` to be used in selecting a single `CatalogGroup`.
    """
    nodeId: ID!
  ): CatalogGroup

  """Reads a single `CatalogItemFile` using its globally unique `ID`."""
  catalogItemFile(
    """
    The globally unique `ID` to be used in selecting a single `CatalogItemFile`.
    """
    nodeId: ID!
  ): CatalogItemFile

  """Reads a single `CatalogItemRelation` using its globally unique `ID`."""
  catalogItemRelation(
    """
    The globally unique `ID` to be used in selecting a single `CatalogItemRelation`.
    """
    nodeId: ID!
  ): CatalogItemRelation

  """Reads a single `CatalogItem` using its globally unique `ID`."""
  catalogItem(
    """
    The globally unique `ID` to be used in selecting a single `CatalogItem`.
    """
    nodeId: ID!
  ): CatalogItem

  """Reads a single `CatalogSubGroup` using its globally unique `ID`."""
  catalogSubGroup(
    """
    The globally unique `ID` to be used in selecting a single `CatalogSubGroup`.
    """
    nodeId: ID!
  ): CatalogSubGroup

  """Reads a single `ChemicalCompound` using its globally unique `ID`."""
  chemicalCompound(
    """
    The globally unique `ID` to be used in selecting a single `ChemicalCompound`.
    """
    nodeId: ID!
  ): ChemicalCompound

  """Reads a single `DetectorLocation` using its globally unique `ID`."""
  detectorLocation(
    """
    The globally unique `ID` to be used in selecting a single `DetectorLocation`.
    """
    nodeId: ID!
  ): DetectorLocation

  """Reads a single `DetectorOrder` using its globally unique `ID`."""
  detectorOrder(
    """
    The globally unique `ID` to be used in selecting a single `DetectorOrder`.
    """
    nodeId: ID!
  ): DetectorOrder

  """
  Reads a single `DetectorSensorLocation` using its globally unique `ID`.
  """
  detectorSensorLocation(
    """
    The globally unique `ID` to be used in selecting a single `DetectorSensorLocation`.
    """
    nodeId: ID!
  ): DetectorSensorLocation

  """Reads a single `DetectorSensorType` using its globally unique `ID`."""
  detectorSensorType(
    """
    The globally unique `ID` to be used in selecting a single `DetectorSensorType`.
    """
    nodeId: ID!
  ): DetectorSensorType

  """Reads a single `DetectorSensor` using its globally unique `ID`."""
  detectorSensor(
    """
    The globally unique `ID` to be used in selecting a single `DetectorSensor`.
    """
    nodeId: ID!
  ): DetectorSensor

  """Reads a single `DetectorType` using its globally unique `ID`."""
  detectorType(
    """
    The globally unique `ID` to be used in selecting a single `DetectorType`.
    """
    nodeId: ID!
  ): DetectorType

  """Reads a single `Detector` using its globally unique `ID`."""
  detector(
    """The globally unique `ID` to be used in selecting a single `Detector`."""
    nodeId: ID!
  ): Detector

  """Reads a single `DpCard` using its globally unique `ID`."""
  dpCard(
    """The globally unique `ID` to be used in selecting a single `DpCard`."""
    nodeId: ID!
  ): DpCard

  """Reads a single `Electrolyte` using its globally unique `ID`."""
  electrolyte(
    """
    The globally unique `ID` to be used in selecting a single `Electrolyte`.
    """
    nodeId: ID!
  ): Electrolyte

  """Reads a single `EndUser` using its globally unique `ID`."""
  endUser(
    """The globally unique `ID` to be used in selecting a single `EndUser`."""
    nodeId: ID!
  ): EndUser

  """
  Reads a single `FactopdrachtArtikelExclusion` using its globally unique `ID`.
  """
  factopdrachtArtikelExclusion(
    """
    The globally unique `ID` to be used in selecting a single `FactopdrachtArtikelExclusion`.
    """
    nodeId: ID!
  ): FactopdrachtArtikelExclusion

  """
  Reads a single `FactopdrachtregelLineDate` using its globally unique `ID`.
  """
  factopdrachtregelLineDate(
    """
    The globally unique `ID` to be used in selecting a single `FactopdrachtregelLineDate`.
    """
    nodeId: ID!
  ): FactopdrachtregelLineDate

  """
  Reads a single `FactopdrachtregelLineRemark` using its globally unique `ID`.
  """
  factopdrachtregelLineRemark(
    """
    The globally unique `ID` to be used in selecting a single `FactopdrachtregelLineRemark`.
    """
    nodeId: ID!
  ): FactopdrachtregelLineRemark

  """Reads a single `FactopdrachtregelLine` using its globally unique `ID`."""
  factopdrachtregelLine(
    """
    The globally unique `ID` to be used in selecting a single `FactopdrachtregelLine`.
    """
    nodeId: ID!
  ): FactopdrachtregelLine

  """Reads a single `Factureeropdracht` using its globally unique `ID`."""
  factureeropdracht(
    """
    The globally unique `ID` to be used in selecting a single `Factureeropdracht`.
    """
    nodeId: ID!
  ): Factureeropdracht

  """Reads a single `Factuur` using its globally unique `ID`."""
  factuur(
    """The globally unique `ID` to be used in selecting a single `Factuur`."""
    nodeId: ID!
  ): Factuur

  """Reads a single `Filter` using its globally unique `ID`."""
  filter(
    """The globally unique `ID` to be used in selecting a single `Filter`."""
    nodeId: ID!
  ): Filter

  """Reads a single `Floor` using its globally unique `ID`."""
  floor(
    """The globally unique `ID` to be used in selecting a single `Floor`."""
    nodeId: ID!
  ): Floor

  """Reads a single `Gas` using its globally unique `ID`."""
  gas(
    """The globally unique `ID` to be used in selecting a single `Gas`."""
    nodeId: ID!
  ): Gas

  """Reads a single `GroupPermission` using its globally unique `ID`."""
  groupPermission(
    """
    The globally unique `ID` to be used in selecting a single `GroupPermission`.
    """
    nodeId: ID!
  ): GroupPermission

  """Reads a single `GroupRight` using its globally unique `ID`."""
  groupRight(
    """
    The globally unique `ID` to be used in selecting a single `GroupRight`.
    """
    nodeId: ID!
  ): GroupRight

  """Reads a single `Group` using its globally unique `ID`."""
  group(
    """The globally unique `ID` to be used in selecting a single `Group`."""
    nodeId: ID!
  ): Group

  """Reads a single `Hardware` using its globally unique `ID`."""
  hardware(
    """The globally unique `ID` to be used in selecting a single `Hardware`."""
    nodeId: ID!
  ): Hardware

  """Reads a single `IncomingDocument` using its globally unique `ID`."""
  incomingDocument(
    """
    The globally unique `ID` to be used in selecting a single `IncomingDocument`.
    """
    nodeId: ID!
  ): IncomingDocument

  """Reads a single `Inkoopgegeven` using its globally unique `ID`."""
  inkoopgegeven(
    """
    The globally unique `ID` to be used in selecting a single `Inkoopgegeven`.
    """
    nodeId: ID!
  ): Inkoopgegeven

  """Reads a single `InkoopgegevensLog` using its globally unique `ID`."""
  inkoopgegevensLog(
    """
    The globally unique `ID` to be used in selecting a single `InkoopgegevensLog`.
    """
    nodeId: ID!
  ): InkoopgegevensLog

  """Reads a single `InkooporderregelLine` using its globally unique `ID`."""
  inkooporderregelLine(
    """
    The globally unique `ID` to be used in selecting a single `InkooporderregelLine`.
    """
    nodeId: ID!
  ): InkooporderregelLine

  """Reads a single `Item` using its globally unique `ID`."""
  item(
    """The globally unique `ID` to be used in selecting a single `Item`."""
    nodeId: ID!
  ): Item

  """Reads a single `Job` using its globally unique `ID`."""
  job(
    """The globally unique `ID` to be used in selecting a single `Job`."""
    nodeId: ID!
  ): Job

  """Reads a single `JunctionBox` using its globally unique `ID`."""
  junctionBox(
    """
    The globally unique `ID` to be used in selecting a single `JunctionBox`.
    """
    nodeId: ID!
  ): JunctionBox

  """Reads a single `Lead` using its globally unique `ID`."""
  lead(
    """The globally unique `ID` to be used in selecting a single `Lead`."""
    nodeId: ID!
  ): Lead

  """Reads a single `LicenseCustomer` using its globally unique `ID`."""
  licenseCustomer(
    """
    The globally unique `ID` to be used in selecting a single `LicenseCustomer`.
    """
    nodeId: ID!
  ): LicenseCustomer

  """Reads a single `LicenseModule` using its globally unique `ID`."""
  licenseModule(
    """
    The globally unique `ID` to be used in selecting a single `LicenseModule`.
    """
    nodeId: ID!
  ): LicenseModule

  """Reads a single `LicenseOrder` using its globally unique `ID`."""
  licenseOrder(
    """
    The globally unique `ID` to be used in selecting a single `LicenseOrder`.
    """
    nodeId: ID!
  ): LicenseOrder

  """Reads a single `LicenseRegistration` using its globally unique `ID`."""
  licenseRegistration(
    """
    The globally unique `ID` to be used in selecting a single `LicenseRegistration`.
    """
    nodeId: ID!
  ): LicenseRegistration

  """Reads a single `License` using its globally unique `ID`."""
  license(
    """The globally unique `ID` to be used in selecting a single `License`."""
    nodeId: ID!
  ): License

  """Reads a single `MaintenanceVisitLine` using its globally unique `ID`."""
  maintenanceVisitLine(
    """
    The globally unique `ID` to be used in selecting a single `MaintenanceVisitLine`.
    """
    nodeId: ID!
  ): MaintenanceVisitLine

  """
  Reads a single `MaintenanceVisitRemark` using its globally unique `ID`.
  """
  maintenanceVisitRemark(
    """
    The globally unique `ID` to be used in selecting a single `MaintenanceVisitRemark`.
    """
    nodeId: ID!
  ): MaintenanceVisitRemark

  """Reads a single `MaintenanceVisit` using its globally unique `ID`."""
  maintenanceVisit(
    """
    The globally unique `ID` to be used in selecting a single `MaintenanceVisit`.
    """
    nodeId: ID!
  ): MaintenanceVisit

  """Reads a single `Membrane` using its globally unique `ID`."""
  membrane(
    """The globally unique `ID` to be used in selecting a single `Membrane`."""
    nodeId: ID!
  ): Membrane

  """Reads a single `ORing` using its globally unique `ID`."""
  oRing(
    """The globally unique `ID` to be used in selecting a single `ORing`."""
    nodeId: ID!
  ): ORing

  """Reads a single `OfferteRemark` using its globally unique `ID`."""
  offerteRemark(
    """
    The globally unique `ID` to be used in selecting a single `OfferteRemark`.
    """
    nodeId: ID!
  ): OfferteRemark

  """Reads a single `Opportunity` using its globally unique `ID`."""
  opportunity(
    """
    The globally unique `ID` to be used in selecting a single `Opportunity`.
    """
    nodeId: ID!
  ): Opportunity

  """Reads a single `Permission` using its globally unique `ID`."""
  permission(
    """
    The globally unique `ID` to be used in selecting a single `Permission`.
    """
    nodeId: ID!
  ): Permission

  """Reads a single `PersoonRol` using its globally unique `ID`."""
  persoonRol(
    """
    The globally unique `ID` to be used in selecting a single `PersoonRol`.
    """
    nodeId: ID!
  ): PersoonRol

  """Reads a single `Plug` using its globally unique `ID`."""
  plug(
    """The globally unique `ID` to be used in selecting a single `Plug`."""
    nodeId: ID!
  ): Plug

  """Reads a single `Principle` using its globally unique `ID`."""
  principle(
    """The globally unique `ID` to be used in selecting a single `Principle`."""
    nodeId: ID!
  ): Principle

  """Reads a single `Production` using its globally unique `ID`."""
  production(
    """
    The globally unique `ID` to be used in selecting a single `Production`.
    """
    nodeId: ID!
  ): Production

  """Reads a single `Pyrolyser` using its globally unique `ID`."""
  pyrolyser(
    """The globally unique `ID` to be used in selecting a single `Pyrolyser`."""
    nodeId: ID!
  ): Pyrolyser

  """Reads a single `Range` using its globally unique `ID`."""
  range(
    """The globally unique `ID` to be used in selecting a single `Range`."""
    nodeId: ID!
  ): Range

  """Reads a single `RcCard` using its globally unique `ID`."""
  rcCard(
    """The globally unique `ID` to be used in selecting a single `RcCard`."""
    nodeId: ID!
  ): RcCard

  """Reads a single `ReportDetector` using its globally unique `ID`."""
  reportDetector(
    """
    The globally unique `ID` to be used in selecting a single `ReportDetector`.
    """
    nodeId: ID!
  ): ReportDetector

  """Reads a single `ReportItem` using its globally unique `ID`."""
  reportItem(
    """
    The globally unique `ID` to be used in selecting a single `ReportItem`.
    """
    nodeId: ID!
  ): ReportItem

  """Reads a single `ReportSensor` using its globally unique `ID`."""
  reportSensor(
    """
    The globally unique `ID` to be used in selecting a single `ReportSensor`.
    """
    nodeId: ID!
  ): ReportSensor

  """Reads a single `Report` using its globally unique `ID`."""
  report(
    """The globally unique `ID` to be used in selecting a single `Report`."""
    nodeId: ID!
  ): Report

  """Reads a single `Request` using its globally unique `ID`."""
  request(
    """The globally unique `ID` to be used in selecting a single `Request`."""
    nodeId: ID!
  ): Request

  """Reads a single `RxCard` using its globally unique `ID`."""
  rxCard(
    """The globally unique `ID` to be used in selecting a single `RxCard`."""
    nodeId: ID!
  ): RxCard

  """Reads a single `SamplePoint` using its globally unique `ID`."""
  samplePoint(
    """
    The globally unique `ID` to be used in selecting a single `SamplePoint`.
    """
    nodeId: ID!
  ): SamplePoint

  """Reads a single `SensorBaseType` using its globally unique `ID`."""
  sensorBaseType(
    """
    The globally unique `ID` to be used in selecting a single `SensorBaseType`.
    """
    nodeId: ID!
  ): SensorBaseType

  """Reads a single `SensorElementLocation` using its globally unique `ID`."""
  sensorElementLocation(
    """
    The globally unique `ID` to be used in selecting a single `SensorElementLocation`.
    """
    nodeId: ID!
  ): SensorElementLocation

  """Reads a single `SensorElementLog` using its globally unique `ID`."""
  sensorElementLog(
    """
    The globally unique `ID` to be used in selecting a single `SensorElementLog`.
    """
    nodeId: ID!
  ): SensorElementLog

  """Reads a single `SensorElementType` using its globally unique `ID`."""
  sensorElementType(
    """
    The globally unique `ID` to be used in selecting a single `SensorElementType`.
    """
    nodeId: ID!
  ): SensorElementType

  """Reads a single `SensorElement` using its globally unique `ID`."""
  sensorElement(
    """
    The globally unique `ID` to be used in selecting a single `SensorElement`.
    """
    nodeId: ID!
  ): SensorElement

  """Reads a single `SensorOrder` using its globally unique `ID`."""
  sensorOrder(
    """
    The globally unique `ID` to be used in selecting a single `SensorOrder`.
    """
    nodeId: ID!
  ): SensorOrder

  """Reads a single `SensorSensorElement` using its globally unique `ID`."""
  sensorSensorElement(
    """
    The globally unique `ID` to be used in selecting a single `SensorSensorElement`.
    """
    nodeId: ID!
  ): SensorSensorElement

  """Reads a single `SensorSetting` using its globally unique `ID`."""
  sensorSetting(
    """
    The globally unique `ID` to be used in selecting a single `SensorSetting`.
    """
    nodeId: ID!
  ): SensorSetting

  """Reads a single `SensorTestResult` using its globally unique `ID`."""
  sensorTestResult(
    """
    The globally unique `ID` to be used in selecting a single `SensorTestResult`.
    """
    nodeId: ID!
  ): SensorTestResult

  """Reads a single `SensorType` using its globally unique `ID`."""
  sensorType(
    """
    The globally unique `ID` to be used in selecting a single `SensorType`.
    """
    nodeId: ID!
  ): SensorType

  """Reads a single `Sensor` using its globally unique `ID`."""
  sensor(
    """The globally unique `ID` to be used in selecting a single `Sensor`."""
    nodeId: ID!
  ): Sensor

  """Reads a single `Software` using its globally unique `ID`."""
  software(
    """The globally unique `ID` to be used in selecting a single `Software`."""
    nodeId: ID!
  ): Software

  """Reads a single `StockGroup` using its globally unique `ID`."""
  stockGroup(
    """
    The globally unique `ID` to be used in selecting a single `StockGroup`.
    """
    nodeId: ID!
  ): StockGroup

  """Reads a single `StockItem` using its globally unique `ID`."""
  stockItem(
    """The globally unique `ID` to be used in selecting a single `StockItem`."""
    nodeId: ID!
  ): StockItem

  """Reads a single `StockSupplier` using its globally unique `ID`."""
  stockSupplier(
    """
    The globally unique `ID` to be used in selecting a single `StockSupplier`.
    """
    nodeId: ID!
  ): StockSupplier

  """Reads a single `Task` using its globally unique `ID`."""
  task(
    """The globally unique `ID` to be used in selecting a single `Task`."""
    nodeId: ID!
  ): Task

  """Reads a single `TempFactopdrachtregel` using its globally unique `ID`."""
  tempFactopdrachtregel(
    """
    The globally unique `ID` to be used in selecting a single `TempFactopdrachtregel`.
    """
    nodeId: ID!
  ): TempFactopdrachtregel

  """Reads a single `TempLicense` using its globally unique `ID`."""
  tempLicense(
    """
    The globally unique `ID` to be used in selecting a single `TempLicense`.
    """
    nodeId: ID!
  ): TempLicense

  """
  Reads a single `TempRegistrationHistory` using its globally unique `ID`.
  """
  tempRegistrationHistory(
    """
    The globally unique `ID` to be used in selecting a single `TempRegistrationHistory`.
    """
    nodeId: ID!
  ): TempRegistrationHistory

  """Reads a single `TempRegistration` using its globally unique `ID`."""
  tempRegistration(
    """
    The globally unique `ID` to be used in selecting a single `TempRegistration`.
    """
    nodeId: ID!
  ): TempRegistration

  """Reads a single `TempRegistrations2` using its globally unique `ID`."""
  tempRegistrations2(
    """
    The globally unique `ID` to be used in selecting a single `TempRegistrations2`.
    """
    nodeId: ID!
  ): TempRegistrations2

  """Reads a single `Test` using its globally unique `ID`."""
  test(
    """The globally unique `ID` to be used in selecting a single `Test`."""
    nodeId: ID!
  ): Test

  """Reads a single `UserRight` using its globally unique `ID`."""
  userRight(
    """The globally unique `ID` to be used in selecting a single `UserRight`."""
    nodeId: ID!
  ): UserRight

  """Reads a single `UserTask` using its globally unique `ID`."""
  userTask(
    """The globally unique `ID` to be used in selecting a single `UserTask`."""
    nodeId: ID!
  ): UserTask

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """Reads a single `UsersGroup` using its globally unique `ID`."""
  usersGroup(
    """
    The globally unique `ID` to be used in selecting a single `UsersGroup`.
    """
    nodeId: ID!
  ): UsersGroup

  """Reads a single `Voorraden` using its globally unique `ID`."""
  voorraden(
    """The globally unique `ID` to be used in selecting a single `Voorraden`."""
    nodeId: ID!
  ): Voorraden

  """Reads a single `VoorradenLog` using its globally unique `ID`."""
  voorradenLog(
    """
    The globally unique `ID` to be used in selecting a single `VoorradenLog`.
    """
    nodeId: ID!
  ): VoorradenLog

  """Reads a single `WeeklyHourRemark` using its globally unique `ID`."""
  weeklyHourRemark(
    """
    The globally unique `ID` to be used in selecting a single `WeeklyHourRemark`.
    """
    nodeId: ID!
  ): WeeklyHourRemark

  """Reads a single `WeeklyHour` using its globally unique `ID`."""
  weeklyHour(
    """
    The globally unique `ID` to be used in selecting a single `WeeklyHour`.
    """
    nodeId: ID!
  ): WeeklyHour
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `AspNetRoleClaim` values."""
type AspNetRoleClaimsConnection {
  """A list of `AspNetRoleClaim` objects."""
  nodes: [AspNetRoleClaim!]!

  """
  A list of edges which contains the `AspNetRoleClaim` and cursor to aid in pagination.
  """
  edges: [AspNetRoleClaimsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AspNetRoleClaim` you could get from the connection.
  """
  totalCount: Int!
}

type AspNetRoleClaim implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  roleId: String!
  claimType: String
  claimValue: String

  """Reads a single `AspNetRole` that is related to this `AspNetRoleClaim`."""
  aspNetRoleByRoleId: AspNetRole
}

type AspNetRole implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  name: String
  normalizedName: String
  concurrencyStamp: String

  """Reads and enables pagination through a set of `AspNetRoleClaim`."""
  aspNetRoleClaimsByRoleId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AspNetRoleClaim`."""
    orderBy: [AspNetRoleClaimsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AspNetRoleClaimCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AspNetRoleClaimFilter
  ): AspNetRoleClaimsConnection!

  """Reads and enables pagination through a set of `AspNetUserRole`."""
  aspNetUserRolesByRoleId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AspNetUserRole`."""
    orderBy: [AspNetUserRolesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AspNetUserRoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AspNetUserRoleFilter
  ): AspNetUserRolesConnection!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Methods to use when ordering `AspNetRoleClaim`."""
enum AspNetRoleClaimsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ROLE_ID_ASC
  ROLE_ID_DESC
  CLAIM_TYPE_ASC
  CLAIM_TYPE_DESC
  CLAIM_VALUE_ASC
  CLAIM_VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ASP_NET_ROLE_BY_ROLE_ID__ID_ASC
  ASP_NET_ROLE_BY_ROLE_ID__ID_DESC
  ASP_NET_ROLE_BY_ROLE_ID__NAME_ASC
  ASP_NET_ROLE_BY_ROLE_ID__NAME_DESC
  ASP_NET_ROLE_BY_ROLE_ID__NORMALIZED_NAME_ASC
  ASP_NET_ROLE_BY_ROLE_ID__NORMALIZED_NAME_DESC
  ASP_NET_ROLE_BY_ROLE_ID__CONCURRENCY_STAMP_ASC
  ASP_NET_ROLE_BY_ROLE_ID__CONCURRENCY_STAMP_DESC
}

"""
A condition to be used against `AspNetRoleClaim` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AspNetRoleClaimCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `roleId` field."""
  roleId: String

  """Checks for equality with the object’s `claimType` field."""
  claimType: String

  """Checks for equality with the object’s `claimValue` field."""
  claimValue: String
}

"""
A filter to be used against `AspNetRoleClaim` object types. All fields are combined with a logical ‘and.’
"""
input AspNetRoleClaimFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `roleId` field."""
  roleId: StringFilter

  """Filter by the object’s `claimType` field."""
  claimType: StringFilter

  """Filter by the object’s `claimValue` field."""
  claimValue: StringFilter

  """Filter by the object’s `aspNetRoleByRoleId` relation."""
  aspNetRoleByRoleId: AspNetRoleFilter

  """Checks for all expressions in this list."""
  and: [AspNetRoleClaimFilter!]

  """Checks for any expressions in this list."""
  or: [AspNetRoleClaimFilter!]

  """Negates the expression."""
  not: AspNetRoleClaimFilter
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """
  Included in the specified list -unless list is empty in which case this operator is not applied.
  """
  inExpansive: [Int!]
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """
  Included in the specified list -unless list is empty in which case this operator is not applied.
  """
  inExpansive: [String!]
}

"""
A filter to be used against `AspNetRole` object types. All fields are combined with a logical ‘and.’
"""
input AspNetRoleFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `normalizedName` field."""
  normalizedName: StringFilter

  """Filter by the object’s `concurrencyStamp` field."""
  concurrencyStamp: StringFilter

  """Filter by the object’s `aspNetRoleClaimsByRoleId` relation."""
  aspNetRoleClaimsByRoleId: AspNetRoleToManyAspNetRoleClaimFilter

  """Some related `aspNetRoleClaimsByRoleId` exist."""
  aspNetRoleClaimsByRoleIdExist: Boolean

  """Filter by the object’s `aspNetUserRolesByRoleId` relation."""
  aspNetUserRolesByRoleId: AspNetRoleToManyAspNetUserRoleFilter

  """Some related `aspNetUserRolesByRoleId` exist."""
  aspNetUserRolesByRoleIdExist: Boolean

  """Checks for all expressions in this list."""
  and: [AspNetRoleFilter!]

  """Checks for any expressions in this list."""
  or: [AspNetRoleFilter!]

  """Negates the expression."""
  not: AspNetRoleFilter
}

"""
A filter to be used against many `AspNetRoleClaim` object types. All fields are combined with a logical ‘and.’
"""
input AspNetRoleToManyAspNetRoleClaimFilter {
  """
  Every related `AspNetRoleClaim` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AspNetRoleClaimFilter

  """
  Some related `AspNetRoleClaim` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AspNetRoleClaimFilter

  """
  No related `AspNetRoleClaim` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AspNetRoleClaimFilter
}

"""
A filter to be used against many `AspNetUserRole` object types. All fields are combined with a logical ‘and.’
"""
input AspNetRoleToManyAspNetUserRoleFilter {
  """
  Every related `AspNetUserRole` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AspNetUserRoleFilter

  """
  Some related `AspNetUserRole` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AspNetUserRoleFilter

  """
  No related `AspNetUserRole` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AspNetUserRoleFilter
}

"""
A filter to be used against `AspNetUserRole` object types. All fields are combined with a logical ‘and.’
"""
input AspNetUserRoleFilter {
  """Filter by the object’s `userId` field."""
  userId: StringFilter

  """Filter by the object’s `roleId` field."""
  roleId: StringFilter

  """Filter by the object’s `appUserId` field."""
  appUserId: StringFilter

  """Filter by the object’s `aspNetUserByUserId` relation."""
  aspNetUserByUserId: AspNetUserFilter

  """Filter by the object’s `aspNetRoleByRoleId` relation."""
  aspNetRoleByRoleId: AspNetRoleFilter

  """Filter by the object’s `aspNetUserByAppUserId` relation."""
  aspNetUserByAppUserId: AspNetUserFilter

  """A related `aspNetUserByAppUserId` exists."""
  aspNetUserByAppUserIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [AspNetUserRoleFilter!]

  """Checks for any expressions in this list."""
  or: [AspNetUserRoleFilter!]

  """Negates the expression."""
  not: AspNetUserRoleFilter
}

"""
A filter to be used against `AspNetUser` object types. All fields are combined with a logical ‘and.’
"""
input AspNetUserFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Filter by the object’s `userName` field."""
  userName: StringFilter

  """Filter by the object’s `normalizedUserName` field."""
  normalizedUserName: StringFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `normalizedEmail` field."""
  normalizedEmail: StringFilter

  """Filter by the object’s `emailConfirmed` field."""
  emailConfirmed: BooleanFilter

  """Filter by the object’s `passwordHash` field."""
  passwordHash: StringFilter

  """Filter by the object’s `securityStamp` field."""
  securityStamp: StringFilter

  """Filter by the object’s `concurrencyStamp` field."""
  concurrencyStamp: StringFilter

  """Filter by the object’s `phoneNumber` field."""
  phoneNumber: StringFilter

  """Filter by the object’s `phoneNumberConfirmed` field."""
  phoneNumberConfirmed: BooleanFilter

  """Filter by the object’s `twoFactorEnabled` field."""
  twoFactorEnabled: BooleanFilter

  """Filter by the object’s `lockoutEnd` field."""
  lockoutEnd: DatetimeFilter

  """Filter by the object’s `lockoutEnabled` field."""
  lockoutEnabled: BooleanFilter

  """Filter by the object’s `accessFailedCount` field."""
  accessFailedCount: IntFilter

  """Filter by the object’s `aspNetUserClaimsByUserId` relation."""
  aspNetUserClaimsByUserId: AspNetUserToManyAspNetUserClaimFilter

  """Some related `aspNetUserClaimsByUserId` exist."""
  aspNetUserClaimsByUserIdExist: Boolean

  """Filter by the object’s `aspNetUserLoginsByUserId` relation."""
  aspNetUserLoginsByUserId: AspNetUserToManyAspNetUserLoginFilter

  """Some related `aspNetUserLoginsByUserId` exist."""
  aspNetUserLoginsByUserIdExist: Boolean

  """Filter by the object’s `aspNetUserRolesByUserId` relation."""
  aspNetUserRolesByUserId: AspNetUserToManyAspNetUserRoleFilter

  """Some related `aspNetUserRolesByUserId` exist."""
  aspNetUserRolesByUserIdExist: Boolean

  """Filter by the object’s `aspNetUserRolesByAppUserId` relation."""
  aspNetUserRolesByAppUserId: AspNetUserToManyAspNetUserRoleFilter

  """Some related `aspNetUserRolesByAppUserId` exist."""
  aspNetUserRolesByAppUserIdExist: Boolean

  """Filter by the object’s `aspNetUserTokensByUserId` relation."""
  aspNetUserTokensByUserId: AspNetUserToManyAspNetUserTokenFilter

  """Some related `aspNetUserTokensByUserId` exist."""
  aspNetUserTokensByUserIdExist: Boolean

  """Filter by the object’s `refreshTokensByAppUserId` relation."""
  refreshTokensByAppUserId: AspNetUserToManyRefreshTokenFilter

  """Some related `refreshTokensByAppUserId` exist."""
  refreshTokensByAppUserIdExist: Boolean

  """Checks for all expressions in this list."""
  and: [AspNetUserFilter!]

  """Checks for any expressions in this list."""
  or: [AspNetUserFilter!]

  """Negates the expression."""
  not: AspNetUserFilter
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """
  Included in the specified list -unless list is empty in which case this operator is not applied.
  """
  inExpansive: [Boolean!]
}

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """
  Included in the specified list -unless list is empty in which case this operator is not applied.
  """
  inExpansive: [Datetime!]
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against many `AspNetUserClaim` object types. All fields are combined with a logical ‘and.’
"""
input AspNetUserToManyAspNetUserClaimFilter {
  """
  Every related `AspNetUserClaim` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AspNetUserClaimFilter

  """
  Some related `AspNetUserClaim` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AspNetUserClaimFilter

  """
  No related `AspNetUserClaim` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AspNetUserClaimFilter
}

"""
A filter to be used against `AspNetUserClaim` object types. All fields are combined with a logical ‘and.’
"""
input AspNetUserClaimFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `userId` field."""
  userId: StringFilter

  """Filter by the object’s `claimType` field."""
  claimType: StringFilter

  """Filter by the object’s `claimValue` field."""
  claimValue: StringFilter

  """Filter by the object’s `aspNetUserByUserId` relation."""
  aspNetUserByUserId: AspNetUserFilter

  """Checks for all expressions in this list."""
  and: [AspNetUserClaimFilter!]

  """Checks for any expressions in this list."""
  or: [AspNetUserClaimFilter!]

  """Negates the expression."""
  not: AspNetUserClaimFilter
}

"""
A filter to be used against many `AspNetUserLogin` object types. All fields are combined with a logical ‘and.’
"""
input AspNetUserToManyAspNetUserLoginFilter {
  """
  Every related `AspNetUserLogin` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AspNetUserLoginFilter

  """
  Some related `AspNetUserLogin` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AspNetUserLoginFilter

  """
  No related `AspNetUserLogin` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AspNetUserLoginFilter
}

"""
A filter to be used against `AspNetUserLogin` object types. All fields are combined with a logical ‘and.’
"""
input AspNetUserLoginFilter {
  """Filter by the object’s `loginProvider` field."""
  loginProvider: StringFilter

  """Filter by the object’s `providerKey` field."""
  providerKey: StringFilter

  """Filter by the object’s `providerDisplayName` field."""
  providerDisplayName: StringFilter

  """Filter by the object’s `userId` field."""
  userId: StringFilter

  """Filter by the object’s `aspNetUserByUserId` relation."""
  aspNetUserByUserId: AspNetUserFilter

  """Checks for all expressions in this list."""
  and: [AspNetUserLoginFilter!]

  """Checks for any expressions in this list."""
  or: [AspNetUserLoginFilter!]

  """Negates the expression."""
  not: AspNetUserLoginFilter
}

"""
A filter to be used against many `AspNetUserRole` object types. All fields are combined with a logical ‘and.’
"""
input AspNetUserToManyAspNetUserRoleFilter {
  """
  Every related `AspNetUserRole` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AspNetUserRoleFilter

  """
  Some related `AspNetUserRole` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AspNetUserRoleFilter

  """
  No related `AspNetUserRole` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AspNetUserRoleFilter
}

"""
A filter to be used against many `AspNetUserToken` object types. All fields are combined with a logical ‘and.’
"""
input AspNetUserToManyAspNetUserTokenFilter {
  """
  Every related `AspNetUserToken` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AspNetUserTokenFilter

  """
  Some related `AspNetUserToken` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AspNetUserTokenFilter

  """
  No related `AspNetUserToken` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AspNetUserTokenFilter
}

"""
A filter to be used against `AspNetUserToken` object types. All fields are combined with a logical ‘and.’
"""
input AspNetUserTokenFilter {
  """Filter by the object’s `userId` field."""
  userId: StringFilter

  """Filter by the object’s `loginProvider` field."""
  loginProvider: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `value` field."""
  value: StringFilter

  """Filter by the object’s `aspNetUserByUserId` relation."""
  aspNetUserByUserId: AspNetUserFilter

  """Checks for all expressions in this list."""
  and: [AspNetUserTokenFilter!]

  """Checks for any expressions in this list."""
  or: [AspNetUserTokenFilter!]

  """Negates the expression."""
  not: AspNetUserTokenFilter
}

"""
A filter to be used against many `RefreshToken` object types. All fields are combined with a logical ‘and.’
"""
input AspNetUserToManyRefreshTokenFilter {
  """
  Every related `RefreshToken` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RefreshTokenFilter

  """
  Some related `RefreshToken` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RefreshTokenFilter

  """
  No related `RefreshToken` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RefreshTokenFilter
}

"""
A filter to be used against `RefreshToken` object types. All fields are combined with a logical ‘and.’
"""
input RefreshTokenFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `appUserId` field."""
  appUserId: StringFilter

  """Filter by the object’s `token` field."""
  token: StringFilter

  """Filter by the object’s `expires` field."""
  expires: DatetimeFilter

  """Filter by the object’s `revoked` field."""
  revoked: DatetimeFilter

  """Filter by the object’s `aspNetUserByAppUserId` relation."""
  aspNetUserByAppUserId: AspNetUserFilter

  """Checks for all expressions in this list."""
  and: [RefreshTokenFilter!]

  """Checks for any expressions in this list."""
  or: [RefreshTokenFilter!]

  """Negates the expression."""
  not: RefreshTokenFilter
}

"""A connection to a list of `AspNetUserRole` values."""
type AspNetUserRolesConnection {
  """A list of `AspNetUserRole` objects."""
  nodes: [AspNetUserRole!]!

  """
  A list of edges which contains the `AspNetUserRole` and cursor to aid in pagination.
  """
  edges: [AspNetUserRolesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AspNetUserRole` you could get from the connection."""
  totalCount: Int!
}

type AspNetUserRole implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userId: String!
  roleId: String!
  appUserId: String

  """Reads a single `AspNetUser` that is related to this `AspNetUserRole`."""
  aspNetUserByUserId: AspNetUser

  """Reads a single `AspNetRole` that is related to this `AspNetUserRole`."""
  aspNetRoleByRoleId: AspNetRole

  """Reads a single `AspNetUser` that is related to this `AspNetUserRole`."""
  aspNetUserByAppUserId: AspNetUser
}

type AspNetUser implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  displayName: String!
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: Datetime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!

  """Reads and enables pagination through a set of `AspNetUserClaim`."""
  aspNetUserClaimsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AspNetUserClaim`."""
    orderBy: [AspNetUserClaimsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AspNetUserClaimCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AspNetUserClaimFilter
  ): AspNetUserClaimsConnection!

  """Reads and enables pagination through a set of `AspNetUserLogin`."""
  aspNetUserLoginsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AspNetUserLogin`."""
    orderBy: [AspNetUserLoginsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AspNetUserLoginCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AspNetUserLoginFilter
  ): AspNetUserLoginsConnection!

  """Reads and enables pagination through a set of `AspNetUserRole`."""
  aspNetUserRolesByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AspNetUserRole`."""
    orderBy: [AspNetUserRolesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AspNetUserRoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AspNetUserRoleFilter
  ): AspNetUserRolesConnection!

  """Reads and enables pagination through a set of `AspNetUserRole`."""
  aspNetUserRolesByAppUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AspNetUserRole`."""
    orderBy: [AspNetUserRolesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AspNetUserRoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AspNetUserRoleFilter
  ): AspNetUserRolesConnection!

  """Reads and enables pagination through a set of `AspNetUserToken`."""
  aspNetUserTokensByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AspNetUserToken`."""
    orderBy: [AspNetUserTokensOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AspNetUserTokenCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AspNetUserTokenFilter
  ): AspNetUserTokensConnection!

  """Reads and enables pagination through a set of `RefreshToken`."""
  refreshTokensByAppUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RefreshToken`."""
    orderBy: [RefreshTokensOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RefreshTokenCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RefreshTokenFilter
  ): RefreshTokensConnection!
}

"""A connection to a list of `AspNetUserClaim` values."""
type AspNetUserClaimsConnection {
  """A list of `AspNetUserClaim` objects."""
  nodes: [AspNetUserClaim!]!

  """
  A list of edges which contains the `AspNetUserClaim` and cursor to aid in pagination.
  """
  edges: [AspNetUserClaimsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AspNetUserClaim` you could get from the connection.
  """
  totalCount: Int!
}

type AspNetUserClaim implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  userId: String!
  claimType: String
  claimValue: String

  """Reads a single `AspNetUser` that is related to this `AspNetUserClaim`."""
  aspNetUserByUserId: AspNetUser
}

"""A `AspNetUserClaim` edge in the connection."""
type AspNetUserClaimsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AspNetUserClaim` at the end of the edge."""
  node: AspNetUserClaim!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `AspNetUserClaim`."""
enum AspNetUserClaimsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  CLAIM_TYPE_ASC
  CLAIM_TYPE_DESC
  CLAIM_VALUE_ASC
  CLAIM_VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ASP_NET_USER_BY_USER_ID__ID_ASC
  ASP_NET_USER_BY_USER_ID__ID_DESC
  ASP_NET_USER_BY_USER_ID__DISPLAY_NAME_ASC
  ASP_NET_USER_BY_USER_ID__DISPLAY_NAME_DESC
  ASP_NET_USER_BY_USER_ID__USER_NAME_ASC
  ASP_NET_USER_BY_USER_ID__USER_NAME_DESC
  ASP_NET_USER_BY_USER_ID__NORMALIZED_USER_NAME_ASC
  ASP_NET_USER_BY_USER_ID__NORMALIZED_USER_NAME_DESC
  ASP_NET_USER_BY_USER_ID__EMAIL_ASC
  ASP_NET_USER_BY_USER_ID__EMAIL_DESC
  ASP_NET_USER_BY_USER_ID__NORMALIZED_EMAIL_ASC
  ASP_NET_USER_BY_USER_ID__NORMALIZED_EMAIL_DESC
  ASP_NET_USER_BY_USER_ID__EMAIL_CONFIRMED_ASC
  ASP_NET_USER_BY_USER_ID__EMAIL_CONFIRMED_DESC
  ASP_NET_USER_BY_USER_ID__PASSWORD_HASH_ASC
  ASP_NET_USER_BY_USER_ID__PASSWORD_HASH_DESC
  ASP_NET_USER_BY_USER_ID__SECURITY_STAMP_ASC
  ASP_NET_USER_BY_USER_ID__SECURITY_STAMP_DESC
  ASP_NET_USER_BY_USER_ID__CONCURRENCY_STAMP_ASC
  ASP_NET_USER_BY_USER_ID__CONCURRENCY_STAMP_DESC
  ASP_NET_USER_BY_USER_ID__PHONE_NUMBER_ASC
  ASP_NET_USER_BY_USER_ID__PHONE_NUMBER_DESC
  ASP_NET_USER_BY_USER_ID__PHONE_NUMBER_CONFIRMED_ASC
  ASP_NET_USER_BY_USER_ID__PHONE_NUMBER_CONFIRMED_DESC
  ASP_NET_USER_BY_USER_ID__TWO_FACTOR_ENABLED_ASC
  ASP_NET_USER_BY_USER_ID__TWO_FACTOR_ENABLED_DESC
  ASP_NET_USER_BY_USER_ID__LOCKOUT_END_ASC
  ASP_NET_USER_BY_USER_ID__LOCKOUT_END_DESC
  ASP_NET_USER_BY_USER_ID__LOCKOUT_ENABLED_ASC
  ASP_NET_USER_BY_USER_ID__LOCKOUT_ENABLED_DESC
  ASP_NET_USER_BY_USER_ID__ACCESS_FAILED_COUNT_ASC
  ASP_NET_USER_BY_USER_ID__ACCESS_FAILED_COUNT_DESC
}

"""
A condition to be used against `AspNetUserClaim` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AspNetUserClaimCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: String

  """Checks for equality with the object’s `claimType` field."""
  claimType: String

  """Checks for equality with the object’s `claimValue` field."""
  claimValue: String
}

"""A connection to a list of `AspNetUserLogin` values."""
type AspNetUserLoginsConnection {
  """A list of `AspNetUserLogin` objects."""
  nodes: [AspNetUserLogin!]!

  """
  A list of edges which contains the `AspNetUserLogin` and cursor to aid in pagination.
  """
  edges: [AspNetUserLoginsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AspNetUserLogin` you could get from the connection.
  """
  totalCount: Int!
}

type AspNetUserLogin implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  loginProvider: String!
  providerKey: String!
  providerDisplayName: String
  userId: String!

  """Reads a single `AspNetUser` that is related to this `AspNetUserLogin`."""
  aspNetUserByUserId: AspNetUser
}

"""A `AspNetUserLogin` edge in the connection."""
type AspNetUserLoginsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AspNetUserLogin` at the end of the edge."""
  node: AspNetUserLogin!
}

"""Methods to use when ordering `AspNetUserLogin`."""
enum AspNetUserLoginsOrderBy {
  NATURAL
  LOGIN_PROVIDER_ASC
  LOGIN_PROVIDER_DESC
  PROVIDER_KEY_ASC
  PROVIDER_KEY_DESC
  PROVIDER_DISPLAY_NAME_ASC
  PROVIDER_DISPLAY_NAME_DESC
  USER_ID_ASC
  USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ASP_NET_USER_BY_USER_ID__ID_ASC
  ASP_NET_USER_BY_USER_ID__ID_DESC
  ASP_NET_USER_BY_USER_ID__DISPLAY_NAME_ASC
  ASP_NET_USER_BY_USER_ID__DISPLAY_NAME_DESC
  ASP_NET_USER_BY_USER_ID__USER_NAME_ASC
  ASP_NET_USER_BY_USER_ID__USER_NAME_DESC
  ASP_NET_USER_BY_USER_ID__NORMALIZED_USER_NAME_ASC
  ASP_NET_USER_BY_USER_ID__NORMALIZED_USER_NAME_DESC
  ASP_NET_USER_BY_USER_ID__EMAIL_ASC
  ASP_NET_USER_BY_USER_ID__EMAIL_DESC
  ASP_NET_USER_BY_USER_ID__NORMALIZED_EMAIL_ASC
  ASP_NET_USER_BY_USER_ID__NORMALIZED_EMAIL_DESC
  ASP_NET_USER_BY_USER_ID__EMAIL_CONFIRMED_ASC
  ASP_NET_USER_BY_USER_ID__EMAIL_CONFIRMED_DESC
  ASP_NET_USER_BY_USER_ID__PASSWORD_HASH_ASC
  ASP_NET_USER_BY_USER_ID__PASSWORD_HASH_DESC
  ASP_NET_USER_BY_USER_ID__SECURITY_STAMP_ASC
  ASP_NET_USER_BY_USER_ID__SECURITY_STAMP_DESC
  ASP_NET_USER_BY_USER_ID__CONCURRENCY_STAMP_ASC
  ASP_NET_USER_BY_USER_ID__CONCURRENCY_STAMP_DESC
  ASP_NET_USER_BY_USER_ID__PHONE_NUMBER_ASC
  ASP_NET_USER_BY_USER_ID__PHONE_NUMBER_DESC
  ASP_NET_USER_BY_USER_ID__PHONE_NUMBER_CONFIRMED_ASC
  ASP_NET_USER_BY_USER_ID__PHONE_NUMBER_CONFIRMED_DESC
  ASP_NET_USER_BY_USER_ID__TWO_FACTOR_ENABLED_ASC
  ASP_NET_USER_BY_USER_ID__TWO_FACTOR_ENABLED_DESC
  ASP_NET_USER_BY_USER_ID__LOCKOUT_END_ASC
  ASP_NET_USER_BY_USER_ID__LOCKOUT_END_DESC
  ASP_NET_USER_BY_USER_ID__LOCKOUT_ENABLED_ASC
  ASP_NET_USER_BY_USER_ID__LOCKOUT_ENABLED_DESC
  ASP_NET_USER_BY_USER_ID__ACCESS_FAILED_COUNT_ASC
  ASP_NET_USER_BY_USER_ID__ACCESS_FAILED_COUNT_DESC
}

"""
A condition to be used against `AspNetUserLogin` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AspNetUserLoginCondition {
  """Checks for equality with the object’s `loginProvider` field."""
  loginProvider: String

  """Checks for equality with the object’s `providerKey` field."""
  providerKey: String

  """Checks for equality with the object’s `providerDisplayName` field."""
  providerDisplayName: String

  """Checks for equality with the object’s `userId` field."""
  userId: String
}

"""Methods to use when ordering `AspNetUserRole`."""
enum AspNetUserRolesOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
  ROLE_ID_ASC
  ROLE_ID_DESC
  APP_USER_ID_ASC
  APP_USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ASP_NET_USER_BY_USER_ID__ID_ASC
  ASP_NET_USER_BY_USER_ID__ID_DESC
  ASP_NET_USER_BY_USER_ID__DISPLAY_NAME_ASC
  ASP_NET_USER_BY_USER_ID__DISPLAY_NAME_DESC
  ASP_NET_USER_BY_USER_ID__USER_NAME_ASC
  ASP_NET_USER_BY_USER_ID__USER_NAME_DESC
  ASP_NET_USER_BY_USER_ID__NORMALIZED_USER_NAME_ASC
  ASP_NET_USER_BY_USER_ID__NORMALIZED_USER_NAME_DESC
  ASP_NET_USER_BY_USER_ID__EMAIL_ASC
  ASP_NET_USER_BY_USER_ID__EMAIL_DESC
  ASP_NET_USER_BY_USER_ID__NORMALIZED_EMAIL_ASC
  ASP_NET_USER_BY_USER_ID__NORMALIZED_EMAIL_DESC
  ASP_NET_USER_BY_USER_ID__EMAIL_CONFIRMED_ASC
  ASP_NET_USER_BY_USER_ID__EMAIL_CONFIRMED_DESC
  ASP_NET_USER_BY_USER_ID__PASSWORD_HASH_ASC
  ASP_NET_USER_BY_USER_ID__PASSWORD_HASH_DESC
  ASP_NET_USER_BY_USER_ID__SECURITY_STAMP_ASC
  ASP_NET_USER_BY_USER_ID__SECURITY_STAMP_DESC
  ASP_NET_USER_BY_USER_ID__CONCURRENCY_STAMP_ASC
  ASP_NET_USER_BY_USER_ID__CONCURRENCY_STAMP_DESC
  ASP_NET_USER_BY_USER_ID__PHONE_NUMBER_ASC
  ASP_NET_USER_BY_USER_ID__PHONE_NUMBER_DESC
  ASP_NET_USER_BY_USER_ID__PHONE_NUMBER_CONFIRMED_ASC
  ASP_NET_USER_BY_USER_ID__PHONE_NUMBER_CONFIRMED_DESC
  ASP_NET_USER_BY_USER_ID__TWO_FACTOR_ENABLED_ASC
  ASP_NET_USER_BY_USER_ID__TWO_FACTOR_ENABLED_DESC
  ASP_NET_USER_BY_USER_ID__LOCKOUT_END_ASC
  ASP_NET_USER_BY_USER_ID__LOCKOUT_END_DESC
  ASP_NET_USER_BY_USER_ID__LOCKOUT_ENABLED_ASC
  ASP_NET_USER_BY_USER_ID__LOCKOUT_ENABLED_DESC
  ASP_NET_USER_BY_USER_ID__ACCESS_FAILED_COUNT_ASC
  ASP_NET_USER_BY_USER_ID__ACCESS_FAILED_COUNT_DESC
  ASP_NET_ROLE_BY_ROLE_ID__ID_ASC
  ASP_NET_ROLE_BY_ROLE_ID__ID_DESC
  ASP_NET_ROLE_BY_ROLE_ID__NAME_ASC
  ASP_NET_ROLE_BY_ROLE_ID__NAME_DESC
  ASP_NET_ROLE_BY_ROLE_ID__NORMALIZED_NAME_ASC
  ASP_NET_ROLE_BY_ROLE_ID__NORMALIZED_NAME_DESC
  ASP_NET_ROLE_BY_ROLE_ID__CONCURRENCY_STAMP_ASC
  ASP_NET_ROLE_BY_ROLE_ID__CONCURRENCY_STAMP_DESC
  ASP_NET_USER_BY_APP_USER_ID__ID_ASC
  ASP_NET_USER_BY_APP_USER_ID__ID_DESC
  ASP_NET_USER_BY_APP_USER_ID__DISPLAY_NAME_ASC
  ASP_NET_USER_BY_APP_USER_ID__DISPLAY_NAME_DESC
  ASP_NET_USER_BY_APP_USER_ID__USER_NAME_ASC
  ASP_NET_USER_BY_APP_USER_ID__USER_NAME_DESC
  ASP_NET_USER_BY_APP_USER_ID__NORMALIZED_USER_NAME_ASC
  ASP_NET_USER_BY_APP_USER_ID__NORMALIZED_USER_NAME_DESC
  ASP_NET_USER_BY_APP_USER_ID__EMAIL_ASC
  ASP_NET_USER_BY_APP_USER_ID__EMAIL_DESC
  ASP_NET_USER_BY_APP_USER_ID__NORMALIZED_EMAIL_ASC
  ASP_NET_USER_BY_APP_USER_ID__NORMALIZED_EMAIL_DESC
  ASP_NET_USER_BY_APP_USER_ID__EMAIL_CONFIRMED_ASC
  ASP_NET_USER_BY_APP_USER_ID__EMAIL_CONFIRMED_DESC
  ASP_NET_USER_BY_APP_USER_ID__PASSWORD_HASH_ASC
  ASP_NET_USER_BY_APP_USER_ID__PASSWORD_HASH_DESC
  ASP_NET_USER_BY_APP_USER_ID__SECURITY_STAMP_ASC
  ASP_NET_USER_BY_APP_USER_ID__SECURITY_STAMP_DESC
  ASP_NET_USER_BY_APP_USER_ID__CONCURRENCY_STAMP_ASC
  ASP_NET_USER_BY_APP_USER_ID__CONCURRENCY_STAMP_DESC
  ASP_NET_USER_BY_APP_USER_ID__PHONE_NUMBER_ASC
  ASP_NET_USER_BY_APP_USER_ID__PHONE_NUMBER_DESC
  ASP_NET_USER_BY_APP_USER_ID__PHONE_NUMBER_CONFIRMED_ASC
  ASP_NET_USER_BY_APP_USER_ID__PHONE_NUMBER_CONFIRMED_DESC
  ASP_NET_USER_BY_APP_USER_ID__TWO_FACTOR_ENABLED_ASC
  ASP_NET_USER_BY_APP_USER_ID__TWO_FACTOR_ENABLED_DESC
  ASP_NET_USER_BY_APP_USER_ID__LOCKOUT_END_ASC
  ASP_NET_USER_BY_APP_USER_ID__LOCKOUT_END_DESC
  ASP_NET_USER_BY_APP_USER_ID__LOCKOUT_ENABLED_ASC
  ASP_NET_USER_BY_APP_USER_ID__LOCKOUT_ENABLED_DESC
  ASP_NET_USER_BY_APP_USER_ID__ACCESS_FAILED_COUNT_ASC
  ASP_NET_USER_BY_APP_USER_ID__ACCESS_FAILED_COUNT_DESC
}

"""
A condition to be used against `AspNetUserRole` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AspNetUserRoleCondition {
  """Checks for equality with the object’s `userId` field."""
  userId: String

  """Checks for equality with the object’s `roleId` field."""
  roleId: String

  """Checks for equality with the object’s `appUserId` field."""
  appUserId: String
}

"""A connection to a list of `AspNetUserToken` values."""
type AspNetUserTokensConnection {
  """A list of `AspNetUserToken` objects."""
  nodes: [AspNetUserToken!]!

  """
  A list of edges which contains the `AspNetUserToken` and cursor to aid in pagination.
  """
  edges: [AspNetUserTokensEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AspNetUserToken` you could get from the connection.
  """
  totalCount: Int!
}

type AspNetUserToken implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userId: String!
  loginProvider: String!
  name: String!
  value: String

  """Reads a single `AspNetUser` that is related to this `AspNetUserToken`."""
  aspNetUserByUserId: AspNetUser
}

"""A `AspNetUserToken` edge in the connection."""
type AspNetUserTokensEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AspNetUserToken` at the end of the edge."""
  node: AspNetUserToken!
}

"""Methods to use when ordering `AspNetUserToken`."""
enum AspNetUserTokensOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
  LOGIN_PROVIDER_ASC
  LOGIN_PROVIDER_DESC
  NAME_ASC
  NAME_DESC
  VALUE_ASC
  VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ASP_NET_USER_BY_USER_ID__ID_ASC
  ASP_NET_USER_BY_USER_ID__ID_DESC
  ASP_NET_USER_BY_USER_ID__DISPLAY_NAME_ASC
  ASP_NET_USER_BY_USER_ID__DISPLAY_NAME_DESC
  ASP_NET_USER_BY_USER_ID__USER_NAME_ASC
  ASP_NET_USER_BY_USER_ID__USER_NAME_DESC
  ASP_NET_USER_BY_USER_ID__NORMALIZED_USER_NAME_ASC
  ASP_NET_USER_BY_USER_ID__NORMALIZED_USER_NAME_DESC
  ASP_NET_USER_BY_USER_ID__EMAIL_ASC
  ASP_NET_USER_BY_USER_ID__EMAIL_DESC
  ASP_NET_USER_BY_USER_ID__NORMALIZED_EMAIL_ASC
  ASP_NET_USER_BY_USER_ID__NORMALIZED_EMAIL_DESC
  ASP_NET_USER_BY_USER_ID__EMAIL_CONFIRMED_ASC
  ASP_NET_USER_BY_USER_ID__EMAIL_CONFIRMED_DESC
  ASP_NET_USER_BY_USER_ID__PASSWORD_HASH_ASC
  ASP_NET_USER_BY_USER_ID__PASSWORD_HASH_DESC
  ASP_NET_USER_BY_USER_ID__SECURITY_STAMP_ASC
  ASP_NET_USER_BY_USER_ID__SECURITY_STAMP_DESC
  ASP_NET_USER_BY_USER_ID__CONCURRENCY_STAMP_ASC
  ASP_NET_USER_BY_USER_ID__CONCURRENCY_STAMP_DESC
  ASP_NET_USER_BY_USER_ID__PHONE_NUMBER_ASC
  ASP_NET_USER_BY_USER_ID__PHONE_NUMBER_DESC
  ASP_NET_USER_BY_USER_ID__PHONE_NUMBER_CONFIRMED_ASC
  ASP_NET_USER_BY_USER_ID__PHONE_NUMBER_CONFIRMED_DESC
  ASP_NET_USER_BY_USER_ID__TWO_FACTOR_ENABLED_ASC
  ASP_NET_USER_BY_USER_ID__TWO_FACTOR_ENABLED_DESC
  ASP_NET_USER_BY_USER_ID__LOCKOUT_END_ASC
  ASP_NET_USER_BY_USER_ID__LOCKOUT_END_DESC
  ASP_NET_USER_BY_USER_ID__LOCKOUT_ENABLED_ASC
  ASP_NET_USER_BY_USER_ID__LOCKOUT_ENABLED_DESC
  ASP_NET_USER_BY_USER_ID__ACCESS_FAILED_COUNT_ASC
  ASP_NET_USER_BY_USER_ID__ACCESS_FAILED_COUNT_DESC
}

"""
A condition to be used against `AspNetUserToken` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AspNetUserTokenCondition {
  """Checks for equality with the object’s `userId` field."""
  userId: String

  """Checks for equality with the object’s `loginProvider` field."""
  loginProvider: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `value` field."""
  value: String
}

"""A connection to a list of `RefreshToken` values."""
type RefreshTokensConnection {
  """A list of `RefreshToken` objects."""
  nodes: [RefreshToken!]!

  """
  A list of edges which contains the `RefreshToken` and cursor to aid in pagination.
  """
  edges: [RefreshTokensEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RefreshToken` you could get from the connection."""
  totalCount: Int!
}

type RefreshToken implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  appUserId: String!
  token: String!
  expires: Datetime!
  revoked: Datetime

  """Reads a single `AspNetUser` that is related to this `RefreshToken`."""
  aspNetUserByAppUserId: AspNetUser
}

"""A `RefreshToken` edge in the connection."""
type RefreshTokensEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RefreshToken` at the end of the edge."""
  node: RefreshToken!
}

"""Methods to use when ordering `RefreshToken`."""
enum RefreshTokensOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APP_USER_ID_ASC
  APP_USER_ID_DESC
  TOKEN_ASC
  TOKEN_DESC
  EXPIRES_ASC
  EXPIRES_DESC
  REVOKED_ASC
  REVOKED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ASP_NET_USER_BY_APP_USER_ID__ID_ASC
  ASP_NET_USER_BY_APP_USER_ID__ID_DESC
  ASP_NET_USER_BY_APP_USER_ID__DISPLAY_NAME_ASC
  ASP_NET_USER_BY_APP_USER_ID__DISPLAY_NAME_DESC
  ASP_NET_USER_BY_APP_USER_ID__USER_NAME_ASC
  ASP_NET_USER_BY_APP_USER_ID__USER_NAME_DESC
  ASP_NET_USER_BY_APP_USER_ID__NORMALIZED_USER_NAME_ASC
  ASP_NET_USER_BY_APP_USER_ID__NORMALIZED_USER_NAME_DESC
  ASP_NET_USER_BY_APP_USER_ID__EMAIL_ASC
  ASP_NET_USER_BY_APP_USER_ID__EMAIL_DESC
  ASP_NET_USER_BY_APP_USER_ID__NORMALIZED_EMAIL_ASC
  ASP_NET_USER_BY_APP_USER_ID__NORMALIZED_EMAIL_DESC
  ASP_NET_USER_BY_APP_USER_ID__EMAIL_CONFIRMED_ASC
  ASP_NET_USER_BY_APP_USER_ID__EMAIL_CONFIRMED_DESC
  ASP_NET_USER_BY_APP_USER_ID__PASSWORD_HASH_ASC
  ASP_NET_USER_BY_APP_USER_ID__PASSWORD_HASH_DESC
  ASP_NET_USER_BY_APP_USER_ID__SECURITY_STAMP_ASC
  ASP_NET_USER_BY_APP_USER_ID__SECURITY_STAMP_DESC
  ASP_NET_USER_BY_APP_USER_ID__CONCURRENCY_STAMP_ASC
  ASP_NET_USER_BY_APP_USER_ID__CONCURRENCY_STAMP_DESC
  ASP_NET_USER_BY_APP_USER_ID__PHONE_NUMBER_ASC
  ASP_NET_USER_BY_APP_USER_ID__PHONE_NUMBER_DESC
  ASP_NET_USER_BY_APP_USER_ID__PHONE_NUMBER_CONFIRMED_ASC
  ASP_NET_USER_BY_APP_USER_ID__PHONE_NUMBER_CONFIRMED_DESC
  ASP_NET_USER_BY_APP_USER_ID__TWO_FACTOR_ENABLED_ASC
  ASP_NET_USER_BY_APP_USER_ID__TWO_FACTOR_ENABLED_DESC
  ASP_NET_USER_BY_APP_USER_ID__LOCKOUT_END_ASC
  ASP_NET_USER_BY_APP_USER_ID__LOCKOUT_END_DESC
  ASP_NET_USER_BY_APP_USER_ID__LOCKOUT_ENABLED_ASC
  ASP_NET_USER_BY_APP_USER_ID__LOCKOUT_ENABLED_DESC
  ASP_NET_USER_BY_APP_USER_ID__ACCESS_FAILED_COUNT_ASC
  ASP_NET_USER_BY_APP_USER_ID__ACCESS_FAILED_COUNT_DESC
}

"""
A condition to be used against `RefreshToken` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RefreshTokenCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `appUserId` field."""
  appUserId: String

  """Checks for equality with the object’s `token` field."""
  token: String

  """Checks for equality with the object’s `expires` field."""
  expires: Datetime

  """Checks for equality with the object’s `revoked` field."""
  revoked: Datetime
}

"""A `AspNetUserRole` edge in the connection."""
type AspNetUserRolesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AspNetUserRole` at the end of the edge."""
  node: AspNetUserRole!
}

"""A `AspNetRoleClaim` edge in the connection."""
type AspNetRoleClaimsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AspNetRoleClaim` at the end of the edge."""
  node: AspNetRoleClaim!
}

"""A connection to a list of `AspNetRole` values."""
type AspNetRolesConnection {
  """A list of `AspNetRole` objects."""
  nodes: [AspNetRole!]!

  """
  A list of edges which contains the `AspNetRole` and cursor to aid in pagination.
  """
  edges: [AspNetRolesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AspNetRole` you could get from the connection."""
  totalCount: Int!
}

"""A `AspNetRole` edge in the connection."""
type AspNetRolesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AspNetRole` at the end of the edge."""
  node: AspNetRole!
}

"""Methods to use when ordering `AspNetRole`."""
enum AspNetRolesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NORMALIZED_NAME_ASC
  NORMALIZED_NAME_DESC
  CONCURRENCY_STAMP_ASC
  CONCURRENCY_STAMP_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ASP_NET_ROLE_CLAIMS_BY_ROLE_ID__COUNT_ASC
  ASP_NET_ROLE_CLAIMS_BY_ROLE_ID__COUNT_DESC
  ASP_NET_USER_ROLES_BY_ROLE_ID__COUNT_ASC
  ASP_NET_USER_ROLES_BY_ROLE_ID__COUNT_DESC
}

"""
A condition to be used against `AspNetRole` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AspNetRoleCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `normalizedName` field."""
  normalizedName: String

  """Checks for equality with the object’s `concurrencyStamp` field."""
  concurrencyStamp: String
}

"""A connection to a list of `AspNetUser` values."""
type AspNetUsersConnection {
  """A list of `AspNetUser` objects."""
  nodes: [AspNetUser!]!

  """
  A list of edges which contains the `AspNetUser` and cursor to aid in pagination.
  """
  edges: [AspNetUsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AspNetUser` you could get from the connection."""
  totalCount: Int!
}

"""A `AspNetUser` edge in the connection."""
type AspNetUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AspNetUser` at the end of the edge."""
  node: AspNetUser!
}

"""Methods to use when ordering `AspNetUser`."""
enum AspNetUsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  USER_NAME_ASC
  USER_NAME_DESC
  NORMALIZED_USER_NAME_ASC
  NORMALIZED_USER_NAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  NORMALIZED_EMAIL_ASC
  NORMALIZED_EMAIL_DESC
  EMAIL_CONFIRMED_ASC
  EMAIL_CONFIRMED_DESC
  PASSWORD_HASH_ASC
  PASSWORD_HASH_DESC
  SECURITY_STAMP_ASC
  SECURITY_STAMP_DESC
  CONCURRENCY_STAMP_ASC
  CONCURRENCY_STAMP_DESC
  PHONE_NUMBER_ASC
  PHONE_NUMBER_DESC
  PHONE_NUMBER_CONFIRMED_ASC
  PHONE_NUMBER_CONFIRMED_DESC
  TWO_FACTOR_ENABLED_ASC
  TWO_FACTOR_ENABLED_DESC
  LOCKOUT_END_ASC
  LOCKOUT_END_DESC
  LOCKOUT_ENABLED_ASC
  LOCKOUT_ENABLED_DESC
  ACCESS_FAILED_COUNT_ASC
  ACCESS_FAILED_COUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ASP_NET_USER_CLAIMS_BY_USER_ID__COUNT_ASC
  ASP_NET_USER_CLAIMS_BY_USER_ID__COUNT_DESC
  ASP_NET_USER_LOGINS_BY_USER_ID__COUNT_ASC
  ASP_NET_USER_LOGINS_BY_USER_ID__COUNT_DESC
  ASP_NET_USER_ROLES_BY_USER_ID__COUNT_ASC
  ASP_NET_USER_ROLES_BY_USER_ID__COUNT_DESC
  ASP_NET_USER_ROLES_BY_APP_USER_ID__COUNT_ASC
  ASP_NET_USER_ROLES_BY_APP_USER_ID__COUNT_DESC
  ASP_NET_USER_TOKENS_BY_USER_ID__COUNT_ASC
  ASP_NET_USER_TOKENS_BY_USER_ID__COUNT_DESC
  REFRESH_TOKENS_BY_APP_USER_ID__COUNT_ASC
  REFRESH_TOKENS_BY_APP_USER_ID__COUNT_DESC
}

"""
A condition to be used against `AspNetUser` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AspNetUserCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `userName` field."""
  userName: String

  """Checks for equality with the object’s `normalizedUserName` field."""
  normalizedUserName: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `normalizedEmail` field."""
  normalizedEmail: String

  """Checks for equality with the object’s `emailConfirmed` field."""
  emailConfirmed: Boolean

  """Checks for equality with the object’s `passwordHash` field."""
  passwordHash: String

  """Checks for equality with the object’s `securityStamp` field."""
  securityStamp: String

  """Checks for equality with the object’s `concurrencyStamp` field."""
  concurrencyStamp: String

  """Checks for equality with the object’s `phoneNumber` field."""
  phoneNumber: String

  """Checks for equality with the object’s `phoneNumberConfirmed` field."""
  phoneNumberConfirmed: Boolean

  """Checks for equality with the object’s `twoFactorEnabled` field."""
  twoFactorEnabled: Boolean

  """Checks for equality with the object’s `lockoutEnd` field."""
  lockoutEnd: Datetime

  """Checks for equality with the object’s `lockoutEnabled` field."""
  lockoutEnabled: Boolean

  """Checks for equality with the object’s `accessFailedCount` field."""
  accessFailedCount: Int
}

"""A connection to a list of `Adre` values."""
type AdresConnection {
  """A list of `Adre` objects."""
  nodes: [Adre!]!

  """
  A list of edges which contains the `Adre` and cursor to aid in pagination.
  """
  edges: [AdresEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Adre` you could get from the connection."""
  totalCount: Int!
}

type Adre {
  cdrelatie: Int
  cdadres: Int
  adrestype: String
  naam: String
  naamstraat: String
  straat: String
  woonplaats: String
  postcode: String
  cdland: String
  telefoon: String
  telefax: String
  email: String
  cdtaal: String
  persoon: String
  adresGuid: String
  homepage: String
  telefoonmobiel: String
  cdpersoon: String
}

"""A `Adre` edge in the connection."""
type AdresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Adre` at the end of the edge."""
  node: Adre!
}

"""Methods to use when ordering `Adre`."""
enum AdresOrderBy {
  NATURAL
  CDRELATIE_ASC
  CDRELATIE_DESC
  CDADRES_ASC
  CDADRES_DESC
  ADRESTYPE_ASC
  ADRESTYPE_DESC
  NAAM_ASC
  NAAM_DESC
  NAAMSTRAAT_ASC
  NAAMSTRAAT_DESC
  STRAAT_ASC
  STRAAT_DESC
  WOONPLAATS_ASC
  WOONPLAATS_DESC
  POSTCODE_ASC
  POSTCODE_DESC
  CDLAND_ASC
  CDLAND_DESC
  TELEFOON_ASC
  TELEFOON_DESC
  TELEFAX_ASC
  TELEFAX_DESC
  EMAIL_ASC
  EMAIL_DESC
  CDTAAL_ASC
  CDTAAL_DESC
  PERSOON_ASC
  PERSOON_DESC
  ADRES_GUID_ASC
  ADRES_GUID_DESC
  HOMEPAGE_ASC
  HOMEPAGE_DESC
  TELEFOONMOBIEL_ASC
  TELEFOONMOBIEL_DESC
  CDPERSOON_ASC
  CDPERSOON_DESC
}

"""
A condition to be used against `Adre` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AdreCondition {
  """Checks for equality with the object’s `cdrelatie` field."""
  cdrelatie: Int

  """Checks for equality with the object’s `cdadres` field."""
  cdadres: Int

  """Checks for equality with the object’s `adrestype` field."""
  adrestype: String

  """Checks for equality with the object’s `naam` field."""
  naam: String

  """Checks for equality with the object’s `naamstraat` field."""
  naamstraat: String

  """Checks for equality with the object’s `straat` field."""
  straat: String

  """Checks for equality with the object’s `woonplaats` field."""
  woonplaats: String

  """Checks for equality with the object’s `postcode` field."""
  postcode: String

  """Checks for equality with the object’s `cdland` field."""
  cdland: String

  """Checks for equality with the object’s `telefoon` field."""
  telefoon: String

  """Checks for equality with the object’s `telefax` field."""
  telefax: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `cdtaal` field."""
  cdtaal: String

  """Checks for equality with the object’s `persoon` field."""
  persoon: String

  """Checks for equality with the object’s `adresGuid` field."""
  adresGuid: String

  """Checks for equality with the object’s `homepage` field."""
  homepage: String

  """Checks for equality with the object’s `telefoonmobiel` field."""
  telefoonmobiel: String

  """Checks for equality with the object’s `cdpersoon` field."""
  cdpersoon: String
}

"""
A filter to be used against `Adre` object types. All fields are combined with a logical ‘and.’
"""
input AdreFilter {
  """Filter by the object’s `cdrelatie` field."""
  cdrelatie: IntFilter

  """Filter by the object’s `cdadres` field."""
  cdadres: IntFilter

  """Filter by the object’s `adrestype` field."""
  adrestype: StringFilter

  """Filter by the object’s `naam` field."""
  naam: StringFilter

  """Filter by the object’s `naamstraat` field."""
  naamstraat: StringFilter

  """Filter by the object’s `straat` field."""
  straat: StringFilter

  """Filter by the object’s `woonplaats` field."""
  woonplaats: StringFilter

  """Filter by the object’s `postcode` field."""
  postcode: StringFilter

  """Filter by the object’s `cdland` field."""
  cdland: StringFilter

  """Filter by the object’s `telefoon` field."""
  telefoon: StringFilter

  """Filter by the object’s `telefax` field."""
  telefax: StringFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `cdtaal` field."""
  cdtaal: StringFilter

  """Filter by the object’s `persoon` field."""
  persoon: StringFilter

  """Filter by the object’s `adresGuid` field."""
  adresGuid: StringFilter

  """Filter by the object’s `homepage` field."""
  homepage: StringFilter

  """Filter by the object’s `telefoonmobiel` field."""
  telefoonmobiel: StringFilter

  """Filter by the object’s `cdpersoon` field."""
  cdpersoon: StringFilter

  """Checks for all expressions in this list."""
  and: [AdreFilter!]

  """Checks for any expressions in this list."""
  or: [AdreFilter!]

  """Negates the expression."""
  not: AdreFilter
}

"""A connection to a list of `Land` values."""
type LandsConnection {
  """A list of `Land` objects."""
  nodes: [Land!]!

  """
  A list of edges which contains the `Land` and cursor to aid in pagination.
  """
  edges: [LandsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Land` you could get from the connection."""
  totalCount: Int!
}

type Land {
  cdland: String
  omschr: String
  cbsland: String
  cdeglid: String
  isoland: String
  rszland: Int
  sepa: String
}

"""A `Land` edge in the connection."""
type LandsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Land` at the end of the edge."""
  node: Land!
}

"""Methods to use when ordering `Land`."""
enum LandsOrderBy {
  NATURAL
  CDLAND_ASC
  CDLAND_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  CBSLAND_ASC
  CBSLAND_DESC
  CDEGLID_ASC
  CDEGLID_DESC
  ISOLAND_ASC
  ISOLAND_DESC
  RSZLAND_ASC
  RSZLAND_DESC
  SEPA_ASC
  SEPA_DESC
}

"""
A condition to be used against `Land` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input LandCondition {
  """Checks for equality with the object’s `cdland` field."""
  cdland: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `cbsland` field."""
  cbsland: String

  """Checks for equality with the object’s `cdeglid` field."""
  cdeglid: String

  """Checks for equality with the object’s `isoland` field."""
  isoland: String

  """Checks for equality with the object’s `rszland` field."""
  rszland: Int

  """Checks for equality with the object’s `sepa` field."""
  sepa: String
}

"""
A filter to be used against `Land` object types. All fields are combined with a logical ‘and.’
"""
input LandFilter {
  """Filter by the object’s `cdland` field."""
  cdland: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `cbsland` field."""
  cbsland: StringFilter

  """Filter by the object’s `cdeglid` field."""
  cdeglid: StringFilter

  """Filter by the object’s `isoland` field."""
  isoland: StringFilter

  """Filter by the object’s `rszland` field."""
  rszland: IntFilter

  """Filter by the object’s `sepa` field."""
  sepa: StringFilter

  """Checks for all expressions in this list."""
  and: [LandFilter!]

  """Checks for any expressions in this list."""
  or: [LandFilter!]

  """Negates the expression."""
  not: LandFilter
}

"""A connection to a list of `Aco` values."""
type AcosConnection {
  """A list of `Aco` objects."""
  nodes: [Aco!]!

  """
  A list of edges which contains the `Aco` and cursor to aid in pagination.
  """
  edges: [AcosEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Aco` you could get from the connection."""
  totalCount: Int!
}

type Aco implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  parentId: Int
  model: String
  foreignKey: Int
  alias: String
  lft: Int
  rght: Int
}

"""A `Aco` edge in the connection."""
type AcosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Aco` at the end of the edge."""
  node: Aco!
}

"""Methods to use when ordering `Aco`."""
enum AcosOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PARENT_ID_ASC
  PARENT_ID_DESC
  MODEL_ASC
  MODEL_DESC
  FOREIGN_KEY_ASC
  FOREIGN_KEY_DESC
  ALIAS_ASC
  ALIAS_DESC
  LFT_ASC
  LFT_DESC
  RGHT_ASC
  RGHT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Aco` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AcoCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `parentId` field."""
  parentId: Int

  """Checks for equality with the object’s `model` field."""
  model: String

  """Checks for equality with the object’s `foreignKey` field."""
  foreignKey: Int

  """Checks for equality with the object’s `alias` field."""
  alias: String

  """Checks for equality with the object’s `lft` field."""
  lft: Int

  """Checks for equality with the object’s `rght` field."""
  rght: Int
}

"""
A filter to be used against `Aco` object types. All fields are combined with a logical ‘and.’
"""
input AcoFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `parentId` field."""
  parentId: IntFilter

  """Filter by the object’s `model` field."""
  model: StringFilter

  """Filter by the object’s `foreignKey` field."""
  foreignKey: IntFilter

  """Filter by the object’s `alias` field."""
  alias: StringFilter

  """Filter by the object’s `lft` field."""
  lft: IntFilter

  """Filter by the object’s `rght` field."""
  rght: IntFilter

  """Checks for all expressions in this list."""
  and: [AcoFilter!]

  """Checks for any expressions in this list."""
  or: [AcoFilter!]

  """Negates the expression."""
  not: AcoFilter
}

"""A connection to a list of `Action` values."""
type ActionsConnection {
  """A list of `Action` objects."""
  nodes: [Action!]!

  """
  A list of edges which contains the `Action` and cursor to aid in pagination.
  """
  edges: [ActionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Action` you could get from the connection."""
  totalCount: Int!
}

type Action implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  action: String!
  userId: Int
  groupId: Int
  created: Datetime
  modified: Datetime
  closed: Boolean!
  reportId: Int
  ownerId: Int!
  date: Date
  followUp: String
  endUserId: Int!

  """Reads a single `User` that is related to this `Action`."""
  userByUserId: User

  """Reads a single `Group` that is related to this `Action`."""
  groupByGroupId: Group

  """Reads a single `Report` that is related to this `Action`."""
  reportByReportId: Report

  """Reads a single `User` that is related to this `Action`."""
  userByOwnerId: User
}

"""The day, does not include a time."""
scalar Date

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  username: String
  password: String
  created: Datetime
  modified: Datetime
  groupId: Int
  initials: String
  fullname: String
  holidayStartBalance: Int
  overtimeStartBalance: Int
  url: String
  weeklyHoursFullAccess: Boolean!

  """Reads a single `Group` that is related to this `User`."""
  groupByGroupId: Group

  """Reads and enables pagination through a set of `CalGas`."""
  calGasesByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CalGas`."""
    orderBy: [CalGasesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CalGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CalGasFilter
  ): CalGasesConnection!

  """Reads and enables pagination through a set of `Group`."""
  groupsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter
  ): GroupsConnection!

  """Reads and enables pagination through a set of `Sensor`."""
  sensorsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Sensor`."""
    orderBy: [SensorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorFilter
  ): SensorsConnection!

  """
  Reads and enables pagination through a set of `DetectorSensorLocation`.
  """
  detectorSensorLocationsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorSensorLocation`."""
    orderBy: [DetectorSensorLocationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorSensorLocationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorSensorLocationFilter
  ): DetectorSensorLocationsConnection!

  """Reads and enables pagination through a set of `DetectorType`."""
  detectorTypesByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorType`."""
    orderBy: [DetectorTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorTypeFilter
  ): DetectorTypesConnection!

  """Reads and enables pagination through a set of `DetectorSensor`."""
  detectorSensorsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorSensor`."""
    orderBy: [DetectorSensorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorSensorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorSensorFilter
  ): DetectorSensorsConnection!

  """Reads and enables pagination through a set of `Area`."""
  areasByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Area`."""
    orderBy: [AreasOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AreaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AreaFilter
  ): AreasConnection!

  """Reads and enables pagination through a set of `Building`."""
  buildingsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Building`."""
    orderBy: [BuildingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BuildingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BuildingFilter
  ): BuildingsConnection!

  """Reads and enables pagination through a set of `Detector`."""
  detectorsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Detector`."""
    orderBy: [DetectorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorFilter
  ): DetectorsConnection!

  """Reads and enables pagination through a set of `EndUser`."""
  endUsersByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EndUser`."""
    orderBy: [EndUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EndUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EndUserFilter
  ): EndUsersConnection!

  """Reads and enables pagination through a set of `Range`."""
  rangesByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Range`."""
    orderBy: [RangesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RangeFilter
  ): RangesConnection!

  """Reads and enables pagination through a set of `Floor`."""
  floorsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Floor`."""
    orderBy: [FloorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FloorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FloorFilter
  ): FloorsConnection!

  """Reads and enables pagination through a set of `Gas`."""
  gasesByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GasFilter
  ): GasesConnection!

  """Reads and enables pagination through a set of `SamplePoint`."""
  samplePointsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SamplePoint`."""
    orderBy: [SamplePointsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SamplePointCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SamplePointFilter
  ): SamplePointsConnection!

  """Reads and enables pagination through a set of `SensorType`."""
  sensorTypesByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorType`."""
    orderBy: [SensorTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorTypeFilter
  ): SensorTypesConnection!

  """Reads and enables pagination through a set of `Action`."""
  actionsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ActionFilter
  ): ActionsConnection!

  """Reads and enables pagination through a set of `Action`."""
  actionsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ActionFilter
  ): ActionsConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationsConnection!

  """Reads and enables pagination through a set of `Assembly`."""
  assembliesByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Assembly`."""
    orderBy: [AssembliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssemblyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssemblyFilter
  ): AssembliesConnection!

  """Reads and enables pagination through a set of `AssemblyPart`."""
  assemblyPartsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssemblyPart`."""
    orderBy: [AssemblyPartsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssemblyPartCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssemblyPartFilter
  ): AssemblyPartsConnection!

  """Reads and enables pagination through a set of `AssemblyTypePart`."""
  assemblyTypePartsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssemblyTypePart`."""
    orderBy: [AssemblyTypePartsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssemblyTypePartCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssemblyTypePartFilter
  ): AssemblyTypePartsConnection!

  """Reads and enables pagination through a set of `AssemblyType`."""
  assemblyTypesByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssemblyType`."""
    orderBy: [AssemblyTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssemblyTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssemblyTypeFilter
  ): AssemblyTypesConnection!

  """Reads and enables pagination through a set of `StockSupplier`."""
  stockSuppliersByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StockSupplier`."""
    orderBy: [StockSuppliersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StockSupplierCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StockSupplierFilter
  ): StockSuppliersConnection!

  """Reads and enables pagination through a set of `CatalogGroup`."""
  catalogGroupsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CatalogGroup`."""
    orderBy: [CatalogGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CatalogGroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CatalogGroupFilter
  ): CatalogGroupsConnection!

  """Reads and enables pagination through a set of `CatalogItemFile`."""
  catalogItemFilesByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CatalogItemFile`."""
    orderBy: [CatalogItemFilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CatalogItemFileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CatalogItemFileFilter
  ): CatalogItemFilesConnection!

  """Reads and enables pagination through a set of `CatalogItem`."""
  catalogItemsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CatalogItem`."""
    orderBy: [CatalogItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CatalogItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CatalogItemFilter
  ): CatalogItemsConnection!

  """Reads and enables pagination through a set of `CatalogSubGroup`."""
  catalogSubGroupsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CatalogSubGroup`."""
    orderBy: [CatalogSubGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CatalogSubGroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CatalogSubGroupFilter
  ): CatalogSubGroupsConnection!

  """Reads and enables pagination through a set of `ChemicalCompound`."""
  chemicalCompoundsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChemicalCompound`."""
    orderBy: [ChemicalCompoundsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChemicalCompoundCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChemicalCompoundFilter
  ): ChemicalCompoundsConnection!

  """Reads and enables pagination through a set of `DetectorLocation`."""
  detectorLocationsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorLocation`."""
    orderBy: [DetectorLocationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorLocationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorLocationFilter
  ): DetectorLocationsConnection!

  """Reads and enables pagination through a set of `DetectorOrder`."""
  detectorOrdersByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorOrder`."""
    orderBy: [DetectorOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorOrderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorOrderFilter
  ): DetectorOrdersConnection!

  """Reads and enables pagination through a set of `Electrolyte`."""
  electrolytesByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Electrolyte`."""
    orderBy: [ElectrolytesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ElectrolyteCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ElectrolyteFilter
  ): ElectrolytesConnection!

  """Reads and enables pagination through a set of `Filter`."""
  filtersByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Filter`."""
    orderBy: [FiltersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FilterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FilterFilter
  ): FiltersConnection!

  """Reads and enables pagination through a set of `MaintenanceVisit`."""
  maintenanceVisitsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisit`."""
    orderBy: [MaintenanceVisitsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitFilter
  ): MaintenanceVisitsConnection!

  """Reads and enables pagination through a set of `MaintenanceVisit`."""
  maintenanceVisitsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisit`."""
    orderBy: [MaintenanceVisitsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitFilter
  ): MaintenanceVisitsConnection!

  """Reads and enables pagination through a set of `Membrane`."""
  membranesByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Membrane`."""
    orderBy: [MembranesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MembraneCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MembraneFilter
  ): MembranesConnection!

  """Reads and enables pagination through a set of `ORing`."""
  oRingsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ORing`."""
    orderBy: [ORingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ORingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ORingFilter
  ): ORingsConnection!

  """Reads and enables pagination through a set of `Pyrolyser`."""
  pyrolysersByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Pyrolyser`."""
    orderBy: [PyrolysersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PyrolyserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PyrolyserFilter
  ): PyrolysersConnection!

  """Reads and enables pagination through a set of `DetectorSensorType`."""
  detectorSensorTypesByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorSensorType`."""
    orderBy: [DetectorSensorTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorSensorTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorSensorTypeFilter
  ): DetectorSensorTypesConnection!

  """Reads and enables pagination through a set of `DpCard`."""
  dpCardsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DpCard`."""
    orderBy: [DpCardsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DpCardCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DpCardFilter
  ): DpCardsConnection!

  """
  Reads and enables pagination through a set of `FactopdrachtregelLineRemark`.
  """
  factopdrachtregelLineRemarksByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FactopdrachtregelLineRemark`."""
    orderBy: [FactopdrachtregelLineRemarksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactopdrachtregelLineRemarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactopdrachtregelLineRemarkFilter
  ): FactopdrachtregelLineRemarksConnection!

  """Reads and enables pagination through a set of `Factuur`."""
  factuursByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Factuur`."""
    orderBy: [FactuursOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactuurCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactuurFilter
  ): FactuursConnection!

  """Reads and enables pagination through a set of `Factuur`."""
  factuursByCheckedId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Factuur`."""
    orderBy: [FactuursOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactuurCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactuurFilter
  ): FactuursConnection!

  """Reads and enables pagination through a set of `Factuur`."""
  factuursBySentId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Factuur`."""
    orderBy: [FactuursOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactuurCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactuurFilter
  ): FactuursConnection!

  """Reads and enables pagination through a set of `Hardware`."""
  hardwaresByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Hardware`."""
    orderBy: [HardwaresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HardwareCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: HardwareFilter
  ): HardwaresConnection!

  """Reads and enables pagination through a set of `Hardware`."""
  hardwaresByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Hardware`."""
    orderBy: [HardwaresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HardwareCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: HardwareFilter
  ): HardwaresConnection!

  """Reads and enables pagination through a set of `IncomingDocument`."""
  incomingDocumentsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `IncomingDocument`."""
    orderBy: [IncomingDocumentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IncomingDocumentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IncomingDocumentFilter
  ): IncomingDocumentsConnection!

  """Reads and enables pagination through a set of `IncomingDocument`."""
  incomingDocumentsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `IncomingDocument`."""
    orderBy: [IncomingDocumentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IncomingDocumentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IncomingDocumentFilter
  ): IncomingDocumentsConnection!

  """Reads and enables pagination through a set of `Item`."""
  itemsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ItemFilter
  ): ItemsConnection!

  """Reads and enables pagination through a set of `Job`."""
  jobsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Job`."""
    orderBy: [JobsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JobCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: JobFilter
  ): JobsConnection!

  """Reads and enables pagination through a set of `JunctionBox`."""
  junctionBoxesByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `JunctionBox`."""
    orderBy: [JunctionBoxesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JunctionBoxCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: JunctionBoxFilter
  ): JunctionBoxesConnection!

  """Reads and enables pagination through a set of `Lead`."""
  leadsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Lead`."""
    orderBy: [LeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LeadFilter
  ): LeadsConnection!

  """Reads and enables pagination through a set of `LicenseCustomer`."""
  licenseCustomersByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LicenseCustomer`."""
    orderBy: [LicenseCustomersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCustomerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseCustomerFilter
  ): LicenseCustomersConnection!

  """Reads and enables pagination through a set of `LicenseModule`."""
  licenseModulesByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LicenseModule`."""
    orderBy: [LicenseModulesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseModuleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseModuleFilter
  ): LicenseModulesConnection!

  """Reads and enables pagination through a set of `LicenseOrder`."""
  licenseOrdersByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LicenseOrder`."""
    orderBy: [LicenseOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseOrderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseOrderFilter
  ): LicenseOrdersConnection!

  """Reads and enables pagination through a set of `LicenseRegistration`."""
  licenseRegistrationsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LicenseRegistration`."""
    orderBy: [LicenseRegistrationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseRegistrationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseRegistrationFilter
  ): LicenseRegistrationsConnection!

  """Reads and enables pagination through a set of `License`."""
  licensesByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseFilter
  ): LicensesConnection!

  """Reads and enables pagination through a set of `OfferteRemark`."""
  offerteRemarksByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OfferteRemark`."""
    orderBy: [OfferteRemarksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OfferteRemarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OfferteRemarkFilter
  ): OfferteRemarksConnection!

  """Reads and enables pagination through a set of `Opportunity`."""
  opportunitiesByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Opportunity`."""
    orderBy: [OpportunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpportunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OpportunityFilter
  ): OpportunitiesConnection!

  """Reads and enables pagination through a set of `UserTask`."""
  userTasksByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserTask`."""
    orderBy: [UserTasksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserTaskCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserTaskFilter
  ): UserTasksConnection!

  """Reads and enables pagination through a set of `UserTask`."""
  userTasksByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserTask`."""
    orderBy: [UserTasksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserTaskCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserTaskFilter
  ): UserTasksConnection!

  """Reads and enables pagination through a set of `WeeklyHour`."""
  weeklyHoursByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WeeklyHour`."""
    orderBy: [WeeklyHoursOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WeeklyHourCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WeeklyHourFilter
  ): WeeklyHoursConnection!

  """Reads and enables pagination through a set of `WeeklyHour`."""
  weeklyHoursByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WeeklyHour`."""
    orderBy: [WeeklyHoursOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WeeklyHourCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WeeklyHourFilter
  ): WeeklyHoursConnection!

  """Reads and enables pagination through a set of `Plug`."""
  plugsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Plug`."""
    orderBy: [PlugsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlugCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlugFilter
  ): PlugsConnection!

  """Reads and enables pagination through a set of `Principle`."""
  principlesByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Principle`."""
    orderBy: [PrinciplesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PrincipleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PrincipleFilter
  ): PrinciplesConnection!

  """Reads and enables pagination through a set of `RcCard`."""
  rcCardsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RcCard`."""
    orderBy: [RcCardsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RcCardCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RcCardFilter
  ): RcCardsConnection!

  """Reads and enables pagination through a set of `Report`."""
  reportsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Report`."""
    orderBy: [ReportsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportFilter
  ): ReportsConnection!

  """Reads and enables pagination through a set of `Report`."""
  reportsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Report`."""
    orderBy: [ReportsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportFilter
  ): ReportsConnection!

  """Reads and enables pagination through a set of `Request`."""
  requestsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Request`."""
    orderBy: [RequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RequestFilter
  ): RequestsConnection!

  """Reads and enables pagination through a set of `RxCard`."""
  rxCardsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RxCard`."""
    orderBy: [RxCardsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RxCardCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RxCardFilter
  ): RxCardsConnection!

  """Reads and enables pagination through a set of `SensorElementLocation`."""
  sensorElementLocationsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorElementLocation`."""
    orderBy: [SensorElementLocationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorElementLocationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorElementLocationFilter
  ): SensorElementLocationsConnection!

  """Reads and enables pagination through a set of `SensorElementType`."""
  sensorElementTypesByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorElementType`."""
    orderBy: [SensorElementTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorElementTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorElementTypeFilter
  ): SensorElementTypesConnection!

  """Reads and enables pagination through a set of `SensorElement`."""
  sensorElementsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorElement`."""
    orderBy: [SensorElementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorElementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorElementFilter
  ): SensorElementsConnection!

  """Reads and enables pagination through a set of `SensorOrder`."""
  sensorOrdersByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorOrder`."""
    orderBy: [SensorOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorOrderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorOrderFilter
  ): SensorOrdersConnection!

  """Reads and enables pagination through a set of `SensorOrder`."""
  sensorOrdersByCheckedUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorOrder`."""
    orderBy: [SensorOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorOrderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorOrderFilter
  ): SensorOrdersConnection!

  """Reads and enables pagination through a set of `SensorOrder`."""
  sensorOrdersByVerifiedUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorOrder`."""
    orderBy: [SensorOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorOrderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorOrderFilter
  ): SensorOrdersConnection!

  """Reads and enables pagination through a set of `SensorSensorElement`."""
  sensorSensorElementsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorSensorElement`."""
    orderBy: [SensorSensorElementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorSensorElementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorSensorElementFilter
  ): SensorSensorElementsConnection!

  """Reads and enables pagination through a set of `SensorTestResult`."""
  sensorTestResultsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorTestResult`."""
    orderBy: [SensorTestResultsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorTestResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorTestResultFilter
  ): SensorTestResultsConnection!

  """Reads and enables pagination through a set of `SensorTestResult`."""
  sensorTestResultsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorTestResult`."""
    orderBy: [SensorTestResultsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorTestResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorTestResultFilter
  ): SensorTestResultsConnection!

  """Reads and enables pagination through a set of `Software`."""
  softwaresByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Software`."""
    orderBy: [SoftwaresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SoftwareCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SoftwareFilter
  ): SoftwaresConnection!

  """Reads and enables pagination through a set of `StockGroup`."""
  stockGroupsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StockGroup`."""
    orderBy: [StockGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StockGroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StockGroupFilter
  ): StockGroupsConnection!

  """Reads and enables pagination through a set of `StockItem`."""
  stockItemsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StockItem`."""
    orderBy: [StockItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StockItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StockItemFilter
  ): StockItemsConnection!

  """Reads and enables pagination through a set of `Task`."""
  tasksByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TaskCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TaskFilter
  ): TasksConnection!

  """Reads and enables pagination through a set of `UserRight`."""
  userRightsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserRight`."""
    orderBy: [UserRightsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserRightCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserRightFilter
  ): UserRightsConnection!

  """Reads and enables pagination through a set of `UsersGroup`."""
  usersGroupsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UsersGroup`."""
    orderBy: [UsersGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UsersGroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UsersGroupFilter
  ): UsersGroupsConnection!

  """Reads and enables pagination through a set of `WeeklyHourRemark`."""
  weeklyHourRemarksByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WeeklyHourRemark`."""
    orderBy: [WeeklyHourRemarksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WeeklyHourRemarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WeeklyHourRemarkFilter
  ): WeeklyHourRemarksConnection!

  """Reads and enables pagination through a set of `WeeklyHourRemark`."""
  weeklyHourRemarksByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WeeklyHourRemark`."""
    orderBy: [WeeklyHourRemarksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WeeklyHourRemarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WeeklyHourRemarkFilter
  ): WeeklyHourRemarksConnection!
}

type Group implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int

  """Reads a single `User` that is related to this `Group`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `User`."""
  usersByGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection!

  """Reads and enables pagination through a set of `Action`."""
  actionsByGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ActionFilter
  ): ActionsConnection!

  """Reads a single `GroupPermission` that is related to this `Group`."""
  groupPermissionByGroupId: GroupPermission

  """Reads and enables pagination through a set of `GroupPermission`."""
  groupPermissionsByGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GroupPermission`."""
    orderBy: [GroupPermissionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupPermissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupPermissionFilter
  ): GroupPermissionsConnection! @deprecated(reason: "Please use groupPermissionByGroupId instead")

  """Reads and enables pagination through a set of `GroupRight`."""
  groupRightsByGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GroupRight`."""
    orderBy: [GroupRightsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupRightCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupRightFilter
  ): GroupRightsConnection!

  """Reads and enables pagination through a set of `UsersGroup`."""
  usersGroupsByGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UsersGroup`."""
    orderBy: [UsersGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UsersGroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UsersGroupFilter
  ): UsersGroupsConnection!
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User!]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  PASSWORD_ASC
  PASSWORD_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  INITIALS_ASC
  INITIALS_DESC
  FULLNAME_ASC
  FULLNAME_DESC
  HOLIDAY_START_BALANCE_ASC
  HOLIDAY_START_BALANCE_DESC
  OVERTIME_START_BALANCE_ASC
  OVERTIME_START_BALANCE_DESC
  URL_ASC
  URL_DESC
  WEEKLY_HOURS_FULL_ACCESS_ASC
  WEEKLY_HOURS_FULL_ACCESS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  GROUP_BY_GROUP_ID__ID_ASC
  GROUP_BY_GROUP_ID__ID_DESC
  GROUP_BY_GROUP_ID__NAME_ASC
  GROUP_BY_GROUP_ID__NAME_DESC
  GROUP_BY_GROUP_ID__CREATED_ASC
  GROUP_BY_GROUP_ID__CREATED_DESC
  GROUP_BY_GROUP_ID__MODIFIED_ASC
  GROUP_BY_GROUP_ID__MODIFIED_DESC
  GROUP_BY_GROUP_ID__OWNER_ID_ASC
  GROUP_BY_GROUP_ID__OWNER_ID_DESC
  CAL_GASES_BY_OWNER_ID__COUNT_ASC
  CAL_GASES_BY_OWNER_ID__COUNT_DESC
  GROUPS_BY_OWNER_ID__COUNT_ASC
  GROUPS_BY_OWNER_ID__COUNT_DESC
  SENSORS_BY_OWNER_ID__COUNT_ASC
  SENSORS_BY_OWNER_ID__COUNT_DESC
  DETECTOR_SENSOR_LOCATIONS_BY_OWNER_ID__COUNT_ASC
  DETECTOR_SENSOR_LOCATIONS_BY_OWNER_ID__COUNT_DESC
  DETECTOR_TYPES_BY_OWNER_ID__COUNT_ASC
  DETECTOR_TYPES_BY_OWNER_ID__COUNT_DESC
  DETECTOR_SENSORS_BY_OWNER_ID__COUNT_ASC
  DETECTOR_SENSORS_BY_OWNER_ID__COUNT_DESC
  AREAS_BY_OWNER_ID__COUNT_ASC
  AREAS_BY_OWNER_ID__COUNT_DESC
  BUILDINGS_BY_OWNER_ID__COUNT_ASC
  BUILDINGS_BY_OWNER_ID__COUNT_DESC
  DETECTORS_BY_OWNER_ID__COUNT_ASC
  DETECTORS_BY_OWNER_ID__COUNT_DESC
  END_USERS_BY_OWNER_ID__COUNT_ASC
  END_USERS_BY_OWNER_ID__COUNT_DESC
  RANGES_BY_OWNER_ID__COUNT_ASC
  RANGES_BY_OWNER_ID__COUNT_DESC
  FLOORS_BY_OWNER_ID__COUNT_ASC
  FLOORS_BY_OWNER_ID__COUNT_DESC
  GASES_BY_OWNER_ID__COUNT_ASC
  GASES_BY_OWNER_ID__COUNT_DESC
  SAMPLE_POINTS_BY_OWNER_ID__COUNT_ASC
  SAMPLE_POINTS_BY_OWNER_ID__COUNT_DESC
  SENSOR_TYPES_BY_OWNER_ID__COUNT_ASC
  SENSOR_TYPES_BY_OWNER_ID__COUNT_DESC
  ACTIONS_BY_USER_ID__COUNT_ASC
  ACTIONS_BY_USER_ID__COUNT_DESC
  ACTIONS_BY_OWNER_ID__COUNT_ASC
  ACTIONS_BY_OWNER_ID__COUNT_DESC
  APPLICATIONS_BY_OWNER_ID__COUNT_ASC
  APPLICATIONS_BY_OWNER_ID__COUNT_DESC
  ASSEMBLIES_BY_OWNER_ID__COUNT_ASC
  ASSEMBLIES_BY_OWNER_ID__COUNT_DESC
  ASSEMBLY_PARTS_BY_OWNER_ID__COUNT_ASC
  ASSEMBLY_PARTS_BY_OWNER_ID__COUNT_DESC
  ASSEMBLY_TYPE_PARTS_BY_OWNER_ID__COUNT_ASC
  ASSEMBLY_TYPE_PARTS_BY_OWNER_ID__COUNT_DESC
  ASSEMBLY_TYPES_BY_OWNER_ID__COUNT_ASC
  ASSEMBLY_TYPES_BY_OWNER_ID__COUNT_DESC
  STOCK_SUPPLIERS_BY_OWNER_ID__COUNT_ASC
  STOCK_SUPPLIERS_BY_OWNER_ID__COUNT_DESC
  CATALOG_GROUPS_BY_OWNER_ID__COUNT_ASC
  CATALOG_GROUPS_BY_OWNER_ID__COUNT_DESC
  CATALOG_ITEM_FILES_BY_OWNER_ID__COUNT_ASC
  CATALOG_ITEM_FILES_BY_OWNER_ID__COUNT_DESC
  CATALOG_ITEMS_BY_OWNER_ID__COUNT_ASC
  CATALOG_ITEMS_BY_OWNER_ID__COUNT_DESC
  CATALOG_SUB_GROUPS_BY_OWNER_ID__COUNT_ASC
  CATALOG_SUB_GROUPS_BY_OWNER_ID__COUNT_DESC
  CHEMICAL_COMPOUNDS_BY_OWNER_ID__COUNT_ASC
  CHEMICAL_COMPOUNDS_BY_OWNER_ID__COUNT_DESC
  DETECTOR_LOCATIONS_BY_OWNER_ID__COUNT_ASC
  DETECTOR_LOCATIONS_BY_OWNER_ID__COUNT_DESC
  DETECTOR_ORDERS_BY_OWNER_ID__COUNT_ASC
  DETECTOR_ORDERS_BY_OWNER_ID__COUNT_DESC
  ELECTROLYTES_BY_OWNER_ID__COUNT_ASC
  ELECTROLYTES_BY_OWNER_ID__COUNT_DESC
  FILTERS_BY_OWNER_ID__COUNT_ASC
  FILTERS_BY_OWNER_ID__COUNT_DESC
  MAINTENANCE_VISITS_BY_USER_ID__COUNT_ASC
  MAINTENANCE_VISITS_BY_USER_ID__COUNT_DESC
  MAINTENANCE_VISITS_BY_OWNER_ID__COUNT_ASC
  MAINTENANCE_VISITS_BY_OWNER_ID__COUNT_DESC
  MEMBRANES_BY_OWNER_ID__COUNT_ASC
  MEMBRANES_BY_OWNER_ID__COUNT_DESC
  O_RINGS_BY_OWNER_ID__COUNT_ASC
  O_RINGS_BY_OWNER_ID__COUNT_DESC
  PYROLYSERS_BY_OWNER_ID__COUNT_ASC
  PYROLYSERS_BY_OWNER_ID__COUNT_DESC
  DETECTOR_SENSOR_TYPES_BY_OWNER_ID__COUNT_ASC
  DETECTOR_SENSOR_TYPES_BY_OWNER_ID__COUNT_DESC
  DP_CARDS_BY_OWNER_ID__COUNT_ASC
  DP_CARDS_BY_OWNER_ID__COUNT_DESC
  FACTOPDRACHTREGEL_LINE_REMARKS_BY_USER_ID__COUNT_ASC
  FACTOPDRACHTREGEL_LINE_REMARKS_BY_USER_ID__COUNT_DESC
  FACTUURS_BY_OWNER_ID__COUNT_ASC
  FACTUURS_BY_OWNER_ID__COUNT_DESC
  FACTUURS_BY_CHECKED_ID__COUNT_ASC
  FACTUURS_BY_CHECKED_ID__COUNT_DESC
  FACTUURS_BY_SENT_ID__COUNT_ASC
  FACTUURS_BY_SENT_ID__COUNT_DESC
  HARDWARES_BY_USER_ID__COUNT_ASC
  HARDWARES_BY_USER_ID__COUNT_DESC
  HARDWARES_BY_OWNER_ID__COUNT_ASC
  HARDWARES_BY_OWNER_ID__COUNT_DESC
  INCOMING_DOCUMENTS_BY_OWNER_ID__COUNT_ASC
  INCOMING_DOCUMENTS_BY_OWNER_ID__COUNT_DESC
  INCOMING_DOCUMENTS_BY_USER_ID__COUNT_ASC
  INCOMING_DOCUMENTS_BY_USER_ID__COUNT_DESC
  ITEMS_BY_OWNER_ID__COUNT_ASC
  ITEMS_BY_OWNER_ID__COUNT_DESC
  JOBS_BY_OWNER_ID__COUNT_ASC
  JOBS_BY_OWNER_ID__COUNT_DESC
  JUNCTION_BOXES_BY_OWNER_ID__COUNT_ASC
  JUNCTION_BOXES_BY_OWNER_ID__COUNT_DESC
  LEADS_BY_OWNER_ID__COUNT_ASC
  LEADS_BY_OWNER_ID__COUNT_DESC
  LICENSE_CUSTOMERS_BY_OWNER_ID__COUNT_ASC
  LICENSE_CUSTOMERS_BY_OWNER_ID__COUNT_DESC
  LICENSE_MODULES_BY_OWNER_ID__COUNT_ASC
  LICENSE_MODULES_BY_OWNER_ID__COUNT_DESC
  LICENSE_ORDERS_BY_OWNER_ID__COUNT_ASC
  LICENSE_ORDERS_BY_OWNER_ID__COUNT_DESC
  LICENSE_REGISTRATIONS_BY_OWNER_ID__COUNT_ASC
  LICENSE_REGISTRATIONS_BY_OWNER_ID__COUNT_DESC
  LICENSES_BY_OWNER_ID__COUNT_ASC
  LICENSES_BY_OWNER_ID__COUNT_DESC
  OFFERTE_REMARKS_BY_OWNER_ID__COUNT_ASC
  OFFERTE_REMARKS_BY_OWNER_ID__COUNT_DESC
  OPPORTUNITIES_BY_OWNER_ID__COUNT_ASC
  OPPORTUNITIES_BY_OWNER_ID__COUNT_DESC
  USER_TASKS_BY_USER_ID__COUNT_ASC
  USER_TASKS_BY_USER_ID__COUNT_DESC
  USER_TASKS_BY_OWNER_ID__COUNT_ASC
  USER_TASKS_BY_OWNER_ID__COUNT_DESC
  WEEKLY_HOURS_BY_USER_ID__COUNT_ASC
  WEEKLY_HOURS_BY_USER_ID__COUNT_DESC
  WEEKLY_HOURS_BY_OWNER_ID__COUNT_ASC
  WEEKLY_HOURS_BY_OWNER_ID__COUNT_DESC
  PLUGS_BY_OWNER_ID__COUNT_ASC
  PLUGS_BY_OWNER_ID__COUNT_DESC
  PRINCIPLES_BY_OWNER_ID__COUNT_ASC
  PRINCIPLES_BY_OWNER_ID__COUNT_DESC
  RC_CARDS_BY_OWNER_ID__COUNT_ASC
  RC_CARDS_BY_OWNER_ID__COUNT_DESC
  REPORTS_BY_OWNER_ID__COUNT_ASC
  REPORTS_BY_OWNER_ID__COUNT_DESC
  REPORTS_BY_USER_ID__COUNT_ASC
  REPORTS_BY_USER_ID__COUNT_DESC
  REQUESTS_BY_OWNER_ID__COUNT_ASC
  REQUESTS_BY_OWNER_ID__COUNT_DESC
  RX_CARDS_BY_OWNER_ID__COUNT_ASC
  RX_CARDS_BY_OWNER_ID__COUNT_DESC
  SENSOR_ELEMENT_LOCATIONS_BY_OWNER_ID__COUNT_ASC
  SENSOR_ELEMENT_LOCATIONS_BY_OWNER_ID__COUNT_DESC
  SENSOR_ELEMENT_TYPES_BY_OWNER_ID__COUNT_ASC
  SENSOR_ELEMENT_TYPES_BY_OWNER_ID__COUNT_DESC
  SENSOR_ELEMENTS_BY_OWNER_ID__COUNT_ASC
  SENSOR_ELEMENTS_BY_OWNER_ID__COUNT_DESC
  SENSOR_ORDERS_BY_OWNER_ID__COUNT_ASC
  SENSOR_ORDERS_BY_OWNER_ID__COUNT_DESC
  SENSOR_ORDERS_BY_CHECKED_USER_ID__COUNT_ASC
  SENSOR_ORDERS_BY_CHECKED_USER_ID__COUNT_DESC
  SENSOR_ORDERS_BY_VERIFIED_USER_ID__COUNT_ASC
  SENSOR_ORDERS_BY_VERIFIED_USER_ID__COUNT_DESC
  SENSOR_SENSOR_ELEMENTS_BY_OWNER_ID__COUNT_ASC
  SENSOR_SENSOR_ELEMENTS_BY_OWNER_ID__COUNT_DESC
  SENSOR_TEST_RESULTS_BY_OWNER_ID__COUNT_ASC
  SENSOR_TEST_RESULTS_BY_OWNER_ID__COUNT_DESC
  SENSOR_TEST_RESULTS_BY_USER_ID__COUNT_ASC
  SENSOR_TEST_RESULTS_BY_USER_ID__COUNT_DESC
  SOFTWARES_BY_OWNER_ID__COUNT_ASC
  SOFTWARES_BY_OWNER_ID__COUNT_DESC
  STOCK_GROUPS_BY_OWNER_ID__COUNT_ASC
  STOCK_GROUPS_BY_OWNER_ID__COUNT_DESC
  STOCK_ITEMS_BY_OWNER_ID__COUNT_ASC
  STOCK_ITEMS_BY_OWNER_ID__COUNT_DESC
  TASKS_BY_OWNER_ID__COUNT_ASC
  TASKS_BY_OWNER_ID__COUNT_DESC
  USER_RIGHTS_BY_USER_ID__COUNT_ASC
  USER_RIGHTS_BY_USER_ID__COUNT_DESC
  USERS_GROUPS_BY_USER_ID__COUNT_ASC
  USERS_GROUPS_BY_USER_ID__COUNT_DESC
  WEEKLY_HOUR_REMARKS_BY_USER_ID__COUNT_ASC
  WEEKLY_HOUR_REMARKS_BY_USER_ID__COUNT_DESC
  WEEKLY_HOUR_REMARKS_BY_OWNER_ID__COUNT_ASC
  WEEKLY_HOUR_REMARKS_BY_OWNER_ID__COUNT_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `password` field."""
  password: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `groupId` field."""
  groupId: Int

  """Checks for equality with the object’s `initials` field."""
  initials: String

  """Checks for equality with the object’s `fullname` field."""
  fullname: String

  """Checks for equality with the object’s `holidayStartBalance` field."""
  holidayStartBalance: Int

  """Checks for equality with the object’s `overtimeStartBalance` field."""
  overtimeStartBalance: Int

  """Checks for equality with the object’s `url` field."""
  url: String

  """Checks for equality with the object’s `weeklyHoursFullAccess` field."""
  weeklyHoursFullAccess: Boolean
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `username` field."""
  username: StringFilter

  """Filter by the object’s `password` field."""
  password: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `groupId` field."""
  groupId: IntFilter

  """Filter by the object’s `initials` field."""
  initials: StringFilter

  """Filter by the object’s `fullname` field."""
  fullname: StringFilter

  """Filter by the object’s `holidayStartBalance` field."""
  holidayStartBalance: IntFilter

  """Filter by the object’s `overtimeStartBalance` field."""
  overtimeStartBalance: IntFilter

  """Filter by the object’s `url` field."""
  url: StringFilter

  """Filter by the object’s `weeklyHoursFullAccess` field."""
  weeklyHoursFullAccess: BooleanFilter

  """Filter by the object’s `calGasesByOwnerId` relation."""
  calGasesByOwnerId: UserToManyCalGasFilter

  """Some related `calGasesByOwnerId` exist."""
  calGasesByOwnerIdExist: Boolean

  """Filter by the object’s `groupsByOwnerId` relation."""
  groupsByOwnerId: UserToManyGroupFilter

  """Some related `groupsByOwnerId` exist."""
  groupsByOwnerIdExist: Boolean

  """Filter by the object’s `sensorsByOwnerId` relation."""
  sensorsByOwnerId: UserToManySensorFilter

  """Some related `sensorsByOwnerId` exist."""
  sensorsByOwnerIdExist: Boolean

  """Filter by the object’s `detectorSensorLocationsByOwnerId` relation."""
  detectorSensorLocationsByOwnerId: UserToManyDetectorSensorLocationFilter

  """Some related `detectorSensorLocationsByOwnerId` exist."""
  detectorSensorLocationsByOwnerIdExist: Boolean

  """Filter by the object’s `detectorTypesByOwnerId` relation."""
  detectorTypesByOwnerId: UserToManyDetectorTypeFilter

  """Some related `detectorTypesByOwnerId` exist."""
  detectorTypesByOwnerIdExist: Boolean

  """Filter by the object’s `detectorSensorsByOwnerId` relation."""
  detectorSensorsByOwnerId: UserToManyDetectorSensorFilter

  """Some related `detectorSensorsByOwnerId` exist."""
  detectorSensorsByOwnerIdExist: Boolean

  """Filter by the object’s `areasByOwnerId` relation."""
  areasByOwnerId: UserToManyAreaFilter

  """Some related `areasByOwnerId` exist."""
  areasByOwnerIdExist: Boolean

  """Filter by the object’s `buildingsByOwnerId` relation."""
  buildingsByOwnerId: UserToManyBuildingFilter

  """Some related `buildingsByOwnerId` exist."""
  buildingsByOwnerIdExist: Boolean

  """Filter by the object’s `detectorsByOwnerId` relation."""
  detectorsByOwnerId: UserToManyDetectorFilter

  """Some related `detectorsByOwnerId` exist."""
  detectorsByOwnerIdExist: Boolean

  """Filter by the object’s `endUsersByOwnerId` relation."""
  endUsersByOwnerId: UserToManyEndUserFilter

  """Some related `endUsersByOwnerId` exist."""
  endUsersByOwnerIdExist: Boolean

  """Filter by the object’s `rangesByOwnerId` relation."""
  rangesByOwnerId: UserToManyRangeFilter

  """Some related `rangesByOwnerId` exist."""
  rangesByOwnerIdExist: Boolean

  """Filter by the object’s `floorsByOwnerId` relation."""
  floorsByOwnerId: UserToManyFloorFilter

  """Some related `floorsByOwnerId` exist."""
  floorsByOwnerIdExist: Boolean

  """Filter by the object’s `gasesByOwnerId` relation."""
  gasesByOwnerId: UserToManyGasFilter

  """Some related `gasesByOwnerId` exist."""
  gasesByOwnerIdExist: Boolean

  """Filter by the object’s `samplePointsByOwnerId` relation."""
  samplePointsByOwnerId: UserToManySamplePointFilter

  """Some related `samplePointsByOwnerId` exist."""
  samplePointsByOwnerIdExist: Boolean

  """Filter by the object’s `sensorTypesByOwnerId` relation."""
  sensorTypesByOwnerId: UserToManySensorTypeFilter

  """Some related `sensorTypesByOwnerId` exist."""
  sensorTypesByOwnerIdExist: Boolean

  """Filter by the object’s `actionsByUserId` relation."""
  actionsByUserId: UserToManyActionFilter

  """Some related `actionsByUserId` exist."""
  actionsByUserIdExist: Boolean

  """Filter by the object’s `actionsByOwnerId` relation."""
  actionsByOwnerId: UserToManyActionFilter

  """Some related `actionsByOwnerId` exist."""
  actionsByOwnerIdExist: Boolean

  """Filter by the object’s `applicationsByOwnerId` relation."""
  applicationsByOwnerId: UserToManyApplicationFilter

  """Some related `applicationsByOwnerId` exist."""
  applicationsByOwnerIdExist: Boolean

  """Filter by the object’s `assembliesByOwnerId` relation."""
  assembliesByOwnerId: UserToManyAssemblyFilter

  """Some related `assembliesByOwnerId` exist."""
  assembliesByOwnerIdExist: Boolean

  """Filter by the object’s `assemblyPartsByOwnerId` relation."""
  assemblyPartsByOwnerId: UserToManyAssemblyPartFilter

  """Some related `assemblyPartsByOwnerId` exist."""
  assemblyPartsByOwnerIdExist: Boolean

  """Filter by the object’s `assemblyTypePartsByOwnerId` relation."""
  assemblyTypePartsByOwnerId: UserToManyAssemblyTypePartFilter

  """Some related `assemblyTypePartsByOwnerId` exist."""
  assemblyTypePartsByOwnerIdExist: Boolean

  """Filter by the object’s `assemblyTypesByOwnerId` relation."""
  assemblyTypesByOwnerId: UserToManyAssemblyTypeFilter

  """Some related `assemblyTypesByOwnerId` exist."""
  assemblyTypesByOwnerIdExist: Boolean

  """Filter by the object’s `stockSuppliersByOwnerId` relation."""
  stockSuppliersByOwnerId: UserToManyStockSupplierFilter

  """Some related `stockSuppliersByOwnerId` exist."""
  stockSuppliersByOwnerIdExist: Boolean

  """Filter by the object’s `catalogGroupsByOwnerId` relation."""
  catalogGroupsByOwnerId: UserToManyCatalogGroupFilter

  """Some related `catalogGroupsByOwnerId` exist."""
  catalogGroupsByOwnerIdExist: Boolean

  """Filter by the object’s `catalogItemFilesByOwnerId` relation."""
  catalogItemFilesByOwnerId: UserToManyCatalogItemFileFilter

  """Some related `catalogItemFilesByOwnerId` exist."""
  catalogItemFilesByOwnerIdExist: Boolean

  """Filter by the object’s `catalogItemsByOwnerId` relation."""
  catalogItemsByOwnerId: UserToManyCatalogItemFilter

  """Some related `catalogItemsByOwnerId` exist."""
  catalogItemsByOwnerIdExist: Boolean

  """Filter by the object’s `catalogSubGroupsByOwnerId` relation."""
  catalogSubGroupsByOwnerId: UserToManyCatalogSubGroupFilter

  """Some related `catalogSubGroupsByOwnerId` exist."""
  catalogSubGroupsByOwnerIdExist: Boolean

  """Filter by the object’s `chemicalCompoundsByOwnerId` relation."""
  chemicalCompoundsByOwnerId: UserToManyChemicalCompoundFilter

  """Some related `chemicalCompoundsByOwnerId` exist."""
  chemicalCompoundsByOwnerIdExist: Boolean

  """Filter by the object’s `detectorLocationsByOwnerId` relation."""
  detectorLocationsByOwnerId: UserToManyDetectorLocationFilter

  """Some related `detectorLocationsByOwnerId` exist."""
  detectorLocationsByOwnerIdExist: Boolean

  """Filter by the object’s `detectorOrdersByOwnerId` relation."""
  detectorOrdersByOwnerId: UserToManyDetectorOrderFilter

  """Some related `detectorOrdersByOwnerId` exist."""
  detectorOrdersByOwnerIdExist: Boolean

  """Filter by the object’s `electrolytesByOwnerId` relation."""
  electrolytesByOwnerId: UserToManyElectrolyteFilter

  """Some related `electrolytesByOwnerId` exist."""
  electrolytesByOwnerIdExist: Boolean

  """Filter by the object’s `filtersByOwnerId` relation."""
  filtersByOwnerId: UserToManyFilterFilter

  """Some related `filtersByOwnerId` exist."""
  filtersByOwnerIdExist: Boolean

  """Filter by the object’s `maintenanceVisitsByUserId` relation."""
  maintenanceVisitsByUserId: UserToManyMaintenanceVisitFilter

  """Some related `maintenanceVisitsByUserId` exist."""
  maintenanceVisitsByUserIdExist: Boolean

  """Filter by the object’s `maintenanceVisitsByOwnerId` relation."""
  maintenanceVisitsByOwnerId: UserToManyMaintenanceVisitFilter

  """Some related `maintenanceVisitsByOwnerId` exist."""
  maintenanceVisitsByOwnerIdExist: Boolean

  """Filter by the object’s `membranesByOwnerId` relation."""
  membranesByOwnerId: UserToManyMembraneFilter

  """Some related `membranesByOwnerId` exist."""
  membranesByOwnerIdExist: Boolean

  """Filter by the object’s `oRingsByOwnerId` relation."""
  oRingsByOwnerId: UserToManyORingFilter

  """Some related `oRingsByOwnerId` exist."""
  oRingsByOwnerIdExist: Boolean

  """Filter by the object’s `pyrolysersByOwnerId` relation."""
  pyrolysersByOwnerId: UserToManyPyrolyserFilter

  """Some related `pyrolysersByOwnerId` exist."""
  pyrolysersByOwnerIdExist: Boolean

  """Filter by the object’s `detectorSensorTypesByOwnerId` relation."""
  detectorSensorTypesByOwnerId: UserToManyDetectorSensorTypeFilter

  """Some related `detectorSensorTypesByOwnerId` exist."""
  detectorSensorTypesByOwnerIdExist: Boolean

  """Filter by the object’s `dpCardsByOwnerId` relation."""
  dpCardsByOwnerId: UserToManyDpCardFilter

  """Some related `dpCardsByOwnerId` exist."""
  dpCardsByOwnerIdExist: Boolean

  """
  Filter by the object’s `factopdrachtregelLineRemarksByUserId` relation.
  """
  factopdrachtregelLineRemarksByUserId: UserToManyFactopdrachtregelLineRemarkFilter

  """Some related `factopdrachtregelLineRemarksByUserId` exist."""
  factopdrachtregelLineRemarksByUserIdExist: Boolean

  """Filter by the object’s `factuursByOwnerId` relation."""
  factuursByOwnerId: UserToManyFactuurFilter

  """Some related `factuursByOwnerId` exist."""
  factuursByOwnerIdExist: Boolean

  """Filter by the object’s `factuursByCheckedId` relation."""
  factuursByCheckedId: UserToManyFactuurFilter

  """Some related `factuursByCheckedId` exist."""
  factuursByCheckedIdExist: Boolean

  """Filter by the object’s `factuursBySentId` relation."""
  factuursBySentId: UserToManyFactuurFilter

  """Some related `factuursBySentId` exist."""
  factuursBySentIdExist: Boolean

  """Filter by the object’s `hardwaresByUserId` relation."""
  hardwaresByUserId: UserToManyHardwareFilter

  """Some related `hardwaresByUserId` exist."""
  hardwaresByUserIdExist: Boolean

  """Filter by the object’s `hardwaresByOwnerId` relation."""
  hardwaresByOwnerId: UserToManyHardwareFilter

  """Some related `hardwaresByOwnerId` exist."""
  hardwaresByOwnerIdExist: Boolean

  """Filter by the object’s `incomingDocumentsByOwnerId` relation."""
  incomingDocumentsByOwnerId: UserToManyIncomingDocumentFilter

  """Some related `incomingDocumentsByOwnerId` exist."""
  incomingDocumentsByOwnerIdExist: Boolean

  """Filter by the object’s `incomingDocumentsByUserId` relation."""
  incomingDocumentsByUserId: UserToManyIncomingDocumentFilter

  """Some related `incomingDocumentsByUserId` exist."""
  incomingDocumentsByUserIdExist: Boolean

  """Filter by the object’s `itemsByOwnerId` relation."""
  itemsByOwnerId: UserToManyItemFilter

  """Some related `itemsByOwnerId` exist."""
  itemsByOwnerIdExist: Boolean

  """Filter by the object’s `jobsByOwnerId` relation."""
  jobsByOwnerId: UserToManyJobFilter

  """Some related `jobsByOwnerId` exist."""
  jobsByOwnerIdExist: Boolean

  """Filter by the object’s `junctionBoxesByOwnerId` relation."""
  junctionBoxesByOwnerId: UserToManyJunctionBoxFilter

  """Some related `junctionBoxesByOwnerId` exist."""
  junctionBoxesByOwnerIdExist: Boolean

  """Filter by the object’s `leadsByOwnerId` relation."""
  leadsByOwnerId: UserToManyLeadFilter

  """Some related `leadsByOwnerId` exist."""
  leadsByOwnerIdExist: Boolean

  """Filter by the object’s `licenseCustomersByOwnerId` relation."""
  licenseCustomersByOwnerId: UserToManyLicenseCustomerFilter

  """Some related `licenseCustomersByOwnerId` exist."""
  licenseCustomersByOwnerIdExist: Boolean

  """Filter by the object’s `licenseModulesByOwnerId` relation."""
  licenseModulesByOwnerId: UserToManyLicenseModuleFilter

  """Some related `licenseModulesByOwnerId` exist."""
  licenseModulesByOwnerIdExist: Boolean

  """Filter by the object’s `licenseOrdersByOwnerId` relation."""
  licenseOrdersByOwnerId: UserToManyLicenseOrderFilter

  """Some related `licenseOrdersByOwnerId` exist."""
  licenseOrdersByOwnerIdExist: Boolean

  """Filter by the object’s `licenseRegistrationsByOwnerId` relation."""
  licenseRegistrationsByOwnerId: UserToManyLicenseRegistrationFilter

  """Some related `licenseRegistrationsByOwnerId` exist."""
  licenseRegistrationsByOwnerIdExist: Boolean

  """Filter by the object’s `licensesByOwnerId` relation."""
  licensesByOwnerId: UserToManyLicenseFilter

  """Some related `licensesByOwnerId` exist."""
  licensesByOwnerIdExist: Boolean

  """Filter by the object’s `offerteRemarksByOwnerId` relation."""
  offerteRemarksByOwnerId: UserToManyOfferteRemarkFilter

  """Some related `offerteRemarksByOwnerId` exist."""
  offerteRemarksByOwnerIdExist: Boolean

  """Filter by the object’s `opportunitiesByOwnerId` relation."""
  opportunitiesByOwnerId: UserToManyOpportunityFilter

  """Some related `opportunitiesByOwnerId` exist."""
  opportunitiesByOwnerIdExist: Boolean

  """Filter by the object’s `userTasksByUserId` relation."""
  userTasksByUserId: UserToManyUserTaskFilter

  """Some related `userTasksByUserId` exist."""
  userTasksByUserIdExist: Boolean

  """Filter by the object’s `userTasksByOwnerId` relation."""
  userTasksByOwnerId: UserToManyUserTaskFilter

  """Some related `userTasksByOwnerId` exist."""
  userTasksByOwnerIdExist: Boolean

  """Filter by the object’s `weeklyHoursByUserId` relation."""
  weeklyHoursByUserId: UserToManyWeeklyHourFilter

  """Some related `weeklyHoursByUserId` exist."""
  weeklyHoursByUserIdExist: Boolean

  """Filter by the object’s `weeklyHoursByOwnerId` relation."""
  weeklyHoursByOwnerId: UserToManyWeeklyHourFilter

  """Some related `weeklyHoursByOwnerId` exist."""
  weeklyHoursByOwnerIdExist: Boolean

  """Filter by the object’s `plugsByOwnerId` relation."""
  plugsByOwnerId: UserToManyPlugFilter

  """Some related `plugsByOwnerId` exist."""
  plugsByOwnerIdExist: Boolean

  """Filter by the object’s `principlesByOwnerId` relation."""
  principlesByOwnerId: UserToManyPrincipleFilter

  """Some related `principlesByOwnerId` exist."""
  principlesByOwnerIdExist: Boolean

  """Filter by the object’s `rcCardsByOwnerId` relation."""
  rcCardsByOwnerId: UserToManyRcCardFilter

  """Some related `rcCardsByOwnerId` exist."""
  rcCardsByOwnerIdExist: Boolean

  """Filter by the object’s `reportsByOwnerId` relation."""
  reportsByOwnerId: UserToManyReportFilter

  """Some related `reportsByOwnerId` exist."""
  reportsByOwnerIdExist: Boolean

  """Filter by the object’s `reportsByUserId` relation."""
  reportsByUserId: UserToManyReportFilter

  """Some related `reportsByUserId` exist."""
  reportsByUserIdExist: Boolean

  """Filter by the object’s `requestsByOwnerId` relation."""
  requestsByOwnerId: UserToManyRequestFilter

  """Some related `requestsByOwnerId` exist."""
  requestsByOwnerIdExist: Boolean

  """Filter by the object’s `rxCardsByOwnerId` relation."""
  rxCardsByOwnerId: UserToManyRxCardFilter

  """Some related `rxCardsByOwnerId` exist."""
  rxCardsByOwnerIdExist: Boolean

  """Filter by the object’s `sensorElementLocationsByOwnerId` relation."""
  sensorElementLocationsByOwnerId: UserToManySensorElementLocationFilter

  """Some related `sensorElementLocationsByOwnerId` exist."""
  sensorElementLocationsByOwnerIdExist: Boolean

  """Filter by the object’s `sensorElementTypesByOwnerId` relation."""
  sensorElementTypesByOwnerId: UserToManySensorElementTypeFilter

  """Some related `sensorElementTypesByOwnerId` exist."""
  sensorElementTypesByOwnerIdExist: Boolean

  """Filter by the object’s `sensorElementsByOwnerId` relation."""
  sensorElementsByOwnerId: UserToManySensorElementFilter

  """Some related `sensorElementsByOwnerId` exist."""
  sensorElementsByOwnerIdExist: Boolean

  """Filter by the object’s `sensorOrdersByOwnerId` relation."""
  sensorOrdersByOwnerId: UserToManySensorOrderFilter

  """Some related `sensorOrdersByOwnerId` exist."""
  sensorOrdersByOwnerIdExist: Boolean

  """Filter by the object’s `sensorOrdersByCheckedUserId` relation."""
  sensorOrdersByCheckedUserId: UserToManySensorOrderFilter

  """Some related `sensorOrdersByCheckedUserId` exist."""
  sensorOrdersByCheckedUserIdExist: Boolean

  """Filter by the object’s `sensorOrdersByVerifiedUserId` relation."""
  sensorOrdersByVerifiedUserId: UserToManySensorOrderFilter

  """Some related `sensorOrdersByVerifiedUserId` exist."""
  sensorOrdersByVerifiedUserIdExist: Boolean

  """Filter by the object’s `sensorSensorElementsByOwnerId` relation."""
  sensorSensorElementsByOwnerId: UserToManySensorSensorElementFilter

  """Some related `sensorSensorElementsByOwnerId` exist."""
  sensorSensorElementsByOwnerIdExist: Boolean

  """Filter by the object’s `sensorTestResultsByOwnerId` relation."""
  sensorTestResultsByOwnerId: UserToManySensorTestResultFilter

  """Some related `sensorTestResultsByOwnerId` exist."""
  sensorTestResultsByOwnerIdExist: Boolean

  """Filter by the object’s `sensorTestResultsByUserId` relation."""
  sensorTestResultsByUserId: UserToManySensorTestResultFilter

  """Some related `sensorTestResultsByUserId` exist."""
  sensorTestResultsByUserIdExist: Boolean

  """Filter by the object’s `softwaresByOwnerId` relation."""
  softwaresByOwnerId: UserToManySoftwareFilter

  """Some related `softwaresByOwnerId` exist."""
  softwaresByOwnerIdExist: Boolean

  """Filter by the object’s `stockGroupsByOwnerId` relation."""
  stockGroupsByOwnerId: UserToManyStockGroupFilter

  """Some related `stockGroupsByOwnerId` exist."""
  stockGroupsByOwnerIdExist: Boolean

  """Filter by the object’s `stockItemsByOwnerId` relation."""
  stockItemsByOwnerId: UserToManyStockItemFilter

  """Some related `stockItemsByOwnerId` exist."""
  stockItemsByOwnerIdExist: Boolean

  """Filter by the object’s `tasksByOwnerId` relation."""
  tasksByOwnerId: UserToManyTaskFilter

  """Some related `tasksByOwnerId` exist."""
  tasksByOwnerIdExist: Boolean

  """Filter by the object’s `userRightsByUserId` relation."""
  userRightsByUserId: UserToManyUserRightFilter

  """Some related `userRightsByUserId` exist."""
  userRightsByUserIdExist: Boolean

  """Filter by the object’s `usersGroupsByUserId` relation."""
  usersGroupsByUserId: UserToManyUsersGroupFilter

  """Some related `usersGroupsByUserId` exist."""
  usersGroupsByUserIdExist: Boolean

  """Filter by the object’s `weeklyHourRemarksByUserId` relation."""
  weeklyHourRemarksByUserId: UserToManyWeeklyHourRemarkFilter

  """Some related `weeklyHourRemarksByUserId` exist."""
  weeklyHourRemarksByUserIdExist: Boolean

  """Filter by the object’s `weeklyHourRemarksByOwnerId` relation."""
  weeklyHourRemarksByOwnerId: UserToManyWeeklyHourRemarkFilter

  """Some related `weeklyHourRemarksByOwnerId` exist."""
  weeklyHourRemarksByOwnerIdExist: Boolean

  """Filter by the object’s `groupByGroupId` relation."""
  groupByGroupId: GroupFilter

  """A related `groupByGroupId` exists."""
  groupByGroupIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Negates the expression."""
  not: UserFilter
}

"""
A filter to be used against many `CalGas` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyCalGasFilter {
  """
  Every related `CalGas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CalGasFilter

  """
  Some related `CalGas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CalGasFilter

  """
  No related `CalGas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CalGasFilter
}

"""
A filter to be used against `CalGas` object types. All fields are combined with a logical ‘and.’
"""
input CalGasFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `gasId` field."""
  gasId: IntFilter

  """Filter by the object’s `concentration` field."""
  concentration: FloatFilter

  """Filter by the object’s `engineeringUnits` field."""
  engineeringUnits: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `sensorTypesByCalGasId` relation."""
  sensorTypesByCalGasId: CalGasToManySensorTypeFilter

  """Some related `sensorTypesByCalGasId` exist."""
  sensorTypesByCalGasIdExist: Boolean

  """Filter by the object’s `maintenanceVisitLinesByCalGasId` relation."""
  maintenanceVisitLinesByCalGasId: CalGasToManyMaintenanceVisitLineFilter

  """Some related `maintenanceVisitLinesByCalGasId` exist."""
  maintenanceVisitLinesByCalGasIdExist: Boolean

  """Filter by the object’s `sensorTestResultsByFsCalGasId` relation."""
  sensorTestResultsByFsCalGasId: CalGasToManySensorTestResultFilter

  """Some related `sensorTestResultsByFsCalGasId` exist."""
  sensorTestResultsByFsCalGasIdExist: Boolean

  """Filter by the object’s `gasByGasId` relation."""
  gasByGasId: GasFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [CalGasFilter!]

  """Checks for any expressions in this list."""
  or: [CalGasFilter!]

  """Negates the expression."""
  not: CalGasFilter
}

"""
A filter to be used against Float fields. All fields are combined with a logical ‘and.’
"""
input FloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Float

  """Not equal to the specified value."""
  notEqualTo: Float

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Float

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Float

  """Included in the specified list."""
  in: [Float!]

  """Not included in the specified list."""
  notIn: [Float!]

  """Less than the specified value."""
  lessThan: Float

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Float

  """Greater than the specified value."""
  greaterThan: Float

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Float

  """
  Included in the specified list -unless list is empty in which case this operator is not applied.
  """
  inExpansive: [Float!]
}

"""
A filter to be used against many `SensorType` object types. All fields are combined with a logical ‘and.’
"""
input CalGasToManySensorTypeFilter {
  """
  Every related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorTypeFilter

  """
  Some related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorTypeFilter

  """
  No related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorTypeFilter
}

"""
A filter to be used against `SensorType` object types. All fields are combined with a logical ‘and.’
"""
input SensorTypeFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `sensorTypeId` field."""
  sensorTypeId: IntFilter

  """Filter by the object’s `electrolyteId` field."""
  electrolyteId: IntFilter

  """Filter by the object’s `membraneId` field."""
  membraneId: IntFilter

  """Filter by the object’s `oRingId` field."""
  oRingId: IntFilter

  """Filter by the object’s `pyrolyserId` field."""
  pyrolyserId: IntFilter

  """Filter by the object’s `filterId` field."""
  filterId: IntFilter

  """Filter by the object’s `battery` field."""
  battery: BooleanFilter

  """Filter by the object’s `restrictor` field."""
  restrictor: BooleanFilter

  """Filter by the object’s `membraneSeal` field."""
  membraneSeal: BooleanFilter

  """Filter by the object’s `rangeId` field."""
  rangeId: IntFilter

  """Filter by the object’s `flowRate` field."""
  flowRate: FloatFilter

  """Filter by the object’s `calFlowRate` field."""
  calFlowRate: FloatFilter

  """Filter by the object’s `code` field."""
  code: StringFilter

  """Filter by the object’s `obsolete` field."""
  obsolete: BooleanFilter

  """Filter by the object’s `pyrolyserVoltage` field."""
  pyrolyserVoltage: FloatFilter

  """Filter by the object’s `principleId` field."""
  principleId: IntFilter

  """Filter by the object’s `sensorBaseTypeId` field."""
  sensorBaseTypeId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `model` field."""
  model: StringFilter

  """Filter by the object’s `calGasId` field."""
  calGasId: IntFilter

  """Filter by the object’s `siliconeSheet` field."""
  siliconeSheet: BooleanFilter

  """Filter by the object’s `elementCount` field."""
  elementCount: IntFilter

  """Filter by the object’s `maintenanceIntervalMonths` field."""
  maintenanceIntervalMonths: IntFilter

  """Filter by the object’s `replacementIntervalMonths` field."""
  replacementIntervalMonths: IntFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `volume` field."""
  volume: IntFilter

  """Filter by the object’s `calResponse` field."""
  calResponse: FloatFilter

  """Filter by the object’s `electrodeCount` field."""
  electrodeCount: IntFilter

  """Filter by the object’s `biasMv` field."""
  biasMv: IntFilter

  """Filter by the object’s `direction` field."""
  direction: BooleanFilter

  """Filter by the object’s `lowElectrolyte` field."""
  lowElectrolyte: BooleanFilter

  """Filter by the object’s `spanResistor` field."""
  spanResistor: BigFloatFilter

  """Filter by the object’s `plugId` field."""
  plugId: IntFilter

  """Filter by the object’s `transportSwitch` field."""
  transportSwitch: BooleanFilter

  """Filter by the object’s `fullType` field."""
  fullType: StringFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `sensorsBySensorTypeId` relation."""
  sensorsBySensorTypeId: SensorTypeToManySensorFilter

  """Some related `sensorsBySensorTypeId` exist."""
  sensorsBySensorTypeIdExist: Boolean

  """Filter by the object’s `detectorSensorTypesBySensorTypeId` relation."""
  detectorSensorTypesBySensorTypeId: SensorTypeToManyDetectorSensorTypeFilter

  """Some related `detectorSensorTypesBySensorTypeId` exist."""
  detectorSensorTypesBySensorTypeIdExist: Boolean

  """Filter by the object’s `electrolyteByElectrolyteId` relation."""
  electrolyteByElectrolyteId: ElectrolyteFilter

  """A related `electrolyteByElectrolyteId` exists."""
  electrolyteByElectrolyteIdExists: Boolean

  """Filter by the object’s `membraneByMembraneId` relation."""
  membraneByMembraneId: MembraneFilter

  """A related `membraneByMembraneId` exists."""
  membraneByMembraneIdExists: Boolean

  """Filter by the object’s `oRingByORingId` relation."""
  oRingByORingId: ORingFilter

  """A related `oRingByORingId` exists."""
  oRingByORingIdExists: Boolean

  """Filter by the object’s `pyrolyserByPyrolyserId` relation."""
  pyrolyserByPyrolyserId: PyrolyserFilter

  """A related `pyrolyserByPyrolyserId` exists."""
  pyrolyserByPyrolyserIdExists: Boolean

  """Filter by the object’s `filterByFilterId` relation."""
  filterByFilterId: FilterFilter

  """A related `filterByFilterId` exists."""
  filterByFilterIdExists: Boolean

  """Filter by the object’s `rangeByRangeId` relation."""
  rangeByRangeId: RangeFilter

  """Filter by the object’s `sensorBaseTypeBySensorBaseTypeId` relation."""
  sensorBaseTypeBySensorBaseTypeId: SensorBaseTypeFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Filter by the object’s `calGasByCalGasId` relation."""
  calGasByCalGasId: CalGasFilter

  """Filter by the object’s `plugByPlugId` relation."""
  plugByPlugId: PlugFilter

  """A related `plugByPlugId` exists."""
  plugByPlugIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [SensorTypeFilter!]

  """Checks for any expressions in this list."""
  or: [SensorTypeFilter!]

  """Negates the expression."""
  not: SensorTypeFilter
}

"""
A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’
"""
input BigFloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigFloat

  """Not equal to the specified value."""
  notEqualTo: BigFloat

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigFloat

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigFloat

  """Included in the specified list."""
  in: [BigFloat!]

  """Not included in the specified list."""
  notIn: [BigFloat!]

  """Less than the specified value."""
  lessThan: BigFloat

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigFloat

  """Greater than the specified value."""
  greaterThan: BigFloat

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigFloat

  """
  Included in the specified list -unless list is empty in which case this operator is not applied.
  """
  inExpansive: [BigFloat!]
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A filter to be used against many `Sensor` object types. All fields are combined with a logical ‘and.’
"""
input SensorTypeToManySensorFilter {
  """
  Every related `Sensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorFilter

  """
  Some related `Sensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorFilter

  """
  No related `Sensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorFilter
}

"""
A filter to be used against `Sensor` object types. All fields are combined with a logical ‘and.’
"""
input SensorFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `serialNumber` field."""
  serialNumber: StringFilter

  """Filter by the object’s `labelDate` field."""
  labelDate: DateFilter

  """Filter by the object’s `remarks` field."""
  remarks: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `sensorTypeId` field."""
  sensorTypeId: IntFilter

  """Filter by the object’s `detectorSensorBySensorId` relation."""
  detectorSensorBySensorId: DetectorSensorFilter

  """A related `detectorSensorBySensorId` exists."""
  detectorSensorBySensorIdExists: Boolean

  """Filter by the object’s `maintenanceVisitLinesBySensorId` relation."""
  maintenanceVisitLinesBySensorId: SensorToManyMaintenanceVisitLineFilter

  """Some related `maintenanceVisitLinesBySensorId` exist."""
  maintenanceVisitLinesBySensorIdExist: Boolean

  """
  Filter by the object’s `maintenanceVisitLinesByOriginalSensorId` relation.
  """
  maintenanceVisitLinesByOriginalSensorId: SensorToManyMaintenanceVisitLineFilter

  """Some related `maintenanceVisitLinesByOriginalSensorId` exist."""
  maintenanceVisitLinesByOriginalSensorIdExist: Boolean

  """Filter by the object’s `reportSensorsBySensorId` relation."""
  reportSensorsBySensorId: SensorToManyReportSensorFilter

  """Some related `reportSensorsBySensorId` exist."""
  reportSensorsBySensorIdExist: Boolean

  """Filter by the object’s `sensorElementLogsBySensorId` relation."""
  sensorElementLogsBySensorId: SensorToManySensorElementLogFilter

  """Some related `sensorElementLogsBySensorId` exist."""
  sensorElementLogsBySensorIdExist: Boolean

  """Filter by the object’s `sensorOrdersBySensorId` relation."""
  sensorOrdersBySensorId: SensorToManySensorOrderFilter

  """Some related `sensorOrdersBySensorId` exist."""
  sensorOrdersBySensorIdExist: Boolean

  """Filter by the object’s `sensorSensorElementsBySensorId` relation."""
  sensorSensorElementsBySensorId: SensorToManySensorSensorElementFilter

  """Some related `sensorSensorElementsBySensorId` exist."""
  sensorSensorElementsBySensorIdExist: Boolean

  """Filter by the object’s `sensorTestResultsBySensorId` relation."""
  sensorTestResultsBySensorId: SensorToManySensorTestResultFilter

  """Some related `sensorTestResultsBySensorId` exist."""
  sensorTestResultsBySensorIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Filter by the object’s `sensorTypeBySensorTypeId` relation."""
  sensorTypeBySensorTypeId: SensorTypeFilter

  """Checks for all expressions in this list."""
  and: [SensorFilter!]

  """Checks for any expressions in this list."""
  or: [SensorFilter!]

  """Negates the expression."""
  not: SensorFilter
}

"""
A filter to be used against Date fields. All fields are combined with a logical ‘and.’
"""
input DateFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Date

  """Not equal to the specified value."""
  notEqualTo: Date

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Date

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Date

  """Included in the specified list."""
  in: [Date!]

  """Not included in the specified list."""
  notIn: [Date!]

  """Less than the specified value."""
  lessThan: Date

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Date

  """Greater than the specified value."""
  greaterThan: Date

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Date

  """
  Included in the specified list -unless list is empty in which case this operator is not applied.
  """
  inExpansive: [Date!]
}

"""
A filter to be used against `DetectorSensor` object types. All fields are combined with a logical ‘and.’
"""
input DetectorSensorFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `detectorId` field."""
  detectorId: IntFilter

  """Filter by the object’s `detectorPosition` field."""
  detectorPosition: IntFilter

  """Filter by the object’s `sensorId` field."""
  sensorId: IntFilter

  """Filter by the object’s `filterId` field."""
  filterId: IntFilter

  """Filter by the object’s `_filterLabelDate` field."""
  _filterLabelDate: DateFilter

  """Filter by the object’s `pyrolyserId` field."""
  pyrolyserId: IntFilter

  """Filter by the object’s `_pyrolyserLabelDate` field."""
  _pyrolyserLabelDate: DateFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """
  Filter by the object’s `detectorSensorLocationByDetectorSensorId` relation.
  """
  detectorSensorLocationByDetectorSensorId: DetectorSensorLocationFilter

  """A related `detectorSensorLocationByDetectorSensorId` exists."""
  detectorSensorLocationByDetectorSensorIdExists: Boolean

  """
  Filter by the object’s `maintenanceVisitLinesByDetectorSensorId` relation.
  """
  maintenanceVisitLinesByDetectorSensorId: DetectorSensorToManyMaintenanceVisitLineFilter

  """Some related `maintenanceVisitLinesByDetectorSensorId` exist."""
  maintenanceVisitLinesByDetectorSensorIdExist: Boolean

  """Filter by the object’s `detectorByDetectorId` relation."""
  detectorByDetectorId: DetectorFilter

  """Filter by the object’s `sensorBySensorId` relation."""
  sensorBySensorId: SensorFilter

  """A related `sensorBySensorId` exists."""
  sensorBySensorIdExists: Boolean

  """Filter by the object’s `filterByFilterId` relation."""
  filterByFilterId: FilterFilter

  """A related `filterByFilterId` exists."""
  filterByFilterIdExists: Boolean

  """Filter by the object’s `pyrolyserByPyrolyserId` relation."""
  pyrolyserByPyrolyserId: PyrolyserFilter

  """A related `pyrolyserByPyrolyserId` exists."""
  pyrolyserByPyrolyserIdExists: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [DetectorSensorFilter!]

  """Checks for any expressions in this list."""
  or: [DetectorSensorFilter!]

  """Negates the expression."""
  not: DetectorSensorFilter
}

"""
A filter to be used against `DetectorSensorLocation` object types. All fields are combined with a logical ‘and.’
"""
input DetectorSensorLocationFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `detectorSensorId` field."""
  detectorSensorId: IntFilter

  """Filter by the object’s `detectorLocationId` field."""
  detectorLocationId: IntFilter

  """Filter by the object’s `sensorReplacementIntervalMonths` field."""
  sensorReplacementIntervalMonths: IntFilter

  """Filter by the object’s `sensorMaintenanceIntervalMonths` field."""
  sensorMaintenanceIntervalMonths: IntFilter

  """Filter by the object’s `filterReplacementIntervalMonths` field."""
  filterReplacementIntervalMonths: IntFilter

  """Filter by the object’s `pyrolyserReplacementIntervalMonths` field."""
  pyrolyserReplacementIntervalMonths: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `samplePointId` field."""
  samplePointId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `simsChannel` field."""
  simsChannel: IntFilter

  """Filter by the object’s `licenseId` field."""
  licenseId: IntFilter

  """Filter by the object’s `simsTag` field."""
  simsTag: StringFilter

  """Filter by the object’s `remarks` field."""
  remarks: StringFilter

  """Filter by the object’s `calcFilterReplacementInterval` field."""
  calcFilterReplacementInterval: IntervalFilter

  """Filter by the object’s `calcPyrolyserReplacementInterval` field."""
  calcPyrolyserReplacementInterval: IntervalFilter

  """Filter by the object’s `calcSensorMaintenanceInterval` field."""
  calcSensorMaintenanceInterval: IntervalFilter

  """Filter by the object’s `calcSensorReplacementInterval` field."""
  calcSensorReplacementInterval: IntervalFilter

  """Filter by the object’s `filterReplacementDueDate` field."""
  filterReplacementDueDate: DateFilter

  """Filter by the object’s `pyrolyserReplacementDueDate` field."""
  pyrolyserReplacementDueDate: DateFilter

  """Filter by the object’s `sensorMaintenanceDueDate` field."""
  sensorMaintenanceDueDate: DateFilter

  """Filter by the object’s `sensorReplacementDueDate` field."""
  sensorReplacementDueDate: DateFilter

  """
  Filter by the object’s `maintenanceVisitLinesByDetectorSensorLocationId` relation.
  """
  maintenanceVisitLinesByDetectorSensorLocationId: DetectorSensorLocationToManyMaintenanceVisitLineFilter

  """Some related `maintenanceVisitLinesByDetectorSensorLocationId` exist."""
  maintenanceVisitLinesByDetectorSensorLocationIdExist: Boolean

  """
  Filter by the object’s `sensorElementLocationsByDetectorSensorLocationId` relation.
  """
  sensorElementLocationsByDetectorSensorLocationId: DetectorSensorLocationToManySensorElementLocationFilter

  """Some related `sensorElementLocationsByDetectorSensorLocationId` exist."""
  sensorElementLocationsByDetectorSensorLocationIdExist: Boolean

  """Filter by the object’s `detectorSensorByDetectorSensorId` relation."""
  detectorSensorByDetectorSensorId: DetectorSensorFilter

  """
  Filter by the object’s `detectorLocationByDetectorLocationId` relation.
  """
  detectorLocationByDetectorLocationId: DetectorLocationFilter

  """A related `detectorLocationByDetectorLocationId` exists."""
  detectorLocationByDetectorLocationIdExists: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Filter by the object’s `samplePointBySamplePointId` relation."""
  samplePointBySamplePointId: SamplePointFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `licenseByLicenseId` relation."""
  licenseByLicenseId: LicenseFilter

  """A related `licenseByLicenseId` exists."""
  licenseByLicenseIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [DetectorSensorLocationFilter!]

  """Checks for any expressions in this list."""
  or: [DetectorSensorLocationFilter!]

  """Negates the expression."""
  not: DetectorSensorLocationFilter
}

"""
A filter to be used against Interval fields. All fields are combined with a logical ‘and.’
"""
input IntervalFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: IntervalInput

  """Not equal to the specified value."""
  notEqualTo: IntervalInput

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: IntervalInput

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: IntervalInput

  """Included in the specified list."""
  in: [IntervalInput!]

  """Not included in the specified list."""
  notIn: [IntervalInput!]

  """Less than the specified value."""
  lessThan: IntervalInput

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: IntervalInput

  """Greater than the specified value."""
  greaterThan: IntervalInput

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: IntervalInput

  """
  Included in the specified list -unless list is empty in which case this operator is not applied.
  """
  inExpansive: [IntervalInput!]
}

"""
An interval of time that has passed where the smallest distinct unit is a second.
"""
input IntervalInput {
  """
  A quantity of seconds. This is the only non-integer field, as all the other
  fields will dump their overflow into a smaller unit of time. Intervals don’t
  have a smaller unit than seconds.
  """
  seconds: Float

  """A quantity of minutes."""
  minutes: Int

  """A quantity of hours."""
  hours: Int

  """A quantity of days."""
  days: Int

  """A quantity of months."""
  months: Int

  """A quantity of years."""
  years: Int
}

"""
A filter to be used against many `MaintenanceVisitLine` object types. All fields are combined with a logical ‘and.’
"""
input DetectorSensorLocationToManyMaintenanceVisitLineFilter {
  """
  Every related `MaintenanceVisitLine` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MaintenanceVisitLineFilter

  """
  Some related `MaintenanceVisitLine` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MaintenanceVisitLineFilter

  """
  No related `MaintenanceVisitLine` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MaintenanceVisitLineFilter
}

"""
A filter to be used against `MaintenanceVisitLine` object types. All fields are combined with a logical ‘and.’
"""
input MaintenanceVisitLineFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `maintenanceVisitId` field."""
  maintenanceVisitId: IntFilter

  """Filter by the object’s `detectorSensorLocationId` field."""
  detectorSensorLocationId: IntFilter

  """Filter by the object’s `dateOld` field."""
  dateOld: DateFilter

  """Filter by the object’s `remarkLine` field."""
  remarkLine: IntFilter

  """Filter by the object’s `day` field."""
  day: IntFilter

  """Filter by the object’s `success` field."""
  success: BooleanFilter

  """Filter by the object’s `detectorSensorId` field."""
  detectorSensorId: IntFilter

  """Filter by the object’s `sensorId` field."""
  sensorId: IntFilter

  """Filter by the object’s `originalSensorId` field."""
  originalSensorId: IntFilter

  """Filter by the object’s `concentration` field."""
  concentration: FloatFilter

  """Filter by the object’s `calGasId` field."""
  calGasId: IntFilter

  """Filter by the object’s `preResponse` field."""
  preResponse: FloatFilter

  """Filter by the object’s `response` field."""
  response: FloatFilter

  """Filter by the object’s `spanSuccess` field."""
  spanSuccess: BooleanFilter

  """Filter by the object’s `zeroSuccess` field."""
  zeroSuccess: BooleanFilter

  """Filter by the object’s `filterId` field."""
  filterId: IntFilter

  """Filter by the object’s `pyrolyserId` field."""
  pyrolyserId: IntFilter

  """Filter by the object’s `sensorMaintenanceDueDate` field."""
  sensorMaintenanceDueDate: DateFilter

  """Filter by the object’s `sensorInstallDueDate` field."""
  sensorInstallDueDate: DateFilter

  """Filter by the object’s `filterInstallDueDate` field."""
  filterInstallDueDate: DateFilter

  """Filter by the object’s `pyrolyserInstallDueDate` field."""
  pyrolyserInstallDueDate: DateFilter

  """
  Filter by the object’s `maintenanceVisitByMaintenanceVisitId` relation.
  """
  maintenanceVisitByMaintenanceVisitId: MaintenanceVisitFilter

  """
  Filter by the object’s `detectorSensorLocationByDetectorSensorLocationId` relation.
  """
  detectorSensorLocationByDetectorSensorLocationId: DetectorSensorLocationFilter

  """Filter by the object’s `detectorSensorByDetectorSensorId` relation."""
  detectorSensorByDetectorSensorId: DetectorSensorFilter

  """A related `detectorSensorByDetectorSensorId` exists."""
  detectorSensorByDetectorSensorIdExists: Boolean

  """Filter by the object’s `sensorBySensorId` relation."""
  sensorBySensorId: SensorFilter

  """A related `sensorBySensorId` exists."""
  sensorBySensorIdExists: Boolean

  """Filter by the object’s `sensorByOriginalSensorId` relation."""
  sensorByOriginalSensorId: SensorFilter

  """A related `sensorByOriginalSensorId` exists."""
  sensorByOriginalSensorIdExists: Boolean

  """Filter by the object’s `calGasByCalGasId` relation."""
  calGasByCalGasId: CalGasFilter

  """A related `calGasByCalGasId` exists."""
  calGasByCalGasIdExists: Boolean

  """Filter by the object’s `filterByFilterId` relation."""
  filterByFilterId: FilterFilter

  """A related `filterByFilterId` exists."""
  filterByFilterIdExists: Boolean

  """Filter by the object’s `pyrolyserByPyrolyserId` relation."""
  pyrolyserByPyrolyserId: PyrolyserFilter

  """A related `pyrolyserByPyrolyserId` exists."""
  pyrolyserByPyrolyserIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [MaintenanceVisitLineFilter!]

  """Checks for any expressions in this list."""
  or: [MaintenanceVisitLineFilter!]

  """Negates the expression."""
  not: MaintenanceVisitLineFilter
}

"""
A filter to be used against `MaintenanceVisit` object types. All fields are combined with a logical ‘and.’
"""
input MaintenanceVisitFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `endUserId` field."""
  endUserId: IntFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `date` field."""
  date: DateFilter

  """Filter by the object’s `duration` field."""
  duration: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `checked` field."""
  checked: BooleanFilter

  """Filter by the object’s `contactName` field."""
  contactName: StringFilter

  """Filter by the object’s `contactEmail` field."""
  contactEmail: StringFilter

  """Filter by the object’s `labourHours` field."""
  labourHours: BigFloatFilter

  """Filter by the object’s `locked` field."""
  locked: BooleanFilter

  """Filter by the object’s `contactPhone` field."""
  contactPhone: StringFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """
  Filter by the object’s `maintenanceVisitLinesByMaintenanceVisitId` relation.
  """
  maintenanceVisitLinesByMaintenanceVisitId: MaintenanceVisitToManyMaintenanceVisitLineFilter

  """Some related `maintenanceVisitLinesByMaintenanceVisitId` exist."""
  maintenanceVisitLinesByMaintenanceVisitIdExist: Boolean

  """
  Filter by the object’s `maintenanceVisitRemarksByMaintenanceVisitId` relation.
  """
  maintenanceVisitRemarksByMaintenanceVisitId: MaintenanceVisitToManyMaintenanceVisitRemarkFilter

  """Some related `maintenanceVisitRemarksByMaintenanceVisitId` exist."""
  maintenanceVisitRemarksByMaintenanceVisitIdExist: Boolean

  """Filter by the object’s `endUserByEndUserId` relation."""
  endUserByEndUserId: EndUserFilter

  """Filter by the object’s `userByUserId` relation."""
  userByUserId: UserFilter

  """A related `userByUserId` exists."""
  userByUserIdExists: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [MaintenanceVisitFilter!]

  """Checks for any expressions in this list."""
  or: [MaintenanceVisitFilter!]

  """Negates the expression."""
  not: MaintenanceVisitFilter
}

"""
A filter to be used against many `MaintenanceVisitLine` object types. All fields are combined with a logical ‘and.’
"""
input MaintenanceVisitToManyMaintenanceVisitLineFilter {
  """
  Every related `MaintenanceVisitLine` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MaintenanceVisitLineFilter

  """
  Some related `MaintenanceVisitLine` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MaintenanceVisitLineFilter

  """
  No related `MaintenanceVisitLine` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MaintenanceVisitLineFilter
}

"""
A filter to be used against many `MaintenanceVisitRemark` object types. All fields are combined with a logical ‘and.’
"""
input MaintenanceVisitToManyMaintenanceVisitRemarkFilter {
  """
  Every related `MaintenanceVisitRemark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MaintenanceVisitRemarkFilter

  """
  Some related `MaintenanceVisitRemark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MaintenanceVisitRemarkFilter

  """
  No related `MaintenanceVisitRemark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MaintenanceVisitRemarkFilter
}

"""
A filter to be used against `MaintenanceVisitRemark` object types. All fields are combined with a logical ‘and.’
"""
input MaintenanceVisitRemarkFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `maintenanceVisitId` field."""
  maintenanceVisitId: IntFilter

  """Filter by the object’s `line` field."""
  line: IntFilter

  """Filter by the object’s `remarks` field."""
  remarks: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `aantal` field."""
  aantal: BigFloatFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `followUp` field."""
  followUp: StringFilter

  """
  Filter by the object’s `maintenanceVisitByMaintenanceVisitId` relation.
  """
  maintenanceVisitByMaintenanceVisitId: MaintenanceVisitFilter

  """Checks for all expressions in this list."""
  and: [MaintenanceVisitRemarkFilter!]

  """Checks for any expressions in this list."""
  or: [MaintenanceVisitRemarkFilter!]

  """Negates the expression."""
  not: MaintenanceVisitRemarkFilter
}

"""
A filter to be used against `EndUser` object types. All fields are combined with a logical ‘and.’
"""
input EndUserFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `address1` field."""
  address1: StringFilter

  """Filter by the object’s `city` field."""
  city: StringFilter

  """Filter by the object’s `country` field."""
  country: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `formerName1` field."""
  formerName1: StringFilter

  """Filter by the object’s `formerName2` field."""
  formerName2: StringFilter

  """Filter by the object’s `address2` field."""
  address2: StringFilter

  """Filter by the object’s `zipCode` field."""
  zipCode: StringFilter

  """Filter by the object’s `region` field."""
  region: StringFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `subLocation` field."""
  subLocation: StringFilter

  """Filter by the object’s `location` field."""
  location: StringFilter

  """Filter by the object’s `contactName` field."""
  contactName: StringFilter

  """Filter by the object’s `contactEmail` field."""
  contactEmail: StringFilter

  """Filter by the object’s `contactPhone` field."""
  contactPhone: StringFilter

  """Filter by the object’s `buildingsByEndUserId` relation."""
  buildingsByEndUserId: EndUserToManyBuildingFilter

  """Some related `buildingsByEndUserId` exist."""
  buildingsByEndUserIdExist: Boolean

  """Filter by the object’s `maintenanceVisitsByEndUserId` relation."""
  maintenanceVisitsByEndUserId: EndUserToManyMaintenanceVisitFilter

  """Some related `maintenanceVisitsByEndUserId` exist."""
  maintenanceVisitsByEndUserIdExist: Boolean

  """Filter by the object’s `itemsByEndUserId` relation."""
  itemsByEndUserId: EndUserToManyItemFilter

  """Some related `itemsByEndUserId` exist."""
  itemsByEndUserIdExist: Boolean

  """Filter by the object’s `jobsByEndUserId` relation."""
  jobsByEndUserId: EndUserToManyJobFilter

  """Some related `jobsByEndUserId` exist."""
  jobsByEndUserIdExist: Boolean

  """Filter by the object’s `licensesByEndUserId` relation."""
  licensesByEndUserId: EndUserToManyLicenseFilter

  """Some related `licensesByEndUserId` exist."""
  licensesByEndUserIdExist: Boolean

  """Filter by the object’s `reportsByEndUserId` relation."""
  reportsByEndUserId: EndUserToManyReportFilter

  """Some related `reportsByEndUserId` exist."""
  reportsByEndUserIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [EndUserFilter!]

  """Checks for any expressions in this list."""
  or: [EndUserFilter!]

  """Negates the expression."""
  not: EndUserFilter
}

"""
A filter to be used against many `Building` object types. All fields are combined with a logical ‘and.’
"""
input EndUserToManyBuildingFilter {
  """
  Every related `Building` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: BuildingFilter

  """
  Some related `Building` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: BuildingFilter

  """
  No related `Building` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: BuildingFilter
}

"""
A filter to be used against `Building` object types. All fields are combined with a logical ‘and.’
"""
input BuildingFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `endUserId` field."""
  endUserId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `floorsByBuildingId` relation."""
  floorsByBuildingId: BuildingToManyFloorFilter

  """Some related `floorsByBuildingId` exist."""
  floorsByBuildingIdExist: Boolean

  """Filter by the object’s `endUserByEndUserId` relation."""
  endUserByEndUserId: EndUserFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [BuildingFilter!]

  """Checks for any expressions in this list."""
  or: [BuildingFilter!]

  """Negates the expression."""
  not: BuildingFilter
}

"""
A filter to be used against many `Floor` object types. All fields are combined with a logical ‘and.’
"""
input BuildingToManyFloorFilter {
  """
  Every related `Floor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FloorFilter

  """
  Some related `Floor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FloorFilter

  """
  No related `Floor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FloorFilter
}

"""
A filter to be used against `Floor` object types. All fields are combined with a logical ‘and.’
"""
input FloorFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `buildingId` field."""
  buildingId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `areasByFloorId` relation."""
  areasByFloorId: FloorToManyAreaFilter

  """Some related `areasByFloorId` exist."""
  areasByFloorIdExist: Boolean

  """Filter by the object’s `buildingByBuildingId` relation."""
  buildingByBuildingId: BuildingFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [FloorFilter!]

  """Checks for any expressions in this list."""
  or: [FloorFilter!]

  """Negates the expression."""
  not: FloorFilter
}

"""
A filter to be used against many `Area` object types. All fields are combined with a logical ‘and.’
"""
input FloorToManyAreaFilter {
  """
  Every related `Area` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AreaFilter

  """
  Some related `Area` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AreaFilter

  """
  No related `Area` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AreaFilter
}

"""
A filter to be used against `Area` object types. All fields are combined with a logical ‘and.’
"""
input AreaFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `floorId` field."""
  floorId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `remarks` field."""
  remarks: StringFilter

  """Filter by the object’s `samplePointsByAreaId` relation."""
  samplePointsByAreaId: AreaToManySamplePointFilter

  """Some related `samplePointsByAreaId` exist."""
  samplePointsByAreaIdExist: Boolean

  """Filter by the object’s `detectorLocationsByAreaId` relation."""
  detectorLocationsByAreaId: AreaToManyDetectorLocationFilter

  """Some related `detectorLocationsByAreaId` exist."""
  detectorLocationsByAreaIdExist: Boolean

  """Filter by the object’s `floorByFloorId` relation."""
  floorByFloorId: FloorFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [AreaFilter!]

  """Checks for any expressions in this list."""
  or: [AreaFilter!]

  """Negates the expression."""
  not: AreaFilter
}

"""
A filter to be used against many `SamplePoint` object types. All fields are combined with a logical ‘and.’
"""
input AreaToManySamplePointFilter {
  """
  Every related `SamplePoint` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SamplePointFilter

  """
  Some related `SamplePoint` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SamplePointFilter

  """
  No related `SamplePoint` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SamplePointFilter
}

"""
A filter to be used against `SamplePoint` object types. All fields are combined with a logical ‘and.’
"""
input SamplePointFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `areaId` field."""
  areaId: IntFilter

  """
  Filter by the object’s `detectorSensorLocationsBySamplePointId` relation.
  """
  detectorSensorLocationsBySamplePointId: SamplePointToManyDetectorSensorLocationFilter

  """Some related `detectorSensorLocationsBySamplePointId` exist."""
  detectorSensorLocationsBySamplePointIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Filter by the object’s `areaByAreaId` relation."""
  areaByAreaId: AreaFilter

  """Checks for all expressions in this list."""
  and: [SamplePointFilter!]

  """Checks for any expressions in this list."""
  or: [SamplePointFilter!]

  """Negates the expression."""
  not: SamplePointFilter
}

"""
A filter to be used against many `DetectorSensorLocation` object types. All fields are combined with a logical ‘and.’
"""
input SamplePointToManyDetectorSensorLocationFilter {
  """
  Every related `DetectorSensorLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DetectorSensorLocationFilter

  """
  Some related `DetectorSensorLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DetectorSensorLocationFilter

  """
  No related `DetectorSensorLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DetectorSensorLocationFilter
}

"""
A filter to be used against many `DetectorLocation` object types. All fields are combined with a logical ‘and.’
"""
input AreaToManyDetectorLocationFilter {
  """
  Every related `DetectorLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DetectorLocationFilter

  """
  Some related `DetectorLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DetectorLocationFilter

  """
  No related `DetectorLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DetectorLocationFilter
}

"""
A filter to be used against `DetectorLocation` object types. All fields are combined with a logical ‘and.’
"""
input DetectorLocationFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `detectorId` field."""
  detectorId: IntFilter

  """Filter by the object’s `areaId` field."""
  areaId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `address` field."""
  address: IntFilter

  """Filter by the object’s `bus` field."""
  bus: IntFilter

  """
  Filter by the object’s `detectorSensorLocationsByDetectorLocationId` relation.
  """
  detectorSensorLocationsByDetectorLocationId: DetectorLocationToManyDetectorSensorLocationFilter

  """Some related `detectorSensorLocationsByDetectorLocationId` exist."""
  detectorSensorLocationsByDetectorLocationIdExist: Boolean

  """Filter by the object’s `detectorByDetectorId` relation."""
  detectorByDetectorId: DetectorFilter

  """A related `detectorByDetectorId` exists."""
  detectorByDetectorIdExists: Boolean

  """Filter by the object’s `areaByAreaId` relation."""
  areaByAreaId: AreaFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [DetectorLocationFilter!]

  """Checks for any expressions in this list."""
  or: [DetectorLocationFilter!]

  """Negates the expression."""
  not: DetectorLocationFilter
}

"""
A filter to be used against many `DetectorSensorLocation` object types. All fields are combined with a logical ‘and.’
"""
input DetectorLocationToManyDetectorSensorLocationFilter {
  """
  Every related `DetectorSensorLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DetectorSensorLocationFilter

  """
  Some related `DetectorSensorLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DetectorSensorLocationFilter

  """
  No related `DetectorSensorLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DetectorSensorLocationFilter
}

"""
A filter to be used against `Detector` object types. All fields are combined with a logical ‘and.’
"""
input DetectorFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `detectorTypeId` field."""
  detectorTypeId: IntFilter

  """Filter by the object’s `serialNumber` field."""
  serialNumber: StringFilter

  """Filter by the object’s `labelDate` field."""
  labelDate: DateFilter

  """Filter by the object’s `remarks` field."""
  remarks: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `detectorSensorsByDetectorId` relation."""
  detectorSensorsByDetectorId: DetectorToManyDetectorSensorFilter

  """Some related `detectorSensorsByDetectorId` exist."""
  detectorSensorsByDetectorIdExist: Boolean

  """Filter by the object’s `detectorLocationByDetectorId` relation."""
  detectorLocationByDetectorId: DetectorLocationFilter

  """A related `detectorLocationByDetectorId` exists."""
  detectorLocationByDetectorIdExists: Boolean

  """Filter by the object’s `detectorOrdersByDetectorId` relation."""
  detectorOrdersByDetectorId: DetectorToManyDetectorOrderFilter

  """Some related `detectorOrdersByDetectorId` exist."""
  detectorOrdersByDetectorIdExist: Boolean

  """Filter by the object’s `reportDetectorsByDetectorId` relation."""
  reportDetectorsByDetectorId: DetectorToManyReportDetectorFilter

  """Some related `reportDetectorsByDetectorId` exist."""
  reportDetectorsByDetectorIdExist: Boolean

  """Filter by the object’s `detectorTypeByDetectorTypeId` relation."""
  detectorTypeByDetectorTypeId: DetectorTypeFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [DetectorFilter!]

  """Checks for any expressions in this list."""
  or: [DetectorFilter!]

  """Negates the expression."""
  not: DetectorFilter
}

"""
A filter to be used against many `DetectorSensor` object types. All fields are combined with a logical ‘and.’
"""
input DetectorToManyDetectorSensorFilter {
  """
  Every related `DetectorSensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DetectorSensorFilter

  """
  Some related `DetectorSensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DetectorSensorFilter

  """
  No related `DetectorSensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DetectorSensorFilter
}

"""
A filter to be used against many `DetectorOrder` object types. All fields are combined with a logical ‘and.’
"""
input DetectorToManyDetectorOrderFilter {
  """
  Every related `DetectorOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DetectorOrderFilter

  """
  Some related `DetectorOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DetectorOrderFilter

  """
  No related `DetectorOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DetectorOrderFilter
}

"""
A filter to be used against `DetectorOrder` object types. All fields are combined with a logical ‘and.’
"""
input DetectorOrderFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `detectorId` field."""
  detectorId: IntFilter

  """Filter by the object’s `completed` field."""
  completed: BooleanFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `detectorByDetectorId` relation."""
  detectorByDetectorId: DetectorFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [DetectorOrderFilter!]

  """Checks for any expressions in this list."""
  or: [DetectorOrderFilter!]

  """Negates the expression."""
  not: DetectorOrderFilter
}

"""
A filter to be used against many `ReportDetector` object types. All fields are combined with a logical ‘and.’
"""
input DetectorToManyReportDetectorFilter {
  """
  Every related `ReportDetector` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ReportDetectorFilter

  """
  Some related `ReportDetector` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ReportDetectorFilter

  """
  No related `ReportDetector` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ReportDetectorFilter
}

"""
A filter to be used against `ReportDetector` object types. All fields are combined with a logical ‘and.’
"""
input ReportDetectorFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `detectorId` field."""
  detectorId: IntFilter

  """Filter by the object’s `reportByReportId` relation."""
  reportByReportId: ReportFilter

  """A related `reportByReportId` exists."""
  reportByReportIdExists: Boolean

  """Filter by the object’s `detectorByDetectorId` relation."""
  detectorByDetectorId: DetectorFilter

  """A related `detectorByDetectorId` exists."""
  detectorByDetectorIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [ReportDetectorFilter!]

  """Checks for any expressions in this list."""
  or: [ReportDetectorFilter!]

  """Negates the expression."""
  not: ReportDetectorFilter
}

"""
A filter to be used against `Report` object types. All fields are combined with a logical ‘and.’
"""
input ReportFilter {
  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `remarks` field."""
  remarks: StringFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `endUserId` field."""
  endUserId: IntFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `date` field."""
  date: DateFilter

  """Filter by the object’s `startup` field."""
  startup: BooleanFilter

  """Filter by the object’s `maintenance` field."""
  maintenance: BooleanFilter

  """Filter by the object’s `repair` field."""
  repair: BooleanFilter

  """Filter by the object’s `extraWork` field."""
  extraWork: BooleanFilter

  """Filter by the object’s `other` field."""
  other: BooleanFilter

  """Filter by the object’s `filename` field."""
  filename: StringFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `closedOld` field."""
  closedOld: BooleanFilter

  """Filter by the object’s `tsrNumber` field."""
  tsrNumber: StringFilter

  """Filter by the object’s `closed` field."""
  closed: BooleanFilter

  """Filter by the object’s `checkedTechcentre` field."""
  checkedTechcentre: BooleanFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `version` field."""
  version: StringFilter

  """Filter by the object’s `destroyed` field."""
  destroyed: BooleanFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `actionsByReportId` relation."""
  actionsByReportId: ReportToManyActionFilter

  """Some related `actionsByReportId` exist."""
  actionsByReportIdExist: Boolean

  """Filter by the object’s `reportDetectorsByReportId` relation."""
  reportDetectorsByReportId: ReportToManyReportDetectorFilter

  """Some related `reportDetectorsByReportId` exist."""
  reportDetectorsByReportIdExist: Boolean

  """Filter by the object’s `reportItemsByReportId` relation."""
  reportItemsByReportId: ReportToManyReportItemFilter

  """Some related `reportItemsByReportId` exist."""
  reportItemsByReportIdExist: Boolean

  """Filter by the object’s `reportSensorsByReportId` relation."""
  reportSensorsByReportId: ReportToManyReportSensorFilter

  """Some related `reportSensorsByReportId` exist."""
  reportSensorsByReportIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Filter by the object’s `endUserByEndUserId` relation."""
  endUserByEndUserId: EndUserFilter

  """A related `endUserByEndUserId` exists."""
  endUserByEndUserIdExists: Boolean

  """Filter by the object’s `userByUserId` relation."""
  userByUserId: UserFilter

  """Checks for all expressions in this list."""
  and: [ReportFilter!]

  """Checks for any expressions in this list."""
  or: [ReportFilter!]

  """Negates the expression."""
  not: ReportFilter
}

"""
A filter to be used against many `Action` object types. All fields are combined with a logical ‘and.’
"""
input ReportToManyActionFilter {
  """
  Every related `Action` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ActionFilter

  """
  Some related `Action` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ActionFilter

  """
  No related `Action` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ActionFilter
}

"""
A filter to be used against `Action` object types. All fields are combined with a logical ‘and.’
"""
input ActionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `action` field."""
  action: StringFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `groupId` field."""
  groupId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `closed` field."""
  closed: BooleanFilter

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `date` field."""
  date: DateFilter

  """Filter by the object’s `followUp` field."""
  followUp: StringFilter

  """Filter by the object’s `endUserId` field."""
  endUserId: IntFilter

  """Filter by the object’s `userByUserId` relation."""
  userByUserId: UserFilter

  """A related `userByUserId` exists."""
  userByUserIdExists: Boolean

  """Filter by the object’s `groupByGroupId` relation."""
  groupByGroupId: GroupFilter

  """A related `groupByGroupId` exists."""
  groupByGroupIdExists: Boolean

  """Filter by the object’s `reportByReportId` relation."""
  reportByReportId: ReportFilter

  """A related `reportByReportId` exists."""
  reportByReportIdExists: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [ActionFilter!]

  """Checks for any expressions in this list."""
  or: [ActionFilter!]

  """Negates the expression."""
  not: ActionFilter
}

"""
A filter to be used against `Group` object types. All fields are combined with a logical ‘and.’
"""
input GroupFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `usersByGroupId` relation."""
  usersByGroupId: GroupToManyUserFilter

  """Some related `usersByGroupId` exist."""
  usersByGroupIdExist: Boolean

  """Filter by the object’s `actionsByGroupId` relation."""
  actionsByGroupId: GroupToManyActionFilter

  """Some related `actionsByGroupId` exist."""
  actionsByGroupIdExist: Boolean

  """Filter by the object’s `groupPermissionByGroupId` relation."""
  groupPermissionByGroupId: GroupPermissionFilter

  """A related `groupPermissionByGroupId` exists."""
  groupPermissionByGroupIdExists: Boolean

  """Filter by the object’s `groupRightsByGroupId` relation."""
  groupRightsByGroupId: GroupToManyGroupRightFilter

  """Some related `groupRightsByGroupId` exist."""
  groupRightsByGroupIdExist: Boolean

  """Filter by the object’s `usersGroupsByGroupId` relation."""
  usersGroupsByGroupId: GroupToManyUsersGroupFilter

  """Some related `usersGroupsByGroupId` exist."""
  usersGroupsByGroupIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [GroupFilter!]

  """Checks for any expressions in this list."""
  or: [GroupFilter!]

  """Negates the expression."""
  not: GroupFilter
}

"""
A filter to be used against many `User` object types. All fields are combined with a logical ‘and.’
"""
input GroupToManyUserFilter {
  """
  Every related `User` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UserFilter

  """
  Some related `User` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UserFilter

  """
  No related `User` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UserFilter
}

"""
A filter to be used against many `Action` object types. All fields are combined with a logical ‘and.’
"""
input GroupToManyActionFilter {
  """
  Every related `Action` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ActionFilter

  """
  Some related `Action` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ActionFilter

  """
  No related `Action` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ActionFilter
}

"""
A filter to be used against `GroupPermission` object types. All fields are combined with a logical ‘and.’
"""
input GroupPermissionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `writeIds` field."""
  writeIds: IntListFilter

  """Filter by the object’s `readIds` field."""
  readIds: IntListFilter

  """Filter by the object’s `groupId` field."""
  groupId: IntFilter

  """Filter by the object’s `groupByGroupId` relation."""
  groupByGroupId: GroupFilter

  """Checks for all expressions in this list."""
  and: [GroupPermissionFilter!]

  """Checks for any expressions in this list."""
  or: [GroupPermissionFilter!]

  """Negates the expression."""
  not: GroupPermissionFilter
}

"""
A filter to be used against Int List fields. All fields are combined with a logical ‘and.’
"""
input IntListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [Int]

  """Not equal to the specified value."""
  notEqualTo: [Int]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [Int]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [Int]

  """Less than the specified value."""
  lessThan: [Int]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [Int]

  """Greater than the specified value."""
  greaterThan: [Int]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [Int]

  """Contains the specified list of values."""
  contains: [Int]

  """Contained by the specified list of values."""
  containedBy: [Int]

  """Overlaps the specified list of values."""
  overlaps: [Int]

  """Any array item is equal to the specified value."""
  anyEqualTo: Int

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: Int

  """Any array item is less than the specified value."""
  anyLessThan: Int

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: Int

  """Any array item is greater than the specified value."""
  anyGreaterThan: Int

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: Int
}

"""
A filter to be used against many `GroupRight` object types. All fields are combined with a logical ‘and.’
"""
input GroupToManyGroupRightFilter {
  """
  Every related `GroupRight` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: GroupRightFilter

  """
  Some related `GroupRight` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: GroupRightFilter

  """
  No related `GroupRight` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: GroupRightFilter
}

"""
A filter to be used against `GroupRight` object types. All fields are combined with a logical ‘and.’
"""
input GroupRightFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `groupId` field."""
  groupId: IntFilter

  """Filter by the object’s `path` field."""
  path: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `authorized` field."""
  authorized: BooleanFilter

  """Filter by the object’s `groupByGroupId` relation."""
  groupByGroupId: GroupFilter

  """A related `groupByGroupId` exists."""
  groupByGroupIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [GroupRightFilter!]

  """Checks for any expressions in this list."""
  or: [GroupRightFilter!]

  """Negates the expression."""
  not: GroupRightFilter
}

"""
A filter to be used against many `UsersGroup` object types. All fields are combined with a logical ‘and.’
"""
input GroupToManyUsersGroupFilter {
  """
  Every related `UsersGroup` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UsersGroupFilter

  """
  Some related `UsersGroup` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UsersGroupFilter

  """
  No related `UsersGroup` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UsersGroupFilter
}

"""
A filter to be used against `UsersGroup` object types. All fields are combined with a logical ‘and.’
"""
input UsersGroupFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `groupId` field."""
  groupId: IntFilter

  """Filter by the object’s `userByUserId` relation."""
  userByUserId: UserFilter

  """Filter by the object’s `groupByGroupId` relation."""
  groupByGroupId: GroupFilter

  """Checks for all expressions in this list."""
  and: [UsersGroupFilter!]

  """Checks for any expressions in this list."""
  or: [UsersGroupFilter!]

  """Negates the expression."""
  not: UsersGroupFilter
}

"""
A filter to be used against many `ReportDetector` object types. All fields are combined with a logical ‘and.’
"""
input ReportToManyReportDetectorFilter {
  """
  Every related `ReportDetector` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ReportDetectorFilter

  """
  Some related `ReportDetector` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ReportDetectorFilter

  """
  No related `ReportDetector` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ReportDetectorFilter
}

"""
A filter to be used against many `ReportItem` object types. All fields are combined with a logical ‘and.’
"""
input ReportToManyReportItemFilter {
  """
  Every related `ReportItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ReportItemFilter

  """
  Some related `ReportItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ReportItemFilter

  """
  No related `ReportItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ReportItemFilter
}

"""
A filter to be used against `ReportItem` object types. All fields are combined with a logical ‘and.’
"""
input ReportItemFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `itemId` field."""
  itemId: IntFilter

  """Filter by the object’s `reportByReportId` relation."""
  reportByReportId: ReportFilter

  """Filter by the object’s `itemByItemId` relation."""
  itemByItemId: ItemFilter

  """Checks for all expressions in this list."""
  and: [ReportItemFilter!]

  """Checks for any expressions in this list."""
  or: [ReportItemFilter!]

  """Negates the expression."""
  not: ReportItemFilter
}

"""
A filter to be used against `Item` object types. All fields are combined with a logical ‘and.’
"""
input ItemFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `serialNumber` field."""
  serialNumber: StringFilter

  """Filter by the object’s `labelDate` field."""
  labelDate: DateFilter

  """Filter by the object’s `remarks` field."""
  remarks: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `endUserId` field."""
  endUserId: IntFilter

  """Filter by the object’s `reportItemsByItemId` relation."""
  reportItemsByItemId: ItemToManyReportItemFilter

  """Some related `reportItemsByItemId` exist."""
  reportItemsByItemIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Filter by the object’s `endUserByEndUserId` relation."""
  endUserByEndUserId: EndUserFilter

  """A related `endUserByEndUserId` exists."""
  endUserByEndUserIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [ItemFilter!]

  """Checks for any expressions in this list."""
  or: [ItemFilter!]

  """Negates the expression."""
  not: ItemFilter
}

"""
A filter to be used against many `ReportItem` object types. All fields are combined with a logical ‘and.’
"""
input ItemToManyReportItemFilter {
  """
  Every related `ReportItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ReportItemFilter

  """
  Some related `ReportItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ReportItemFilter

  """
  No related `ReportItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ReportItemFilter
}

"""
A filter to be used against many `ReportSensor` object types. All fields are combined with a logical ‘and.’
"""
input ReportToManyReportSensorFilter {
  """
  Every related `ReportSensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ReportSensorFilter

  """
  Some related `ReportSensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ReportSensorFilter

  """
  No related `ReportSensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ReportSensorFilter
}

"""
A filter to be used against `ReportSensor` object types. All fields are combined with a logical ‘and.’
"""
input ReportSensorFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `sensorId` field."""
  sensorId: IntFilter

  """Filter by the object’s `reportByReportId` relation."""
  reportByReportId: ReportFilter

  """A related `reportByReportId` exists."""
  reportByReportIdExists: Boolean

  """Filter by the object’s `sensorBySensorId` relation."""
  sensorBySensorId: SensorFilter

  """A related `sensorBySensorId` exists."""
  sensorBySensorIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [ReportSensorFilter!]

  """Checks for any expressions in this list."""
  or: [ReportSensorFilter!]

  """Negates the expression."""
  not: ReportSensorFilter
}

"""
A filter to be used against `DetectorType` object types. All fields are combined with a logical ‘and.’
"""
input DetectorTypeFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `obsolete` field."""
  obsolete: BooleanFilter

  """Filter by the object’s `prefix` field."""
  prefix: StringFilter

  """Filter by the object’s `code` field."""
  code: StringFilter

  """Filter by the object’s `suffix` field."""
  suffix: StringFilter

  """Filter by the object’s `sensorCount` field."""
  sensorCount: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `detectorsByDetectorTypeId` relation."""
  detectorsByDetectorTypeId: DetectorTypeToManyDetectorFilter

  """Some related `detectorsByDetectorTypeId` exist."""
  detectorsByDetectorTypeIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [DetectorTypeFilter!]

  """Checks for any expressions in this list."""
  or: [DetectorTypeFilter!]

  """Negates the expression."""
  not: DetectorTypeFilter
}

"""
A filter to be used against many `Detector` object types. All fields are combined with a logical ‘and.’
"""
input DetectorTypeToManyDetectorFilter {
  """
  Every related `Detector` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DetectorFilter

  """
  Some related `Detector` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DetectorFilter

  """
  No related `Detector` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DetectorFilter
}

"""
A filter to be used against many `MaintenanceVisit` object types. All fields are combined with a logical ‘and.’
"""
input EndUserToManyMaintenanceVisitFilter {
  """
  Every related `MaintenanceVisit` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MaintenanceVisitFilter

  """
  Some related `MaintenanceVisit` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MaintenanceVisitFilter

  """
  No related `MaintenanceVisit` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MaintenanceVisitFilter
}

"""
A filter to be used against many `Item` object types. All fields are combined with a logical ‘and.’
"""
input EndUserToManyItemFilter {
  """
  Every related `Item` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ItemFilter

  """
  Some related `Item` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ItemFilter

  """
  No related `Item` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ItemFilter
}

"""
A filter to be used against many `Job` object types. All fields are combined with a logical ‘and.’
"""
input EndUserToManyJobFilter {
  """
  Every related `Job` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: JobFilter

  """
  Some related `Job` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: JobFilter

  """
  No related `Job` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: JobFilter
}

"""
A filter to be used against `Job` object types. All fields are combined with a logical ‘and.’
"""
input JobFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `endUserId` field."""
  endUserId: IntFilter

  """Filter by the object’s `startDate` field."""
  startDate: DateFilter

  """Filter by the object’s `endDate` field."""
  endDate: DateFilter

  """Filter by the object’s `confirmed` field."""
  confirmed: BooleanFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `endUserByEndUserId` relation."""
  endUserByEndUserId: EndUserFilter

  """A related `endUserByEndUserId` exists."""
  endUserByEndUserIdExists: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [JobFilter!]

  """Checks for any expressions in this list."""
  or: [JobFilter!]

  """Negates the expression."""
  not: JobFilter
}

"""
A filter to be used against many `License` object types. All fields are combined with a logical ‘and.’
"""
input EndUserToManyLicenseFilter {
  """
  Every related `License` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LicenseFilter

  """
  Some related `License` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LicenseFilter

  """
  No related `License` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LicenseFilter
}

"""
A filter to be used against `License` object types. All fields are combined with a logical ‘and.’
"""
input LicenseFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `licenseModuleId` field."""
  licenseModuleId: IntFilter

  """Filter by the object’s `moduleData` field."""
  moduleData: StringFilter

  """Filter by the object’s `licenseCode` field."""
  licenseCode: StringFilter

  """Filter by the object’s `remarks` field."""
  remarks: StringFilter

  """Filter by the object’s `licenseCustomerId` field."""
  licenseCustomerId: IntFilter

  """Filter by the object’s `licenseId` field."""
  licenseId: IntFilter

  """Filter by the object’s `durationMonths` field."""
  durationMonths: IntFilter

  """Filter by the object’s `durationDays` field."""
  durationDays: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `activate` field."""
  activate: BooleanFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `endUserId` field."""
  endUserId: IntFilter

  """Filter by the object’s `detectorSensorLocationsByLicenseId` relation."""
  detectorSensorLocationsByLicenseId: LicenseToManyDetectorSensorLocationFilter

  """Some related `detectorSensorLocationsByLicenseId` exist."""
  detectorSensorLocationsByLicenseIdExist: Boolean

  """Filter by the object’s `licenseOrdersByLicenseId` relation."""
  licenseOrdersByLicenseId: LicenseToManyLicenseOrderFilter

  """Some related `licenseOrdersByLicenseId` exist."""
  licenseOrdersByLicenseIdExist: Boolean

  """Filter by the object’s `licenseRegistrationsByLicenseId` relation."""
  licenseRegistrationsByLicenseId: LicenseToManyLicenseRegistrationFilter

  """Some related `licenseRegistrationsByLicenseId` exist."""
  licenseRegistrationsByLicenseIdExist: Boolean

  """Filter by the object’s `licenseModuleByLicenseModuleId` relation."""
  licenseModuleByLicenseModuleId: LicenseModuleFilter

  """A related `licenseModuleByLicenseModuleId` exists."""
  licenseModuleByLicenseModuleIdExists: Boolean

  """Filter by the object’s `licenseCustomerByLicenseCustomerId` relation."""
  licenseCustomerByLicenseCustomerId: LicenseCustomerFilter

  """A related `licenseCustomerByLicenseCustomerId` exists."""
  licenseCustomerByLicenseCustomerIdExists: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Filter by the object’s `endUserByEndUserId` relation."""
  endUserByEndUserId: EndUserFilter

  """A related `endUserByEndUserId` exists."""
  endUserByEndUserIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [LicenseFilter!]

  """Checks for any expressions in this list."""
  or: [LicenseFilter!]

  """Negates the expression."""
  not: LicenseFilter
}

"""
A filter to be used against many `DetectorSensorLocation` object types. All fields are combined with a logical ‘and.’
"""
input LicenseToManyDetectorSensorLocationFilter {
  """
  Every related `DetectorSensorLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DetectorSensorLocationFilter

  """
  Some related `DetectorSensorLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DetectorSensorLocationFilter

  """
  No related `DetectorSensorLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DetectorSensorLocationFilter
}

"""
A filter to be used against many `LicenseOrder` object types. All fields are combined with a logical ‘and.’
"""
input LicenseToManyLicenseOrderFilter {
  """
  Every related `LicenseOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LicenseOrderFilter

  """
  Some related `LicenseOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LicenseOrderFilter

  """
  No related `LicenseOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LicenseOrderFilter
}

"""
A filter to be used against `LicenseOrder` object types. All fields are combined with a logical ‘and.’
"""
input LicenseOrderFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `licenseId` field."""
  licenseId: IntFilter

  """Filter by the object’s `licenseRegistrationId` field."""
  licenseRegistrationId: IntFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `offertenummer` field."""
  offertenummer: StringFilter

  """Filter by the object’s `remarks` field."""
  remarks: StringFilter

  """Filter by the object’s `cdSerialNumber` field."""
  cdSerialNumber: IntFilter

  """Filter by the object’s `licenseByLicenseId` relation."""
  licenseByLicenseId: LicenseFilter

  """A related `licenseByLicenseId` exists."""
  licenseByLicenseIdExists: Boolean

  """
  Filter by the object’s `licenseRegistrationByLicenseRegistrationId` relation.
  """
  licenseRegistrationByLicenseRegistrationId: LicenseRegistrationFilter

  """A related `licenseRegistrationByLicenseRegistrationId` exists."""
  licenseRegistrationByLicenseRegistrationIdExists: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [LicenseOrderFilter!]

  """Checks for any expressions in this list."""
  or: [LicenseOrderFilter!]

  """Negates the expression."""
  not: LicenseOrderFilter
}

"""
A filter to be used against `LicenseRegistration` object types. All fields are combined with a logical ‘and.’
"""
input LicenseRegistrationFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `hwType` field."""
  hwType: IntFilter

  """Filter by the object’s `registrationCode` field."""
  registrationCode: StringFilter

  """Filter by the object’s `activationCode` field."""
  activationCode: StringFilter

  """Filter by the object’s `licenseId` field."""
  licenseId: IntFilter

  """Filter by the object’s `expirationDate` field."""
  expirationDate: DateFilter

  """Filter by the object’s `hwCode` field."""
  hwCode: StringFilter

  """Filter by the object’s `computerName` field."""
  computerName: StringFilter

  """Filter by the object’s `ipAddress` field."""
  ipAddress: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `remarks` field."""
  remarks: StringFilter

  """
  Filter by the object’s `licenseOrdersByLicenseRegistrationId` relation.
  """
  licenseOrdersByLicenseRegistrationId: LicenseRegistrationToManyLicenseOrderFilter

  """Some related `licenseOrdersByLicenseRegistrationId` exist."""
  licenseOrdersByLicenseRegistrationIdExist: Boolean

  """Filter by the object’s `licenseByLicenseId` relation."""
  licenseByLicenseId: LicenseFilter

  """A related `licenseByLicenseId` exists."""
  licenseByLicenseIdExists: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [LicenseRegistrationFilter!]

  """Checks for any expressions in this list."""
  or: [LicenseRegistrationFilter!]

  """Negates the expression."""
  not: LicenseRegistrationFilter
}

"""
A filter to be used against many `LicenseOrder` object types. All fields are combined with a logical ‘and.’
"""
input LicenseRegistrationToManyLicenseOrderFilter {
  """
  Every related `LicenseOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LicenseOrderFilter

  """
  Some related `LicenseOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LicenseOrderFilter

  """
  No related `LicenseOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LicenseOrderFilter
}

"""
A filter to be used against many `LicenseRegistration` object types. All fields are combined with a logical ‘and.’
"""
input LicenseToManyLicenseRegistrationFilter {
  """
  Every related `LicenseRegistration` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LicenseRegistrationFilter

  """
  Some related `LicenseRegistration` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LicenseRegistrationFilter

  """
  No related `LicenseRegistration` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LicenseRegistrationFilter
}

"""
A filter to be used against `LicenseModule` object types. All fields are combined with a logical ‘and.’
"""
input LicenseModuleFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `latestVersion` field."""
  latestVersion: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `licensesByLicenseModuleId` relation."""
  licensesByLicenseModuleId: LicenseModuleToManyLicenseFilter

  """Some related `licensesByLicenseModuleId` exist."""
  licensesByLicenseModuleIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [LicenseModuleFilter!]

  """Checks for any expressions in this list."""
  or: [LicenseModuleFilter!]

  """Negates the expression."""
  not: LicenseModuleFilter
}

"""
A filter to be used against many `License` object types. All fields are combined with a logical ‘and.’
"""
input LicenseModuleToManyLicenseFilter {
  """
  Every related `License` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LicenseFilter

  """
  Some related `License` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LicenseFilter

  """
  No related `License` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LicenseFilter
}

"""
A filter to be used against `LicenseCustomer` object types. All fields are combined with a logical ‘and.’
"""
input LicenseCustomerFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `licensesByLicenseCustomerId` relation."""
  licensesByLicenseCustomerId: LicenseCustomerToManyLicenseFilter

  """Some related `licensesByLicenseCustomerId` exist."""
  licensesByLicenseCustomerIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [LicenseCustomerFilter!]

  """Checks for any expressions in this list."""
  or: [LicenseCustomerFilter!]

  """Negates the expression."""
  not: LicenseCustomerFilter
}

"""
A filter to be used against many `License` object types. All fields are combined with a logical ‘and.’
"""
input LicenseCustomerToManyLicenseFilter {
  """
  Every related `License` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LicenseFilter

  """
  Some related `License` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LicenseFilter

  """
  No related `License` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LicenseFilter
}

"""
A filter to be used against many `Report` object types. All fields are combined with a logical ‘and.’
"""
input EndUserToManyReportFilter {
  """
  Every related `Report` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ReportFilter

  """
  Some related `Report` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ReportFilter

  """
  No related `Report` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ReportFilter
}

"""
A filter to be used against `Filter` object types. All fields are combined with a logical ‘and.’
"""
input FilterFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `replacementIntervalMonths` field."""
  replacementIntervalMonths: IntFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `consumable` field."""
  consumable: BooleanFilter

  """Filter by the object’s `detectorSensorsByFilterId` relation."""
  detectorSensorsByFilterId: FilterToManyDetectorSensorFilter

  """Some related `detectorSensorsByFilterId` exist."""
  detectorSensorsByFilterIdExist: Boolean

  """Filter by the object’s `sensorTypesByFilterId` relation."""
  sensorTypesByFilterId: FilterToManySensorTypeFilter

  """Some related `sensorTypesByFilterId` exist."""
  sensorTypesByFilterIdExist: Boolean

  """Filter by the object’s `maintenanceVisitLinesByFilterId` relation."""
  maintenanceVisitLinesByFilterId: FilterToManyMaintenanceVisitLineFilter

  """Some related `maintenanceVisitLinesByFilterId` exist."""
  maintenanceVisitLinesByFilterIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [FilterFilter!]

  """Checks for any expressions in this list."""
  or: [FilterFilter!]

  """Negates the expression."""
  not: FilterFilter
}

"""
A filter to be used against many `DetectorSensor` object types. All fields are combined with a logical ‘and.’
"""
input FilterToManyDetectorSensorFilter {
  """
  Every related `DetectorSensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DetectorSensorFilter

  """
  Some related `DetectorSensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DetectorSensorFilter

  """
  No related `DetectorSensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DetectorSensorFilter
}

"""
A filter to be used against many `SensorType` object types. All fields are combined with a logical ‘and.’
"""
input FilterToManySensorTypeFilter {
  """
  Every related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorTypeFilter

  """
  Some related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorTypeFilter

  """
  No related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorTypeFilter
}

"""
A filter to be used against many `MaintenanceVisitLine` object types. All fields are combined with a logical ‘and.’
"""
input FilterToManyMaintenanceVisitLineFilter {
  """
  Every related `MaintenanceVisitLine` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MaintenanceVisitLineFilter

  """
  Some related `MaintenanceVisitLine` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MaintenanceVisitLineFilter

  """
  No related `MaintenanceVisitLine` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MaintenanceVisitLineFilter
}

"""
A filter to be used against `Pyrolyser` object types. All fields are combined with a logical ‘and.’
"""
input PyrolyserFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `replacementIntervalMonths` field."""
  replacementIntervalMonths: IntFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `detectorSensorsByPyrolyserId` relation."""
  detectorSensorsByPyrolyserId: PyrolyserToManyDetectorSensorFilter

  """Some related `detectorSensorsByPyrolyserId` exist."""
  detectorSensorsByPyrolyserIdExist: Boolean

  """Filter by the object’s `sensorTypesByPyrolyserId` relation."""
  sensorTypesByPyrolyserId: PyrolyserToManySensorTypeFilter

  """Some related `sensorTypesByPyrolyserId` exist."""
  sensorTypesByPyrolyserIdExist: Boolean

  """Filter by the object’s `maintenanceVisitLinesByPyrolyserId` relation."""
  maintenanceVisitLinesByPyrolyserId: PyrolyserToManyMaintenanceVisitLineFilter

  """Some related `maintenanceVisitLinesByPyrolyserId` exist."""
  maintenanceVisitLinesByPyrolyserIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [PyrolyserFilter!]

  """Checks for any expressions in this list."""
  or: [PyrolyserFilter!]

  """Negates the expression."""
  not: PyrolyserFilter
}

"""
A filter to be used against many `DetectorSensor` object types. All fields are combined with a logical ‘and.’
"""
input PyrolyserToManyDetectorSensorFilter {
  """
  Every related `DetectorSensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DetectorSensorFilter

  """
  Some related `DetectorSensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DetectorSensorFilter

  """
  No related `DetectorSensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DetectorSensorFilter
}

"""
A filter to be used against many `SensorType` object types. All fields are combined with a logical ‘and.’
"""
input PyrolyserToManySensorTypeFilter {
  """
  Every related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorTypeFilter

  """
  Some related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorTypeFilter

  """
  No related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorTypeFilter
}

"""
A filter to be used against many `MaintenanceVisitLine` object types. All fields are combined with a logical ‘and.’
"""
input PyrolyserToManyMaintenanceVisitLineFilter {
  """
  Every related `MaintenanceVisitLine` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MaintenanceVisitLineFilter

  """
  Some related `MaintenanceVisitLine` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MaintenanceVisitLineFilter

  """
  No related `MaintenanceVisitLine` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MaintenanceVisitLineFilter
}

"""
A filter to be used against many `SensorElementLocation` object types. All fields are combined with a logical ‘and.’
"""
input DetectorSensorLocationToManySensorElementLocationFilter {
  """
  Every related `SensorElementLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorElementLocationFilter

  """
  Some related `SensorElementLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorElementLocationFilter

  """
  No related `SensorElementLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorElementLocationFilter
}

"""
A filter to be used against `SensorElementLocation` object types. All fields are combined with a logical ‘and.’
"""
input SensorElementLocationFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `detectorSensorLocationId` field."""
  detectorSensorLocationId: IntFilter

  """Filter by the object’s `sensorElementId` field."""
  sensorElementId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """
  Filter by the object’s `detectorSensorLocationByDetectorSensorLocationId` relation.
  """
  detectorSensorLocationByDetectorSensorLocationId: DetectorSensorLocationFilter

  """Filter by the object’s `sensorElementBySensorElementId` relation."""
  sensorElementBySensorElementId: SensorElementFilter

  """A related `sensorElementBySensorElementId` exists."""
  sensorElementBySensorElementIdExists: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [SensorElementLocationFilter!]

  """Checks for any expressions in this list."""
  or: [SensorElementLocationFilter!]

  """Negates the expression."""
  not: SensorElementLocationFilter
}

"""
A filter to be used against `SensorElement` object types. All fields are combined with a logical ‘and.’
"""
input SensorElementFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `sensorElementTypeId` field."""
  sensorElementTypeId: IntFilter

  """Filter by the object’s `serialNumber` field."""
  serialNumber: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `labelDate` field."""
  labelDate: DateFilter

  """
  Filter by the object’s `sensorElementLocationBySensorElementId` relation.
  """
  sensorElementLocationBySensorElementId: SensorElementLocationFilter

  """A related `sensorElementLocationBySensorElementId` exists."""
  sensorElementLocationBySensorElementIdExists: Boolean

  """Filter by the object’s `sensorElementLogsBySensorElementId` relation."""
  sensorElementLogsBySensorElementId: SensorElementToManySensorElementLogFilter

  """Some related `sensorElementLogsBySensorElementId` exist."""
  sensorElementLogsBySensorElementIdExist: Boolean

  """
  Filter by the object’s `sensorSensorElementBySensorElementId` relation.
  """
  sensorSensorElementBySensorElementId: SensorSensorElementFilter

  """A related `sensorSensorElementBySensorElementId` exists."""
  sensorSensorElementBySensorElementIdExists: Boolean

  """
  Filter by the object’s `sensorElementTypeBySensorElementTypeId` relation.
  """
  sensorElementTypeBySensorElementTypeId: SensorElementTypeFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [SensorElementFilter!]

  """Checks for any expressions in this list."""
  or: [SensorElementFilter!]

  """Negates the expression."""
  not: SensorElementFilter
}

"""
A filter to be used against many `SensorElementLog` object types. All fields are combined with a logical ‘and.’
"""
input SensorElementToManySensorElementLogFilter {
  """
  Every related `SensorElementLog` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorElementLogFilter

  """
  Some related `SensorElementLog` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorElementLogFilter

  """
  No related `SensorElementLog` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorElementLogFilter
}

"""
A filter to be used against `SensorElementLog` object types. All fields are combined with a logical ‘and.’
"""
input SensorElementLogFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `time` field."""
  time: DatetimeFilter

  """Filter by the object’s `sensorElementId` field."""
  sensorElementId: IntFilter

  """Filter by the object’s `sensorId` field."""
  sensorId: IntFilter

  """Filter by the object’s `sensorPosition` field."""
  sensorPosition: IntFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `sensorElementBySensorElementId` relation."""
  sensorElementBySensorElementId: SensorElementFilter

  """Filter by the object’s `sensorBySensorId` relation."""
  sensorBySensorId: SensorFilter

  """A related `sensorBySensorId` exists."""
  sensorBySensorIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [SensorElementLogFilter!]

  """Checks for any expressions in this list."""
  or: [SensorElementLogFilter!]

  """Negates the expression."""
  not: SensorElementLogFilter
}

"""
A filter to be used against `SensorSensorElement` object types. All fields are combined with a logical ‘and.’
"""
input SensorSensorElementFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `sensorId` field."""
  sensorId: IntFilter

  """Filter by the object’s `sensorElementId` field."""
  sensorElementId: IntFilter

  """Filter by the object’s `sensorPosition` field."""
  sensorPosition: IntFilter

  """Filter by the object’s `installed` field."""
  installed: DateFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `sensorBySensorId` relation."""
  sensorBySensorId: SensorFilter

  """Filter by the object’s `sensorElementBySensorElementId` relation."""
  sensorElementBySensorElementId: SensorElementFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [SensorSensorElementFilter!]

  """Checks for any expressions in this list."""
  or: [SensorSensorElementFilter!]

  """Negates the expression."""
  not: SensorSensorElementFilter
}

"""
A filter to be used against `SensorElementType` object types. All fields are combined with a logical ‘and.’
"""
input SensorElementTypeFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `replacementInterval` field."""
  replacementInterval: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `sensorBaseTypeId` field."""
  sensorBaseTypeId: IntFilter

  """Filter by the object’s `rangeId` field."""
  rangeId: IntFilter

  """Filter by the object’s `calRangeId` field."""
  calRangeId: IntFilter

  """Filter by the object’s `sensorElementsBySensorElementTypeId` relation."""
  sensorElementsBySensorElementTypeId: SensorElementTypeToManySensorElementFilter

  """Some related `sensorElementsBySensorElementTypeId` exist."""
  sensorElementsBySensorElementTypeIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Filter by the object’s `sensorBaseTypeBySensorBaseTypeId` relation."""
  sensorBaseTypeBySensorBaseTypeId: SensorBaseTypeFilter

  """Filter by the object’s `rangeByRangeId` relation."""
  rangeByRangeId: RangeFilter

  """Filter by the object’s `rangeByCalRangeId` relation."""
  rangeByCalRangeId: RangeFilter

  """Checks for all expressions in this list."""
  and: [SensorElementTypeFilter!]

  """Checks for any expressions in this list."""
  or: [SensorElementTypeFilter!]

  """Negates the expression."""
  not: SensorElementTypeFilter
}

"""
A filter to be used against many `SensorElement` object types. All fields are combined with a logical ‘and.’
"""
input SensorElementTypeToManySensorElementFilter {
  """
  Every related `SensorElement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorElementFilter

  """
  Some related `SensorElement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorElementFilter

  """
  No related `SensorElement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorElementFilter
}

"""
A filter to be used against `SensorBaseType` object types. All fields are combined with a logical ‘and.’
"""
input SensorBaseTypeFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `prefix` field."""
  prefix: StringFilter

  """Filter by the object’s `suffix` field."""
  suffix: StringFilter

  """Filter by the object’s `principleId` field."""
  principleId: IntFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `series` field."""
  series: StringFilter

  """Filter by the object’s `maintenanceIntervalMonths` field."""
  maintenanceIntervalMonths: IntFilter

  """Filter by the object’s `quotationIntervalMonths` field."""
  quotationIntervalMonths: IntFilter

  """Filter by the object’s `replacementIntervalMonths` field."""
  replacementIntervalMonths: IntFilter

  """Filter by the object’s `volume` field."""
  volume: IntFilter

  """Filter by the object’s `sensorTypesBySensorBaseTypeId` relation."""
  sensorTypesBySensorBaseTypeId: SensorBaseTypeToManySensorTypeFilter

  """Some related `sensorTypesBySensorBaseTypeId` exist."""
  sensorTypesBySensorBaseTypeIdExist: Boolean

  """
  Filter by the object’s `sensorElementTypesBySensorBaseTypeId` relation.
  """
  sensorElementTypesBySensorBaseTypeId: SensorBaseTypeToManySensorElementTypeFilter

  """Some related `sensorElementTypesBySensorBaseTypeId` exist."""
  sensorElementTypesBySensorBaseTypeIdExist: Boolean

  """Filter by the object’s `principleByPrincipleId` relation."""
  principleByPrincipleId: PrincipleFilter

  """A related `principleByPrincipleId` exists."""
  principleByPrincipleIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [SensorBaseTypeFilter!]

  """Checks for any expressions in this list."""
  or: [SensorBaseTypeFilter!]

  """Negates the expression."""
  not: SensorBaseTypeFilter
}

"""
A filter to be used against many `SensorType` object types. All fields are combined with a logical ‘and.’
"""
input SensorBaseTypeToManySensorTypeFilter {
  """
  Every related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorTypeFilter

  """
  Some related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorTypeFilter

  """
  No related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorTypeFilter
}

"""
A filter to be used against many `SensorElementType` object types. All fields are combined with a logical ‘and.’
"""
input SensorBaseTypeToManySensorElementTypeFilter {
  """
  Every related `SensorElementType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorElementTypeFilter

  """
  Some related `SensorElementType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorElementTypeFilter

  """
  No related `SensorElementType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorElementTypeFilter
}

"""
A filter to be used against `Principle` object types. All fields are combined with a logical ‘and.’
"""
input PrincipleFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `sensorBaseTypesByPrincipleId` relation."""
  sensorBaseTypesByPrincipleId: PrincipleToManySensorBaseTypeFilter

  """Some related `sensorBaseTypesByPrincipleId` exist."""
  sensorBaseTypesByPrincipleIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [PrincipleFilter!]

  """Checks for any expressions in this list."""
  or: [PrincipleFilter!]

  """Negates the expression."""
  not: PrincipleFilter
}

"""
A filter to be used against many `SensorBaseType` object types. All fields are combined with a logical ‘and.’
"""
input PrincipleToManySensorBaseTypeFilter {
  """
  Every related `SensorBaseType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorBaseTypeFilter

  """
  Some related `SensorBaseType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorBaseTypeFilter

  """
  No related `SensorBaseType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorBaseTypeFilter
}

"""
A filter to be used against `Range` object types. All fields are combined with a logical ‘and.’
"""
input RangeFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `gasId` field."""
  gasId: IntFilter

  """Filter by the object’s `lowEu` field."""
  lowEu: FloatFilter

  """Filter by the object’s `highEu` field."""
  highEu: FloatFilter

  """Filter by the object’s `engineeringUnits` field."""
  engineeringUnits: StringFilter

  """Filter by the object’s `alarm1Level` field."""
  alarm1Level: BigFloatFilter

  """Filter by the object’s `alarm2Level` field."""
  alarm2Level: BigFloatFilter

  """Filter by the object’s `warning1Level` field."""
  warning1Level: BigFloatFilter

  """Filter by the object’s `warning2Level` field."""
  warning2Level: BigFloatFilter

  """Filter by the object’s `alarm1DirectionUp` field."""
  alarm1DirectionUp: BooleanFilter

  """Filter by the object’s `alarm2DirectionUp` field."""
  alarm2DirectionUp: BooleanFilter

  """Filter by the object’s `alarmUnits` field."""
  alarmUnits: BooleanFilter

  """Filter by the object’s `precision` field."""
  precision: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `highEuNumeric` field."""
  highEuNumeric: BigFloatFilter

  """Filter by the object’s `highEuBackup` field."""
  highEuBackup: FloatFilter

  """Filter by the object’s `range` field."""
  range: StringFilter

  """Filter by the object’s `sensorTypesByRangeId` relation."""
  sensorTypesByRangeId: RangeToManySensorTypeFilter

  """Some related `sensorTypesByRangeId` exist."""
  sensorTypesByRangeIdExist: Boolean

  """Filter by the object’s `sensorElementTypesByRangeId` relation."""
  sensorElementTypesByRangeId: RangeToManySensorElementTypeFilter

  """Some related `sensorElementTypesByRangeId` exist."""
  sensorElementTypesByRangeIdExist: Boolean

  """Filter by the object’s `sensorElementTypesByCalRangeId` relation."""
  sensorElementTypesByCalRangeId: RangeToManySensorElementTypeFilter

  """Some related `sensorElementTypesByCalRangeId` exist."""
  sensorElementTypesByCalRangeIdExist: Boolean

  """Filter by the object’s `gasByGasId` relation."""
  gasByGasId: GasFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [RangeFilter!]

  """Checks for any expressions in this list."""
  or: [RangeFilter!]

  """Negates the expression."""
  not: RangeFilter
}

"""
A filter to be used against many `SensorType` object types. All fields are combined with a logical ‘and.’
"""
input RangeToManySensorTypeFilter {
  """
  Every related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorTypeFilter

  """
  Some related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorTypeFilter

  """
  No related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorTypeFilter
}

"""
A filter to be used against many `SensorElementType` object types. All fields are combined with a logical ‘and.’
"""
input RangeToManySensorElementTypeFilter {
  """
  Every related `SensorElementType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorElementTypeFilter

  """
  Some related `SensorElementType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorElementTypeFilter

  """
  No related `SensorElementType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorElementTypeFilter
}

"""
A filter to be used against `Gas` object types. All fields are combined with a logical ‘and.’
"""
input GasFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `formula` field."""
  formula: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `chemicalCompoundId` field."""
  chemicalCompoundId: IntFilter

  """Filter by the object’s `calGasesByGasId` relation."""
  calGasesByGasId: GasToManyCalGasFilter

  """Some related `calGasesByGasId` exist."""
  calGasesByGasIdExist: Boolean

  """Filter by the object’s `rangesByGasId` relation."""
  rangesByGasId: GasToManyRangeFilter

  """Some related `rangesByGasId` exist."""
  rangesByGasIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """
  Filter by the object’s `chemicalCompoundByChemicalCompoundId` relation.
  """
  chemicalCompoundByChemicalCompoundId: ChemicalCompoundFilter

  """A related `chemicalCompoundByChemicalCompoundId` exists."""
  chemicalCompoundByChemicalCompoundIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [GasFilter!]

  """Checks for any expressions in this list."""
  or: [GasFilter!]

  """Negates the expression."""
  not: GasFilter
}

"""
A filter to be used against many `CalGas` object types. All fields are combined with a logical ‘and.’
"""
input GasToManyCalGasFilter {
  """
  Every related `CalGas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CalGasFilter

  """
  Some related `CalGas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CalGasFilter

  """
  No related `CalGas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CalGasFilter
}

"""
A filter to be used against many `Range` object types. All fields are combined with a logical ‘and.’
"""
input GasToManyRangeFilter {
  """
  Every related `Range` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RangeFilter

  """
  Some related `Range` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RangeFilter

  """
  No related `Range` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RangeFilter
}

"""
A filter to be used against `ChemicalCompound` object types. All fields are combined with a logical ‘and.’
"""
input ChemicalCompoundFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `otherName` field."""
  otherName: StringFilter

  """Filter by the object’s `formula` field."""
  formula: StringFilter

  """Filter by the object’s `cas` field."""
  cas: StringFilter

  """Filter by the object’s `icsc` field."""
  icsc: StringFilter

  """Filter by the object’s `molarMass` field."""
  molarMass: FloatFilter

  """Filter by the object’s `density` field."""
  density: FloatFilter

  """Filter by the object’s `url` field."""
  url: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `gasesByChemicalCompoundId` relation."""
  gasesByChemicalCompoundId: ChemicalCompoundToManyGasFilter

  """Some related `gasesByChemicalCompoundId` exist."""
  gasesByChemicalCompoundIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [ChemicalCompoundFilter!]

  """Checks for any expressions in this list."""
  or: [ChemicalCompoundFilter!]

  """Negates the expression."""
  not: ChemicalCompoundFilter
}

"""
A filter to be used against many `Gas` object types. All fields are combined with a logical ‘and.’
"""
input ChemicalCompoundToManyGasFilter {
  """
  Every related `Gas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: GasFilter

  """
  Some related `Gas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: GasFilter

  """
  No related `Gas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: GasFilter
}

"""
A filter to be used against `Application` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `_toolId` field."""
  _toolId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """
  Filter by the object’s `detectorSensorLocationsByApplicationId` relation.
  """
  detectorSensorLocationsByApplicationId: ApplicationToManyDetectorSensorLocationFilter

  """Some related `detectorSensorLocationsByApplicationId` exist."""
  detectorSensorLocationsByApplicationIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [ApplicationFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationFilter!]

  """Negates the expression."""
  not: ApplicationFilter
}

"""
A filter to be used against many `DetectorSensorLocation` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyDetectorSensorLocationFilter {
  """
  Every related `DetectorSensorLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DetectorSensorLocationFilter

  """
  Some related `DetectorSensorLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DetectorSensorLocationFilter

  """
  No related `DetectorSensorLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DetectorSensorLocationFilter
}

"""
A filter to be used against many `MaintenanceVisitLine` object types. All fields are combined with a logical ‘and.’
"""
input DetectorSensorToManyMaintenanceVisitLineFilter {
  """
  Every related `MaintenanceVisitLine` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MaintenanceVisitLineFilter

  """
  Some related `MaintenanceVisitLine` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MaintenanceVisitLineFilter

  """
  No related `MaintenanceVisitLine` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MaintenanceVisitLineFilter
}

"""
A filter to be used against many `MaintenanceVisitLine` object types. All fields are combined with a logical ‘and.’
"""
input SensorToManyMaintenanceVisitLineFilter {
  """
  Every related `MaintenanceVisitLine` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MaintenanceVisitLineFilter

  """
  Some related `MaintenanceVisitLine` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MaintenanceVisitLineFilter

  """
  No related `MaintenanceVisitLine` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MaintenanceVisitLineFilter
}

"""
A filter to be used against many `ReportSensor` object types. All fields are combined with a logical ‘and.’
"""
input SensorToManyReportSensorFilter {
  """
  Every related `ReportSensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ReportSensorFilter

  """
  Some related `ReportSensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ReportSensorFilter

  """
  No related `ReportSensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ReportSensorFilter
}

"""
A filter to be used against many `SensorElementLog` object types. All fields are combined with a logical ‘and.’
"""
input SensorToManySensorElementLogFilter {
  """
  Every related `SensorElementLog` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorElementLogFilter

  """
  Some related `SensorElementLog` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorElementLogFilter

  """
  No related `SensorElementLog` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorElementLogFilter
}

"""
A filter to be used against many `SensorOrder` object types. All fields are combined with a logical ‘and.’
"""
input SensorToManySensorOrderFilter {
  """
  Every related `SensorOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorOrderFilter

  """
  Some related `SensorOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorOrderFilter

  """
  No related `SensorOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorOrderFilter
}

"""
A filter to be used against `SensorOrder` object types. All fields are combined with a logical ‘and.’
"""
input SensorOrderFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `sensorId` field."""
  sensorId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `checkedUserId` field."""
  checkedUserId: IntFilter

  """Filter by the object’s `verifiedUserId` field."""
  verifiedUserId: IntFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `sensorTestResultsBySensorOrderId` relation."""
  sensorTestResultsBySensorOrderId: SensorOrderToManySensorTestResultFilter

  """Some related `sensorTestResultsBySensorOrderId` exist."""
  sensorTestResultsBySensorOrderIdExist: Boolean

  """Filter by the object’s `sensorBySensorId` relation."""
  sensorBySensorId: SensorFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Filter by the object’s `userByCheckedUserId` relation."""
  userByCheckedUserId: UserFilter

  """A related `userByCheckedUserId` exists."""
  userByCheckedUserIdExists: Boolean

  """Filter by the object’s `userByVerifiedUserId` relation."""
  userByVerifiedUserId: UserFilter

  """A related `userByVerifiedUserId` exists."""
  userByVerifiedUserIdExists: Boolean

  """Filter by the object’s `factureeropdrachtByFactuuropdracht` relation."""
  factureeropdrachtByFactuuropdracht: FactureeropdrachtFilter

  """Checks for all expressions in this list."""
  and: [SensorOrderFilter!]

  """Checks for any expressions in this list."""
  or: [SensorOrderFilter!]

  """Negates the expression."""
  not: SensorOrderFilter
}

"""
A filter to be used against many `SensorTestResult` object types. All fields are combined with a logical ‘and.’
"""
input SensorOrderToManySensorTestResultFilter {
  """
  Every related `SensorTestResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorTestResultFilter

  """
  Some related `SensorTestResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorTestResultFilter

  """
  No related `SensorTestResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorTestResultFilter
}

"""
A filter to be used against `SensorTestResult` object types. All fields are combined with a logical ‘and.’
"""
input SensorTestResultFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `sensorId` field."""
  sensorId: IntFilter

  """Filter by the object’s `date` field."""
  date: DateFilter

  """Filter by the object’s `zeroResponse` field."""
  zeroResponse: FloatFilter

  """Filter by the object’s `spanResponse` field."""
  spanResponse: FloatFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `factuuropdrachtOld` field."""
  factuuropdrachtOld: StringFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `fsCalGasId` field."""
  fsCalGasId: IntFilter

  """Filter by the object’s `usedSpanConcentration` field."""
  usedSpanConcentration: FloatFilter

  """Filter by the object’s `sensorOrderId` field."""
  sensorOrderId: IntFilter

  """Filter by the object’s `sensorBySensorId` relation."""
  sensorBySensorId: SensorFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Filter by the object’s `userByUserId` relation."""
  userByUserId: UserFilter

  """Filter by the object’s `calGasByFsCalGasId` relation."""
  calGasByFsCalGasId: CalGasFilter

  """A related `calGasByFsCalGasId` exists."""
  calGasByFsCalGasIdExists: Boolean

  """Filter by the object’s `sensorOrderBySensorOrderId` relation."""
  sensorOrderBySensorOrderId: SensorOrderFilter

  """A related `sensorOrderBySensorOrderId` exists."""
  sensorOrderBySensorOrderIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [SensorTestResultFilter!]

  """Checks for any expressions in this list."""
  or: [SensorTestResultFilter!]

  """Negates the expression."""
  not: SensorTestResultFilter
}

"""
A filter to be used against `Factureeropdracht` object types. All fields are combined with a logical ‘and.’
"""
input FactureeropdrachtFilter {
  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `cddebiteur` field."""
  cddebiteur: StringFilter

  """Filter by the object’s `cdfactuur` field."""
  cdfactuur: StringFilter

  """Filter by the object’s `opdrachtdatum` field."""
  opdrachtdatum: DateFilter

  """Filter by the object’s `cdbetcond` field."""
  cdbetcond: StringFilter

  """Filter by the object’s `cdlevcond` field."""
  cdlevcond: StringFilter

  """Filter by the object’s `cdvaluta` field."""
  cdvaluta: StringFilter

  """Filter by the object’s `cdbtw` field."""
  cdbtw: StringFilter

  """Filter by the object’s `btwscenario` field."""
  btwscenario: IntFilter

  """Filter by the object’s `cddossier` field."""
  cddossier: StringFilter

  """Filter by the object’s `referentie` field."""
  referentie: StringFilter

  """Filter by the object’s `kortingperc` field."""
  kortingperc: BigFloatFilter

  """Filter by the object’s `percgrek` field."""
  percgrek: BigFloatFilter

  """Filter by the object’s `cdloonwerk` field."""
  cdloonwerk: StringFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `adres` field."""
  adres: StringFilter

  """Filter by the object’s `afdrukteller` field."""
  afdrukteller: IntFilter

  """Filter by the object’s `boekjaar` field."""
  boekjaar: IntFilter

  """Filter by the object’s `periode` field."""
  periode: IntFilter

  """Filter by the object’s `transactie` field."""
  transactie: IntFilter

  """Filter by the object’s `factuurnummer` field."""
  factuurnummer: StringFilter

  """Filter by the object’s `factuurdatum` field."""
  factuurdatum: DateFilter

  """Filter by the object’s `cddagboek` field."""
  cddagboek: StringFilter

  """Filter by the object’s `kredbepperc` field."""
  kredbepperc: BigFloatFilter

  """Filter by the object’s `cdsoort` field."""
  cdsoort: StringFilter

  """Filter by the object’s `subadres` field."""
  subadres: StringFilter

  """Filter by the object’s `magazijnbon` field."""
  magazijnbon: StringFilter

  """Filter by the object’s `pakbon` field."""
  pakbon: StringFilter

  """Filter by the object’s `factureren` field."""
  factureren: StringFilter

  """Filter by the object’s `vervolgopdrachtvan` field."""
  vervolgopdrachtvan: StringFilter

  """Filter by the object’s `blokkeren` field."""
  blokkeren: StringFilter

  """Filter by the object’s `cdbestland` field."""
  cdbestland: StringFilter

  """Filter by the object’s `cdkostenplaats` field."""
  cdkostenplaats: StringFilter

  """Filter by the object’s `cdstroom` field."""
  cdstroom: IntFilter

  """Filter by the object’s `cdvervoer` field."""
  cdvervoer: IntFilter

  """Filter by the object’s `cdverkeer` field."""
  cdverkeer: IntFilter

  """Filter by the object’s `cdstelsel` field."""
  cdstelsel: IntFilter

  """Filter by the object’s `cdtype` field."""
  cdtype: StringFilter

  """Filter by the object’s `cdverzamel` field."""
  cdverzamel: IntFilter

  """Filter by the object’s `ordbevteller` field."""
  ordbevteller: IntFilter

  """Filter by the object’s `btwopkredb` field."""
  btwopkredb: StringFilter

  """Filter by the object’s `bron` field."""
  bron: StringFilter

  """Filter by the object’s `abonnement` field."""
  abonnement: StringFilter

  """Filter by the object’s `cdadres` field."""
  cdadres: IntFilter

  """Filter by the object’s `cdbetwijze1` field."""
  cdbetwijze1: StringFilter

  """Filter by the object’s `cdbetwijze2` field."""
  cdbetwijze2: StringFilter

  """Filter by the object’s `betaaldbedrag1` field."""
  betaaldbedrag1: BigFloatFilter

  """Filter by the object’s `betaaldbedrag2` field."""
  betaaldbedrag2: BigFloatFilter

  """Filter by the object’s `kvc` field."""
  kvc: StringFilter

  """Filter by the object’s `betkortperc` field."""
  betkortperc: BigFloatFilter

  """Filter by the object’s `cdvert` field."""
  cdvert: StringFilter

  """Filter by the object’s `verwerktbo` field."""
  verwerktbo: StringFilter

  """Filter by the object’s `verwerktvrd` field."""
  verwerktvrd: StringFilter

  """Filter by the object’s `cddebiteurFact` field."""
  cddebiteurFact: StringFilter

  """Filter by the object’s `lidnrBijInkorg` field."""
  lidnrBijInkorg: StringFilter

  """Filter by the object’s `cdproject` field."""
  cdproject: StringFilter

  """Filter by the object’s `cdexpediteur` field."""
  cdexpediteur: StringFilter

  """Filter by the object’s `aantalcolli` field."""
  aantalcolli: IntFilter

  """Filter by the object’s `aantalpallets` field."""
  aantalpallets: IntFilter

  """Filter by the object’s `vrachtgewicht` field."""
  vrachtgewicht: BigFloatFilter

  """Filter by the object’s `cdpersoon` field."""
  cdpersoon: StringFilter

  """Filter by the object’s `persoon` field."""
  persoon: StringFilter

  """Filter by the object’s `cdbehandelddoor` field."""
  cdbehandelddoor: StringFilter

  """Filter by the object’s `behandelddoor` field."""
  behandelddoor: StringFilter

  """Filter by the object’s `vertegenwoordiger` field."""
  vertegenwoordiger: StringFilter

  """Filter by the object’s `betkenmerk` field."""
  betkenmerk: StringFilter

  """Filter by the object’s `gefiatteerd` field."""
  gefiatteerd: StringFilter

  """Filter by the object’s `cdfiatteur` field."""
  cdfiatteur: StringFilter

  """Filter by the object’s `gebruiker` field."""
  gebruiker: StringFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `sysCreate` field."""
  sysCreate: StringFilter

  """Filter by the object’s `sysUpdate` field."""
  sysUpdate: StringFilter

  """Filter by the object’s `margeblokkade` field."""
  margeblokkade: StringFilter

  """Filter by the object’s `projFactureren` field."""
  projFactureren: StringFilter

  """Filter by the object’s `offertenummer` field."""
  offertenummer: StringFilter

  """Filter by the object’s `offertevolgnr` field."""
  offertevolgnr: IntFilter

  """Filter by the object’s `factopdrachtregelsByFactuuropdracht` relation."""
  factopdrachtregelsByFactuuropdracht: FactureeropdrachtToManyFactopdrachtregelFilter

  """Some related `factopdrachtregelsByFactuuropdracht` exist."""
  factopdrachtregelsByFactuuropdrachtExist: Boolean

  """Filter by the object’s `sensorOrdersByFactuuropdracht` relation."""
  sensorOrdersByFactuuropdracht: FactureeropdrachtToManySensorOrderFilter

  """Some related `sensorOrdersByFactuuropdracht` exist."""
  sensorOrdersByFactuuropdrachtExist: Boolean

  """Filter by the object’s `debiteurByCddebiteur` relation."""
  debiteurByCddebiteur: DebiteurFilter

  """A related `debiteurByCddebiteur` exists."""
  debiteurByCddebiteurExists: Boolean

  """Checks for all expressions in this list."""
  and: [FactureeropdrachtFilter!]

  """Checks for any expressions in this list."""
  or: [FactureeropdrachtFilter!]

  """Negates the expression."""
  not: FactureeropdrachtFilter
}

"""
A filter to be used against many `Factopdrachtregel` object types. All fields are combined with a logical ‘and.’
"""
input FactureeropdrachtToManyFactopdrachtregelFilter {
  """
  Every related `Factopdrachtregel` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FactopdrachtregelFilter

  """
  Some related `Factopdrachtregel` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FactopdrachtregelFilter

  """
  No related `Factopdrachtregel` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FactopdrachtregelFilter
}

"""
A filter to be used against `Factopdrachtregel` object types. All fields are combined with a logical ‘and.’
"""
input FactopdrachtregelFilter {
  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `factuurregel` field."""
  factuurregel: IntFilter

  """Filter by the object’s `hoofdregel` field."""
  hoofdregel: IntFilter

  """Filter by the object’s `soort` field."""
  soort: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `eenheid` field."""
  eenheid: StringFilter

  """Filter by the object’s `aantaldec` field."""
  aantaldec: IntFilter

  """Filter by the object’s `aantalgeleverd` field."""
  aantalgeleverd: BigFloatFilter

  """Filter by the object’s `prijs` field."""
  prijs: BigFloatFilter

  """Filter by the object’s `prijsper` field."""
  prijsper: BigFloatFilter

  """Filter by the object’s `kortingperc` field."""
  kortingperc: BigFloatFilter

  """Filter by the object’s `factbedragincl` field."""
  factbedragincl: BigFloatFilter

  """Filter by the object’s `factbedragexcl` field."""
  factbedragexcl: BigFloatFilter

  """Filter by the object’s `btwcode` field."""
  btwcode: IntFilter

  """Filter by the object’s `btwperc` field."""
  btwperc: BigFloatFilter

  """Filter by the object’s `cdgrbrekening` field."""
  cdgrbrekening: StringFilter

  """Filter by the object’s `nettoomzet` field."""
  nettoomzet: BigFloatFilter

  """Filter by the object’s `kostprijs` field."""
  kostprijs: BigFloatFilter

  """Filter by the object’s `statcode` field."""
  statcode: StringFilter

  """Filter by the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloatFilter

  """Filter by the object’s `aantalleveren` field."""
  aantalleveren: BigFloatFilter

  """Filter by the object’s `datum` field."""
  datum: DateFilter

  """Filter by the object’s `cdstatus` field."""
  cdstatus: StringFilter

  """Filter by the object’s `aantalnaleveren` field."""
  aantalnaleveren: BigFloatFilter

  """Filter by the object’s `tekstmagb` field."""
  tekstmagb: StringFilter

  """Filter by the object’s `cdgrbrekomzvj` field."""
  cdgrbrekomzvj: StringFilter

  """Filter by the object’s `factbedragexclvj` field."""
  factbedragexclvj: BigFloatFilter

  """Filter by the object’s `aantalgereserv` field."""
  aantalgereserv: BigFloatFilter

  """Filter by the object’s `kvc` field."""
  kvc: StringFilter

  """Filter by the object’s `cdkostenplaats` field."""
  cdkostenplaats: StringFilter

  """Filter by the object’s `cddossier` field."""
  cddossier: StringFilter

  """Filter by the object’s `cdgrbrekkort` field."""
  cdgrbrekkort: StringFilter

  """Filter by the object’s `cdwerknemer` field."""
  cdwerknemer: StringFilter

  """Filter by the object’s `weeknummer` field."""
  weeknummer: IntFilter

  """Filter by the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: StringFilter

  """Filter by the object’s `koppelMetInkoop` field."""
  koppelMetInkoop: StringFilter

  """Filter by the object’s `cddeelproject` field."""
  cddeelproject: StringFilter

  """Filter by the object’s `cdtermijn` field."""
  cdtermijn: IntFilter

  """Filter by the object’s `bonnummer` field."""
  bonnummer: StringFilter

  """Filter by the object’s `projMutsoort` field."""
  projMutsoort: StringFilter

  """Filter by the object’s `voorschot` field."""
  voorschot: IntFilter

  """Filter by the object’s `cdgrbkostprijs` field."""
  cdgrbkostprijs: StringFilter

  """Filter by the object’s `cdgrbdekking` field."""
  cdgrbdekking: StringFilter

  """Filter by the object’s `samVersie` field."""
  samVersie: StringFilter

  """Filter by the object’s `declarabel` field."""
  declarabel: StringFilter

  """Filter by the object’s `vvbestand` field."""
  vvbestand: StringFilter

  """Filter by the object’s `cduursoort` field."""
  cduursoort: StringFilter

  """Filter by the object’s `projRegelFactureren` field."""
  projRegelFactureren: StringFilter

  """Filter by the object’s `projKostprijs` field."""
  projKostprijs: BigFloatFilter

  """Filter by the object’s `projKosten` field."""
  projKosten: BigFloatFilter

  """Filter by the object’s `factureeropdrachtByFactuuropdracht` relation."""
  factureeropdrachtByFactuuropdracht: FactureeropdrachtFilter

  """A related `factureeropdrachtByFactuuropdracht` exists."""
  factureeropdrachtByFactuuropdrachtExists: Boolean

  """Checks for all expressions in this list."""
  and: [FactopdrachtregelFilter!]

  """Checks for any expressions in this list."""
  or: [FactopdrachtregelFilter!]

  """Negates the expression."""
  not: FactopdrachtregelFilter
}

"""
A filter to be used against many `SensorOrder` object types. All fields are combined with a logical ‘and.’
"""
input FactureeropdrachtToManySensorOrderFilter {
  """
  Every related `SensorOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorOrderFilter

  """
  Some related `SensorOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorOrderFilter

  """
  No related `SensorOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorOrderFilter
}

"""
A filter to be used against `Debiteur` object types. All fields are combined with a logical ‘and.’
"""
input DebiteurFilter {
  """Filter by the object’s `cdrelatie` field."""
  cdrelatie: IntFilter

  """Filter by the object’s `cddebiteur` field."""
  cddebiteur: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `naam` field."""
  naam: StringFilter

  """Filter by the object’s `naamstraat` field."""
  naamstraat: StringFilter

  """Filter by the object’s `straat` field."""
  straat: StringFilter

  """Filter by the object’s `woonplaats` field."""
  woonplaats: StringFilter

  """Filter by the object’s `postcode` field."""
  postcode: StringFilter

  """Filter by the object’s `cdland` field."""
  cdland: StringFilter

  """Filter by the object’s `persoon` field."""
  persoon: StringFilter

  """Filter by the object’s `telefoon` field."""
  telefoon: StringFilter

  """Filter by the object’s `telefoonmobiel` field."""
  telefoonmobiel: StringFilter

  """Filter by the object’s `telefax` field."""
  telefax: StringFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `btwnummer` field."""
  btwnummer: StringFilter

  """Filter by the object’s `datumverif` field."""
  datumverif: DateFilter

  """Filter by the object’s `cdvaluta` field."""
  cdvaluta: StringFilter

  """Filter by the object’s `cdbetcond` field."""
  cdbetcond: StringFilter

  """Filter by the object’s `cdlevcond` field."""
  cdlevcond: StringFilter

  """Filter by the object’s `cdvert` field."""
  cdvert: StringFilter

  """Filter by the object’s `vertegenwoordiger` field."""
  vertegenwoordiger: StringFilter

  """Filter by the object’s `cdtaal` field."""
  cdtaal: StringFilter

  """Filter by the object’s `cdjournaal` field."""
  cdjournaal: IntFilter

  """Filter by the object’s `cdbtwberekenen` field."""
  cdbtwberekenen: StringFilter

  """Filter by the object’s `cdkredbep` field."""
  cdkredbep: StringFilter

  """Filter by the object’s `cdaanmanen` field."""
  cdaanmanen: StringFilter

  """Filter by the object’s `kredietlimiet` field."""
  kredietlimiet: IntFilter

  """Filter by the object’s `kortperc` field."""
  kortperc: BigFloatFilter

  """Filter by the object’s `btwscenario` field."""
  btwscenario: IntFilter

  """Filter by the object’s `homepage` field."""
  homepage: StringFilter

  """Filter by the object’s `cdstroom` field."""
  cdstroom: IntFilter

  """Filter by the object’s `cdvervoer` field."""
  cdvervoer: IntFilter

  """Filter by the object’s `cdverkeer` field."""
  cdverkeer: IntFilter

  """Filter by the object’s `cdstelsel` field."""
  cdstelsel: IntFilter

  """Filter by the object’s `cdtype` field."""
  cdtype: StringFilter

  """Filter by the object’s `cdgoedcode` field."""
  cdgoedcode: IntFilter

  """Filter by the object’s `nummerkvk` field."""
  nummerkvk: StringFilter

  """Filter by the object’s `plaatskvk` field."""
  plaatskvk: StringFilter

  """Filter by the object’s `datumkvk` field."""
  datumkvk: DateFilter

  """Filter by the object’s `cdprijslijst` field."""
  cdprijslijst: StringFilter

  """Filter by the object’s `cdverzamel` field."""
  cdverzamel: IntFilter

  """Filter by the object’s `berekenordkost` field."""
  berekenordkost: StringFilter

  """Filter by the object’s `telebankfact` field."""
  telebankfact: StringFilter

  """Filter by the object’s `isinkooporg` field."""
  isinkooporg: StringFilter

  """Filter by the object’s `ontvFactIpvLid` field."""
  ontvFactIpvLid: StringFilter

  """Filter by the object’s `ontvBorderel` field."""
  ontvBorderel: StringFilter

  """Filter by the object’s `cddebiteurInkorg` field."""
  cddebiteurInkorg: StringFilter

  """Filter by the object’s `lidnrBijInkorg` field."""
  lidnrBijInkorg: StringFilter

  """Filter by the object’s `aanmaakdatum` field."""
  aanmaakdatum: DateFilter

  """Filter by the object’s `datumltstewijz` field."""
  datumltstewijz: DateFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `inFactoring` field."""
  inFactoring: StringFilter

  """Filter by the object’s `controleBetkenmerk` field."""
  controleBetkenmerk: StringFilter

  """Filter by the object’s `cdgrbrekening` field."""
  cdgrbrekening: StringFilter

  """Filter by the object’s `ondernemersnr` field."""
  ondernemersnr: StringFilter

  """Filter by the object’s `btwExIncl` field."""
  btwExIncl: StringFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `sysCreate` field."""
  sysCreate: StringFilter

  """Filter by the object’s `sysUpdate` field."""
  sysUpdate: StringFilter

  """Filter by the object’s `overhIdNr` field."""
  overhIdNr: StringFilter

  """Filter by the object’s `factureeropdrachtsByCddebiteur` relation."""
  factureeropdrachtsByCddebiteur: DebiteurToManyFactureeropdrachtFilter

  """Some related `factureeropdrachtsByCddebiteur` exist."""
  factureeropdrachtsByCddebiteurExist: Boolean

  """Checks for all expressions in this list."""
  and: [DebiteurFilter!]

  """Checks for any expressions in this list."""
  or: [DebiteurFilter!]

  """Negates the expression."""
  not: DebiteurFilter
}

"""
A filter to be used against many `Factureeropdracht` object types. All fields are combined with a logical ‘and.’
"""
input DebiteurToManyFactureeropdrachtFilter {
  """
  Every related `Factureeropdracht` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FactureeropdrachtFilter

  """
  Some related `Factureeropdracht` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FactureeropdrachtFilter

  """
  No related `Factureeropdracht` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FactureeropdrachtFilter
}

"""
A filter to be used against many `SensorSensorElement` object types. All fields are combined with a logical ‘and.’
"""
input SensorToManySensorSensorElementFilter {
  """
  Every related `SensorSensorElement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorSensorElementFilter

  """
  Some related `SensorSensorElement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorSensorElementFilter

  """
  No related `SensorSensorElement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorSensorElementFilter
}

"""
A filter to be used against many `SensorTestResult` object types. All fields are combined with a logical ‘and.’
"""
input SensorToManySensorTestResultFilter {
  """
  Every related `SensorTestResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorTestResultFilter

  """
  Some related `SensorTestResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorTestResultFilter

  """
  No related `SensorTestResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorTestResultFilter
}

"""
A filter to be used against many `DetectorSensorType` object types. All fields are combined with a logical ‘and.’
"""
input SensorTypeToManyDetectorSensorTypeFilter {
  """
  Every related `DetectorSensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DetectorSensorTypeFilter

  """
  Some related `DetectorSensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DetectorSensorTypeFilter

  """
  No related `DetectorSensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DetectorSensorTypeFilter
}

"""
A filter to be used against `DetectorSensorType` object types. All fields are combined with a logical ‘and.’
"""
input DetectorSensorTypeFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `sensorTypeId` field."""
  sensorTypeId: IntFilter

  """Filter by the object’s `detectorId` field."""
  detectorId: IntFilter

  """Filter by the object’s `detectorPosition` field."""
  detectorPosition: IntFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `sensorTypeBySensorTypeId` relation."""
  sensorTypeBySensorTypeId: SensorTypeFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [DetectorSensorTypeFilter!]

  """Checks for any expressions in this list."""
  or: [DetectorSensorTypeFilter!]

  """Negates the expression."""
  not: DetectorSensorTypeFilter
}

"""
A filter to be used against `Electrolyte` object types. All fields are combined with a logical ‘and.’
"""
input ElectrolyteFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `replacementIntervalMonths` field."""
  replacementIntervalMonths: IntFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `volume` field."""
  volume: IntFilter

  """Filter by the object’s `sensorTypesByElectrolyteId` relation."""
  sensorTypesByElectrolyteId: ElectrolyteToManySensorTypeFilter

  """Some related `sensorTypesByElectrolyteId` exist."""
  sensorTypesByElectrolyteIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [ElectrolyteFilter!]

  """Checks for any expressions in this list."""
  or: [ElectrolyteFilter!]

  """Negates the expression."""
  not: ElectrolyteFilter
}

"""
A filter to be used against many `SensorType` object types. All fields are combined with a logical ‘and.’
"""
input ElectrolyteToManySensorTypeFilter {
  """
  Every related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorTypeFilter

  """
  Some related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorTypeFilter

  """
  No related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorTypeFilter
}

"""
A filter to be used against `Membrane` object types. All fields are combined with a logical ‘and.’
"""
input MembraneFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `replacementIntervalMonths` field."""
  replacementIntervalMonths: IntFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `quantity` field."""
  quantity: IntFilter

  """Filter by the object’s `sensorTypesByMembraneId` relation."""
  sensorTypesByMembraneId: MembraneToManySensorTypeFilter

  """Some related `sensorTypesByMembraneId` exist."""
  sensorTypesByMembraneIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [MembraneFilter!]

  """Checks for any expressions in this list."""
  or: [MembraneFilter!]

  """Negates the expression."""
  not: MembraneFilter
}

"""
A filter to be used against many `SensorType` object types. All fields are combined with a logical ‘and.’
"""
input MembraneToManySensorTypeFilter {
  """
  Every related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorTypeFilter

  """
  Some related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorTypeFilter

  """
  No related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorTypeFilter
}

"""
A filter to be used against `ORing` object types. All fields are combined with a logical ‘and.’
"""
input ORingFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `replacementIntervalMonths` field."""
  replacementIntervalMonths: IntFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `quantity` field."""
  quantity: IntFilter

  """Filter by the object’s `sensorTypesByORingId` relation."""
  sensorTypesByORingId: ORingToManySensorTypeFilter

  """Some related `sensorTypesByORingId` exist."""
  sensorTypesByORingIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [ORingFilter!]

  """Checks for any expressions in this list."""
  or: [ORingFilter!]

  """Negates the expression."""
  not: ORingFilter
}

"""
A filter to be used against many `SensorType` object types. All fields are combined with a logical ‘and.’
"""
input ORingToManySensorTypeFilter {
  """
  Every related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorTypeFilter

  """
  Some related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorTypeFilter

  """
  No related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorTypeFilter
}

"""
A filter to be used against `Plug` object types. All fields are combined with a logical ‘and.’
"""
input PlugFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `sensorTypesByPlugId` relation."""
  sensorTypesByPlugId: PlugToManySensorTypeFilter

  """Some related `sensorTypesByPlugId` exist."""
  sensorTypesByPlugIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [PlugFilter!]

  """Checks for any expressions in this list."""
  or: [PlugFilter!]

  """Negates the expression."""
  not: PlugFilter
}

"""
A filter to be used against many `SensorType` object types. All fields are combined with a logical ‘and.’
"""
input PlugToManySensorTypeFilter {
  """
  Every related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorTypeFilter

  """
  Some related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorTypeFilter

  """
  No related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorTypeFilter
}

"""
A filter to be used against many `MaintenanceVisitLine` object types. All fields are combined with a logical ‘and.’
"""
input CalGasToManyMaintenanceVisitLineFilter {
  """
  Every related `MaintenanceVisitLine` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MaintenanceVisitLineFilter

  """
  Some related `MaintenanceVisitLine` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MaintenanceVisitLineFilter

  """
  No related `MaintenanceVisitLine` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MaintenanceVisitLineFilter
}

"""
A filter to be used against many `SensorTestResult` object types. All fields are combined with a logical ‘and.’
"""
input CalGasToManySensorTestResultFilter {
  """
  Every related `SensorTestResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorTestResultFilter

  """
  Some related `SensorTestResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorTestResultFilter

  """
  No related `SensorTestResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorTestResultFilter
}

"""
A filter to be used against many `Group` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyGroupFilter {
  """
  Every related `Group` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: GroupFilter

  """
  Some related `Group` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: GroupFilter

  """
  No related `Group` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: GroupFilter
}

"""
A filter to be used against many `Sensor` object types. All fields are combined with a logical ‘and.’
"""
input UserToManySensorFilter {
  """
  Every related `Sensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorFilter

  """
  Some related `Sensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorFilter

  """
  No related `Sensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorFilter
}

"""
A filter to be used against many `DetectorSensorLocation` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyDetectorSensorLocationFilter {
  """
  Every related `DetectorSensorLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DetectorSensorLocationFilter

  """
  Some related `DetectorSensorLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DetectorSensorLocationFilter

  """
  No related `DetectorSensorLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DetectorSensorLocationFilter
}

"""
A filter to be used against many `DetectorType` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyDetectorTypeFilter {
  """
  Every related `DetectorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DetectorTypeFilter

  """
  Some related `DetectorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DetectorTypeFilter

  """
  No related `DetectorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DetectorTypeFilter
}

"""
A filter to be used against many `DetectorSensor` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyDetectorSensorFilter {
  """
  Every related `DetectorSensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DetectorSensorFilter

  """
  Some related `DetectorSensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DetectorSensorFilter

  """
  No related `DetectorSensor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DetectorSensorFilter
}

"""
A filter to be used against many `Area` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyAreaFilter {
  """
  Every related `Area` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AreaFilter

  """
  Some related `Area` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AreaFilter

  """
  No related `Area` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AreaFilter
}

"""
A filter to be used against many `Building` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyBuildingFilter {
  """
  Every related `Building` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: BuildingFilter

  """
  Some related `Building` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: BuildingFilter

  """
  No related `Building` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: BuildingFilter
}

"""
A filter to be used against many `Detector` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyDetectorFilter {
  """
  Every related `Detector` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DetectorFilter

  """
  Some related `Detector` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DetectorFilter

  """
  No related `Detector` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DetectorFilter
}

"""
A filter to be used against many `EndUser` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyEndUserFilter {
  """
  Every related `EndUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EndUserFilter

  """
  Some related `EndUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EndUserFilter

  """
  No related `EndUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EndUserFilter
}

"""
A filter to be used against many `Range` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyRangeFilter {
  """
  Every related `Range` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RangeFilter

  """
  Some related `Range` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RangeFilter

  """
  No related `Range` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RangeFilter
}

"""
A filter to be used against many `Floor` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyFloorFilter {
  """
  Every related `Floor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FloorFilter

  """
  Some related `Floor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FloorFilter

  """
  No related `Floor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FloorFilter
}

"""
A filter to be used against many `Gas` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyGasFilter {
  """
  Every related `Gas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: GasFilter

  """
  Some related `Gas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: GasFilter

  """
  No related `Gas` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: GasFilter
}

"""
A filter to be used against many `SamplePoint` object types. All fields are combined with a logical ‘and.’
"""
input UserToManySamplePointFilter {
  """
  Every related `SamplePoint` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SamplePointFilter

  """
  Some related `SamplePoint` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SamplePointFilter

  """
  No related `SamplePoint` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SamplePointFilter
}

"""
A filter to be used against many `SensorType` object types. All fields are combined with a logical ‘and.’
"""
input UserToManySensorTypeFilter {
  """
  Every related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorTypeFilter

  """
  Some related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorTypeFilter

  """
  No related `SensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorTypeFilter
}

"""
A filter to be used against many `Action` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyActionFilter {
  """
  Every related `Action` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ActionFilter

  """
  Some related `Action` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ActionFilter

  """
  No related `Action` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ActionFilter
}

"""
A filter to be used against many `Application` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyApplicationFilter {
  """
  Every related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationFilter

  """
  Some related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationFilter

  """
  No related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationFilter
}

"""
A filter to be used against many `Assembly` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyAssemblyFilter {
  """
  Every related `Assembly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AssemblyFilter

  """
  Some related `Assembly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AssemblyFilter

  """
  No related `Assembly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AssemblyFilter
}

"""
A filter to be used against `Assembly` object types. All fields are combined with a logical ‘and.’
"""
input AssemblyFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `code` field."""
  code: StringFilter

  """Filter by the object’s `startSerialNumber` field."""
  startSerialNumber: StringFilter

  """Filter by the object’s `quantity` field."""
  quantity: IntFilter

  """Filter by the object’s `assemblyTypeId` field."""
  assemblyTypeId: IntFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `completed` field."""
  completed: BooleanFilter

  """Filter by the object’s `mvDoc` field."""
  mvDoc: StringFilter

  """Filter by the object’s `checked` field."""
  checked: BooleanFilter

  """Filter by the object’s `po` field."""
  po: BooleanFilter

  """Filter by the object’s `assemblyTypeByAssemblyTypeId` relation."""
  assemblyTypeByAssemblyTypeId: AssemblyTypeFilter

  """A related `assemblyTypeByAssemblyTypeId` exists."""
  assemblyTypeByAssemblyTypeIdExists: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [AssemblyFilter!]

  """Checks for any expressions in this list."""
  or: [AssemblyFilter!]

  """Negates the expression."""
  not: AssemblyFilter
}

"""
A filter to be used against `AssemblyType` object types. All fields are combined with a logical ‘and.’
"""
input AssemblyTypeFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `assembliesByAssemblyTypeId` relation."""
  assembliesByAssemblyTypeId: AssemblyTypeToManyAssemblyFilter

  """Some related `assembliesByAssemblyTypeId` exist."""
  assembliesByAssemblyTypeIdExist: Boolean

  """Filter by the object’s `assemblyTypePartsByAssemblyTypeId` relation."""
  assemblyTypePartsByAssemblyTypeId: AssemblyTypeToManyAssemblyTypePartFilter

  """Some related `assemblyTypePartsByAssemblyTypeId` exist."""
  assemblyTypePartsByAssemblyTypeIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Filter by the object’s `artikelByCdartikel` relation."""
  artikelByCdartikel: ArtikelFilter

  """A related `artikelByCdartikel` exists."""
  artikelByCdartikelExists: Boolean

  """Checks for all expressions in this list."""
  and: [AssemblyTypeFilter!]

  """Checks for any expressions in this list."""
  or: [AssemblyTypeFilter!]

  """Negates the expression."""
  not: AssemblyTypeFilter
}

"""
A filter to be used against many `Assembly` object types. All fields are combined with a logical ‘and.’
"""
input AssemblyTypeToManyAssemblyFilter {
  """
  Every related `Assembly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AssemblyFilter

  """
  Some related `Assembly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AssemblyFilter

  """
  No related `Assembly` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AssemblyFilter
}

"""
A filter to be used against many `AssemblyTypePart` object types. All fields are combined with a logical ‘and.’
"""
input AssemblyTypeToManyAssemblyTypePartFilter {
  """
  Every related `AssemblyTypePart` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AssemblyTypePartFilter

  """
  Some related `AssemblyTypePart` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AssemblyTypePartFilter

  """
  No related `AssemblyTypePart` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AssemblyTypePartFilter
}

"""
A filter to be used against `AssemblyTypePart` object types. All fields are combined with a logical ‘and.’
"""
input AssemblyTypePartFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `assemblyTypeId` field."""
  assemblyTypeId: IntFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `quantity` field."""
  quantity: FloatFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `prijsper` field."""
  prijsper: BigFloatFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `bestcode` field."""
  bestcode: StringFilter

  """Filter by the object’s `locatie` field."""
  locatie: StringFilter

  """Filter by the object’s `verrekenprijs` field."""
  verrekenprijs: BigFloatFilter

  """Filter by the object’s `assemblyTypeByAssemblyTypeId` relation."""
  assemblyTypeByAssemblyTypeId: AssemblyTypeFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [AssemblyTypePartFilter!]

  """Checks for any expressions in this list."""
  or: [AssemblyTypePartFilter!]

  """Negates the expression."""
  not: AssemblyTypePartFilter
}

"""
A filter to be used against `Artikel` object types. All fields are combined with a logical ‘and.’
"""
input ArtikelFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `soort` field."""
  soort: StringFilter

  """Filter by the object’s `cdartgroep` field."""
  cdartgroep: StringFilter

  """Filter by the object’s `cdgrbrekening` field."""
  cdgrbrekening: StringFilter

  """Filter by the object’s `prijsper` field."""
  prijsper: BigFloatFilter

  """Filter by the object’s `aantaldec` field."""
  aantaldec: IntFilter

  """Filter by the object’s `prijsincl` field."""
  prijsincl: BigFloatFilter

  """Filter by the object’s `prijsexcl` field."""
  prijsexcl: BigFloatFilter

  """Filter by the object’s `verrekenprijs` field."""
  verrekenprijs: BigFloatFilter

  """Filter by the object’s `voorraad` field."""
  voorraad: BigFloatFilter

  """Filter by the object’s `minvoorraad` field."""
  minvoorraad: BigFloatFilter

  """Filter by the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloatFilter

  """Filter by the object’s `eenheid` field."""
  eenheid: StringFilter

  """Filter by the object’s `btwcode` field."""
  btwcode: IntFilter

  """Filter by the object’s `cdartkortgrp` field."""
  cdartkortgrp: StringFilter

  """Filter by the object’s `cdgoedcode` field."""
  cdgoedcode: IntFilter

  """Filter by the object’s `gewicht` field."""
  gewicht: BigFloatFilter

  """Filter by the object’s `aanveenh` field."""
  aanveenh: BigFloatFilter

  """Filter by the object’s `inkvolgnr` field."""
  inkvolgnr: IntFilter

  """Filter by the object’s `uitloop` field."""
  uitloop: StringFilter

  """Filter by the object’s `aanmaakdatum` field."""
  aanmaakdatum: DateFilter

  """Filter by the object’s `opweb` field."""
  opweb: StringFilter

  """Filter by the object’s `magbon` field."""
  magbon: StringFilter

  """Filter by the object’s `pakbon` field."""
  pakbon: StringFilter

  """Filter by the object’s `factuur` field."""
  factuur: StringFilter

  """Filter by the object’s `cdgrbrekkort` field."""
  cdgrbrekkort: StringFilter

  """Filter by the object’s `datumltstewijz` field."""
  datumltstewijz: DateFilter

  """Filter by the object’s `cdgrbrekdekking` field."""
  cdgrbrekdekking: StringFilter

  """Filter by the object’s `projOpslag` field."""
  projOpslag: BigFloatFilter

  """Filter by the object’s `projMutsoort` field."""
  projMutsoort: StringFilter

  """Filter by the object’s `eannummer` field."""
  eannummer: StringFilter

  """Filter by the object’s `afdrukSamOpOfferte` field."""
  afdrukSamOpOfferte: StringFilter

  """Filter by the object’s `samVersie` field."""
  samVersie: StringFilter

  """Filter by the object’s `assemblageArtikel` field."""
  assemblageArtikel: StringFilter

  """Filter by the object’s `margePerc` field."""
  margePerc: BigFloatFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `sysCreate` field."""
  sysCreate: StringFilter

  """Filter by the object’s `sysUpdate` field."""
  sysUpdate: StringFilter

  """Filter by the object’s `vvbestand` field."""
  vvbestand: StringFilter

  """Filter by the object’s `vvgroep` field."""
  vvgroep: StringFilter

  """Filter by the object’s `vvvrijvelda` field."""
  vvvrijvelda: StringFilter

  """Filter by the object’s `vvvrijveldb` field."""
  vvvrijveldb: StringFilter

  """Filter by the object’s `cdlandOorspr` field."""
  cdlandOorspr: StringFilter

  """Filter by the object’s `assemblyTypesByCdartikel` relation."""
  assemblyTypesByCdartikel: ArtikelToManyAssemblyTypeFilter

  """Some related `assemblyTypesByCdartikel` exist."""
  assemblyTypesByCdartikelExist: Boolean

  """Checks for all expressions in this list."""
  and: [ArtikelFilter!]

  """Checks for any expressions in this list."""
  or: [ArtikelFilter!]

  """Negates the expression."""
  not: ArtikelFilter
}

"""
A filter to be used against many `AssemblyType` object types. All fields are combined with a logical ‘and.’
"""
input ArtikelToManyAssemblyTypeFilter {
  """
  Every related `AssemblyType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AssemblyTypeFilter

  """
  Some related `AssemblyType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AssemblyTypeFilter

  """
  No related `AssemblyType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AssemblyTypeFilter
}

"""
A filter to be used against many `AssemblyPart` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyAssemblyPartFilter {
  """
  Every related `AssemblyPart` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AssemblyPartFilter

  """
  Some related `AssemblyPart` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AssemblyPartFilter

  """
  No related `AssemblyPart` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AssemblyPartFilter
}

"""
A filter to be used against `AssemblyPart` object types. All fields are combined with a logical ‘and.’
"""
input AssemblyPartFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `assemblyId` field."""
  assemblyId: IntFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `used1` field."""
  used1: StringFilter

  """Filter by the object’s `used2` field."""
  used2: StringFilter

  """Filter by the object’s `short` field."""
  short: StringFilter

  """Filter by the object’s `po` field."""
  po: StringFilter

  """Filter by the object’s `quantity` field."""
  quantity: FloatFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ext` field."""
  ext: StringFilter

  """Filter by the object’s `xxx` field."""
  xxx: StringFilter

  """Filter by the object’s `usedQuantity` field."""
  usedQuantity: StringFilter

  """Filter by the object’s `deliveryEstimate` field."""
  deliveryEstimate: StringFilter

  """Filter by the object’s `prijsper` field."""
  prijsper: BigFloatFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `bestcode` field."""
  bestcode: StringFilter

  """Filter by the object’s `locatie` field."""
  locatie: StringFilter

  """Filter by the object’s `verrekenprijs` field."""
  verrekenprijs: BigFloatFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [AssemblyPartFilter!]

  """Checks for any expressions in this list."""
  or: [AssemblyPartFilter!]

  """Negates the expression."""
  not: AssemblyPartFilter
}

"""
A filter to be used against many `AssemblyTypePart` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyAssemblyTypePartFilter {
  """
  Every related `AssemblyTypePart` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AssemblyTypePartFilter

  """
  Some related `AssemblyTypePart` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AssemblyTypePartFilter

  """
  No related `AssemblyTypePart` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AssemblyTypePartFilter
}

"""
A filter to be used against many `AssemblyType` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyAssemblyTypeFilter {
  """
  Every related `AssemblyType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AssemblyTypeFilter

  """
  Some related `AssemblyType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AssemblyTypeFilter

  """
  No related `AssemblyType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AssemblyTypeFilter
}

"""
A filter to be used against many `StockSupplier` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyStockSupplierFilter {
  """
  Every related `StockSupplier` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StockSupplierFilter

  """
  Some related `StockSupplier` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StockSupplierFilter

  """
  No related `StockSupplier` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StockSupplierFilter
}

"""
A filter to be used against `StockSupplier` object types. All fields are combined with a logical ‘and.’
"""
input StockSupplierFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `cdcrediteur` field."""
  cdcrediteur: StringFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `shipmentDays` field."""
  shipmentDays: IntFilter

  """Filter by the object’s `shipmentDay` field."""
  shipmentDay: IntFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [StockSupplierFilter!]

  """Checks for any expressions in this list."""
  or: [StockSupplierFilter!]

  """Negates the expression."""
  not: StockSupplierFilter
}

"""
A filter to be used against many `CatalogGroup` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyCatalogGroupFilter {
  """
  Every related `CatalogGroup` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CatalogGroupFilter

  """
  Some related `CatalogGroup` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CatalogGroupFilter

  """
  No related `CatalogGroup` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CatalogGroupFilter
}

"""
A filter to be used against `CatalogGroup` object types. All fields are combined with a logical ‘and.’
"""
input CatalogGroupFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `sortCode` field."""
  sortCode: StringFilter

  """Filter by the object’s `catalogSubGroupsByCatalogGroupId` relation."""
  catalogSubGroupsByCatalogGroupId: CatalogGroupToManyCatalogSubGroupFilter

  """Some related `catalogSubGroupsByCatalogGroupId` exist."""
  catalogSubGroupsByCatalogGroupIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [CatalogGroupFilter!]

  """Checks for any expressions in this list."""
  or: [CatalogGroupFilter!]

  """Negates the expression."""
  not: CatalogGroupFilter
}

"""
A filter to be used against many `CatalogSubGroup` object types. All fields are combined with a logical ‘and.’
"""
input CatalogGroupToManyCatalogSubGroupFilter {
  """
  Every related `CatalogSubGroup` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CatalogSubGroupFilter

  """
  Some related `CatalogSubGroup` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CatalogSubGroupFilter

  """
  No related `CatalogSubGroup` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CatalogSubGroupFilter
}

"""
A filter to be used against `CatalogSubGroup` object types. All fields are combined with a logical ‘and.’
"""
input CatalogSubGroupFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `catalogGroupId` field."""
  catalogGroupId: IntFilter

  """Filter by the object’s `sortCode` field."""
  sortCode: StringFilter

  """Filter by the object’s `catalogItemsByCatalogSubGroupId` relation."""
  catalogItemsByCatalogSubGroupId: CatalogSubGroupToManyCatalogItemFilter

  """Some related `catalogItemsByCatalogSubGroupId` exist."""
  catalogItemsByCatalogSubGroupIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Filter by the object’s `catalogGroupByCatalogGroupId` relation."""
  catalogGroupByCatalogGroupId: CatalogGroupFilter

  """Checks for all expressions in this list."""
  and: [CatalogSubGroupFilter!]

  """Checks for any expressions in this list."""
  or: [CatalogSubGroupFilter!]

  """Negates the expression."""
  not: CatalogSubGroupFilter
}

"""
A filter to be used against many `CatalogItem` object types. All fields are combined with a logical ‘and.’
"""
input CatalogSubGroupToManyCatalogItemFilter {
  """
  Every related `CatalogItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CatalogItemFilter

  """
  Some related `CatalogItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CatalogItemFilter

  """
  No related `CatalogItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CatalogItemFilter
}

"""
A filter to be used against `CatalogItem` object types. All fields are combined with a logical ‘and.’
"""
input CatalogItemFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `catalogSubGroupId` field."""
  catalogSubGroupId: IntFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `remarks` field."""
  remarks: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `defaultItem` field."""
  defaultItem: BooleanFilter

  """Filter by the object’s `sortCode` field."""
  sortCode: StringFilter

  """Filter by the object’s `catalogItemFilesByCatalogItemId` relation."""
  catalogItemFilesByCatalogItemId: CatalogItemToManyCatalogItemFileFilter

  """Some related `catalogItemFilesByCatalogItemId` exist."""
  catalogItemFilesByCatalogItemIdExist: Boolean

  """
  Filter by the object’s `catalogItemRelationsByParentCatalogItemId` relation.
  """
  catalogItemRelationsByParentCatalogItemId: CatalogItemToManyCatalogItemRelationFilter

  """Some related `catalogItemRelationsByParentCatalogItemId` exist."""
  catalogItemRelationsByParentCatalogItemIdExist: Boolean

  """
  Filter by the object’s `catalogItemRelationsByChildCatalogItemId` relation.
  """
  catalogItemRelationsByChildCatalogItemId: CatalogItemToManyCatalogItemRelationFilter

  """Some related `catalogItemRelationsByChildCatalogItemId` exist."""
  catalogItemRelationsByChildCatalogItemIdExist: Boolean

  """Filter by the object’s `catalogSubGroupByCatalogSubGroupId` relation."""
  catalogSubGroupByCatalogSubGroupId: CatalogSubGroupFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [CatalogItemFilter!]

  """Checks for any expressions in this list."""
  or: [CatalogItemFilter!]

  """Negates the expression."""
  not: CatalogItemFilter
}

"""
A filter to be used against many `CatalogItemFile` object types. All fields are combined with a logical ‘and.’
"""
input CatalogItemToManyCatalogItemFileFilter {
  """
  Every related `CatalogItemFile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CatalogItemFileFilter

  """
  Some related `CatalogItemFile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CatalogItemFileFilter

  """
  No related `CatalogItemFile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CatalogItemFileFilter
}

"""
A filter to be used against `CatalogItemFile` object types. All fields are combined with a logical ‘and.’
"""
input CatalogItemFileFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `filename` field."""
  filename: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `catalogItemId` field."""
  catalogItemId: IntFilter

  """Filter by the object’s `type` field."""
  type: IntFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Filter by the object’s `catalogItemByCatalogItemId` relation."""
  catalogItemByCatalogItemId: CatalogItemFilter

  """Checks for all expressions in this list."""
  and: [CatalogItemFileFilter!]

  """Checks for any expressions in this list."""
  or: [CatalogItemFileFilter!]

  """Negates the expression."""
  not: CatalogItemFileFilter
}

"""
A filter to be used against many `CatalogItemRelation` object types. All fields are combined with a logical ‘and.’
"""
input CatalogItemToManyCatalogItemRelationFilter {
  """
  Every related `CatalogItemRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CatalogItemRelationFilter

  """
  Some related `CatalogItemRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CatalogItemRelationFilter

  """
  No related `CatalogItemRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CatalogItemRelationFilter
}

"""
A filter to be used against `CatalogItemRelation` object types. All fields are combined with a logical ‘and.’
"""
input CatalogItemRelationFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `parentCatalogItemId` field."""
  parentCatalogItemId: IntFilter

  """Filter by the object’s `childCatalogItemId` field."""
  childCatalogItemId: IntFilter

  """Filter by the object’s `catalogItemByParentCatalogItemId` relation."""
  catalogItemByParentCatalogItemId: CatalogItemFilter

  """Filter by the object’s `catalogItemByChildCatalogItemId` relation."""
  catalogItemByChildCatalogItemId: CatalogItemFilter

  """Checks for all expressions in this list."""
  and: [CatalogItemRelationFilter!]

  """Checks for any expressions in this list."""
  or: [CatalogItemRelationFilter!]

  """Negates the expression."""
  not: CatalogItemRelationFilter
}

"""
A filter to be used against many `CatalogItemFile` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyCatalogItemFileFilter {
  """
  Every related `CatalogItemFile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CatalogItemFileFilter

  """
  Some related `CatalogItemFile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CatalogItemFileFilter

  """
  No related `CatalogItemFile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CatalogItemFileFilter
}

"""
A filter to be used against many `CatalogItem` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyCatalogItemFilter {
  """
  Every related `CatalogItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CatalogItemFilter

  """
  Some related `CatalogItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CatalogItemFilter

  """
  No related `CatalogItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CatalogItemFilter
}

"""
A filter to be used against many `CatalogSubGroup` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyCatalogSubGroupFilter {
  """
  Every related `CatalogSubGroup` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CatalogSubGroupFilter

  """
  Some related `CatalogSubGroup` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CatalogSubGroupFilter

  """
  No related `CatalogSubGroup` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CatalogSubGroupFilter
}

"""
A filter to be used against many `ChemicalCompound` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyChemicalCompoundFilter {
  """
  Every related `ChemicalCompound` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ChemicalCompoundFilter

  """
  Some related `ChemicalCompound` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ChemicalCompoundFilter

  """
  No related `ChemicalCompound` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ChemicalCompoundFilter
}

"""
A filter to be used against many `DetectorLocation` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyDetectorLocationFilter {
  """
  Every related `DetectorLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DetectorLocationFilter

  """
  Some related `DetectorLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DetectorLocationFilter

  """
  No related `DetectorLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DetectorLocationFilter
}

"""
A filter to be used against many `DetectorOrder` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyDetectorOrderFilter {
  """
  Every related `DetectorOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DetectorOrderFilter

  """
  Some related `DetectorOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DetectorOrderFilter

  """
  No related `DetectorOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DetectorOrderFilter
}

"""
A filter to be used against many `Electrolyte` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyElectrolyteFilter {
  """
  Every related `Electrolyte` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ElectrolyteFilter

  """
  Some related `Electrolyte` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ElectrolyteFilter

  """
  No related `Electrolyte` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ElectrolyteFilter
}

"""
A filter to be used against many `Filter` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyFilterFilter {
  """
  Every related `Filter` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FilterFilter

  """
  Some related `Filter` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FilterFilter

  """
  No related `Filter` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FilterFilter
}

"""
A filter to be used against many `MaintenanceVisit` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyMaintenanceVisitFilter {
  """
  Every related `MaintenanceVisit` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MaintenanceVisitFilter

  """
  Some related `MaintenanceVisit` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MaintenanceVisitFilter

  """
  No related `MaintenanceVisit` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MaintenanceVisitFilter
}

"""
A filter to be used against many `Membrane` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyMembraneFilter {
  """
  Every related `Membrane` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MembraneFilter

  """
  Some related `Membrane` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MembraneFilter

  """
  No related `Membrane` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MembraneFilter
}

"""
A filter to be used against many `ORing` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyORingFilter {
  """
  Every related `ORing` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ORingFilter

  """
  Some related `ORing` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ORingFilter

  """
  No related `ORing` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ORingFilter
}

"""
A filter to be used against many `Pyrolyser` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyPyrolyserFilter {
  """
  Every related `Pyrolyser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PyrolyserFilter

  """
  Some related `Pyrolyser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PyrolyserFilter

  """
  No related `Pyrolyser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PyrolyserFilter
}

"""
A filter to be used against many `DetectorSensorType` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyDetectorSensorTypeFilter {
  """
  Every related `DetectorSensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DetectorSensorTypeFilter

  """
  Some related `DetectorSensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DetectorSensorTypeFilter

  """
  No related `DetectorSensorType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DetectorSensorTypeFilter
}

"""
A filter to be used against many `DpCard` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyDpCardFilter {
  """
  Every related `DpCard` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DpCardFilter

  """
  Some related `DpCard` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DpCardFilter

  """
  No related `DpCard` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DpCardFilter
}

"""
A filter to be used against `DpCard` object types. All fields are combined with a logical ‘and.’
"""
input DpCardFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `serialNumber` field."""
  serialNumber: StringFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [DpCardFilter!]

  """Checks for any expressions in this list."""
  or: [DpCardFilter!]

  """Negates the expression."""
  not: DpCardFilter
}

"""
A filter to be used against many `FactopdrachtregelLineRemark` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyFactopdrachtregelLineRemarkFilter {
  """
  Every related `FactopdrachtregelLineRemark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FactopdrachtregelLineRemarkFilter

  """
  Some related `FactopdrachtregelLineRemark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FactopdrachtregelLineRemarkFilter

  """
  No related `FactopdrachtregelLineRemark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FactopdrachtregelLineRemarkFilter
}

"""
A filter to be used against `FactopdrachtregelLineRemark` object types. All fields are combined with a logical ‘and.’
"""
input FactopdrachtregelLineRemarkFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `remark` field."""
  remark: StringFilter

  """Filter by the object’s `attention` field."""
  attention: BooleanFilter

  """Filter by the object’s `factopdrachtregelLineId` field."""
  factopdrachtregelLineId: IntFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `userByUserId` relation."""
  userByUserId: UserFilter

  """A related `userByUserId` exists."""
  userByUserIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [FactopdrachtregelLineRemarkFilter!]

  """Checks for any expressions in this list."""
  or: [FactopdrachtregelLineRemarkFilter!]

  """Negates the expression."""
  not: FactopdrachtregelLineRemarkFilter
}

"""
A filter to be used against many `Factuur` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyFactuurFilter {
  """
  Every related `Factuur` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FactuurFilter

  """
  Some related `Factuur` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FactuurFilter

  """
  No related `Factuur` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FactuurFilter
}

"""
A filter to be used against `Factuur` object types. All fields are combined with a logical ‘and.’
"""
input FactuurFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `filename` field."""
  filename: StringFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `checked` field."""
  checked: BooleanFilter

  """Filter by the object’s `sent` field."""
  sent: BooleanFilter

  """Filter by the object’s `checkedId` field."""
  checkedId: IntFilter

  """Filter by the object’s `sentId` field."""
  sentId: IntFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Filter by the object’s `userByCheckedId` relation."""
  userByCheckedId: UserFilter

  """A related `userByCheckedId` exists."""
  userByCheckedIdExists: Boolean

  """Filter by the object’s `userBySentId` relation."""
  userBySentId: UserFilter

  """A related `userBySentId` exists."""
  userBySentIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [FactuurFilter!]

  """Checks for any expressions in this list."""
  or: [FactuurFilter!]

  """Negates the expression."""
  not: FactuurFilter
}

"""
A filter to be used against many `Hardware` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyHardwareFilter {
  """
  Every related `Hardware` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: HardwareFilter

  """
  Some related `Hardware` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: HardwareFilter

  """
  No related `Hardware` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: HardwareFilter
}

"""
A filter to be used against `Hardware` object types. All fields are combined with a logical ‘and.’
"""
input HardwareFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `serialNumber` field."""
  serialNumber: StringFilter

  """Filter by the object’s `purchaseDate` field."""
  purchaseDate: DateFilter

  """Filter by the object’s `remarks` field."""
  remarks: StringFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `specs` field."""
  specs: StringFilter

  """Filter by the object’s `model` field."""
  model: StringFilter

  """Filter by the object’s `macAddress` field."""
  macAddress: StringFilter

  """Filter by the object’s `ipAddress` field."""
  ipAddress: StringFilter

  """Filter by the object’s `operatingSystem` field."""
  operatingSystem: StringFilter

  """Filter by the object’s `ordernummer` field."""
  ordernummer: StringFilter

  """Filter by the object’s `prijs` field."""
  prijs: BigFloatFilter

  """Filter by the object’s `softwaresByHardwareId` relation."""
  softwaresByHardwareId: HardwareToManySoftwareFilter

  """Some related `softwaresByHardwareId` exist."""
  softwaresByHardwareIdExist: Boolean

  """Filter by the object’s `userByUserId` relation."""
  userByUserId: UserFilter

  """A related `userByUserId` exists."""
  userByUserIdExists: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [HardwareFilter!]

  """Checks for any expressions in this list."""
  or: [HardwareFilter!]

  """Negates the expression."""
  not: HardwareFilter
}

"""
A filter to be used against many `Software` object types. All fields are combined with a logical ‘and.’
"""
input HardwareToManySoftwareFilter {
  """
  Every related `Software` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SoftwareFilter

  """
  Some related `Software` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SoftwareFilter

  """
  No related `Software` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SoftwareFilter
}

"""
A filter to be used against `Software` object types. All fields are combined with a logical ‘and.’
"""
input SoftwareFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `serialNumber` field."""
  serialNumber: StringFilter

  """Filter by the object’s `purchaseDate` field."""
  purchaseDate: DateFilter

  """Filter by the object’s `hardwareId` field."""
  hardwareId: IntFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `remarks` field."""
  remarks: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `registrationCode` field."""
  registrationCode: StringFilter

  """Filter by the object’s `activationCode` field."""
  activationCode: StringFilter

  """Filter by the object’s `login` field."""
  login: StringFilter

  """Filter by the object’s `password` field."""
  password: StringFilter

  """Filter by the object’s `hardwareByHardwareId` relation."""
  hardwareByHardwareId: HardwareFilter

  """A related `hardwareByHardwareId` exists."""
  hardwareByHardwareIdExists: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [SoftwareFilter!]

  """Checks for any expressions in this list."""
  or: [SoftwareFilter!]

  """Negates the expression."""
  not: SoftwareFilter
}

"""
A filter to be used against many `IncomingDocument` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyIncomingDocumentFilter {
  """
  Every related `IncomingDocument` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: IncomingDocumentFilter

  """
  Some related `IncomingDocument` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: IncomingDocumentFilter

  """
  No related `IncomingDocument` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: IncomingDocumentFilter
}

"""
A filter to be used against `IncomingDocument` object types. All fields are combined with a logical ‘and.’
"""
input IncomingDocumentFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `amount` field."""
  amount: FloatFilter

  """Filter by the object’s `isovaluta` field."""
  isovaluta: StringFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `date` field."""
  date: DateFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Filter by the object’s `userByUserId` relation."""
  userByUserId: UserFilter

  """Checks for all expressions in this list."""
  and: [IncomingDocumentFilter!]

  """Checks for any expressions in this list."""
  or: [IncomingDocumentFilter!]

  """Negates the expression."""
  not: IncomingDocumentFilter
}

"""
A filter to be used against many `Item` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyItemFilter {
  """
  Every related `Item` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ItemFilter

  """
  Some related `Item` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ItemFilter

  """
  No related `Item` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ItemFilter
}

"""
A filter to be used against many `Job` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyJobFilter {
  """
  Every related `Job` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: JobFilter

  """
  Some related `Job` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: JobFilter

  """
  No related `Job` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: JobFilter
}

"""
A filter to be used against many `JunctionBox` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyJunctionBoxFilter {
  """
  Every related `JunctionBox` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: JunctionBoxFilter

  """
  Some related `JunctionBox` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: JunctionBoxFilter

  """
  No related `JunctionBox` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: JunctionBoxFilter
}

"""
A filter to be used against `JunctionBox` object types. All fields are combined with a logical ‘and.’
"""
input JunctionBoxFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `serialNumber` field."""
  serialNumber: StringFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [JunctionBoxFilter!]

  """Checks for any expressions in this list."""
  or: [JunctionBoxFilter!]

  """Negates the expression."""
  not: JunctionBoxFilter
}

"""
A filter to be used against many `Lead` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyLeadFilter {
  """
  Every related `Lead` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LeadFilter

  """
  Some related `Lead` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LeadFilter

  """
  No related `Lead` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LeadFilter
}

"""
A filter to be used against `Lead` object types. All fields are combined with a logical ‘and.’
"""
input LeadFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `country` field."""
  country: StringFilter

  """Filter by the object’s `dateOfLastVisit` field."""
  dateOfLastVisit: DateFilter

  """Filter by the object’s `dateOfLastRequest` field."""
  dateOfLastRequest: DateFilter

  """Filter by the object’s `company` field."""
  company: StringFilter

  """Filter by the object’s `lastName` field."""
  lastName: StringFilter

  """Filter by the object’s `firstName` field."""
  firstName: StringFilter

  """Filter by the object’s `telephone` field."""
  telephone: StringFilter

  """Filter by the object’s `contactEmail` field."""
  contactEmail: StringFilter

  """Filter by the object’s `webSite` field."""
  webSite: StringFilter

  """Filter by the object’s `businessSector` field."""
  businessSector: StringFilter

  """Filter by the object’s `typeOfCompany` field."""
  typeOfCompany: StringFilter

  """Filter by the object’s `address` field."""
  address: StringFilter

  """Filter by the object’s `zipCode` field."""
  zipCode: StringFilter

  """Filter by the object’s `city` field."""
  city: StringFilter

  """Filter by the object’s `requests` field."""
  requests: StringFilter

  """Filter by the object’s `clickThroughsToYourSite` field."""
  clickThroughsToYourSite: StringFilter

  """Filter by the object’s `viewedElements` field."""
  viewedElements: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `noOfEmployees` field."""
  noOfEmployees: StringFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [LeadFilter!]

  """Checks for any expressions in this list."""
  or: [LeadFilter!]

  """Negates the expression."""
  not: LeadFilter
}

"""
A filter to be used against many `LicenseCustomer` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyLicenseCustomerFilter {
  """
  Every related `LicenseCustomer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LicenseCustomerFilter

  """
  Some related `LicenseCustomer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LicenseCustomerFilter

  """
  No related `LicenseCustomer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LicenseCustomerFilter
}

"""
A filter to be used against many `LicenseModule` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyLicenseModuleFilter {
  """
  Every related `LicenseModule` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LicenseModuleFilter

  """
  Some related `LicenseModule` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LicenseModuleFilter

  """
  No related `LicenseModule` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LicenseModuleFilter
}

"""
A filter to be used against many `LicenseOrder` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyLicenseOrderFilter {
  """
  Every related `LicenseOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LicenseOrderFilter

  """
  Some related `LicenseOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LicenseOrderFilter

  """
  No related `LicenseOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LicenseOrderFilter
}

"""
A filter to be used against many `LicenseRegistration` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyLicenseRegistrationFilter {
  """
  Every related `LicenseRegistration` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LicenseRegistrationFilter

  """
  Some related `LicenseRegistration` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LicenseRegistrationFilter

  """
  No related `LicenseRegistration` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LicenseRegistrationFilter
}

"""
A filter to be used against many `License` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyLicenseFilter {
  """
  Every related `License` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LicenseFilter

  """
  Some related `License` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LicenseFilter

  """
  No related `License` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LicenseFilter
}

"""
A filter to be used against many `OfferteRemark` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyOfferteRemarkFilter {
  """
  Every related `OfferteRemark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: OfferteRemarkFilter

  """
  Some related `OfferteRemark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: OfferteRemarkFilter

  """
  No related `OfferteRemark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: OfferteRemarkFilter
}

"""
A filter to be used against `OfferteRemark` object types. All fields are combined with a logical ‘and.’
"""
input OfferteRemarkFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `offerteId` field."""
  offerteId: StringFilter

  """Filter by the object’s `actions` field."""
  actions: StringFilter

  """Filter by the object’s `actionDate` field."""
  actionDate: DateFilter

  """Filter by the object’s `decisionDate` field."""
  decisionDate: DateFilter

  """Filter by the object’s `kans` field."""
  kans: BigFloatFilter

  """Filter by the object’s `rejectRequest` field."""
  rejectRequest: BooleanFilter

  """Filter by the object’s `statusApproved` field."""
  statusApproved: BooleanFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `competitors` field."""
  competitors: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `representative` field."""
  representative: StringFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [OfferteRemarkFilter!]

  """Checks for any expressions in this list."""
  or: [OfferteRemarkFilter!]

  """Negates the expression."""
  not: OfferteRemarkFilter
}

"""
A filter to be used against many `Opportunity` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyOpportunityFilter {
  """
  Every related `Opportunity` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: OpportunityFilter

  """
  Some related `Opportunity` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: OpportunityFilter

  """
  No related `Opportunity` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: OpportunityFilter
}

"""
A filter to be used against `Opportunity` object types. All fields are combined with a logical ‘and.’
"""
input OpportunityFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `source` field."""
  source: StringFilter

  """Filter by the object’s `customer` field."""
  customer: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `amount` field."""
  amount: BigFloatFilter

  """Filter by the object’s `cdland` field."""
  cdland: StringFilter

  """Filter by the object’s `actions` field."""
  actions: StringFilter

  """Filter by the object’s `actionDate` field."""
  actionDate: DateFilter

  """Filter by the object’s `cdvert` field."""
  cdvert: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `distributor` field."""
  distributor: StringFilter

  """Filter by the object’s `projectDate` field."""
  projectDate: DateFilter

  """Filter by the object’s `_landByCdland` relation."""
  _landByCdland: _LandFilter

  """A related `_landByCdland` exists."""
  _landByCdlandExists: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [OpportunityFilter!]

  """Checks for any expressions in this list."""
  or: [OpportunityFilter!]

  """Negates the expression."""
  not: OpportunityFilter
}

"""
A filter to be used against `_Land` object types. All fields are combined with a logical ‘and.’
"""
input _LandFilter {
  """Filter by the object’s `cdland` field."""
  cdland: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `cbsland` field."""
  cbsland: StringFilter

  """Filter by the object’s `cdeglid` field."""
  cdeglid: StringFilter

  """Filter by the object’s `isoland` field."""
  isoland: StringFilter

  """Filter by the object’s `rszland` field."""
  rszland: IntFilter

  """Filter by the object’s `sepa` field."""
  sepa: StringFilter

  """Filter by the object’s `opportunitiesByCdland` relation."""
  opportunitiesByCdland: _LandToManyOpportunityFilter

  """Some related `opportunitiesByCdland` exist."""
  opportunitiesByCdlandExist: Boolean

  """Checks for all expressions in this list."""
  and: [_LandFilter!]

  """Checks for any expressions in this list."""
  or: [_LandFilter!]

  """Negates the expression."""
  not: _LandFilter
}

"""
A filter to be used against many `Opportunity` object types. All fields are combined with a logical ‘and.’
"""
input _LandToManyOpportunityFilter {
  """
  Every related `Opportunity` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: OpportunityFilter

  """
  Some related `Opportunity` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: OpportunityFilter

  """
  No related `Opportunity` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: OpportunityFilter
}

"""
A filter to be used against many `UserTask` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyUserTaskFilter {
  """
  Every related `UserTask` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UserTaskFilter

  """
  Some related `UserTask` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UserTaskFilter

  """
  No related `UserTask` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UserTaskFilter
}

"""
A filter to be used against `UserTask` object types. All fields are combined with a logical ‘and.’
"""
input UserTaskFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `taskId` field."""
  taskId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `qualifiesForOvertime` field."""
  qualifiesForOvertime: BooleanFilter

  """Filter by the object’s `userByUserId` relation."""
  userByUserId: UserFilter

  """A related `userByUserId` exists."""
  userByUserIdExists: Boolean

  """Filter by the object’s `taskByTaskId` relation."""
  taskByTaskId: TaskFilter

  """A related `taskByTaskId` exists."""
  taskByTaskIdExists: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [UserTaskFilter!]

  """Checks for any expressions in this list."""
  or: [UserTaskFilter!]

  """Negates the expression."""
  not: UserTaskFilter
}

"""
A filter to be used against `Task` object types. All fields are combined with a logical ‘and.’
"""
input TaskFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `code` field."""
  code: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `groupCode` field."""
  groupCode: IntFilter

  """Filter by the object’s `sortCode` field."""
  sortCode: IntFilter

  """Filter by the object’s `wbsoStartDate` field."""
  wbsoStartDate: DateFilter

  """Filter by the object’s `wbsoEndDate` field."""
  wbsoEndDate: DateFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `userTasksByTaskId` relation."""
  userTasksByTaskId: TaskToManyUserTaskFilter

  """Some related `userTasksByTaskId` exist."""
  userTasksByTaskIdExist: Boolean

  """Filter by the object’s `weeklyHoursByTaskId` relation."""
  weeklyHoursByTaskId: TaskToManyWeeklyHourFilter

  """Some related `weeklyHoursByTaskId` exist."""
  weeklyHoursByTaskIdExist: Boolean

  """Filter by the object’s `weeklyHourRemarksByTaskId` relation."""
  weeklyHourRemarksByTaskId: TaskToManyWeeklyHourRemarkFilter

  """Some related `weeklyHourRemarksByTaskId` exist."""
  weeklyHourRemarksByTaskIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [TaskFilter!]

  """Checks for any expressions in this list."""
  or: [TaskFilter!]

  """Negates the expression."""
  not: TaskFilter
}

"""
A filter to be used against many `UserTask` object types. All fields are combined with a logical ‘and.’
"""
input TaskToManyUserTaskFilter {
  """
  Every related `UserTask` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UserTaskFilter

  """
  Some related `UserTask` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UserTaskFilter

  """
  No related `UserTask` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UserTaskFilter
}

"""
A filter to be used against many `WeeklyHour` object types. All fields are combined with a logical ‘and.’
"""
input TaskToManyWeeklyHourFilter {
  """
  Every related `WeeklyHour` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: WeeklyHourFilter

  """
  Some related `WeeklyHour` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: WeeklyHourFilter

  """
  No related `WeeklyHour` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: WeeklyHourFilter
}

"""
A filter to be used against `WeeklyHour` object types. All fields are combined with a logical ‘and.’
"""
input WeeklyHourFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `taskId` field."""
  taskId: IntFilter

  """Filter by the object’s `startTime` field."""
  startTime: DatetimeFilter

  """Filter by the object’s `endTime` field."""
  endTime: DatetimeFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `office` field."""
  office: BooleanFilter

  """Filter by the object’s `userByUserId` relation."""
  userByUserId: UserFilter

  """Filter by the object’s `taskByTaskId` relation."""
  taskByTaskId: TaskFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [WeeklyHourFilter!]

  """Checks for any expressions in this list."""
  or: [WeeklyHourFilter!]

  """Negates the expression."""
  not: WeeklyHourFilter
}

"""
A filter to be used against many `WeeklyHourRemark` object types. All fields are combined with a logical ‘and.’
"""
input TaskToManyWeeklyHourRemarkFilter {
  """
  Every related `WeeklyHourRemark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: WeeklyHourRemarkFilter

  """
  Some related `WeeklyHourRemark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: WeeklyHourRemarkFilter

  """
  No related `WeeklyHourRemark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: WeeklyHourRemarkFilter
}

"""
A filter to be used against `WeeklyHourRemark` object types. All fields are combined with a logical ‘and.’
"""
input WeeklyHourRemarkFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `taskId` field."""
  taskId: IntFilter

  """Filter by the object’s `date` field."""
  date: DateFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `remark` field."""
  remark: StringFilter

  """Filter by the object’s `userByUserId` relation."""
  userByUserId: UserFilter

  """A related `userByUserId` exists."""
  userByUserIdExists: Boolean

  """Filter by the object’s `taskByTaskId` relation."""
  taskByTaskId: TaskFilter

  """A related `taskByTaskId` exists."""
  taskByTaskIdExists: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [WeeklyHourRemarkFilter!]

  """Checks for any expressions in this list."""
  or: [WeeklyHourRemarkFilter!]

  """Negates the expression."""
  not: WeeklyHourRemarkFilter
}

"""
A filter to be used against many `WeeklyHour` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyWeeklyHourFilter {
  """
  Every related `WeeklyHour` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: WeeklyHourFilter

  """
  Some related `WeeklyHour` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: WeeklyHourFilter

  """
  No related `WeeklyHour` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: WeeklyHourFilter
}

"""
A filter to be used against many `Plug` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyPlugFilter {
  """
  Every related `Plug` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PlugFilter

  """
  Some related `Plug` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PlugFilter

  """
  No related `Plug` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PlugFilter
}

"""
A filter to be used against many `Principle` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyPrincipleFilter {
  """
  Every related `Principle` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PrincipleFilter

  """
  Some related `Principle` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PrincipleFilter

  """
  No related `Principle` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PrincipleFilter
}

"""
A filter to be used against many `RcCard` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyRcCardFilter {
  """
  Every related `RcCard` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RcCardFilter

  """
  Some related `RcCard` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RcCardFilter

  """
  No related `RcCard` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RcCardFilter
}

"""
A filter to be used against `RcCard` object types. All fields are combined with a logical ‘and.’
"""
input RcCardFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `serialNumber` field."""
  serialNumber: StringFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [RcCardFilter!]

  """Checks for any expressions in this list."""
  or: [RcCardFilter!]

  """Negates the expression."""
  not: RcCardFilter
}

"""
A filter to be used against many `Report` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyReportFilter {
  """
  Every related `Report` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ReportFilter

  """
  Some related `Report` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ReportFilter

  """
  No related `Report` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ReportFilter
}

"""
A filter to be used against many `Request` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyRequestFilter {
  """
  Every related `Request` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RequestFilter

  """
  Some related `Request` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RequestFilter

  """
  No related `Request` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RequestFilter
}

"""
A filter to be used against `Request` object types. All fields are combined with a logical ‘and.’
"""
input RequestFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `tableName` field."""
  tableName: StringFilter

  """Filter by the object’s `request` field."""
  request: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `completed` field."""
  completed: BooleanFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [RequestFilter!]

  """Checks for any expressions in this list."""
  or: [RequestFilter!]

  """Negates the expression."""
  not: RequestFilter
}

"""
A filter to be used against many `RxCard` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyRxCardFilter {
  """
  Every related `RxCard` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RxCardFilter

  """
  Some related `RxCard` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RxCardFilter

  """
  No related `RxCard` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RxCardFilter
}

"""
A filter to be used against `RxCard` object types. All fields are combined with a logical ‘and.’
"""
input RxCardFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `serialNumber` field."""
  serialNumber: StringFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """A related `userByOwnerId` exists."""
  userByOwnerIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [RxCardFilter!]

  """Checks for any expressions in this list."""
  or: [RxCardFilter!]

  """Negates the expression."""
  not: RxCardFilter
}

"""
A filter to be used against many `SensorElementLocation` object types. All fields are combined with a logical ‘and.’
"""
input UserToManySensorElementLocationFilter {
  """
  Every related `SensorElementLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorElementLocationFilter

  """
  Some related `SensorElementLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorElementLocationFilter

  """
  No related `SensorElementLocation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorElementLocationFilter
}

"""
A filter to be used against many `SensorElementType` object types. All fields are combined with a logical ‘and.’
"""
input UserToManySensorElementTypeFilter {
  """
  Every related `SensorElementType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorElementTypeFilter

  """
  Some related `SensorElementType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorElementTypeFilter

  """
  No related `SensorElementType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorElementTypeFilter
}

"""
A filter to be used against many `SensorElement` object types. All fields are combined with a logical ‘and.’
"""
input UserToManySensorElementFilter {
  """
  Every related `SensorElement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorElementFilter

  """
  Some related `SensorElement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorElementFilter

  """
  No related `SensorElement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorElementFilter
}

"""
A filter to be used against many `SensorOrder` object types. All fields are combined with a logical ‘and.’
"""
input UserToManySensorOrderFilter {
  """
  Every related `SensorOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorOrderFilter

  """
  Some related `SensorOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorOrderFilter

  """
  No related `SensorOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorOrderFilter
}

"""
A filter to be used against many `SensorSensorElement` object types. All fields are combined with a logical ‘and.’
"""
input UserToManySensorSensorElementFilter {
  """
  Every related `SensorSensorElement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorSensorElementFilter

  """
  Some related `SensorSensorElement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorSensorElementFilter

  """
  No related `SensorSensorElement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorSensorElementFilter
}

"""
A filter to be used against many `SensorTestResult` object types. All fields are combined with a logical ‘and.’
"""
input UserToManySensorTestResultFilter {
  """
  Every related `SensorTestResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SensorTestResultFilter

  """
  Some related `SensorTestResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SensorTestResultFilter

  """
  No related `SensorTestResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SensorTestResultFilter
}

"""
A filter to be used against many `Software` object types. All fields are combined with a logical ‘and.’
"""
input UserToManySoftwareFilter {
  """
  Every related `Software` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SoftwareFilter

  """
  Some related `Software` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SoftwareFilter

  """
  No related `Software` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SoftwareFilter
}

"""
A filter to be used against many `StockGroup` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyStockGroupFilter {
  """
  Every related `StockGroup` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StockGroupFilter

  """
  Some related `StockGroup` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StockGroupFilter

  """
  No related `StockGroup` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StockGroupFilter
}

"""
A filter to be used against `StockGroup` object types. All fields are combined with a logical ‘and.’
"""
input StockGroupFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `stockItemsByStockGroupId` relation."""
  stockItemsByStockGroupId: StockGroupToManyStockItemFilter

  """Some related `stockItemsByStockGroupId` exist."""
  stockItemsByStockGroupIdExist: Boolean

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [StockGroupFilter!]

  """Checks for any expressions in this list."""
  or: [StockGroupFilter!]

  """Negates the expression."""
  not: StockGroupFilter
}

"""
A filter to be used against many `StockItem` object types. All fields are combined with a logical ‘and.’
"""
input StockGroupToManyStockItemFilter {
  """
  Every related `StockItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StockItemFilter

  """
  Some related `StockItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StockItemFilter

  """
  No related `StockItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StockItemFilter
}

"""
A filter to be used against `StockItem` object types. All fields are combined with a logical ‘and.’
"""
input StockItemFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `stockGroupId` field."""
  stockGroupId: IntFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `prijsper` field."""
  prijsper: FloatFilter

  """Filter by the object’s `action` field."""
  action: StringFilter

  """Filter by the object’s `stockGroupByStockGroupId` relation."""
  stockGroupByStockGroupId: StockGroupFilter

  """Filter by the object’s `userByOwnerId` relation."""
  userByOwnerId: UserFilter

  """Checks for all expressions in this list."""
  and: [StockItemFilter!]

  """Checks for any expressions in this list."""
  or: [StockItemFilter!]

  """Negates the expression."""
  not: StockItemFilter
}

"""
A filter to be used against many `StockItem` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyStockItemFilter {
  """
  Every related `StockItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StockItemFilter

  """
  Some related `StockItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StockItemFilter

  """
  No related `StockItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StockItemFilter
}

"""
A filter to be used against many `Task` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyTaskFilter {
  """
  Every related `Task` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TaskFilter

  """
  Some related `Task` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TaskFilter

  """
  No related `Task` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TaskFilter
}

"""
A filter to be used against many `UserRight` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyUserRightFilter {
  """
  Every related `UserRight` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UserRightFilter

  """
  Some related `UserRight` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UserRightFilter

  """
  No related `UserRight` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UserRightFilter
}

"""
A filter to be used against `UserRight` object types. All fields are combined with a logical ‘and.’
"""
input UserRightFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `path` field."""
  path: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `authorized` field."""
  authorized: BooleanFilter

  """Filter by the object’s `userByUserId` relation."""
  userByUserId: UserFilter

  """A related `userByUserId` exists."""
  userByUserIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [UserRightFilter!]

  """Checks for any expressions in this list."""
  or: [UserRightFilter!]

  """Negates the expression."""
  not: UserRightFilter
}

"""
A filter to be used against many `UsersGroup` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyUsersGroupFilter {
  """
  Every related `UsersGroup` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UsersGroupFilter

  """
  Some related `UsersGroup` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UsersGroupFilter

  """
  No related `UsersGroup` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UsersGroupFilter
}

"""
A filter to be used against many `WeeklyHourRemark` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyWeeklyHourRemarkFilter {
  """
  Every related `WeeklyHourRemark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: WeeklyHourRemarkFilter

  """
  Some related `WeeklyHourRemark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: WeeklyHourRemarkFilter

  """
  No related `WeeklyHourRemark` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: WeeklyHourRemarkFilter
}

"""Methods to use when ordering `Action`."""
enum ActionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ACTION_ASC
  ACTION_DESC
  USER_ID_ASC
  USER_ID_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  CLOSED_ASC
  CLOSED_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  DATE_ASC
  DATE_DESC
  FOLLOW_UP_ASC
  FOLLOW_UP_DESC
  END_USER_ID_ASC
  END_USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_USER_ID__ID_ASC
  USER_BY_USER_ID__ID_DESC
  USER_BY_USER_ID__USERNAME_ASC
  USER_BY_USER_ID__USERNAME_DESC
  USER_BY_USER_ID__PASSWORD_ASC
  USER_BY_USER_ID__PASSWORD_DESC
  USER_BY_USER_ID__CREATED_ASC
  USER_BY_USER_ID__CREATED_DESC
  USER_BY_USER_ID__MODIFIED_ASC
  USER_BY_USER_ID__MODIFIED_DESC
  USER_BY_USER_ID__GROUP_ID_ASC
  USER_BY_USER_ID__GROUP_ID_DESC
  USER_BY_USER_ID__INITIALS_ASC
  USER_BY_USER_ID__INITIALS_DESC
  USER_BY_USER_ID__FULLNAME_ASC
  USER_BY_USER_ID__FULLNAME_DESC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_USER_ID__URL_ASC
  USER_BY_USER_ID__URL_DESC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  GROUP_BY_GROUP_ID__ID_ASC
  GROUP_BY_GROUP_ID__ID_DESC
  GROUP_BY_GROUP_ID__NAME_ASC
  GROUP_BY_GROUP_ID__NAME_DESC
  GROUP_BY_GROUP_ID__CREATED_ASC
  GROUP_BY_GROUP_ID__CREATED_DESC
  GROUP_BY_GROUP_ID__MODIFIED_ASC
  GROUP_BY_GROUP_ID__MODIFIED_DESC
  GROUP_BY_GROUP_ID__OWNER_ID_ASC
  GROUP_BY_GROUP_ID__OWNER_ID_DESC
  REPORT_BY_REPORT_ID__CREATED_ASC
  REPORT_BY_REPORT_ID__CREATED_DESC
  REPORT_BY_REPORT_ID__MODIFIED_ASC
  REPORT_BY_REPORT_ID__MODIFIED_DESC
  REPORT_BY_REPORT_ID__REMARKS_ASC
  REPORT_BY_REPORT_ID__REMARKS_DESC
  REPORT_BY_REPORT_ID__OWNER_ID_ASC
  REPORT_BY_REPORT_ID__OWNER_ID_DESC
  REPORT_BY_REPORT_ID__END_USER_ID_ASC
  REPORT_BY_REPORT_ID__END_USER_ID_DESC
  REPORT_BY_REPORT_ID__ID_ASC
  REPORT_BY_REPORT_ID__ID_DESC
  REPORT_BY_REPORT_ID__DATE_ASC
  REPORT_BY_REPORT_ID__DATE_DESC
  REPORT_BY_REPORT_ID__STARTUP_ASC
  REPORT_BY_REPORT_ID__STARTUP_DESC
  REPORT_BY_REPORT_ID__MAINTENANCE_ASC
  REPORT_BY_REPORT_ID__MAINTENANCE_DESC
  REPORT_BY_REPORT_ID__REPAIR_ASC
  REPORT_BY_REPORT_ID__REPAIR_DESC
  REPORT_BY_REPORT_ID__EXTRA_WORK_ASC
  REPORT_BY_REPORT_ID__EXTRA_WORK_DESC
  REPORT_BY_REPORT_ID__OTHER_ASC
  REPORT_BY_REPORT_ID__OTHER_DESC
  REPORT_BY_REPORT_ID__FILENAME_ASC
  REPORT_BY_REPORT_ID__FILENAME_DESC
  REPORT_BY_REPORT_ID__USER_ID_ASC
  REPORT_BY_REPORT_ID__USER_ID_DESC
  REPORT_BY_REPORT_ID__CLOSED_OLD_ASC
  REPORT_BY_REPORT_ID__CLOSED_OLD_DESC
  REPORT_BY_REPORT_ID__TSR_NUMBER_ASC
  REPORT_BY_REPORT_ID__TSR_NUMBER_DESC
  REPORT_BY_REPORT_ID__CLOSED_ASC
  REPORT_BY_REPORT_ID__CLOSED_DESC
  REPORT_BY_REPORT_ID__CHECKED_TECHCENTRE_ASC
  REPORT_BY_REPORT_ID__CHECKED_TECHCENTRE_DESC
  REPORT_BY_REPORT_ID__FACTUUROPDRACHT_ASC
  REPORT_BY_REPORT_ID__FACTUUROPDRACHT_DESC
  REPORT_BY_REPORT_ID__VERSION_ASC
  REPORT_BY_REPORT_ID__VERSION_DESC
  REPORT_BY_REPORT_ID__DESTROYED_ASC
  REPORT_BY_REPORT_ID__DESTROYED_DESC
  REPORT_BY_REPORT_ID__TYPE_ASC
  REPORT_BY_REPORT_ID__TYPE_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `Action` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ActionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `action` field."""
  action: String

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `groupId` field."""
  groupId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `closed` field."""
  closed: Boolean

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `followUp` field."""
  followUp: String

  """Checks for equality with the object’s `endUserId` field."""
  endUserId: Int
}

type GroupPermission implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  writeIds: [Int]!
  readIds: [Int]!
  groupId: Int!

  """Reads a single `Group` that is related to this `GroupPermission`."""
  groupByGroupId: Group
}

"""A connection to a list of `GroupPermission` values."""
type GroupPermissionsConnection {
  """A list of `GroupPermission` objects."""
  nodes: [GroupPermission!]!

  """
  A list of edges which contains the `GroupPermission` and cursor to aid in pagination.
  """
  edges: [GroupPermissionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `GroupPermission` you could get from the connection.
  """
  totalCount: Int!
}

"""A `GroupPermission` edge in the connection."""
type GroupPermissionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GroupPermission` at the end of the edge."""
  node: GroupPermission!
}

"""Methods to use when ordering `GroupPermission`."""
enum GroupPermissionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  WRITE_IDS_ASC
  WRITE_IDS_DESC
  READ_IDS_ASC
  READ_IDS_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  GROUP_BY_GROUP_ID__ID_ASC
  GROUP_BY_GROUP_ID__ID_DESC
  GROUP_BY_GROUP_ID__NAME_ASC
  GROUP_BY_GROUP_ID__NAME_DESC
  GROUP_BY_GROUP_ID__CREATED_ASC
  GROUP_BY_GROUP_ID__CREATED_DESC
  GROUP_BY_GROUP_ID__MODIFIED_ASC
  GROUP_BY_GROUP_ID__MODIFIED_DESC
  GROUP_BY_GROUP_ID__OWNER_ID_ASC
  GROUP_BY_GROUP_ID__OWNER_ID_DESC
}

"""
A condition to be used against `GroupPermission` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input GroupPermissionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `writeIds` field."""
  writeIds: [Int]

  """Checks for equality with the object’s `readIds` field."""
  readIds: [Int]

  """Checks for equality with the object’s `groupId` field."""
  groupId: Int
}

"""A connection to a list of `GroupRight` values."""
type GroupRightsConnection {
  """A list of `GroupRight` objects."""
  nodes: [GroupRight!]!

  """
  A list of edges which contains the `GroupRight` and cursor to aid in pagination.
  """
  edges: [GroupRightsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GroupRight` you could get from the connection."""
  totalCount: Int!
}

type GroupRight implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  groupId: Int
  path: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  authorized: Boolean!

  """Reads a single `Group` that is related to this `GroupRight`."""
  groupByGroupId: Group
}

"""A `GroupRight` edge in the connection."""
type GroupRightsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GroupRight` at the end of the edge."""
  node: GroupRight!
}

"""Methods to use when ordering `GroupRight`."""
enum GroupRightsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  PATH_ASC
  PATH_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  AUTHORIZED_ASC
  AUTHORIZED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  GROUP_BY_GROUP_ID__ID_ASC
  GROUP_BY_GROUP_ID__ID_DESC
  GROUP_BY_GROUP_ID__NAME_ASC
  GROUP_BY_GROUP_ID__NAME_DESC
  GROUP_BY_GROUP_ID__CREATED_ASC
  GROUP_BY_GROUP_ID__CREATED_DESC
  GROUP_BY_GROUP_ID__MODIFIED_ASC
  GROUP_BY_GROUP_ID__MODIFIED_DESC
  GROUP_BY_GROUP_ID__OWNER_ID_ASC
  GROUP_BY_GROUP_ID__OWNER_ID_DESC
}

"""
A condition to be used against `GroupRight` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GroupRightCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `groupId` field."""
  groupId: Int

  """Checks for equality with the object’s `path` field."""
  path: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `authorized` field."""
  authorized: Boolean
}

"""A connection to a list of `UsersGroup` values."""
type UsersGroupsConnection {
  """A list of `UsersGroup` objects."""
  nodes: [UsersGroup!]!

  """
  A list of edges which contains the `UsersGroup` and cursor to aid in pagination.
  """
  edges: [UsersGroupsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UsersGroup` you could get from the connection."""
  totalCount: Int!
}

type UsersGroup implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  userId: Int!
  groupId: Int!

  """Reads a single `User` that is related to this `UsersGroup`."""
  userByUserId: User

  """Reads a single `Group` that is related to this `UsersGroup`."""
  groupByGroupId: Group
}

"""A `UsersGroup` edge in the connection."""
type UsersGroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UsersGroup` at the end of the edge."""
  node: UsersGroup!
}

"""Methods to use when ordering `UsersGroup`."""
enum UsersGroupsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_USER_ID__ID_ASC
  USER_BY_USER_ID__ID_DESC
  USER_BY_USER_ID__USERNAME_ASC
  USER_BY_USER_ID__USERNAME_DESC
  USER_BY_USER_ID__PASSWORD_ASC
  USER_BY_USER_ID__PASSWORD_DESC
  USER_BY_USER_ID__CREATED_ASC
  USER_BY_USER_ID__CREATED_DESC
  USER_BY_USER_ID__MODIFIED_ASC
  USER_BY_USER_ID__MODIFIED_DESC
  USER_BY_USER_ID__GROUP_ID_ASC
  USER_BY_USER_ID__GROUP_ID_DESC
  USER_BY_USER_ID__INITIALS_ASC
  USER_BY_USER_ID__INITIALS_DESC
  USER_BY_USER_ID__FULLNAME_ASC
  USER_BY_USER_ID__FULLNAME_DESC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_USER_ID__URL_ASC
  USER_BY_USER_ID__URL_DESC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  GROUP_BY_GROUP_ID__ID_ASC
  GROUP_BY_GROUP_ID__ID_DESC
  GROUP_BY_GROUP_ID__NAME_ASC
  GROUP_BY_GROUP_ID__NAME_DESC
  GROUP_BY_GROUP_ID__CREATED_ASC
  GROUP_BY_GROUP_ID__CREATED_DESC
  GROUP_BY_GROUP_ID__MODIFIED_ASC
  GROUP_BY_GROUP_ID__MODIFIED_DESC
  GROUP_BY_GROUP_ID__OWNER_ID_ASC
  GROUP_BY_GROUP_ID__OWNER_ID_DESC
}

"""
A condition to be used against `UsersGroup` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UsersGroupCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `groupId` field."""
  groupId: Int
}

"""A connection to a list of `CalGas` values."""
type CalGasesConnection {
  """A list of `CalGas` objects."""
  nodes: [CalGas!]!

  """
  A list of edges which contains the `CalGas` and cursor to aid in pagination.
  """
  edges: [CalGasesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CalGas` you could get from the connection."""
  totalCount: Int!
}

type CalGas implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  gasId: Int!
  concentration: Float
  engineeringUnits: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  cdartikel: String

  """Reads a single `Gas` that is related to this `CalGas`."""
  gasByGasId: Gas

  """Reads a single `User` that is related to this `CalGas`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `SensorType`."""
  sensorTypesByCalGasId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorType`."""
    orderBy: [SensorTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorTypeFilter
  ): SensorTypesConnection!

  """Reads and enables pagination through a set of `MaintenanceVisitLine`."""
  maintenanceVisitLinesByCalGasId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitLine`."""
    orderBy: [MaintenanceVisitLinesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitLineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitLineFilter
  ): MaintenanceVisitLinesConnection!

  """Reads and enables pagination through a set of `SensorTestResult`."""
  sensorTestResultsByFsCalGasId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorTestResult`."""
    orderBy: [SensorTestResultsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorTestResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorTestResultFilter
  ): SensorTestResultsConnection!
  type: String
}

type Gas implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
  formula: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  chemicalCompoundId: Int

  """Reads a single `User` that is related to this `Gas`."""
  userByOwnerId: User

  """Reads a single `ChemicalCompound` that is related to this `Gas`."""
  chemicalCompoundByChemicalCompoundId: ChemicalCompound

  """Reads and enables pagination through a set of `CalGas`."""
  calGasesByGasId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CalGas`."""
    orderBy: [CalGasesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CalGasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CalGasFilter
  ): CalGasesConnection!

  """Reads and enables pagination through a set of `Range`."""
  rangesByGasId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Range`."""
    orderBy: [RangesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RangeFilter
  ): RangesConnection!
}

type ChemicalCompound implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
  otherName: String
  formula: String
  cas: String
  icsc: String
  molarMass: Float
  density: Float
  url: String
  created: Datetime
  modified: Datetime
  ownerId: Int

  """Reads a single `User` that is related to this `ChemicalCompound`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `Gas`."""
  gasesByChemicalCompoundId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GasCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GasFilter
  ): GasesConnection!
}

"""A connection to a list of `Gas` values."""
type GasesConnection {
  """A list of `Gas` objects."""
  nodes: [Gas!]!

  """
  A list of edges which contains the `Gas` and cursor to aid in pagination.
  """
  edges: [GasesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Gas` you could get from the connection."""
  totalCount: Int!
}

"""A `Gas` edge in the connection."""
type GasesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Gas` at the end of the edge."""
  node: Gas!
}

"""Methods to use when ordering `Gas`."""
enum GasesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  FORMULA_ASC
  FORMULA_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CHEMICAL_COMPOUND_ID_ASC
  CHEMICAL_COMPOUND_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__ID_ASC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__ID_DESC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__NAME_ASC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__NAME_DESC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__OTHER_NAME_ASC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__OTHER_NAME_DESC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__FORMULA_ASC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__FORMULA_DESC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__CAS_ASC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__CAS_DESC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__ICSC_ASC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__ICSC_DESC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__MOLAR_MASS_ASC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__MOLAR_MASS_DESC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__DENSITY_ASC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__DENSITY_DESC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__URL_ASC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__URL_DESC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__CREATED_ASC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__CREATED_DESC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__MODIFIED_ASC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__MODIFIED_DESC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__OWNER_ID_ASC
  CHEMICAL_COMPOUND_BY_CHEMICAL_COMPOUND_ID__OWNER_ID_DESC
  CAL_GASES_BY_GAS_ID__COUNT_ASC
  CAL_GASES_BY_GAS_ID__COUNT_DESC
  RANGES_BY_GAS_ID__COUNT_ASC
  RANGES_BY_GAS_ID__COUNT_DESC
}

"""
A condition to be used against `Gas` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GasCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `formula` field."""
  formula: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `chemicalCompoundId` field."""
  chemicalCompoundId: Int
}

"""Methods to use when ordering `CalGas`."""
enum CalGasesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  GAS_ID_ASC
  GAS_ID_DESC
  CONCENTRATION_ASC
  CONCENTRATION_DESC
  ENGINEERING_UNITS_ASC
  ENGINEERING_UNITS_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  GAS_BY_GAS_ID__ID_ASC
  GAS_BY_GAS_ID__ID_DESC
  GAS_BY_GAS_ID__NAME_ASC
  GAS_BY_GAS_ID__NAME_DESC
  GAS_BY_GAS_ID__FORMULA_ASC
  GAS_BY_GAS_ID__FORMULA_DESC
  GAS_BY_GAS_ID__CREATED_ASC
  GAS_BY_GAS_ID__CREATED_DESC
  GAS_BY_GAS_ID__MODIFIED_ASC
  GAS_BY_GAS_ID__MODIFIED_DESC
  GAS_BY_GAS_ID__OWNER_ID_ASC
  GAS_BY_GAS_ID__OWNER_ID_DESC
  GAS_BY_GAS_ID__CHEMICAL_COMPOUND_ID_ASC
  GAS_BY_GAS_ID__CHEMICAL_COMPOUND_ID_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  SENSOR_TYPES_BY_CAL_GAS_ID__COUNT_ASC
  SENSOR_TYPES_BY_CAL_GAS_ID__COUNT_DESC
  MAINTENANCE_VISIT_LINES_BY_CAL_GAS_ID__COUNT_ASC
  MAINTENANCE_VISIT_LINES_BY_CAL_GAS_ID__COUNT_DESC
  SENSOR_TEST_RESULTS_BY_FS_CAL_GAS_ID__COUNT_ASC
  SENSOR_TEST_RESULTS_BY_FS_CAL_GAS_ID__COUNT_DESC
}

"""
A condition to be used against `CalGas` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CalGasCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `gasId` field."""
  gasId: Int

  """Checks for equality with the object’s `concentration` field."""
  concentration: Float

  """Checks for equality with the object’s `engineeringUnits` field."""
  engineeringUnits: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String
}

"""A connection to a list of `Range` values."""
type RangesConnection {
  """A list of `Range` objects."""
  nodes: [Range!]!

  """
  A list of edges which contains the `Range` and cursor to aid in pagination.
  """
  edges: [RangesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Range` you could get from the connection."""
  totalCount: Int!
}

type Range implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  gasId: Int!
  lowEu: Float
  highEu: Float
  engineeringUnits: String
  alarm1Level: BigFloat
  alarm2Level: BigFloat
  warning1Level: BigFloat
  warning2Level: BigFloat
  alarm1DirectionUp: Boolean
  alarm2DirectionUp: Boolean
  alarmUnits: Boolean
  precision: Int
  created: Datetime
  modified: Datetime
  ownerId: Int
  highEuNumeric: BigFloat
  highEuBackup: Float

  """Reads a single `Gas` that is related to this `Range`."""
  gasByGasId: Gas

  """Reads a single `User` that is related to this `Range`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `SensorType`."""
  sensorTypesByRangeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorType`."""
    orderBy: [SensorTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorTypeFilter
  ): SensorTypesConnection!

  """Reads and enables pagination through a set of `SensorElementType`."""
  sensorElementTypesByRangeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorElementType`."""
    orderBy: [SensorElementTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorElementTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorElementTypeFilter
  ): SensorElementTypesConnection!

  """Reads and enables pagination through a set of `SensorElementType`."""
  sensorElementTypesByCalRangeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorElementType`."""
    orderBy: [SensorElementTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorElementTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorElementTypeFilter
  ): SensorElementTypesConnection!
  range: String
}

"""A connection to a list of `SensorType` values."""
type SensorTypesConnection {
  """A list of `SensorType` objects."""
  nodes: [SensorType!]!

  """
  A list of edges which contains the `SensorType` and cursor to aid in pagination.
  """
  edges: [SensorTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SensorType` you could get from the connection."""
  totalCount: Int!
}

type SensorType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  sensorTypeId: Int
  electrolyteId: Int
  membraneId: Int
  oRingId: Int
  pyrolyserId: Int
  filterId: Int
  battery: Boolean
  restrictor: Boolean
  membraneSeal: Boolean
  rangeId: Int!
  flowRate: Float
  calFlowRate: Float
  code: String!
  obsolete: Boolean
  pyrolyserVoltage: Float
  principleId: Int
  sensorBaseTypeId: Int!
  created: Datetime
  modified: Datetime
  ownerId: Int!
  model: String!
  calGasId: Int!
  siliconeSheet: Boolean
  elementCount: Int
  maintenanceIntervalMonths: Int
  replacementIntervalMonths: Int
  cdartikel: String
  volume: Int
  calResponse: Float!
  electrodeCount: Int
  biasMv: Int
  direction: Boolean
  lowElectrolyte: Boolean
  spanResistor: BigFloat
  plugId: Int
  transportSwitch: Boolean

  """Reads a single `Electrolyte` that is related to this `SensorType`."""
  electrolyteByElectrolyteId: Electrolyte

  """Reads a single `Membrane` that is related to this `SensorType`."""
  membraneByMembraneId: Membrane

  """Reads a single `ORing` that is related to this `SensorType`."""
  oRingByORingId: ORing

  """Reads a single `Pyrolyser` that is related to this `SensorType`."""
  pyrolyserByPyrolyserId: Pyrolyser

  """Reads a single `Filter` that is related to this `SensorType`."""
  filterByFilterId: Filter

  """Reads a single `Range` that is related to this `SensorType`."""
  rangeByRangeId: Range

  """Reads a single `SensorBaseType` that is related to this `SensorType`."""
  sensorBaseTypeBySensorBaseTypeId: SensorBaseType

  """Reads a single `User` that is related to this `SensorType`."""
  userByOwnerId: User

  """Reads a single `CalGas` that is related to this `SensorType`."""
  calGasByCalGasId: CalGas

  """Reads a single `Plug` that is related to this `SensorType`."""
  plugByPlugId: Plug

  """Reads and enables pagination through a set of `Sensor`."""
  sensorsBySensorTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Sensor`."""
    orderBy: [SensorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorFilter
  ): SensorsConnection!

  """Reads and enables pagination through a set of `DetectorSensorType`."""
  detectorSensorTypesBySensorTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorSensorType`."""
    orderBy: [DetectorSensorTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorSensorTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorSensorTypeFilter
  ): DetectorSensorTypesConnection!
  fullType: String
  type: String
}

type Electrolyte implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  created: Datetime
  modified: Datetime
  ownerId: Int
  replacementIntervalMonths: Int
  cdartikel: String!
  volume: Int

  """Reads a single `User` that is related to this `Electrolyte`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `SensorType`."""
  sensorTypesByElectrolyteId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorType`."""
    orderBy: [SensorTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorTypeFilter
  ): SensorTypesConnection!
}

"""Methods to use when ordering `SensorType`."""
enum SensorTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SENSOR_TYPE_ID_ASC
  SENSOR_TYPE_ID_DESC
  ELECTROLYTE_ID_ASC
  ELECTROLYTE_ID_DESC
  MEMBRANE_ID_ASC
  MEMBRANE_ID_DESC
  O_RING_ID_ASC
  O_RING_ID_DESC
  PYROLYSER_ID_ASC
  PYROLYSER_ID_DESC
  FILTER_ID_ASC
  FILTER_ID_DESC
  BATTERY_ASC
  BATTERY_DESC
  RESTRICTOR_ASC
  RESTRICTOR_DESC
  MEMBRANE_SEAL_ASC
  MEMBRANE_SEAL_DESC
  RANGE_ID_ASC
  RANGE_ID_DESC
  FLOW_RATE_ASC
  FLOW_RATE_DESC
  CAL_FLOW_RATE_ASC
  CAL_FLOW_RATE_DESC
  CODE_ASC
  CODE_DESC
  OBSOLETE_ASC
  OBSOLETE_DESC
  PYROLYSER_VOLTAGE_ASC
  PYROLYSER_VOLTAGE_DESC
  PRINCIPLE_ID_ASC
  PRINCIPLE_ID_DESC
  SENSOR_BASE_TYPE_ID_ASC
  SENSOR_BASE_TYPE_ID_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  MODEL_ASC
  MODEL_DESC
  CAL_GAS_ID_ASC
  CAL_GAS_ID_DESC
  SILICONE_SHEET_ASC
  SILICONE_SHEET_DESC
  ELEMENT_COUNT_ASC
  ELEMENT_COUNT_DESC
  MAINTENANCE_INTERVAL_MONTHS_ASC
  MAINTENANCE_INTERVAL_MONTHS_DESC
  REPLACEMENT_INTERVAL_MONTHS_ASC
  REPLACEMENT_INTERVAL_MONTHS_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  VOLUME_ASC
  VOLUME_DESC
  CAL_RESPONSE_ASC
  CAL_RESPONSE_DESC
  ELECTRODE_COUNT_ASC
  ELECTRODE_COUNT_DESC
  BIAS_MV_ASC
  BIAS_MV_DESC
  DIRECTION_ASC
  DIRECTION_DESC
  LOW_ELECTROLYTE_ASC
  LOW_ELECTROLYTE_DESC
  SPAN_RESISTOR_ASC
  SPAN_RESISTOR_DESC
  PLUG_ID_ASC
  PLUG_ID_DESC
  TRANSPORT_SWITCH_ASC
  TRANSPORT_SWITCH_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ELECTROLYTE_BY_ELECTROLYTE_ID__ID_ASC
  ELECTROLYTE_BY_ELECTROLYTE_ID__ID_DESC
  ELECTROLYTE_BY_ELECTROLYTE_ID__NAME_ASC
  ELECTROLYTE_BY_ELECTROLYTE_ID__NAME_DESC
  ELECTROLYTE_BY_ELECTROLYTE_ID__CREATED_ASC
  ELECTROLYTE_BY_ELECTROLYTE_ID__CREATED_DESC
  ELECTROLYTE_BY_ELECTROLYTE_ID__MODIFIED_ASC
  ELECTROLYTE_BY_ELECTROLYTE_ID__MODIFIED_DESC
  ELECTROLYTE_BY_ELECTROLYTE_ID__OWNER_ID_ASC
  ELECTROLYTE_BY_ELECTROLYTE_ID__OWNER_ID_DESC
  ELECTROLYTE_BY_ELECTROLYTE_ID__REPLACEMENT_INTERVAL_MONTHS_ASC
  ELECTROLYTE_BY_ELECTROLYTE_ID__REPLACEMENT_INTERVAL_MONTHS_DESC
  ELECTROLYTE_BY_ELECTROLYTE_ID__CDARTIKEL_ASC
  ELECTROLYTE_BY_ELECTROLYTE_ID__CDARTIKEL_DESC
  ELECTROLYTE_BY_ELECTROLYTE_ID__VOLUME_ASC
  ELECTROLYTE_BY_ELECTROLYTE_ID__VOLUME_DESC
  MEMBRANE_BY_MEMBRANE_ID__ID_ASC
  MEMBRANE_BY_MEMBRANE_ID__ID_DESC
  MEMBRANE_BY_MEMBRANE_ID__NAME_ASC
  MEMBRANE_BY_MEMBRANE_ID__NAME_DESC
  MEMBRANE_BY_MEMBRANE_ID__CREATED_ASC
  MEMBRANE_BY_MEMBRANE_ID__CREATED_DESC
  MEMBRANE_BY_MEMBRANE_ID__MODIFIED_ASC
  MEMBRANE_BY_MEMBRANE_ID__MODIFIED_DESC
  MEMBRANE_BY_MEMBRANE_ID__OWNER_ID_ASC
  MEMBRANE_BY_MEMBRANE_ID__OWNER_ID_DESC
  MEMBRANE_BY_MEMBRANE_ID__REPLACEMENT_INTERVAL_MONTHS_ASC
  MEMBRANE_BY_MEMBRANE_ID__REPLACEMENT_INTERVAL_MONTHS_DESC
  MEMBRANE_BY_MEMBRANE_ID__CDARTIKEL_ASC
  MEMBRANE_BY_MEMBRANE_ID__CDARTIKEL_DESC
  MEMBRANE_BY_MEMBRANE_ID__QUANTITY_ASC
  MEMBRANE_BY_MEMBRANE_ID__QUANTITY_DESC
  O_RING_BY_O_RING_ID__ID_ASC
  O_RING_BY_O_RING_ID__ID_DESC
  O_RING_BY_O_RING_ID__NAME_ASC
  O_RING_BY_O_RING_ID__NAME_DESC
  O_RING_BY_O_RING_ID__CREATED_ASC
  O_RING_BY_O_RING_ID__CREATED_DESC
  O_RING_BY_O_RING_ID__MODIFIED_ASC
  O_RING_BY_O_RING_ID__MODIFIED_DESC
  O_RING_BY_O_RING_ID__OWNER_ID_ASC
  O_RING_BY_O_RING_ID__OWNER_ID_DESC
  O_RING_BY_O_RING_ID__REPLACEMENT_INTERVAL_MONTHS_ASC
  O_RING_BY_O_RING_ID__REPLACEMENT_INTERVAL_MONTHS_DESC
  O_RING_BY_O_RING_ID__CDARTIKEL_ASC
  O_RING_BY_O_RING_ID__CDARTIKEL_DESC
  O_RING_BY_O_RING_ID__QUANTITY_ASC
  O_RING_BY_O_RING_ID__QUANTITY_DESC
  PYROLYSER_BY_PYROLYSER_ID__ID_ASC
  PYROLYSER_BY_PYROLYSER_ID__ID_DESC
  PYROLYSER_BY_PYROLYSER_ID__NAME_ASC
  PYROLYSER_BY_PYROLYSER_ID__NAME_DESC
  PYROLYSER_BY_PYROLYSER_ID__CREATED_ASC
  PYROLYSER_BY_PYROLYSER_ID__CREATED_DESC
  PYROLYSER_BY_PYROLYSER_ID__MODIFIED_ASC
  PYROLYSER_BY_PYROLYSER_ID__MODIFIED_DESC
  PYROLYSER_BY_PYROLYSER_ID__OWNER_ID_ASC
  PYROLYSER_BY_PYROLYSER_ID__OWNER_ID_DESC
  PYROLYSER_BY_PYROLYSER_ID__REPLACEMENT_INTERVAL_MONTHS_ASC
  PYROLYSER_BY_PYROLYSER_ID__REPLACEMENT_INTERVAL_MONTHS_DESC
  PYROLYSER_BY_PYROLYSER_ID__CDARTIKEL_ASC
  PYROLYSER_BY_PYROLYSER_ID__CDARTIKEL_DESC
  FILTER_BY_FILTER_ID__ID_ASC
  FILTER_BY_FILTER_ID__ID_DESC
  FILTER_BY_FILTER_ID__NAME_ASC
  FILTER_BY_FILTER_ID__NAME_DESC
  FILTER_BY_FILTER_ID__CREATED_ASC
  FILTER_BY_FILTER_ID__CREATED_DESC
  FILTER_BY_FILTER_ID__MODIFIED_ASC
  FILTER_BY_FILTER_ID__MODIFIED_DESC
  FILTER_BY_FILTER_ID__OWNER_ID_ASC
  FILTER_BY_FILTER_ID__OWNER_ID_DESC
  FILTER_BY_FILTER_ID__REPLACEMENT_INTERVAL_MONTHS_ASC
  FILTER_BY_FILTER_ID__REPLACEMENT_INTERVAL_MONTHS_DESC
  FILTER_BY_FILTER_ID__CDARTIKEL_ASC
  FILTER_BY_FILTER_ID__CDARTIKEL_DESC
  FILTER_BY_FILTER_ID__CONSUMABLE_ASC
  FILTER_BY_FILTER_ID__CONSUMABLE_DESC
  RANGE_BY_RANGE_ID__ID_ASC
  RANGE_BY_RANGE_ID__ID_DESC
  RANGE_BY_RANGE_ID__GAS_ID_ASC
  RANGE_BY_RANGE_ID__GAS_ID_DESC
  RANGE_BY_RANGE_ID__LOW_EU_ASC
  RANGE_BY_RANGE_ID__LOW_EU_DESC
  RANGE_BY_RANGE_ID__HIGH_EU_ASC
  RANGE_BY_RANGE_ID__HIGH_EU_DESC
  RANGE_BY_RANGE_ID__ENGINEERING_UNITS_ASC
  RANGE_BY_RANGE_ID__ENGINEERING_UNITS_DESC
  RANGE_BY_RANGE_ID__ALARM_1_LEVEL_ASC
  RANGE_BY_RANGE_ID__ALARM_1_LEVEL_DESC
  RANGE_BY_RANGE_ID__ALARM_2_LEVEL_ASC
  RANGE_BY_RANGE_ID__ALARM_2_LEVEL_DESC
  RANGE_BY_RANGE_ID__WARNING_1_LEVEL_ASC
  RANGE_BY_RANGE_ID__WARNING_1_LEVEL_DESC
  RANGE_BY_RANGE_ID__WARNING_2_LEVEL_ASC
  RANGE_BY_RANGE_ID__WARNING_2_LEVEL_DESC
  RANGE_BY_RANGE_ID__ALARM_1_DIRECTION_UP_ASC
  RANGE_BY_RANGE_ID__ALARM_1_DIRECTION_UP_DESC
  RANGE_BY_RANGE_ID__ALARM_2_DIRECTION_UP_ASC
  RANGE_BY_RANGE_ID__ALARM_2_DIRECTION_UP_DESC
  RANGE_BY_RANGE_ID__ALARM_UNITS_ASC
  RANGE_BY_RANGE_ID__ALARM_UNITS_DESC
  RANGE_BY_RANGE_ID__PRECISION_ASC
  RANGE_BY_RANGE_ID__PRECISION_DESC
  RANGE_BY_RANGE_ID__CREATED_ASC
  RANGE_BY_RANGE_ID__CREATED_DESC
  RANGE_BY_RANGE_ID__MODIFIED_ASC
  RANGE_BY_RANGE_ID__MODIFIED_DESC
  RANGE_BY_RANGE_ID__OWNER_ID_ASC
  RANGE_BY_RANGE_ID__OWNER_ID_DESC
  RANGE_BY_RANGE_ID__HIGH_EU_NUMERIC_ASC
  RANGE_BY_RANGE_ID__HIGH_EU_NUMERIC_DESC
  RANGE_BY_RANGE_ID__HIGH_EU_BACKUP_ASC
  RANGE_BY_RANGE_ID__HIGH_EU_BACKUP_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__ID_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__ID_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__PREFIX_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__PREFIX_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__SUFFIX_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__SUFFIX_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__PRINCIPLE_ID_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__PRINCIPLE_ID_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__OWNER_ID_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__OWNER_ID_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__CREATED_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__CREATED_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__MODIFIED_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__MODIFIED_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__SERIES_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__SERIES_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__MAINTENANCE_INTERVAL_MONTHS_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__MAINTENANCE_INTERVAL_MONTHS_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__QUOTATION_INTERVAL_MONTHS_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__QUOTATION_INTERVAL_MONTHS_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__REPLACEMENT_INTERVAL_MONTHS_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__REPLACEMENT_INTERVAL_MONTHS_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__VOLUME_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__VOLUME_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  CAL_GAS_BY_CAL_GAS_ID__ID_ASC
  CAL_GAS_BY_CAL_GAS_ID__ID_DESC
  CAL_GAS_BY_CAL_GAS_ID__GAS_ID_ASC
  CAL_GAS_BY_CAL_GAS_ID__GAS_ID_DESC
  CAL_GAS_BY_CAL_GAS_ID__CONCENTRATION_ASC
  CAL_GAS_BY_CAL_GAS_ID__CONCENTRATION_DESC
  CAL_GAS_BY_CAL_GAS_ID__ENGINEERING_UNITS_ASC
  CAL_GAS_BY_CAL_GAS_ID__ENGINEERING_UNITS_DESC
  CAL_GAS_BY_CAL_GAS_ID__CREATED_ASC
  CAL_GAS_BY_CAL_GAS_ID__CREATED_DESC
  CAL_GAS_BY_CAL_GAS_ID__MODIFIED_ASC
  CAL_GAS_BY_CAL_GAS_ID__MODIFIED_DESC
  CAL_GAS_BY_CAL_GAS_ID__OWNER_ID_ASC
  CAL_GAS_BY_CAL_GAS_ID__OWNER_ID_DESC
  CAL_GAS_BY_CAL_GAS_ID__CDARTIKEL_ASC
  CAL_GAS_BY_CAL_GAS_ID__CDARTIKEL_DESC
  PLUG_BY_PLUG_ID__ID_ASC
  PLUG_BY_PLUG_ID__ID_DESC
  PLUG_BY_PLUG_ID__NAME_ASC
  PLUG_BY_PLUG_ID__NAME_DESC
  PLUG_BY_PLUG_ID__CREATED_ASC
  PLUG_BY_PLUG_ID__CREATED_DESC
  PLUG_BY_PLUG_ID__MODIFIED_ASC
  PLUG_BY_PLUG_ID__MODIFIED_DESC
  PLUG_BY_PLUG_ID__OWNER_ID_ASC
  PLUG_BY_PLUG_ID__OWNER_ID_DESC
  SENSORS_BY_SENSOR_TYPE_ID__COUNT_ASC
  SENSORS_BY_SENSOR_TYPE_ID__COUNT_DESC
  DETECTOR_SENSOR_TYPES_BY_SENSOR_TYPE_ID__COUNT_ASC
  DETECTOR_SENSOR_TYPES_BY_SENSOR_TYPE_ID__COUNT_DESC
}

"""
A condition to be used against `SensorType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SensorTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `sensorTypeId` field."""
  sensorTypeId: Int

  """Checks for equality with the object’s `electrolyteId` field."""
  electrolyteId: Int

  """Checks for equality with the object’s `membraneId` field."""
  membraneId: Int

  """Checks for equality with the object’s `oRingId` field."""
  oRingId: Int

  """Checks for equality with the object’s `pyrolyserId` field."""
  pyrolyserId: Int

  """Checks for equality with the object’s `filterId` field."""
  filterId: Int

  """Checks for equality with the object’s `battery` field."""
  battery: Boolean

  """Checks for equality with the object’s `restrictor` field."""
  restrictor: Boolean

  """Checks for equality with the object’s `membraneSeal` field."""
  membraneSeal: Boolean

  """Checks for equality with the object’s `rangeId` field."""
  rangeId: Int

  """Checks for equality with the object’s `flowRate` field."""
  flowRate: Float

  """Checks for equality with the object’s `calFlowRate` field."""
  calFlowRate: Float

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `obsolete` field."""
  obsolete: Boolean

  """Checks for equality with the object’s `pyrolyserVoltage` field."""
  pyrolyserVoltage: Float

  """Checks for equality with the object’s `principleId` field."""
  principleId: Int

  """Checks for equality with the object’s `sensorBaseTypeId` field."""
  sensorBaseTypeId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `model` field."""
  model: String

  """Checks for equality with the object’s `calGasId` field."""
  calGasId: Int

  """Checks for equality with the object’s `siliconeSheet` field."""
  siliconeSheet: Boolean

  """Checks for equality with the object’s `elementCount` field."""
  elementCount: Int

  """
  Checks for equality with the object’s `maintenanceIntervalMonths` field.
  """
  maintenanceIntervalMonths: Int

  """
  Checks for equality with the object’s `replacementIntervalMonths` field.
  """
  replacementIntervalMonths: Int

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `volume` field."""
  volume: Int

  """Checks for equality with the object’s `calResponse` field."""
  calResponse: Float

  """Checks for equality with the object’s `electrodeCount` field."""
  electrodeCount: Int

  """Checks for equality with the object’s `biasMv` field."""
  biasMv: Int

  """Checks for equality with the object’s `direction` field."""
  direction: Boolean

  """Checks for equality with the object’s `lowElectrolyte` field."""
  lowElectrolyte: Boolean

  """Checks for equality with the object’s `spanResistor` field."""
  spanResistor: BigFloat

  """Checks for equality with the object’s `plugId` field."""
  plugId: Int

  """Checks for equality with the object’s `transportSwitch` field."""
  transportSwitch: Boolean

  """Checks for equality with the object’s `type` field."""
  type: String
}

type Membrane implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  created: Datetime
  modified: Datetime
  ownerId: Int
  replacementIntervalMonths: Int
  cdartikel: String!
  quantity: Int

  """Reads a single `User` that is related to this `Membrane`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `SensorType`."""
  sensorTypesByMembraneId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorType`."""
    orderBy: [SensorTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorTypeFilter
  ): SensorTypesConnection!
}

type ORing implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  created: Datetime
  modified: Datetime
  ownerId: Int
  replacementIntervalMonths: Int
  cdartikel: String!
  quantity: Int

  """Reads a single `User` that is related to this `ORing`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `SensorType`."""
  sensorTypesByORingId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorType`."""
    orderBy: [SensorTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorTypeFilter
  ): SensorTypesConnection!
}

type Pyrolyser implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  created: Datetime
  modified: Datetime
  ownerId: Int
  replacementIntervalMonths: Int
  cdartikel: String!

  """Reads a single `User` that is related to this `Pyrolyser`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `DetectorSensor`."""
  detectorSensorsByPyrolyserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorSensor`."""
    orderBy: [DetectorSensorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorSensorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorSensorFilter
  ): DetectorSensorsConnection!

  """Reads and enables pagination through a set of `SensorType`."""
  sensorTypesByPyrolyserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorType`."""
    orderBy: [SensorTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorTypeFilter
  ): SensorTypesConnection!

  """Reads and enables pagination through a set of `MaintenanceVisitLine`."""
  maintenanceVisitLinesByPyrolyserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitLine`."""
    orderBy: [MaintenanceVisitLinesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitLineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitLineFilter
  ): MaintenanceVisitLinesConnection!
}

"""A connection to a list of `DetectorSensor` values."""
type DetectorSensorsConnection {
  """A list of `DetectorSensor` objects."""
  nodes: [DetectorSensor!]!

  """
  A list of edges which contains the `DetectorSensor` and cursor to aid in pagination.
  """
  edges: [DetectorSensorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DetectorSensor` you could get from the connection."""
  totalCount: Int!
}

type DetectorSensor implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  detectorId: Int!
  detectorPosition: Int!
  sensorId: Int
  filterId: Int
  _filterLabelDate: Date
  pyrolyserId: Int
  _pyrolyserLabelDate: Date
  created: Datetime
  modified: Datetime
  ownerId: Int!

  """Reads a single `Detector` that is related to this `DetectorSensor`."""
  detectorByDetectorId: Detector

  """Reads a single `Sensor` that is related to this `DetectorSensor`."""
  sensorBySensorId: Sensor

  """Reads a single `Filter` that is related to this `DetectorSensor`."""
  filterByFilterId: Filter

  """Reads a single `Pyrolyser` that is related to this `DetectorSensor`."""
  pyrolyserByPyrolyserId: Pyrolyser

  """Reads a single `User` that is related to this `DetectorSensor`."""
  userByOwnerId: User

  """
  Reads a single `DetectorSensorLocation` that is related to this `DetectorSensor`.
  """
  detectorSensorLocationByDetectorSensorId: DetectorSensorLocation

  """
  Reads and enables pagination through a set of `DetectorSensorLocation`.
  """
  detectorSensorLocationsByDetectorSensorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorSensorLocation`."""
    orderBy: [DetectorSensorLocationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorSensorLocationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorSensorLocationFilter
  ): DetectorSensorLocationsConnection! @deprecated(reason: "Please use detectorSensorLocationByDetectorSensorId instead")

  """Reads and enables pagination through a set of `MaintenanceVisitLine`."""
  maintenanceVisitLinesByDetectorSensorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitLine`."""
    orderBy: [MaintenanceVisitLinesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitLineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitLineFilter
  ): MaintenanceVisitLinesConnection!
}

type Detector implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  detectorTypeId: Int!
  serialNumber: String!
  labelDate: Date
  remarks: String
  created: Datetime!
  ownerId: Int!
  modified: Datetime

  """Reads a single `DetectorType` that is related to this `Detector`."""
  detectorTypeByDetectorTypeId: DetectorType

  """Reads a single `User` that is related to this `Detector`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `DetectorSensor`."""
  detectorSensorsByDetectorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorSensor`."""
    orderBy: [DetectorSensorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorSensorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorSensorFilter
  ): DetectorSensorsConnection!

  """Reads a single `DetectorLocation` that is related to this `Detector`."""
  detectorLocationByDetectorId: DetectorLocation

  """Reads and enables pagination through a set of `DetectorLocation`."""
  detectorLocationsByDetectorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorLocation`."""
    orderBy: [DetectorLocationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorLocationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorLocationFilter
  ): DetectorLocationsConnection! @deprecated(reason: "Please use detectorLocationByDetectorId instead")

  """Reads and enables pagination through a set of `DetectorOrder`."""
  detectorOrdersByDetectorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorOrder`."""
    orderBy: [DetectorOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorOrderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorOrderFilter
  ): DetectorOrdersConnection!

  """Reads and enables pagination through a set of `ReportDetector`."""
  reportDetectorsByDetectorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReportDetector`."""
    orderBy: [ReportDetectorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportDetectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportDetectorFilter
  ): ReportDetectorsConnection!
}

type DetectorType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  obsolete: Boolean
  prefix: String
  code: String
  suffix: String
  sensorCount: Int
  created: Datetime
  modified: Datetime
  ownerId: Int

  """Reads a single `User` that is related to this `DetectorType`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `Detector`."""
  detectorsByDetectorTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Detector`."""
    orderBy: [DetectorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorFilter
  ): DetectorsConnection!
  type: String
}

"""A connection to a list of `Detector` values."""
type DetectorsConnection {
  """A list of `Detector` objects."""
  nodes: [Detector!]!

  """
  A list of edges which contains the `Detector` and cursor to aid in pagination.
  """
  edges: [DetectorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Detector` you could get from the connection."""
  totalCount: Int!
}

"""A `Detector` edge in the connection."""
type DetectorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Detector` at the end of the edge."""
  node: Detector!
}

"""Methods to use when ordering `Detector`."""
enum DetectorsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DETECTOR_TYPE_ID_ASC
  DETECTOR_TYPE_ID_DESC
  SERIAL_NUMBER_ASC
  SERIAL_NUMBER_DESC
  LABEL_DATE_ASC
  LABEL_DATE_DESC
  REMARKS_ASC
  REMARKS_DESC
  CREATED_ASC
  CREATED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  DETECTOR_TYPE_BY_DETECTOR_TYPE_ID__ID_ASC
  DETECTOR_TYPE_BY_DETECTOR_TYPE_ID__ID_DESC
  DETECTOR_TYPE_BY_DETECTOR_TYPE_ID__OBSOLETE_ASC
  DETECTOR_TYPE_BY_DETECTOR_TYPE_ID__OBSOLETE_DESC
  DETECTOR_TYPE_BY_DETECTOR_TYPE_ID__PREFIX_ASC
  DETECTOR_TYPE_BY_DETECTOR_TYPE_ID__PREFIX_DESC
  DETECTOR_TYPE_BY_DETECTOR_TYPE_ID__CODE_ASC
  DETECTOR_TYPE_BY_DETECTOR_TYPE_ID__CODE_DESC
  DETECTOR_TYPE_BY_DETECTOR_TYPE_ID__SUFFIX_ASC
  DETECTOR_TYPE_BY_DETECTOR_TYPE_ID__SUFFIX_DESC
  DETECTOR_TYPE_BY_DETECTOR_TYPE_ID__SENSOR_COUNT_ASC
  DETECTOR_TYPE_BY_DETECTOR_TYPE_ID__SENSOR_COUNT_DESC
  DETECTOR_TYPE_BY_DETECTOR_TYPE_ID__CREATED_ASC
  DETECTOR_TYPE_BY_DETECTOR_TYPE_ID__CREATED_DESC
  DETECTOR_TYPE_BY_DETECTOR_TYPE_ID__MODIFIED_ASC
  DETECTOR_TYPE_BY_DETECTOR_TYPE_ID__MODIFIED_DESC
  DETECTOR_TYPE_BY_DETECTOR_TYPE_ID__OWNER_ID_ASC
  DETECTOR_TYPE_BY_DETECTOR_TYPE_ID__OWNER_ID_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  DETECTOR_SENSORS_BY_DETECTOR_ID__COUNT_ASC
  DETECTOR_SENSORS_BY_DETECTOR_ID__COUNT_DESC
  DETECTOR_LOCATION_BY_DETECTOR_ID__ID_ASC
  DETECTOR_LOCATION_BY_DETECTOR_ID__ID_DESC
  DETECTOR_LOCATION_BY_DETECTOR_ID__DETECTOR_ID_ASC
  DETECTOR_LOCATION_BY_DETECTOR_ID__DETECTOR_ID_DESC
  DETECTOR_LOCATION_BY_DETECTOR_ID__AREA_ID_ASC
  DETECTOR_LOCATION_BY_DETECTOR_ID__AREA_ID_DESC
  DETECTOR_LOCATION_BY_DETECTOR_ID__CREATED_ASC
  DETECTOR_LOCATION_BY_DETECTOR_ID__CREATED_DESC
  DETECTOR_LOCATION_BY_DETECTOR_ID__MODIFIED_ASC
  DETECTOR_LOCATION_BY_DETECTOR_ID__MODIFIED_DESC
  DETECTOR_LOCATION_BY_DETECTOR_ID__OWNER_ID_ASC
  DETECTOR_LOCATION_BY_DETECTOR_ID__OWNER_ID_DESC
  DETECTOR_LOCATION_BY_DETECTOR_ID__ADDRESS_ASC
  DETECTOR_LOCATION_BY_DETECTOR_ID__ADDRESS_DESC
  DETECTOR_LOCATION_BY_DETECTOR_ID__BUS_ASC
  DETECTOR_LOCATION_BY_DETECTOR_ID__BUS_DESC
  DETECTOR_ORDERS_BY_DETECTOR_ID__COUNT_ASC
  DETECTOR_ORDERS_BY_DETECTOR_ID__COUNT_DESC
  REPORT_DETECTORS_BY_DETECTOR_ID__COUNT_ASC
  REPORT_DETECTORS_BY_DETECTOR_ID__COUNT_DESC
}

"""
A condition to be used against `Detector` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DetectorCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `detectorTypeId` field."""
  detectorTypeId: Int

  """Checks for equality with the object’s `serialNumber` field."""
  serialNumber: String

  """Checks for equality with the object’s `labelDate` field."""
  labelDate: Date

  """Checks for equality with the object’s `remarks` field."""
  remarks: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime
}

"""Methods to use when ordering `DetectorSensor`."""
enum DetectorSensorsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DETECTOR_ID_ASC
  DETECTOR_ID_DESC
  DETECTOR_POSITION_ASC
  DETECTOR_POSITION_DESC
  SENSOR_ID_ASC
  SENSOR_ID_DESC
  FILTER_ID_ASC
  FILTER_ID_DESC
  _FILTER_LABEL_DATE_ASC
  _FILTER_LABEL_DATE_DESC
  PYROLYSER_ID_ASC
  PYROLYSER_ID_DESC
  _PYROLYSER_LABEL_DATE_ASC
  _PYROLYSER_LABEL_DATE_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  DETECTOR_BY_DETECTOR_ID__ID_ASC
  DETECTOR_BY_DETECTOR_ID__ID_DESC
  DETECTOR_BY_DETECTOR_ID__DETECTOR_TYPE_ID_ASC
  DETECTOR_BY_DETECTOR_ID__DETECTOR_TYPE_ID_DESC
  DETECTOR_BY_DETECTOR_ID__SERIAL_NUMBER_ASC
  DETECTOR_BY_DETECTOR_ID__SERIAL_NUMBER_DESC
  DETECTOR_BY_DETECTOR_ID__LABEL_DATE_ASC
  DETECTOR_BY_DETECTOR_ID__LABEL_DATE_DESC
  DETECTOR_BY_DETECTOR_ID__REMARKS_ASC
  DETECTOR_BY_DETECTOR_ID__REMARKS_DESC
  DETECTOR_BY_DETECTOR_ID__CREATED_ASC
  DETECTOR_BY_DETECTOR_ID__CREATED_DESC
  DETECTOR_BY_DETECTOR_ID__OWNER_ID_ASC
  DETECTOR_BY_DETECTOR_ID__OWNER_ID_DESC
  DETECTOR_BY_DETECTOR_ID__MODIFIED_ASC
  DETECTOR_BY_DETECTOR_ID__MODIFIED_DESC
  SENSOR_BY_SENSOR_ID__ID_ASC
  SENSOR_BY_SENSOR_ID__ID_DESC
  SENSOR_BY_SENSOR_ID__SERIAL_NUMBER_ASC
  SENSOR_BY_SENSOR_ID__SERIAL_NUMBER_DESC
  SENSOR_BY_SENSOR_ID__LABEL_DATE_ASC
  SENSOR_BY_SENSOR_ID__LABEL_DATE_DESC
  SENSOR_BY_SENSOR_ID__REMARKS_ASC
  SENSOR_BY_SENSOR_ID__REMARKS_DESC
  SENSOR_BY_SENSOR_ID__CREATED_ASC
  SENSOR_BY_SENSOR_ID__CREATED_DESC
  SENSOR_BY_SENSOR_ID__OWNER_ID_ASC
  SENSOR_BY_SENSOR_ID__OWNER_ID_DESC
  SENSOR_BY_SENSOR_ID__MODIFIED_ASC
  SENSOR_BY_SENSOR_ID__MODIFIED_DESC
  SENSOR_BY_SENSOR_ID__SENSOR_TYPE_ID_ASC
  SENSOR_BY_SENSOR_ID__SENSOR_TYPE_ID_DESC
  FILTER_BY_FILTER_ID__ID_ASC
  FILTER_BY_FILTER_ID__ID_DESC
  FILTER_BY_FILTER_ID__NAME_ASC
  FILTER_BY_FILTER_ID__NAME_DESC
  FILTER_BY_FILTER_ID__CREATED_ASC
  FILTER_BY_FILTER_ID__CREATED_DESC
  FILTER_BY_FILTER_ID__MODIFIED_ASC
  FILTER_BY_FILTER_ID__MODIFIED_DESC
  FILTER_BY_FILTER_ID__OWNER_ID_ASC
  FILTER_BY_FILTER_ID__OWNER_ID_DESC
  FILTER_BY_FILTER_ID__REPLACEMENT_INTERVAL_MONTHS_ASC
  FILTER_BY_FILTER_ID__REPLACEMENT_INTERVAL_MONTHS_DESC
  FILTER_BY_FILTER_ID__CDARTIKEL_ASC
  FILTER_BY_FILTER_ID__CDARTIKEL_DESC
  FILTER_BY_FILTER_ID__CONSUMABLE_ASC
  FILTER_BY_FILTER_ID__CONSUMABLE_DESC
  PYROLYSER_BY_PYROLYSER_ID__ID_ASC
  PYROLYSER_BY_PYROLYSER_ID__ID_DESC
  PYROLYSER_BY_PYROLYSER_ID__NAME_ASC
  PYROLYSER_BY_PYROLYSER_ID__NAME_DESC
  PYROLYSER_BY_PYROLYSER_ID__CREATED_ASC
  PYROLYSER_BY_PYROLYSER_ID__CREATED_DESC
  PYROLYSER_BY_PYROLYSER_ID__MODIFIED_ASC
  PYROLYSER_BY_PYROLYSER_ID__MODIFIED_DESC
  PYROLYSER_BY_PYROLYSER_ID__OWNER_ID_ASC
  PYROLYSER_BY_PYROLYSER_ID__OWNER_ID_DESC
  PYROLYSER_BY_PYROLYSER_ID__REPLACEMENT_INTERVAL_MONTHS_ASC
  PYROLYSER_BY_PYROLYSER_ID__REPLACEMENT_INTERVAL_MONTHS_DESC
  PYROLYSER_BY_PYROLYSER_ID__CDARTIKEL_ASC
  PYROLYSER_BY_PYROLYSER_ID__CDARTIKEL_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__ID_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__ID_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__DETECTOR_SENSOR_ID_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__DETECTOR_SENSOR_ID_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__DETECTOR_LOCATION_ID_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__DETECTOR_LOCATION_ID_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__SENSOR_REPLACEMENT_INTERVAL_MONTHS_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__SENSOR_REPLACEMENT_INTERVAL_MONTHS_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__SENSOR_MAINTENANCE_INTERVAL_MONTHS_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__SENSOR_MAINTENANCE_INTERVAL_MONTHS_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__FILTER_REPLACEMENT_INTERVAL_MONTHS_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__FILTER_REPLACEMENT_INTERVAL_MONTHS_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__PYROLYSER_REPLACEMENT_INTERVAL_MONTHS_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__PYROLYSER_REPLACEMENT_INTERVAL_MONTHS_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__CREATED_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__CREATED_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__MODIFIED_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__MODIFIED_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__OWNER_ID_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__OWNER_ID_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__SAMPLE_POINT_ID_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__SAMPLE_POINT_ID_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__APPLICATION_ID_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__APPLICATION_ID_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__SIMS_CHANNEL_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__SIMS_CHANNEL_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__LICENSE_ID_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__LICENSE_ID_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__SIMS_TAG_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__SIMS_TAG_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__REMARKS_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_ID__REMARKS_DESC
  MAINTENANCE_VISIT_LINES_BY_DETECTOR_SENSOR_ID__COUNT_ASC
  MAINTENANCE_VISIT_LINES_BY_DETECTOR_SENSOR_ID__COUNT_DESC
}

"""
A condition to be used against `DetectorSensor` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DetectorSensorCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `detectorId` field."""
  detectorId: Int

  """Checks for equality with the object’s `detectorPosition` field."""
  detectorPosition: Int

  """Checks for equality with the object’s `sensorId` field."""
  sensorId: Int

  """Checks for equality with the object’s `filterId` field."""
  filterId: Int

  """Checks for equality with the object’s `_filterLabelDate` field."""
  _filterLabelDate: Date

  """Checks for equality with the object’s `pyrolyserId` field."""
  pyrolyserId: Int

  """Checks for equality with the object’s `_pyrolyserLabelDate` field."""
  _pyrolyserLabelDate: Date

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int
}

type DetectorLocation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  detectorId: Int
  areaId: Int!
  created: Datetime
  modified: Datetime
  ownerId: Int!
  address: Int
  bus: Int

  """Reads a single `Detector` that is related to this `DetectorLocation`."""
  detectorByDetectorId: Detector

  """Reads a single `Area` that is related to this `DetectorLocation`."""
  areaByAreaId: Area

  """Reads a single `User` that is related to this `DetectorLocation`."""
  userByOwnerId: User

  """
  Reads and enables pagination through a set of `DetectorSensorLocation`.
  """
  detectorSensorLocationsByDetectorLocationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorSensorLocation`."""
    orderBy: [DetectorSensorLocationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorSensorLocationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorSensorLocationFilter
  ): DetectorSensorLocationsConnection!
}

type Area implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  floorId: Int!
  name: String!
  created: Datetime
  modified: Datetime
  ownerId: Int!
  remarks: String

  """Reads a single `Floor` that is related to this `Area`."""
  floorByFloorId: Floor

  """Reads a single `User` that is related to this `Area`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `SamplePoint`."""
  samplePointsByAreaId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SamplePoint`."""
    orderBy: [SamplePointsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SamplePointCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SamplePointFilter
  ): SamplePointsConnection!

  """Reads and enables pagination through a set of `DetectorLocation`."""
  detectorLocationsByAreaId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorLocation`."""
    orderBy: [DetectorLocationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorLocationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorLocationFilter
  ): DetectorLocationsConnection!
}

type Floor implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  buildingId: Int!
  name: String!
  created: Datetime
  modified: Datetime
  ownerId: Int!

  """Reads a single `Building` that is related to this `Floor`."""
  buildingByBuildingId: Building

  """Reads a single `User` that is related to this `Floor`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `Area`."""
  areasByFloorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Area`."""
    orderBy: [AreasOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AreaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AreaFilter
  ): AreasConnection!
}

type Building implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  endUserId: Int!
  name: String!
  created: Datetime
  modified: Datetime
  ownerId: Int!

  """Reads a single `EndUser` that is related to this `Building`."""
  endUserByEndUserId: EndUser

  """Reads a single `User` that is related to this `Building`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `Floor`."""
  floorsByBuildingId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Floor`."""
    orderBy: [FloorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FloorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FloorFilter
  ): FloorsConnection!
}

type EndUser implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
  address1: String
  city: String
  country: String
  created: Datetime
  modified: Datetime
  formerName1: String
  formerName2: String
  address2: String
  zipCode: String
  region: String
  ownerId: Int
  subLocation: String!
  location: String!
  contactName: String
  contactEmail: String
  contactPhone: String

  """Reads a single `User` that is related to this `EndUser`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `Building`."""
  buildingsByEndUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Building`."""
    orderBy: [BuildingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BuildingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BuildingFilter
  ): BuildingsConnection!

  """Reads and enables pagination through a set of `MaintenanceVisit`."""
  maintenanceVisitsByEndUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisit`."""
    orderBy: [MaintenanceVisitsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitFilter
  ): MaintenanceVisitsConnection!

  """Reads and enables pagination through a set of `Item`."""
  itemsByEndUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ItemFilter
  ): ItemsConnection!

  """Reads and enables pagination through a set of `Job`."""
  jobsByEndUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Job`."""
    orderBy: [JobsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JobCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: JobFilter
  ): JobsConnection!

  """Reads and enables pagination through a set of `License`."""
  licensesByEndUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseFilter
  ): LicensesConnection!

  """Reads and enables pagination through a set of `Report`."""
  reportsByEndUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Report`."""
    orderBy: [ReportsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportFilter
  ): ReportsConnection!
}

"""A connection to a list of `Building` values."""
type BuildingsConnection {
  """A list of `Building` objects."""
  nodes: [Building!]!

  """
  A list of edges which contains the `Building` and cursor to aid in pagination.
  """
  edges: [BuildingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Building` you could get from the connection."""
  totalCount: Int!
}

"""A `Building` edge in the connection."""
type BuildingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Building` at the end of the edge."""
  node: Building!
}

"""Methods to use when ordering `Building`."""
enum BuildingsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  END_USER_ID_ASC
  END_USER_ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  END_USER_BY_END_USER_ID__ID_ASC
  END_USER_BY_END_USER_ID__ID_DESC
  END_USER_BY_END_USER_ID__NAME_ASC
  END_USER_BY_END_USER_ID__NAME_DESC
  END_USER_BY_END_USER_ID__ADDRESS1_ASC
  END_USER_BY_END_USER_ID__ADDRESS1_DESC
  END_USER_BY_END_USER_ID__CITY_ASC
  END_USER_BY_END_USER_ID__CITY_DESC
  END_USER_BY_END_USER_ID__COUNTRY_ASC
  END_USER_BY_END_USER_ID__COUNTRY_DESC
  END_USER_BY_END_USER_ID__CREATED_ASC
  END_USER_BY_END_USER_ID__CREATED_DESC
  END_USER_BY_END_USER_ID__MODIFIED_ASC
  END_USER_BY_END_USER_ID__MODIFIED_DESC
  END_USER_BY_END_USER_ID__FORMER_NAME1_ASC
  END_USER_BY_END_USER_ID__FORMER_NAME1_DESC
  END_USER_BY_END_USER_ID__FORMER_NAME2_ASC
  END_USER_BY_END_USER_ID__FORMER_NAME2_DESC
  END_USER_BY_END_USER_ID__ADDRESS2_ASC
  END_USER_BY_END_USER_ID__ADDRESS2_DESC
  END_USER_BY_END_USER_ID__ZIP_CODE_ASC
  END_USER_BY_END_USER_ID__ZIP_CODE_DESC
  END_USER_BY_END_USER_ID__REGION_ASC
  END_USER_BY_END_USER_ID__REGION_DESC
  END_USER_BY_END_USER_ID__OWNER_ID_ASC
  END_USER_BY_END_USER_ID__OWNER_ID_DESC
  END_USER_BY_END_USER_ID__SUB_LOCATION_ASC
  END_USER_BY_END_USER_ID__SUB_LOCATION_DESC
  END_USER_BY_END_USER_ID__LOCATION_ASC
  END_USER_BY_END_USER_ID__LOCATION_DESC
  END_USER_BY_END_USER_ID__CONTACT_NAME_ASC
  END_USER_BY_END_USER_ID__CONTACT_NAME_DESC
  END_USER_BY_END_USER_ID__CONTACT_EMAIL_ASC
  END_USER_BY_END_USER_ID__CONTACT_EMAIL_DESC
  END_USER_BY_END_USER_ID__CONTACT_PHONE_ASC
  END_USER_BY_END_USER_ID__CONTACT_PHONE_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  FLOORS_BY_BUILDING_ID__COUNT_ASC
  FLOORS_BY_BUILDING_ID__COUNT_DESC
}

"""
A condition to be used against `Building` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input BuildingCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `endUserId` field."""
  endUserId: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int
}

"""A connection to a list of `MaintenanceVisit` values."""
type MaintenanceVisitsConnection {
  """A list of `MaintenanceVisit` objects."""
  nodes: [MaintenanceVisit!]!

  """
  A list of edges which contains the `MaintenanceVisit` and cursor to aid in pagination.
  """
  edges: [MaintenanceVisitsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MaintenanceVisit` you could get from the connection.
  """
  totalCount: Int!
}

type MaintenanceVisit implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  endUserId: Int!
  userId: Int
  factuuropdracht: String
  date: Date!
  duration: Int!
  created: Datetime!
  modified: Datetime
  ownerId: Int!
  checked: Boolean
  contactName: String
  contactEmail: String
  labourHours: BigFloat
  locked: Boolean!
  contactPhone: String
  cdmagazijn: String

  """Reads a single `EndUser` that is related to this `MaintenanceVisit`."""
  endUserByEndUserId: EndUser

  """Reads a single `User` that is related to this `MaintenanceVisit`."""
  userByUserId: User

  """Reads a single `User` that is related to this `MaintenanceVisit`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `MaintenanceVisitLine`."""
  maintenanceVisitLinesByMaintenanceVisitId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitLine`."""
    orderBy: [MaintenanceVisitLinesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitLineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitLineFilter
  ): MaintenanceVisitLinesConnection!

  """
  Reads and enables pagination through a set of `MaintenanceVisitRemark`.
  """
  maintenanceVisitRemarksByMaintenanceVisitId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitRemark`."""
    orderBy: [MaintenanceVisitRemarksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitRemarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitRemarkFilter
  ): MaintenanceVisitRemarksConnection!
}

"""A connection to a list of `MaintenanceVisitLine` values."""
type MaintenanceVisitLinesConnection {
  """A list of `MaintenanceVisitLine` objects."""
  nodes: [MaintenanceVisitLine!]!

  """
  A list of edges which contains the `MaintenanceVisitLine` and cursor to aid in pagination.
  """
  edges: [MaintenanceVisitLinesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MaintenanceVisitLine` you could get from the connection.
  """
  totalCount: Int!
}

type MaintenanceVisitLine implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  maintenanceVisitId: Int!
  detectorSensorLocationId: Int!
  dateOld: Date
  remarkLine: Int
  day: Int
  success: Boolean
  detectorSensorId: Int
  sensorId: Int
  originalSensorId: Int
  concentration: Float
  calGasId: Int
  preResponse: Float
  response: Float
  spanSuccess: Boolean
  zeroSuccess: Boolean
  filterId: Int
  pyrolyserId: Int
  sensorMaintenanceDueDate: Date
  sensorInstallDueDate: Date
  filterInstallDueDate: Date
  pyrolyserInstallDueDate: Date

  """
  Reads a single `MaintenanceVisit` that is related to this `MaintenanceVisitLine`.
  """
  maintenanceVisitByMaintenanceVisitId: MaintenanceVisit

  """
  Reads a single `DetectorSensorLocation` that is related to this `MaintenanceVisitLine`.
  """
  detectorSensorLocationByDetectorSensorLocationId: DetectorSensorLocation

  """
  Reads a single `DetectorSensor` that is related to this `MaintenanceVisitLine`.
  """
  detectorSensorByDetectorSensorId: DetectorSensor

  """
  Reads a single `Sensor` that is related to this `MaintenanceVisitLine`.
  """
  sensorBySensorId: Sensor

  """
  Reads a single `Sensor` that is related to this `MaintenanceVisitLine`.
  """
  sensorByOriginalSensorId: Sensor

  """
  Reads a single `CalGas` that is related to this `MaintenanceVisitLine`.
  """
  calGasByCalGasId: CalGas

  """
  Reads a single `Filter` that is related to this `MaintenanceVisitLine`.
  """
  filterByFilterId: Filter

  """
  Reads a single `Pyrolyser` that is related to this `MaintenanceVisitLine`.
  """
  pyrolyserByPyrolyserId: Pyrolyser
}

type DetectorSensorLocation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  detectorSensorId: Int!
  detectorLocationId: Int
  sensorReplacementIntervalMonths: Int
  sensorMaintenanceIntervalMonths: Int
  filterReplacementIntervalMonths: Int
  pyrolyserReplacementIntervalMonths: Int
  created: Datetime
  modified: Datetime
  ownerId: Int!
  samplePointId: Int!
  applicationId: Int
  simsChannel: Int
  licenseId: Int
  simsTag: String
  remarks: String

  """
  Reads a single `DetectorSensor` that is related to this `DetectorSensorLocation`.
  """
  detectorSensorByDetectorSensorId: DetectorSensor

  """
  Reads a single `DetectorLocation` that is related to this `DetectorSensorLocation`.
  """
  detectorLocationByDetectorLocationId: DetectorLocation

  """
  Reads a single `User` that is related to this `DetectorSensorLocation`.
  """
  userByOwnerId: User

  """
  Reads a single `SamplePoint` that is related to this `DetectorSensorLocation`.
  """
  samplePointBySamplePointId: SamplePoint

  """
  Reads a single `Application` that is related to this `DetectorSensorLocation`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `License` that is related to this `DetectorSensorLocation`.
  """
  licenseByLicenseId: License

  """Reads and enables pagination through a set of `MaintenanceVisitLine`."""
  maintenanceVisitLinesByDetectorSensorLocationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitLine`."""
    orderBy: [MaintenanceVisitLinesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitLineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitLineFilter
  ): MaintenanceVisitLinesConnection!

  """Reads and enables pagination through a set of `SensorElementLocation`."""
  sensorElementLocationsByDetectorSensorLocationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorElementLocation`."""
    orderBy: [SensorElementLocationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorElementLocationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorElementLocationFilter
  ): SensorElementLocationsConnection!
  calcFilterReplacementInterval: Interval
  calcPyrolyserReplacementInterval: Interval
  calcSensorMaintenanceInterval: Interval
  calcSensorReplacementInterval: Interval
  filterReplacementDueDate: Date
  pyrolyserReplacementDueDate: Date
  sensorMaintenanceDueDate: Date
  sensorReplacementDueDate: Date
}

type SamplePoint implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  created: Datetime
  modified: Datetime
  ownerId: Int
  areaId: Int!

  """Reads a single `User` that is related to this `SamplePoint`."""
  userByOwnerId: User

  """Reads a single `Area` that is related to this `SamplePoint`."""
  areaByAreaId: Area

  """
  Reads and enables pagination through a set of `DetectorSensorLocation`.
  """
  detectorSensorLocationsBySamplePointId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorSensorLocation`."""
    orderBy: [DetectorSensorLocationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorSensorLocationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorSensorLocationFilter
  ): DetectorSensorLocationsConnection!
}

"""A connection to a list of `DetectorSensorLocation` values."""
type DetectorSensorLocationsConnection {
  """A list of `DetectorSensorLocation` objects."""
  nodes: [DetectorSensorLocation!]!

  """
  A list of edges which contains the `DetectorSensorLocation` and cursor to aid in pagination.
  """
  edges: [DetectorSensorLocationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DetectorSensorLocation` you could get from the connection.
  """
  totalCount: Int!
}

"""A `DetectorSensorLocation` edge in the connection."""
type DetectorSensorLocationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DetectorSensorLocation` at the end of the edge."""
  node: DetectorSensorLocation!
}

"""Methods to use when ordering `DetectorSensorLocation`."""
enum DetectorSensorLocationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DETECTOR_SENSOR_ID_ASC
  DETECTOR_SENSOR_ID_DESC
  DETECTOR_LOCATION_ID_ASC
  DETECTOR_LOCATION_ID_DESC
  SENSOR_REPLACEMENT_INTERVAL_MONTHS_ASC
  SENSOR_REPLACEMENT_INTERVAL_MONTHS_DESC
  SENSOR_MAINTENANCE_INTERVAL_MONTHS_ASC
  SENSOR_MAINTENANCE_INTERVAL_MONTHS_DESC
  FILTER_REPLACEMENT_INTERVAL_MONTHS_ASC
  FILTER_REPLACEMENT_INTERVAL_MONTHS_DESC
  PYROLYSER_REPLACEMENT_INTERVAL_MONTHS_ASC
  PYROLYSER_REPLACEMENT_INTERVAL_MONTHS_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  SAMPLE_POINT_ID_ASC
  SAMPLE_POINT_ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  SIMS_CHANNEL_ASC
  SIMS_CHANNEL_DESC
  LICENSE_ID_ASC
  LICENSE_ID_DESC
  SIMS_TAG_ASC
  SIMS_TAG_DESC
  REMARKS_ASC
  REMARKS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__ID_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__ID_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__DETECTOR_ID_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__DETECTOR_ID_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__DETECTOR_POSITION_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__DETECTOR_POSITION_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__SENSOR_ID_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__SENSOR_ID_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__FILTER_ID_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__FILTER_ID_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID___FILTER_LABEL_DATE_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID___FILTER_LABEL_DATE_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__PYROLYSER_ID_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__PYROLYSER_ID_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID___PYROLYSER_LABEL_DATE_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID___PYROLYSER_LABEL_DATE_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__CREATED_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__CREATED_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__MODIFIED_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__MODIFIED_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__OWNER_ID_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__OWNER_ID_DESC
  DETECTOR_LOCATION_BY_DETECTOR_LOCATION_ID__ID_ASC
  DETECTOR_LOCATION_BY_DETECTOR_LOCATION_ID__ID_DESC
  DETECTOR_LOCATION_BY_DETECTOR_LOCATION_ID__DETECTOR_ID_ASC
  DETECTOR_LOCATION_BY_DETECTOR_LOCATION_ID__DETECTOR_ID_DESC
  DETECTOR_LOCATION_BY_DETECTOR_LOCATION_ID__AREA_ID_ASC
  DETECTOR_LOCATION_BY_DETECTOR_LOCATION_ID__AREA_ID_DESC
  DETECTOR_LOCATION_BY_DETECTOR_LOCATION_ID__CREATED_ASC
  DETECTOR_LOCATION_BY_DETECTOR_LOCATION_ID__CREATED_DESC
  DETECTOR_LOCATION_BY_DETECTOR_LOCATION_ID__MODIFIED_ASC
  DETECTOR_LOCATION_BY_DETECTOR_LOCATION_ID__MODIFIED_DESC
  DETECTOR_LOCATION_BY_DETECTOR_LOCATION_ID__OWNER_ID_ASC
  DETECTOR_LOCATION_BY_DETECTOR_LOCATION_ID__OWNER_ID_DESC
  DETECTOR_LOCATION_BY_DETECTOR_LOCATION_ID__ADDRESS_ASC
  DETECTOR_LOCATION_BY_DETECTOR_LOCATION_ID__ADDRESS_DESC
  DETECTOR_LOCATION_BY_DETECTOR_LOCATION_ID__BUS_ASC
  DETECTOR_LOCATION_BY_DETECTOR_LOCATION_ID__BUS_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  SAMPLE_POINT_BY_SAMPLE_POINT_ID__ID_ASC
  SAMPLE_POINT_BY_SAMPLE_POINT_ID__ID_DESC
  SAMPLE_POINT_BY_SAMPLE_POINT_ID__NAME_ASC
  SAMPLE_POINT_BY_SAMPLE_POINT_ID__NAME_DESC
  SAMPLE_POINT_BY_SAMPLE_POINT_ID__CREATED_ASC
  SAMPLE_POINT_BY_SAMPLE_POINT_ID__CREATED_DESC
  SAMPLE_POINT_BY_SAMPLE_POINT_ID__MODIFIED_ASC
  SAMPLE_POINT_BY_SAMPLE_POINT_ID__MODIFIED_DESC
  SAMPLE_POINT_BY_SAMPLE_POINT_ID__OWNER_ID_ASC
  SAMPLE_POINT_BY_SAMPLE_POINT_ID__OWNER_ID_DESC
  SAMPLE_POINT_BY_SAMPLE_POINT_ID__AREA_ID_ASC
  SAMPLE_POINT_BY_SAMPLE_POINT_ID__AREA_ID_DESC
  APPLICATION_BY_APPLICATION_ID__ID_ASC
  APPLICATION_BY_APPLICATION_ID__ID_DESC
  APPLICATION_BY_APPLICATION_ID___TOOL_ID_ASC
  APPLICATION_BY_APPLICATION_ID___TOOL_ID_DESC
  APPLICATION_BY_APPLICATION_ID__NAME_ASC
  APPLICATION_BY_APPLICATION_ID__NAME_DESC
  APPLICATION_BY_APPLICATION_ID__CREATED_ASC
  APPLICATION_BY_APPLICATION_ID__CREATED_DESC
  APPLICATION_BY_APPLICATION_ID__MODIFIED_ASC
  APPLICATION_BY_APPLICATION_ID__MODIFIED_DESC
  APPLICATION_BY_APPLICATION_ID__OWNER_ID_ASC
  APPLICATION_BY_APPLICATION_ID__OWNER_ID_DESC
  LICENSE_BY_LICENSE_ID__ID_ASC
  LICENSE_BY_LICENSE_ID__ID_DESC
  LICENSE_BY_LICENSE_ID__LICENSE_MODULE_ID_ASC
  LICENSE_BY_LICENSE_ID__LICENSE_MODULE_ID_DESC
  LICENSE_BY_LICENSE_ID__MODULE_DATA_ASC
  LICENSE_BY_LICENSE_ID__MODULE_DATA_DESC
  LICENSE_BY_LICENSE_ID__LICENSE_CODE_ASC
  LICENSE_BY_LICENSE_ID__LICENSE_CODE_DESC
  LICENSE_BY_LICENSE_ID__REMARKS_ASC
  LICENSE_BY_LICENSE_ID__REMARKS_DESC
  LICENSE_BY_LICENSE_ID__LICENSE_CUSTOMER_ID_ASC
  LICENSE_BY_LICENSE_ID__LICENSE_CUSTOMER_ID_DESC
  LICENSE_BY_LICENSE_ID__LICENSE_ID_ASC
  LICENSE_BY_LICENSE_ID__LICENSE_ID_DESC
  LICENSE_BY_LICENSE_ID__DURATION_MONTHS_ASC
  LICENSE_BY_LICENSE_ID__DURATION_MONTHS_DESC
  LICENSE_BY_LICENSE_ID__DURATION_DAYS_ASC
  LICENSE_BY_LICENSE_ID__DURATION_DAYS_DESC
  LICENSE_BY_LICENSE_ID__CREATED_ASC
  LICENSE_BY_LICENSE_ID__CREATED_DESC
  LICENSE_BY_LICENSE_ID__ACTIVATE_ASC
  LICENSE_BY_LICENSE_ID__ACTIVATE_DESC
  LICENSE_BY_LICENSE_ID__OWNER_ID_ASC
  LICENSE_BY_LICENSE_ID__OWNER_ID_DESC
  LICENSE_BY_LICENSE_ID__END_USER_ID_ASC
  LICENSE_BY_LICENSE_ID__END_USER_ID_DESC
  MAINTENANCE_VISIT_LINES_BY_DETECTOR_SENSOR_LOCATION_ID__COUNT_ASC
  MAINTENANCE_VISIT_LINES_BY_DETECTOR_SENSOR_LOCATION_ID__COUNT_DESC
  SENSOR_ELEMENT_LOCATIONS_BY_DETECTOR_SENSOR_LOCATION_ID__COUNT_ASC
  SENSOR_ELEMENT_LOCATIONS_BY_DETECTOR_SENSOR_LOCATION_ID__COUNT_DESC
}

"""
A condition to be used against `DetectorSensorLocation` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input DetectorSensorLocationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `detectorSensorId` field."""
  detectorSensorId: Int

  """Checks for equality with the object’s `detectorLocationId` field."""
  detectorLocationId: Int

  """
  Checks for equality with the object’s `sensorReplacementIntervalMonths` field.
  """
  sensorReplacementIntervalMonths: Int

  """
  Checks for equality with the object’s `sensorMaintenanceIntervalMonths` field.
  """
  sensorMaintenanceIntervalMonths: Int

  """
  Checks for equality with the object’s `filterReplacementIntervalMonths` field.
  """
  filterReplacementIntervalMonths: Int

  """
  Checks for equality with the object’s `pyrolyserReplacementIntervalMonths` field.
  """
  pyrolyserReplacementIntervalMonths: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `samplePointId` field."""
  samplePointId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `simsChannel` field."""
  simsChannel: Int

  """Checks for equality with the object’s `licenseId` field."""
  licenseId: Int

  """Checks for equality with the object’s `simsTag` field."""
  simsTag: String

  """Checks for equality with the object’s `remarks` field."""
  remarks: String
}

type Application implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  _toolId: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int!

  """Reads a single `User` that is related to this `Application`."""
  userByOwnerId: User

  """
  Reads and enables pagination through a set of `DetectorSensorLocation`.
  """
  detectorSensorLocationsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorSensorLocation`."""
    orderBy: [DetectorSensorLocationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorSensorLocationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorSensorLocationFilter
  ): DetectorSensorLocationsConnection!
}

type License implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  licenseModuleId: Int
  moduleData: String
  licenseCode: String
  remarks: String
  licenseCustomerId: Int
  licenseId: Int
  durationMonths: Int!
  durationDays: Int!
  created: Datetime
  activate: Boolean!
  ownerId: Int
  endUserId: Int

  """Reads a single `LicenseModule` that is related to this `License`."""
  licenseModuleByLicenseModuleId: LicenseModule

  """Reads a single `LicenseCustomer` that is related to this `License`."""
  licenseCustomerByLicenseCustomerId: LicenseCustomer

  """Reads a single `User` that is related to this `License`."""
  userByOwnerId: User

  """Reads a single `EndUser` that is related to this `License`."""
  endUserByEndUserId: EndUser

  """
  Reads and enables pagination through a set of `DetectorSensorLocation`.
  """
  detectorSensorLocationsByLicenseId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorSensorLocation`."""
    orderBy: [DetectorSensorLocationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorSensorLocationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorSensorLocationFilter
  ): DetectorSensorLocationsConnection!

  """Reads and enables pagination through a set of `LicenseOrder`."""
  licenseOrdersByLicenseId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LicenseOrder`."""
    orderBy: [LicenseOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseOrderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseOrderFilter
  ): LicenseOrdersConnection!

  """Reads and enables pagination through a set of `LicenseRegistration`."""
  licenseRegistrationsByLicenseId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LicenseRegistration`."""
    orderBy: [LicenseRegistrationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseRegistrationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseRegistrationFilter
  ): LicenseRegistrationsConnection!
}

type LicenseModule implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
  latestVersion: String
  created: Datetime
  modified: Datetime
  ownerId: Int

  """Reads a single `User` that is related to this `LicenseModule`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `License`."""
  licensesByLicenseModuleId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseFilter
  ): LicensesConnection!
}

"""A connection to a list of `License` values."""
type LicensesConnection {
  """A list of `License` objects."""
  nodes: [License!]!

  """
  A list of edges which contains the `License` and cursor to aid in pagination.
  """
  edges: [LicensesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `License` you could get from the connection."""
  totalCount: Int!
}

"""A `License` edge in the connection."""
type LicensesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `License` at the end of the edge."""
  node: License!
}

"""Methods to use when ordering `License`."""
enum LicensesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  LICENSE_MODULE_ID_ASC
  LICENSE_MODULE_ID_DESC
  MODULE_DATA_ASC
  MODULE_DATA_DESC
  LICENSE_CODE_ASC
  LICENSE_CODE_DESC
  REMARKS_ASC
  REMARKS_DESC
  LICENSE_CUSTOMER_ID_ASC
  LICENSE_CUSTOMER_ID_DESC
  LICENSE_ID_ASC
  LICENSE_ID_DESC
  DURATION_MONTHS_ASC
  DURATION_MONTHS_DESC
  DURATION_DAYS_ASC
  DURATION_DAYS_DESC
  CREATED_ASC
  CREATED_DESC
  ACTIVATE_ASC
  ACTIVATE_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  END_USER_ID_ASC
  END_USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  LICENSE_MODULE_BY_LICENSE_MODULE_ID__ID_ASC
  LICENSE_MODULE_BY_LICENSE_MODULE_ID__ID_DESC
  LICENSE_MODULE_BY_LICENSE_MODULE_ID__NAME_ASC
  LICENSE_MODULE_BY_LICENSE_MODULE_ID__NAME_DESC
  LICENSE_MODULE_BY_LICENSE_MODULE_ID__LATEST_VERSION_ASC
  LICENSE_MODULE_BY_LICENSE_MODULE_ID__LATEST_VERSION_DESC
  LICENSE_MODULE_BY_LICENSE_MODULE_ID__CREATED_ASC
  LICENSE_MODULE_BY_LICENSE_MODULE_ID__CREATED_DESC
  LICENSE_MODULE_BY_LICENSE_MODULE_ID__MODIFIED_ASC
  LICENSE_MODULE_BY_LICENSE_MODULE_ID__MODIFIED_DESC
  LICENSE_MODULE_BY_LICENSE_MODULE_ID__OWNER_ID_ASC
  LICENSE_MODULE_BY_LICENSE_MODULE_ID__OWNER_ID_DESC
  LICENSE_CUSTOMER_BY_LICENSE_CUSTOMER_ID__ID_ASC
  LICENSE_CUSTOMER_BY_LICENSE_CUSTOMER_ID__ID_DESC
  LICENSE_CUSTOMER_BY_LICENSE_CUSTOMER_ID__NAME_ASC
  LICENSE_CUSTOMER_BY_LICENSE_CUSTOMER_ID__NAME_DESC
  LICENSE_CUSTOMER_BY_LICENSE_CUSTOMER_ID__CREATED_ASC
  LICENSE_CUSTOMER_BY_LICENSE_CUSTOMER_ID__CREATED_DESC
  LICENSE_CUSTOMER_BY_LICENSE_CUSTOMER_ID__MODIFIED_ASC
  LICENSE_CUSTOMER_BY_LICENSE_CUSTOMER_ID__MODIFIED_DESC
  LICENSE_CUSTOMER_BY_LICENSE_CUSTOMER_ID__OWNER_ID_ASC
  LICENSE_CUSTOMER_BY_LICENSE_CUSTOMER_ID__OWNER_ID_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  END_USER_BY_END_USER_ID__ID_ASC
  END_USER_BY_END_USER_ID__ID_DESC
  END_USER_BY_END_USER_ID__NAME_ASC
  END_USER_BY_END_USER_ID__NAME_DESC
  END_USER_BY_END_USER_ID__ADDRESS1_ASC
  END_USER_BY_END_USER_ID__ADDRESS1_DESC
  END_USER_BY_END_USER_ID__CITY_ASC
  END_USER_BY_END_USER_ID__CITY_DESC
  END_USER_BY_END_USER_ID__COUNTRY_ASC
  END_USER_BY_END_USER_ID__COUNTRY_DESC
  END_USER_BY_END_USER_ID__CREATED_ASC
  END_USER_BY_END_USER_ID__CREATED_DESC
  END_USER_BY_END_USER_ID__MODIFIED_ASC
  END_USER_BY_END_USER_ID__MODIFIED_DESC
  END_USER_BY_END_USER_ID__FORMER_NAME1_ASC
  END_USER_BY_END_USER_ID__FORMER_NAME1_DESC
  END_USER_BY_END_USER_ID__FORMER_NAME2_ASC
  END_USER_BY_END_USER_ID__FORMER_NAME2_DESC
  END_USER_BY_END_USER_ID__ADDRESS2_ASC
  END_USER_BY_END_USER_ID__ADDRESS2_DESC
  END_USER_BY_END_USER_ID__ZIP_CODE_ASC
  END_USER_BY_END_USER_ID__ZIP_CODE_DESC
  END_USER_BY_END_USER_ID__REGION_ASC
  END_USER_BY_END_USER_ID__REGION_DESC
  END_USER_BY_END_USER_ID__OWNER_ID_ASC
  END_USER_BY_END_USER_ID__OWNER_ID_DESC
  END_USER_BY_END_USER_ID__SUB_LOCATION_ASC
  END_USER_BY_END_USER_ID__SUB_LOCATION_DESC
  END_USER_BY_END_USER_ID__LOCATION_ASC
  END_USER_BY_END_USER_ID__LOCATION_DESC
  END_USER_BY_END_USER_ID__CONTACT_NAME_ASC
  END_USER_BY_END_USER_ID__CONTACT_NAME_DESC
  END_USER_BY_END_USER_ID__CONTACT_EMAIL_ASC
  END_USER_BY_END_USER_ID__CONTACT_EMAIL_DESC
  END_USER_BY_END_USER_ID__CONTACT_PHONE_ASC
  END_USER_BY_END_USER_ID__CONTACT_PHONE_DESC
  DETECTOR_SENSOR_LOCATIONS_BY_LICENSE_ID__COUNT_ASC
  DETECTOR_SENSOR_LOCATIONS_BY_LICENSE_ID__COUNT_DESC
  LICENSE_ORDERS_BY_LICENSE_ID__COUNT_ASC
  LICENSE_ORDERS_BY_LICENSE_ID__COUNT_DESC
  LICENSE_REGISTRATIONS_BY_LICENSE_ID__COUNT_ASC
  LICENSE_REGISTRATIONS_BY_LICENSE_ID__COUNT_DESC
}

"""
A condition to be used against `License` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input LicenseCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `licenseModuleId` field."""
  licenseModuleId: Int

  """Checks for equality with the object’s `moduleData` field."""
  moduleData: String

  """Checks for equality with the object’s `licenseCode` field."""
  licenseCode: String

  """Checks for equality with the object’s `remarks` field."""
  remarks: String

  """Checks for equality with the object’s `licenseCustomerId` field."""
  licenseCustomerId: Int

  """Checks for equality with the object’s `licenseId` field."""
  licenseId: Int

  """Checks for equality with the object’s `durationMonths` field."""
  durationMonths: Int

  """Checks for equality with the object’s `durationDays` field."""
  durationDays: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `activate` field."""
  activate: Boolean

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `endUserId` field."""
  endUserId: Int
}

type LicenseCustomer implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int

  """Reads a single `User` that is related to this `LicenseCustomer`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `License`."""
  licensesByLicenseCustomerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseFilter
  ): LicensesConnection!
}

"""A connection to a list of `LicenseOrder` values."""
type LicenseOrdersConnection {
  """A list of `LicenseOrder` objects."""
  nodes: [LicenseOrder!]!

  """
  A list of edges which contains the `LicenseOrder` and cursor to aid in pagination.
  """
  edges: [LicenseOrdersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LicenseOrder` you could get from the connection."""
  totalCount: Int!
}

type LicenseOrder implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  licenseId: Int
  licenseRegistrationId: Int
  factuuropdracht: String!
  created: Datetime
  modified: Datetime
  ownerId: Int
  cdartikel: String
  offertenummer: String
  remarks: String
  cdSerialNumber: Int

  """Reads a single `License` that is related to this `LicenseOrder`."""
  licenseByLicenseId: License

  """
  Reads a single `LicenseRegistration` that is related to this `LicenseOrder`.
  """
  licenseRegistrationByLicenseRegistrationId: LicenseRegistration

  """Reads a single `User` that is related to this `LicenseOrder`."""
  userByOwnerId: User
}

type LicenseRegistration implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  hwType: Int
  registrationCode: String
  activationCode: String
  licenseId: Int
  expirationDate: Date
  hwCode: String
  computerName: String
  ipAddress: String
  created: Datetime
  ownerId: Int
  remarks: String

  """
  Reads a single `License` that is related to this `LicenseRegistration`.
  """
  licenseByLicenseId: License

  """Reads a single `User` that is related to this `LicenseRegistration`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `LicenseOrder`."""
  licenseOrdersByLicenseRegistrationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LicenseOrder`."""
    orderBy: [LicenseOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseOrderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseOrderFilter
  ): LicenseOrdersConnection!
}

"""Methods to use when ordering `LicenseOrder`."""
enum LicenseOrdersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  LICENSE_ID_ASC
  LICENSE_ID_DESC
  LICENSE_REGISTRATION_ID_ASC
  LICENSE_REGISTRATION_ID_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OFFERTENUMMER_ASC
  OFFERTENUMMER_DESC
  REMARKS_ASC
  REMARKS_DESC
  CD_SERIAL_NUMBER_ASC
  CD_SERIAL_NUMBER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  LICENSE_BY_LICENSE_ID__ID_ASC
  LICENSE_BY_LICENSE_ID__ID_DESC
  LICENSE_BY_LICENSE_ID__LICENSE_MODULE_ID_ASC
  LICENSE_BY_LICENSE_ID__LICENSE_MODULE_ID_DESC
  LICENSE_BY_LICENSE_ID__MODULE_DATA_ASC
  LICENSE_BY_LICENSE_ID__MODULE_DATA_DESC
  LICENSE_BY_LICENSE_ID__LICENSE_CODE_ASC
  LICENSE_BY_LICENSE_ID__LICENSE_CODE_DESC
  LICENSE_BY_LICENSE_ID__REMARKS_ASC
  LICENSE_BY_LICENSE_ID__REMARKS_DESC
  LICENSE_BY_LICENSE_ID__LICENSE_CUSTOMER_ID_ASC
  LICENSE_BY_LICENSE_ID__LICENSE_CUSTOMER_ID_DESC
  LICENSE_BY_LICENSE_ID__LICENSE_ID_ASC
  LICENSE_BY_LICENSE_ID__LICENSE_ID_DESC
  LICENSE_BY_LICENSE_ID__DURATION_MONTHS_ASC
  LICENSE_BY_LICENSE_ID__DURATION_MONTHS_DESC
  LICENSE_BY_LICENSE_ID__DURATION_DAYS_ASC
  LICENSE_BY_LICENSE_ID__DURATION_DAYS_DESC
  LICENSE_BY_LICENSE_ID__CREATED_ASC
  LICENSE_BY_LICENSE_ID__CREATED_DESC
  LICENSE_BY_LICENSE_ID__ACTIVATE_ASC
  LICENSE_BY_LICENSE_ID__ACTIVATE_DESC
  LICENSE_BY_LICENSE_ID__OWNER_ID_ASC
  LICENSE_BY_LICENSE_ID__OWNER_ID_DESC
  LICENSE_BY_LICENSE_ID__END_USER_ID_ASC
  LICENSE_BY_LICENSE_ID__END_USER_ID_DESC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__ID_ASC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__ID_DESC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__HW_TYPE_ASC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__HW_TYPE_DESC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__REGISTRATION_CODE_ASC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__REGISTRATION_CODE_DESC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__ACTIVATION_CODE_ASC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__ACTIVATION_CODE_DESC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__LICENSE_ID_ASC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__LICENSE_ID_DESC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__EXPIRATION_DATE_ASC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__EXPIRATION_DATE_DESC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__HW_CODE_ASC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__HW_CODE_DESC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__COMPUTER_NAME_ASC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__COMPUTER_NAME_DESC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__IP_ADDRESS_ASC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__IP_ADDRESS_DESC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__CREATED_ASC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__CREATED_DESC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__OWNER_ID_ASC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__OWNER_ID_DESC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__REMARKS_ASC
  LICENSE_REGISTRATION_BY_LICENSE_REGISTRATION_ID__REMARKS_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `LicenseOrder` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LicenseOrderCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `licenseId` field."""
  licenseId: Int

  """Checks for equality with the object’s `licenseRegistrationId` field."""
  licenseRegistrationId: Int

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `offertenummer` field."""
  offertenummer: String

  """Checks for equality with the object’s `remarks` field."""
  remarks: String

  """Checks for equality with the object’s `cdSerialNumber` field."""
  cdSerialNumber: Int
}

"""A `LicenseOrder` edge in the connection."""
type LicenseOrdersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LicenseOrder` at the end of the edge."""
  node: LicenseOrder!
}

"""A connection to a list of `LicenseRegistration` values."""
type LicenseRegistrationsConnection {
  """A list of `LicenseRegistration` objects."""
  nodes: [LicenseRegistration!]!

  """
  A list of edges which contains the `LicenseRegistration` and cursor to aid in pagination.
  """
  edges: [LicenseRegistrationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `LicenseRegistration` you could get from the connection.
  """
  totalCount: Int!
}

"""A `LicenseRegistration` edge in the connection."""
type LicenseRegistrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LicenseRegistration` at the end of the edge."""
  node: LicenseRegistration!
}

"""Methods to use when ordering `LicenseRegistration`."""
enum LicenseRegistrationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  HW_TYPE_ASC
  HW_TYPE_DESC
  REGISTRATION_CODE_ASC
  REGISTRATION_CODE_DESC
  ACTIVATION_CODE_ASC
  ACTIVATION_CODE_DESC
  LICENSE_ID_ASC
  LICENSE_ID_DESC
  EXPIRATION_DATE_ASC
  EXPIRATION_DATE_DESC
  HW_CODE_ASC
  HW_CODE_DESC
  COMPUTER_NAME_ASC
  COMPUTER_NAME_DESC
  IP_ADDRESS_ASC
  IP_ADDRESS_DESC
  CREATED_ASC
  CREATED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  REMARKS_ASC
  REMARKS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  LICENSE_BY_LICENSE_ID__ID_ASC
  LICENSE_BY_LICENSE_ID__ID_DESC
  LICENSE_BY_LICENSE_ID__LICENSE_MODULE_ID_ASC
  LICENSE_BY_LICENSE_ID__LICENSE_MODULE_ID_DESC
  LICENSE_BY_LICENSE_ID__MODULE_DATA_ASC
  LICENSE_BY_LICENSE_ID__MODULE_DATA_DESC
  LICENSE_BY_LICENSE_ID__LICENSE_CODE_ASC
  LICENSE_BY_LICENSE_ID__LICENSE_CODE_DESC
  LICENSE_BY_LICENSE_ID__REMARKS_ASC
  LICENSE_BY_LICENSE_ID__REMARKS_DESC
  LICENSE_BY_LICENSE_ID__LICENSE_CUSTOMER_ID_ASC
  LICENSE_BY_LICENSE_ID__LICENSE_CUSTOMER_ID_DESC
  LICENSE_BY_LICENSE_ID__LICENSE_ID_ASC
  LICENSE_BY_LICENSE_ID__LICENSE_ID_DESC
  LICENSE_BY_LICENSE_ID__DURATION_MONTHS_ASC
  LICENSE_BY_LICENSE_ID__DURATION_MONTHS_DESC
  LICENSE_BY_LICENSE_ID__DURATION_DAYS_ASC
  LICENSE_BY_LICENSE_ID__DURATION_DAYS_DESC
  LICENSE_BY_LICENSE_ID__CREATED_ASC
  LICENSE_BY_LICENSE_ID__CREATED_DESC
  LICENSE_BY_LICENSE_ID__ACTIVATE_ASC
  LICENSE_BY_LICENSE_ID__ACTIVATE_DESC
  LICENSE_BY_LICENSE_ID__OWNER_ID_ASC
  LICENSE_BY_LICENSE_ID__OWNER_ID_DESC
  LICENSE_BY_LICENSE_ID__END_USER_ID_ASC
  LICENSE_BY_LICENSE_ID__END_USER_ID_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  LICENSE_ORDERS_BY_LICENSE_REGISTRATION_ID__COUNT_ASC
  LICENSE_ORDERS_BY_LICENSE_REGISTRATION_ID__COUNT_DESC
}

"""
A condition to be used against `LicenseRegistration` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input LicenseRegistrationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `hwType` field."""
  hwType: Int

  """Checks for equality with the object’s `registrationCode` field."""
  registrationCode: String

  """Checks for equality with the object’s `activationCode` field."""
  activationCode: String

  """Checks for equality with the object’s `licenseId` field."""
  licenseId: Int

  """Checks for equality with the object’s `expirationDate` field."""
  expirationDate: Date

  """Checks for equality with the object’s `hwCode` field."""
  hwCode: String

  """Checks for equality with the object’s `computerName` field."""
  computerName: String

  """Checks for equality with the object’s `ipAddress` field."""
  ipAddress: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `remarks` field."""
  remarks: String
}

"""Methods to use when ordering `MaintenanceVisitLine`."""
enum MaintenanceVisitLinesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MAINTENANCE_VISIT_ID_ASC
  MAINTENANCE_VISIT_ID_DESC
  DETECTOR_SENSOR_LOCATION_ID_ASC
  DETECTOR_SENSOR_LOCATION_ID_DESC
  DATE_OLD_ASC
  DATE_OLD_DESC
  REMARK_LINE_ASC
  REMARK_LINE_DESC
  DAY_ASC
  DAY_DESC
  SUCCESS_ASC
  SUCCESS_DESC
  DETECTOR_SENSOR_ID_ASC
  DETECTOR_SENSOR_ID_DESC
  SENSOR_ID_ASC
  SENSOR_ID_DESC
  ORIGINAL_SENSOR_ID_ASC
  ORIGINAL_SENSOR_ID_DESC
  CONCENTRATION_ASC
  CONCENTRATION_DESC
  CAL_GAS_ID_ASC
  CAL_GAS_ID_DESC
  PRE_RESPONSE_ASC
  PRE_RESPONSE_DESC
  RESPONSE_ASC
  RESPONSE_DESC
  SPAN_SUCCESS_ASC
  SPAN_SUCCESS_DESC
  ZERO_SUCCESS_ASC
  ZERO_SUCCESS_DESC
  FILTER_ID_ASC
  FILTER_ID_DESC
  PYROLYSER_ID_ASC
  PYROLYSER_ID_DESC
  SENSOR_MAINTENANCE_DUE_DATE_ASC
  SENSOR_MAINTENANCE_DUE_DATE_DESC
  SENSOR_INSTALL_DUE_DATE_ASC
  SENSOR_INSTALL_DUE_DATE_DESC
  FILTER_INSTALL_DUE_DATE_ASC
  FILTER_INSTALL_DUE_DATE_DESC
  PYROLYSER_INSTALL_DUE_DATE_ASC
  PYROLYSER_INSTALL_DUE_DATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__ID_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__ID_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__END_USER_ID_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__END_USER_ID_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__USER_ID_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__USER_ID_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__FACTUUROPDRACHT_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__FACTUUROPDRACHT_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__DATE_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__DATE_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__DURATION_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__DURATION_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CREATED_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CREATED_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__MODIFIED_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__MODIFIED_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__OWNER_ID_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__OWNER_ID_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CHECKED_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CHECKED_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CONTACT_NAME_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CONTACT_NAME_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CONTACT_EMAIL_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CONTACT_EMAIL_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__LABOUR_HOURS_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__LABOUR_HOURS_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__LOCKED_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__LOCKED_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CONTACT_PHONE_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CONTACT_PHONE_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CDMAGAZIJN_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CDMAGAZIJN_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__ID_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__ID_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__DETECTOR_SENSOR_ID_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__DETECTOR_SENSOR_ID_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__DETECTOR_LOCATION_ID_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__DETECTOR_LOCATION_ID_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__SENSOR_REPLACEMENT_INTERVAL_MONTHS_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__SENSOR_REPLACEMENT_INTERVAL_MONTHS_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__SENSOR_MAINTENANCE_INTERVAL_MONTHS_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__SENSOR_MAINTENANCE_INTERVAL_MONTHS_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__FILTER_REPLACEMENT_INTERVAL_MONTHS_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__FILTER_REPLACEMENT_INTERVAL_MONTHS_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__PYROLYSER_REPLACEMENT_INTERVAL_MONTHS_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__PYROLYSER_REPLACEMENT_INTERVAL_MONTHS_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__CREATED_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__CREATED_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__MODIFIED_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__MODIFIED_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__OWNER_ID_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__OWNER_ID_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__SAMPLE_POINT_ID_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__SAMPLE_POINT_ID_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__APPLICATION_ID_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__APPLICATION_ID_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__SIMS_CHANNEL_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__SIMS_CHANNEL_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__LICENSE_ID_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__LICENSE_ID_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__SIMS_TAG_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__SIMS_TAG_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__REMARKS_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__REMARKS_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__ID_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__ID_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__DETECTOR_ID_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__DETECTOR_ID_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__DETECTOR_POSITION_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__DETECTOR_POSITION_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__SENSOR_ID_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__SENSOR_ID_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__FILTER_ID_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__FILTER_ID_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID___FILTER_LABEL_DATE_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID___FILTER_LABEL_DATE_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__PYROLYSER_ID_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__PYROLYSER_ID_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID___PYROLYSER_LABEL_DATE_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID___PYROLYSER_LABEL_DATE_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__CREATED_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__CREATED_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__MODIFIED_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__MODIFIED_DESC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__OWNER_ID_ASC
  DETECTOR_SENSOR_BY_DETECTOR_SENSOR_ID__OWNER_ID_DESC
  SENSOR_BY_SENSOR_ID__ID_ASC
  SENSOR_BY_SENSOR_ID__ID_DESC
  SENSOR_BY_SENSOR_ID__SERIAL_NUMBER_ASC
  SENSOR_BY_SENSOR_ID__SERIAL_NUMBER_DESC
  SENSOR_BY_SENSOR_ID__LABEL_DATE_ASC
  SENSOR_BY_SENSOR_ID__LABEL_DATE_DESC
  SENSOR_BY_SENSOR_ID__REMARKS_ASC
  SENSOR_BY_SENSOR_ID__REMARKS_DESC
  SENSOR_BY_SENSOR_ID__CREATED_ASC
  SENSOR_BY_SENSOR_ID__CREATED_DESC
  SENSOR_BY_SENSOR_ID__OWNER_ID_ASC
  SENSOR_BY_SENSOR_ID__OWNER_ID_DESC
  SENSOR_BY_SENSOR_ID__MODIFIED_ASC
  SENSOR_BY_SENSOR_ID__MODIFIED_DESC
  SENSOR_BY_SENSOR_ID__SENSOR_TYPE_ID_ASC
  SENSOR_BY_SENSOR_ID__SENSOR_TYPE_ID_DESC
  SENSOR_BY_ORIGINAL_SENSOR_ID__ID_ASC
  SENSOR_BY_ORIGINAL_SENSOR_ID__ID_DESC
  SENSOR_BY_ORIGINAL_SENSOR_ID__SERIAL_NUMBER_ASC
  SENSOR_BY_ORIGINAL_SENSOR_ID__SERIAL_NUMBER_DESC
  SENSOR_BY_ORIGINAL_SENSOR_ID__LABEL_DATE_ASC
  SENSOR_BY_ORIGINAL_SENSOR_ID__LABEL_DATE_DESC
  SENSOR_BY_ORIGINAL_SENSOR_ID__REMARKS_ASC
  SENSOR_BY_ORIGINAL_SENSOR_ID__REMARKS_DESC
  SENSOR_BY_ORIGINAL_SENSOR_ID__CREATED_ASC
  SENSOR_BY_ORIGINAL_SENSOR_ID__CREATED_DESC
  SENSOR_BY_ORIGINAL_SENSOR_ID__OWNER_ID_ASC
  SENSOR_BY_ORIGINAL_SENSOR_ID__OWNER_ID_DESC
  SENSOR_BY_ORIGINAL_SENSOR_ID__MODIFIED_ASC
  SENSOR_BY_ORIGINAL_SENSOR_ID__MODIFIED_DESC
  SENSOR_BY_ORIGINAL_SENSOR_ID__SENSOR_TYPE_ID_ASC
  SENSOR_BY_ORIGINAL_SENSOR_ID__SENSOR_TYPE_ID_DESC
  CAL_GAS_BY_CAL_GAS_ID__ID_ASC
  CAL_GAS_BY_CAL_GAS_ID__ID_DESC
  CAL_GAS_BY_CAL_GAS_ID__GAS_ID_ASC
  CAL_GAS_BY_CAL_GAS_ID__GAS_ID_DESC
  CAL_GAS_BY_CAL_GAS_ID__CONCENTRATION_ASC
  CAL_GAS_BY_CAL_GAS_ID__CONCENTRATION_DESC
  CAL_GAS_BY_CAL_GAS_ID__ENGINEERING_UNITS_ASC
  CAL_GAS_BY_CAL_GAS_ID__ENGINEERING_UNITS_DESC
  CAL_GAS_BY_CAL_GAS_ID__CREATED_ASC
  CAL_GAS_BY_CAL_GAS_ID__CREATED_DESC
  CAL_GAS_BY_CAL_GAS_ID__MODIFIED_ASC
  CAL_GAS_BY_CAL_GAS_ID__MODIFIED_DESC
  CAL_GAS_BY_CAL_GAS_ID__OWNER_ID_ASC
  CAL_GAS_BY_CAL_GAS_ID__OWNER_ID_DESC
  CAL_GAS_BY_CAL_GAS_ID__CDARTIKEL_ASC
  CAL_GAS_BY_CAL_GAS_ID__CDARTIKEL_DESC
  FILTER_BY_FILTER_ID__ID_ASC
  FILTER_BY_FILTER_ID__ID_DESC
  FILTER_BY_FILTER_ID__NAME_ASC
  FILTER_BY_FILTER_ID__NAME_DESC
  FILTER_BY_FILTER_ID__CREATED_ASC
  FILTER_BY_FILTER_ID__CREATED_DESC
  FILTER_BY_FILTER_ID__MODIFIED_ASC
  FILTER_BY_FILTER_ID__MODIFIED_DESC
  FILTER_BY_FILTER_ID__OWNER_ID_ASC
  FILTER_BY_FILTER_ID__OWNER_ID_DESC
  FILTER_BY_FILTER_ID__REPLACEMENT_INTERVAL_MONTHS_ASC
  FILTER_BY_FILTER_ID__REPLACEMENT_INTERVAL_MONTHS_DESC
  FILTER_BY_FILTER_ID__CDARTIKEL_ASC
  FILTER_BY_FILTER_ID__CDARTIKEL_DESC
  FILTER_BY_FILTER_ID__CONSUMABLE_ASC
  FILTER_BY_FILTER_ID__CONSUMABLE_DESC
  PYROLYSER_BY_PYROLYSER_ID__ID_ASC
  PYROLYSER_BY_PYROLYSER_ID__ID_DESC
  PYROLYSER_BY_PYROLYSER_ID__NAME_ASC
  PYROLYSER_BY_PYROLYSER_ID__NAME_DESC
  PYROLYSER_BY_PYROLYSER_ID__CREATED_ASC
  PYROLYSER_BY_PYROLYSER_ID__CREATED_DESC
  PYROLYSER_BY_PYROLYSER_ID__MODIFIED_ASC
  PYROLYSER_BY_PYROLYSER_ID__MODIFIED_DESC
  PYROLYSER_BY_PYROLYSER_ID__OWNER_ID_ASC
  PYROLYSER_BY_PYROLYSER_ID__OWNER_ID_DESC
  PYROLYSER_BY_PYROLYSER_ID__REPLACEMENT_INTERVAL_MONTHS_ASC
  PYROLYSER_BY_PYROLYSER_ID__REPLACEMENT_INTERVAL_MONTHS_DESC
  PYROLYSER_BY_PYROLYSER_ID__CDARTIKEL_ASC
  PYROLYSER_BY_PYROLYSER_ID__CDARTIKEL_DESC
}

"""
A condition to be used against `MaintenanceVisitLine` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input MaintenanceVisitLineCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `maintenanceVisitId` field."""
  maintenanceVisitId: Int

  """
  Checks for equality with the object’s `detectorSensorLocationId` field.
  """
  detectorSensorLocationId: Int

  """Checks for equality with the object’s `dateOld` field."""
  dateOld: Date

  """Checks for equality with the object’s `remarkLine` field."""
  remarkLine: Int

  """Checks for equality with the object’s `day` field."""
  day: Int

  """Checks for equality with the object’s `success` field."""
  success: Boolean

  """Checks for equality with the object’s `detectorSensorId` field."""
  detectorSensorId: Int

  """Checks for equality with the object’s `sensorId` field."""
  sensorId: Int

  """Checks for equality with the object’s `originalSensorId` field."""
  originalSensorId: Int

  """Checks for equality with the object’s `concentration` field."""
  concentration: Float

  """Checks for equality with the object’s `calGasId` field."""
  calGasId: Int

  """Checks for equality with the object’s `preResponse` field."""
  preResponse: Float

  """Checks for equality with the object’s `response` field."""
  response: Float

  """Checks for equality with the object’s `spanSuccess` field."""
  spanSuccess: Boolean

  """Checks for equality with the object’s `zeroSuccess` field."""
  zeroSuccess: Boolean

  """Checks for equality with the object’s `filterId` field."""
  filterId: Int

  """Checks for equality with the object’s `pyrolyserId` field."""
  pyrolyserId: Int

  """
  Checks for equality with the object’s `sensorMaintenanceDueDate` field.
  """
  sensorMaintenanceDueDate: Date

  """Checks for equality with the object’s `sensorInstallDueDate` field."""
  sensorInstallDueDate: Date

  """Checks for equality with the object’s `filterInstallDueDate` field."""
  filterInstallDueDate: Date

  """Checks for equality with the object’s `pyrolyserInstallDueDate` field."""
  pyrolyserInstallDueDate: Date
}

"""A connection to a list of `SensorElementLocation` values."""
type SensorElementLocationsConnection {
  """A list of `SensorElementLocation` objects."""
  nodes: [SensorElementLocation!]!

  """
  A list of edges which contains the `SensorElementLocation` and cursor to aid in pagination.
  """
  edges: [SensorElementLocationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SensorElementLocation` you could get from the connection.
  """
  totalCount: Int!
}

type SensorElementLocation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  detectorSensorLocationId: Int!
  sensorElementId: Int
  created: Datetime
  modified: Datetime
  ownerId: Int!

  """
  Reads a single `DetectorSensorLocation` that is related to this `SensorElementLocation`.
  """
  detectorSensorLocationByDetectorSensorLocationId: DetectorSensorLocation

  """
  Reads a single `SensorElement` that is related to this `SensorElementLocation`.
  """
  sensorElementBySensorElementId: SensorElement

  """Reads a single `User` that is related to this `SensorElementLocation`."""
  userByOwnerId: User
}

type SensorElement implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  sensorElementTypeId: Int!
  serialNumber: String
  created: Datetime
  modified: Datetime
  ownerId: Int!
  labelDate: Date

  """
  Reads a single `SensorElementType` that is related to this `SensorElement`.
  """
  sensorElementTypeBySensorElementTypeId: SensorElementType

  """Reads a single `User` that is related to this `SensorElement`."""
  userByOwnerId: User

  """
  Reads a single `SensorElementLocation` that is related to this `SensorElement`.
  """
  sensorElementLocationBySensorElementId: SensorElementLocation

  """Reads and enables pagination through a set of `SensorElementLocation`."""
  sensorElementLocationsBySensorElementId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorElementLocation`."""
    orderBy: [SensorElementLocationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorElementLocationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorElementLocationFilter
  ): SensorElementLocationsConnection! @deprecated(reason: "Please use sensorElementLocationBySensorElementId instead")

  """Reads and enables pagination through a set of `SensorElementLog`."""
  sensorElementLogsBySensorElementId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorElementLog`."""
    orderBy: [SensorElementLogsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorElementLogCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorElementLogFilter
  ): SensorElementLogsConnection!

  """
  Reads a single `SensorSensorElement` that is related to this `SensorElement`.
  """
  sensorSensorElementBySensorElementId: SensorSensorElement

  """Reads and enables pagination through a set of `SensorSensorElement`."""
  sensorSensorElementsBySensorElementId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorSensorElement`."""
    orderBy: [SensorSensorElementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorSensorElementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorSensorElementFilter
  ): SensorSensorElementsConnection! @deprecated(reason: "Please use sensorSensorElementBySensorElementId instead")
}

type SensorElementType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
  replacementInterval: Int
  created: Datetime
  modified: Datetime
  ownerId: Int!
  sensorBaseTypeId: Int!
  rangeId: Int!
  calRangeId: Int!

  """Reads a single `User` that is related to this `SensorElementType`."""
  userByOwnerId: User

  """
  Reads a single `SensorBaseType` that is related to this `SensorElementType`.
  """
  sensorBaseTypeBySensorBaseTypeId: SensorBaseType

  """Reads a single `Range` that is related to this `SensorElementType`."""
  rangeByRangeId: Range

  """Reads a single `Range` that is related to this `SensorElementType`."""
  rangeByCalRangeId: Range

  """Reads and enables pagination through a set of `SensorElement`."""
  sensorElementsBySensorElementTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorElement`."""
    orderBy: [SensorElementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorElementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorElementFilter
  ): SensorElementsConnection!
}

type SensorBaseType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  prefix: String
  suffix: String
  principleId: Int
  ownerId: Int
  created: Datetime
  modified: Datetime
  series: String
  maintenanceIntervalMonths: Int
  quotationIntervalMonths: Int
  replacementIntervalMonths: Int
  volume: Int

  """Reads a single `Principle` that is related to this `SensorBaseType`."""
  principleByPrincipleId: Principle

  """Reads and enables pagination through a set of `SensorType`."""
  sensorTypesBySensorBaseTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorType`."""
    orderBy: [SensorTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorTypeFilter
  ): SensorTypesConnection!

  """Reads and enables pagination through a set of `SensorElementType`."""
  sensorElementTypesBySensorBaseTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorElementType`."""
    orderBy: [SensorElementTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorElementTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorElementTypeFilter
  ): SensorElementTypesConnection!
}

type Principle implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int

  """Reads a single `User` that is related to this `Principle`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `SensorBaseType`."""
  sensorBaseTypesByPrincipleId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorBaseType`."""
    orderBy: [SensorBaseTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorBaseTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorBaseTypeFilter
  ): SensorBaseTypesConnection!
}

"""A connection to a list of `SensorBaseType` values."""
type SensorBaseTypesConnection {
  """A list of `SensorBaseType` objects."""
  nodes: [SensorBaseType!]!

  """
  A list of edges which contains the `SensorBaseType` and cursor to aid in pagination.
  """
  edges: [SensorBaseTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SensorBaseType` you could get from the connection."""
  totalCount: Int!
}

"""A `SensorBaseType` edge in the connection."""
type SensorBaseTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SensorBaseType` at the end of the edge."""
  node: SensorBaseType!
}

"""Methods to use when ordering `SensorBaseType`."""
enum SensorBaseTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PREFIX_ASC
  PREFIX_DESC
  SUFFIX_ASC
  SUFFIX_DESC
  PRINCIPLE_ID_ASC
  PRINCIPLE_ID_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  SERIES_ASC
  SERIES_DESC
  MAINTENANCE_INTERVAL_MONTHS_ASC
  MAINTENANCE_INTERVAL_MONTHS_DESC
  QUOTATION_INTERVAL_MONTHS_ASC
  QUOTATION_INTERVAL_MONTHS_DESC
  REPLACEMENT_INTERVAL_MONTHS_ASC
  REPLACEMENT_INTERVAL_MONTHS_DESC
  VOLUME_ASC
  VOLUME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PRINCIPLE_BY_PRINCIPLE_ID__ID_ASC
  PRINCIPLE_BY_PRINCIPLE_ID__ID_DESC
  PRINCIPLE_BY_PRINCIPLE_ID__NAME_ASC
  PRINCIPLE_BY_PRINCIPLE_ID__NAME_DESC
  PRINCIPLE_BY_PRINCIPLE_ID__CREATED_ASC
  PRINCIPLE_BY_PRINCIPLE_ID__CREATED_DESC
  PRINCIPLE_BY_PRINCIPLE_ID__MODIFIED_ASC
  PRINCIPLE_BY_PRINCIPLE_ID__MODIFIED_DESC
  PRINCIPLE_BY_PRINCIPLE_ID__OWNER_ID_ASC
  PRINCIPLE_BY_PRINCIPLE_ID__OWNER_ID_DESC
  SENSOR_TYPES_BY_SENSOR_BASE_TYPE_ID__COUNT_ASC
  SENSOR_TYPES_BY_SENSOR_BASE_TYPE_ID__COUNT_DESC
  SENSOR_ELEMENT_TYPES_BY_SENSOR_BASE_TYPE_ID__COUNT_ASC
  SENSOR_ELEMENT_TYPES_BY_SENSOR_BASE_TYPE_ID__COUNT_DESC
}

"""
A condition to be used against `SensorBaseType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SensorBaseTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `prefix` field."""
  prefix: String

  """Checks for equality with the object’s `suffix` field."""
  suffix: String

  """Checks for equality with the object’s `principleId` field."""
  principleId: Int

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `series` field."""
  series: String

  """
  Checks for equality with the object’s `maintenanceIntervalMonths` field.
  """
  maintenanceIntervalMonths: Int

  """Checks for equality with the object’s `quotationIntervalMonths` field."""
  quotationIntervalMonths: Int

  """
  Checks for equality with the object’s `replacementIntervalMonths` field.
  """
  replacementIntervalMonths: Int

  """Checks for equality with the object’s `volume` field."""
  volume: Int
}

"""A connection to a list of `SensorElementType` values."""
type SensorElementTypesConnection {
  """A list of `SensorElementType` objects."""
  nodes: [SensorElementType!]!

  """
  A list of edges which contains the `SensorElementType` and cursor to aid in pagination.
  """
  edges: [SensorElementTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SensorElementType` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SensorElementType` edge in the connection."""
type SensorElementTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SensorElementType` at the end of the edge."""
  node: SensorElementType!
}

"""Methods to use when ordering `SensorElementType`."""
enum SensorElementTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  REPLACEMENT_INTERVAL_ASC
  REPLACEMENT_INTERVAL_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  SENSOR_BASE_TYPE_ID_ASC
  SENSOR_BASE_TYPE_ID_DESC
  RANGE_ID_ASC
  RANGE_ID_DESC
  CAL_RANGE_ID_ASC
  CAL_RANGE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__ID_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__ID_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__PREFIX_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__PREFIX_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__SUFFIX_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__SUFFIX_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__PRINCIPLE_ID_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__PRINCIPLE_ID_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__OWNER_ID_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__OWNER_ID_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__CREATED_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__CREATED_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__MODIFIED_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__MODIFIED_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__SERIES_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__SERIES_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__MAINTENANCE_INTERVAL_MONTHS_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__MAINTENANCE_INTERVAL_MONTHS_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__QUOTATION_INTERVAL_MONTHS_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__QUOTATION_INTERVAL_MONTHS_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__REPLACEMENT_INTERVAL_MONTHS_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__REPLACEMENT_INTERVAL_MONTHS_DESC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__VOLUME_ASC
  SENSOR_BASE_TYPE_BY_SENSOR_BASE_TYPE_ID__VOLUME_DESC
  RANGE_BY_RANGE_ID__ID_ASC
  RANGE_BY_RANGE_ID__ID_DESC
  RANGE_BY_RANGE_ID__GAS_ID_ASC
  RANGE_BY_RANGE_ID__GAS_ID_DESC
  RANGE_BY_RANGE_ID__LOW_EU_ASC
  RANGE_BY_RANGE_ID__LOW_EU_DESC
  RANGE_BY_RANGE_ID__HIGH_EU_ASC
  RANGE_BY_RANGE_ID__HIGH_EU_DESC
  RANGE_BY_RANGE_ID__ENGINEERING_UNITS_ASC
  RANGE_BY_RANGE_ID__ENGINEERING_UNITS_DESC
  RANGE_BY_RANGE_ID__ALARM_1_LEVEL_ASC
  RANGE_BY_RANGE_ID__ALARM_1_LEVEL_DESC
  RANGE_BY_RANGE_ID__ALARM_2_LEVEL_ASC
  RANGE_BY_RANGE_ID__ALARM_2_LEVEL_DESC
  RANGE_BY_RANGE_ID__WARNING_1_LEVEL_ASC
  RANGE_BY_RANGE_ID__WARNING_1_LEVEL_DESC
  RANGE_BY_RANGE_ID__WARNING_2_LEVEL_ASC
  RANGE_BY_RANGE_ID__WARNING_2_LEVEL_DESC
  RANGE_BY_RANGE_ID__ALARM_1_DIRECTION_UP_ASC
  RANGE_BY_RANGE_ID__ALARM_1_DIRECTION_UP_DESC
  RANGE_BY_RANGE_ID__ALARM_2_DIRECTION_UP_ASC
  RANGE_BY_RANGE_ID__ALARM_2_DIRECTION_UP_DESC
  RANGE_BY_RANGE_ID__ALARM_UNITS_ASC
  RANGE_BY_RANGE_ID__ALARM_UNITS_DESC
  RANGE_BY_RANGE_ID__PRECISION_ASC
  RANGE_BY_RANGE_ID__PRECISION_DESC
  RANGE_BY_RANGE_ID__CREATED_ASC
  RANGE_BY_RANGE_ID__CREATED_DESC
  RANGE_BY_RANGE_ID__MODIFIED_ASC
  RANGE_BY_RANGE_ID__MODIFIED_DESC
  RANGE_BY_RANGE_ID__OWNER_ID_ASC
  RANGE_BY_RANGE_ID__OWNER_ID_DESC
  RANGE_BY_RANGE_ID__HIGH_EU_NUMERIC_ASC
  RANGE_BY_RANGE_ID__HIGH_EU_NUMERIC_DESC
  RANGE_BY_RANGE_ID__HIGH_EU_BACKUP_ASC
  RANGE_BY_RANGE_ID__HIGH_EU_BACKUP_DESC
  RANGE_BY_CAL_RANGE_ID__ID_ASC
  RANGE_BY_CAL_RANGE_ID__ID_DESC
  RANGE_BY_CAL_RANGE_ID__GAS_ID_ASC
  RANGE_BY_CAL_RANGE_ID__GAS_ID_DESC
  RANGE_BY_CAL_RANGE_ID__LOW_EU_ASC
  RANGE_BY_CAL_RANGE_ID__LOW_EU_DESC
  RANGE_BY_CAL_RANGE_ID__HIGH_EU_ASC
  RANGE_BY_CAL_RANGE_ID__HIGH_EU_DESC
  RANGE_BY_CAL_RANGE_ID__ENGINEERING_UNITS_ASC
  RANGE_BY_CAL_RANGE_ID__ENGINEERING_UNITS_DESC
  RANGE_BY_CAL_RANGE_ID__ALARM_1_LEVEL_ASC
  RANGE_BY_CAL_RANGE_ID__ALARM_1_LEVEL_DESC
  RANGE_BY_CAL_RANGE_ID__ALARM_2_LEVEL_ASC
  RANGE_BY_CAL_RANGE_ID__ALARM_2_LEVEL_DESC
  RANGE_BY_CAL_RANGE_ID__WARNING_1_LEVEL_ASC
  RANGE_BY_CAL_RANGE_ID__WARNING_1_LEVEL_DESC
  RANGE_BY_CAL_RANGE_ID__WARNING_2_LEVEL_ASC
  RANGE_BY_CAL_RANGE_ID__WARNING_2_LEVEL_DESC
  RANGE_BY_CAL_RANGE_ID__ALARM_1_DIRECTION_UP_ASC
  RANGE_BY_CAL_RANGE_ID__ALARM_1_DIRECTION_UP_DESC
  RANGE_BY_CAL_RANGE_ID__ALARM_2_DIRECTION_UP_ASC
  RANGE_BY_CAL_RANGE_ID__ALARM_2_DIRECTION_UP_DESC
  RANGE_BY_CAL_RANGE_ID__ALARM_UNITS_ASC
  RANGE_BY_CAL_RANGE_ID__ALARM_UNITS_DESC
  RANGE_BY_CAL_RANGE_ID__PRECISION_ASC
  RANGE_BY_CAL_RANGE_ID__PRECISION_DESC
  RANGE_BY_CAL_RANGE_ID__CREATED_ASC
  RANGE_BY_CAL_RANGE_ID__CREATED_DESC
  RANGE_BY_CAL_RANGE_ID__MODIFIED_ASC
  RANGE_BY_CAL_RANGE_ID__MODIFIED_DESC
  RANGE_BY_CAL_RANGE_ID__OWNER_ID_ASC
  RANGE_BY_CAL_RANGE_ID__OWNER_ID_DESC
  RANGE_BY_CAL_RANGE_ID__HIGH_EU_NUMERIC_ASC
  RANGE_BY_CAL_RANGE_ID__HIGH_EU_NUMERIC_DESC
  RANGE_BY_CAL_RANGE_ID__HIGH_EU_BACKUP_ASC
  RANGE_BY_CAL_RANGE_ID__HIGH_EU_BACKUP_DESC
  SENSOR_ELEMENTS_BY_SENSOR_ELEMENT_TYPE_ID__COUNT_ASC
  SENSOR_ELEMENTS_BY_SENSOR_ELEMENT_TYPE_ID__COUNT_DESC
}

"""
A condition to be used against `SensorElementType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SensorElementTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `replacementInterval` field."""
  replacementInterval: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `sensorBaseTypeId` field."""
  sensorBaseTypeId: Int

  """Checks for equality with the object’s `rangeId` field."""
  rangeId: Int

  """Checks for equality with the object’s `calRangeId` field."""
  calRangeId: Int
}

"""A connection to a list of `SensorElement` values."""
type SensorElementsConnection {
  """A list of `SensorElement` objects."""
  nodes: [SensorElement!]!

  """
  A list of edges which contains the `SensorElement` and cursor to aid in pagination.
  """
  edges: [SensorElementsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SensorElement` you could get from the connection."""
  totalCount: Int!
}

"""A `SensorElement` edge in the connection."""
type SensorElementsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SensorElement` at the end of the edge."""
  node: SensorElement!
}

"""Methods to use when ordering `SensorElement`."""
enum SensorElementsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SENSOR_ELEMENT_TYPE_ID_ASC
  SENSOR_ELEMENT_TYPE_ID_DESC
  SERIAL_NUMBER_ASC
  SERIAL_NUMBER_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  LABEL_DATE_ASC
  LABEL_DATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SENSOR_ELEMENT_TYPE_BY_SENSOR_ELEMENT_TYPE_ID__ID_ASC
  SENSOR_ELEMENT_TYPE_BY_SENSOR_ELEMENT_TYPE_ID__ID_DESC
  SENSOR_ELEMENT_TYPE_BY_SENSOR_ELEMENT_TYPE_ID__NAME_ASC
  SENSOR_ELEMENT_TYPE_BY_SENSOR_ELEMENT_TYPE_ID__NAME_DESC
  SENSOR_ELEMENT_TYPE_BY_SENSOR_ELEMENT_TYPE_ID__REPLACEMENT_INTERVAL_ASC
  SENSOR_ELEMENT_TYPE_BY_SENSOR_ELEMENT_TYPE_ID__REPLACEMENT_INTERVAL_DESC
  SENSOR_ELEMENT_TYPE_BY_SENSOR_ELEMENT_TYPE_ID__CREATED_ASC
  SENSOR_ELEMENT_TYPE_BY_SENSOR_ELEMENT_TYPE_ID__CREATED_DESC
  SENSOR_ELEMENT_TYPE_BY_SENSOR_ELEMENT_TYPE_ID__MODIFIED_ASC
  SENSOR_ELEMENT_TYPE_BY_SENSOR_ELEMENT_TYPE_ID__MODIFIED_DESC
  SENSOR_ELEMENT_TYPE_BY_SENSOR_ELEMENT_TYPE_ID__OWNER_ID_ASC
  SENSOR_ELEMENT_TYPE_BY_SENSOR_ELEMENT_TYPE_ID__OWNER_ID_DESC
  SENSOR_ELEMENT_TYPE_BY_SENSOR_ELEMENT_TYPE_ID__SENSOR_BASE_TYPE_ID_ASC
  SENSOR_ELEMENT_TYPE_BY_SENSOR_ELEMENT_TYPE_ID__SENSOR_BASE_TYPE_ID_DESC
  SENSOR_ELEMENT_TYPE_BY_SENSOR_ELEMENT_TYPE_ID__RANGE_ID_ASC
  SENSOR_ELEMENT_TYPE_BY_SENSOR_ELEMENT_TYPE_ID__RANGE_ID_DESC
  SENSOR_ELEMENT_TYPE_BY_SENSOR_ELEMENT_TYPE_ID__CAL_RANGE_ID_ASC
  SENSOR_ELEMENT_TYPE_BY_SENSOR_ELEMENT_TYPE_ID__CAL_RANGE_ID_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  SENSOR_ELEMENT_LOCATION_BY_SENSOR_ELEMENT_ID__ID_ASC
  SENSOR_ELEMENT_LOCATION_BY_SENSOR_ELEMENT_ID__ID_DESC
  SENSOR_ELEMENT_LOCATION_BY_SENSOR_ELEMENT_ID__DETECTOR_SENSOR_LOCATION_ID_ASC
  SENSOR_ELEMENT_LOCATION_BY_SENSOR_ELEMENT_ID__DETECTOR_SENSOR_LOCATION_ID_DESC
  SENSOR_ELEMENT_LOCATION_BY_SENSOR_ELEMENT_ID__SENSOR_ELEMENT_ID_ASC
  SENSOR_ELEMENT_LOCATION_BY_SENSOR_ELEMENT_ID__SENSOR_ELEMENT_ID_DESC
  SENSOR_ELEMENT_LOCATION_BY_SENSOR_ELEMENT_ID__CREATED_ASC
  SENSOR_ELEMENT_LOCATION_BY_SENSOR_ELEMENT_ID__CREATED_DESC
  SENSOR_ELEMENT_LOCATION_BY_SENSOR_ELEMENT_ID__MODIFIED_ASC
  SENSOR_ELEMENT_LOCATION_BY_SENSOR_ELEMENT_ID__MODIFIED_DESC
  SENSOR_ELEMENT_LOCATION_BY_SENSOR_ELEMENT_ID__OWNER_ID_ASC
  SENSOR_ELEMENT_LOCATION_BY_SENSOR_ELEMENT_ID__OWNER_ID_DESC
  SENSOR_ELEMENT_LOGS_BY_SENSOR_ELEMENT_ID__COUNT_ASC
  SENSOR_ELEMENT_LOGS_BY_SENSOR_ELEMENT_ID__COUNT_DESC
  SENSOR_SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__ID_ASC
  SENSOR_SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__ID_DESC
  SENSOR_SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__SENSOR_ID_ASC
  SENSOR_SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__SENSOR_ID_DESC
  SENSOR_SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__SENSOR_ELEMENT_ID_ASC
  SENSOR_SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__SENSOR_ELEMENT_ID_DESC
  SENSOR_SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__SENSOR_POSITION_ASC
  SENSOR_SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__SENSOR_POSITION_DESC
  SENSOR_SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__INSTALLED_ASC
  SENSOR_SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__INSTALLED_DESC
  SENSOR_SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__CREATED_ASC
  SENSOR_SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__CREATED_DESC
  SENSOR_SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__MODIFIED_ASC
  SENSOR_SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__MODIFIED_DESC
  SENSOR_SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__OWNER_ID_ASC
  SENSOR_SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__OWNER_ID_DESC
}

"""
A condition to be used against `SensorElement` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SensorElementCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `sensorElementTypeId` field."""
  sensorElementTypeId: Int

  """Checks for equality with the object’s `serialNumber` field."""
  serialNumber: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `labelDate` field."""
  labelDate: Date
}

"""Methods to use when ordering `SensorElementLocation`."""
enum SensorElementLocationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DETECTOR_SENSOR_LOCATION_ID_ASC
  DETECTOR_SENSOR_LOCATION_ID_DESC
  SENSOR_ELEMENT_ID_ASC
  SENSOR_ELEMENT_ID_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__ID_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__ID_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__DETECTOR_SENSOR_ID_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__DETECTOR_SENSOR_ID_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__DETECTOR_LOCATION_ID_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__DETECTOR_LOCATION_ID_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__SENSOR_REPLACEMENT_INTERVAL_MONTHS_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__SENSOR_REPLACEMENT_INTERVAL_MONTHS_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__SENSOR_MAINTENANCE_INTERVAL_MONTHS_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__SENSOR_MAINTENANCE_INTERVAL_MONTHS_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__FILTER_REPLACEMENT_INTERVAL_MONTHS_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__FILTER_REPLACEMENT_INTERVAL_MONTHS_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__PYROLYSER_REPLACEMENT_INTERVAL_MONTHS_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__PYROLYSER_REPLACEMENT_INTERVAL_MONTHS_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__CREATED_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__CREATED_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__MODIFIED_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__MODIFIED_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__OWNER_ID_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__OWNER_ID_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__SAMPLE_POINT_ID_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__SAMPLE_POINT_ID_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__APPLICATION_ID_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__APPLICATION_ID_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__SIMS_CHANNEL_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__SIMS_CHANNEL_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__LICENSE_ID_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__LICENSE_ID_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__SIMS_TAG_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__SIMS_TAG_DESC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__REMARKS_ASC
  DETECTOR_SENSOR_LOCATION_BY_DETECTOR_SENSOR_LOCATION_ID__REMARKS_DESC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__ID_ASC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__ID_DESC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__SENSOR_ELEMENT_TYPE_ID_ASC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__SENSOR_ELEMENT_TYPE_ID_DESC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__SERIAL_NUMBER_ASC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__SERIAL_NUMBER_DESC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__CREATED_ASC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__CREATED_DESC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__MODIFIED_ASC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__MODIFIED_DESC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__OWNER_ID_ASC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__OWNER_ID_DESC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__LABEL_DATE_ASC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__LABEL_DATE_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `SensorElementLocation` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SensorElementLocationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """
  Checks for equality with the object’s `detectorSensorLocationId` field.
  """
  detectorSensorLocationId: Int

  """Checks for equality with the object’s `sensorElementId` field."""
  sensorElementId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int
}

"""A connection to a list of `SensorElementLog` values."""
type SensorElementLogsConnection {
  """A list of `SensorElementLog` objects."""
  nodes: [SensorElementLog!]!

  """
  A list of edges which contains the `SensorElementLog` and cursor to aid in pagination.
  """
  edges: [SensorElementLogsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SensorElementLog` you could get from the connection.
  """
  totalCount: Int!
}

type SensorElementLog implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  time: Datetime!
  sensorElementId: Int!
  sensorId: Int
  sensorPosition: Int
  ownerId: Int!

  """
  Reads a single `SensorElement` that is related to this `SensorElementLog`.
  """
  sensorElementBySensorElementId: SensorElement

  """Reads a single `Sensor` that is related to this `SensorElementLog`."""
  sensorBySensorId: Sensor
}

type Sensor implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  serialNumber: String!
  labelDate: Date
  remarks: String
  created: Datetime!
  ownerId: Int!
  modified: Datetime
  sensorTypeId: Int!

  """Reads a single `User` that is related to this `Sensor`."""
  userByOwnerId: User

  """Reads a single `SensorType` that is related to this `Sensor`."""
  sensorTypeBySensorTypeId: SensorType

  """Reads a single `DetectorSensor` that is related to this `Sensor`."""
  detectorSensorBySensorId: DetectorSensor

  """Reads and enables pagination through a set of `DetectorSensor`."""
  detectorSensorsBySensorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorSensor`."""
    orderBy: [DetectorSensorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorSensorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorSensorFilter
  ): DetectorSensorsConnection! @deprecated(reason: "Please use detectorSensorBySensorId instead")

  """Reads and enables pagination through a set of `MaintenanceVisitLine`."""
  maintenanceVisitLinesBySensorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitLine`."""
    orderBy: [MaintenanceVisitLinesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitLineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitLineFilter
  ): MaintenanceVisitLinesConnection!

  """Reads and enables pagination through a set of `MaintenanceVisitLine`."""
  maintenanceVisitLinesByOriginalSensorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitLine`."""
    orderBy: [MaintenanceVisitLinesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitLineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitLineFilter
  ): MaintenanceVisitLinesConnection!

  """Reads and enables pagination through a set of `ReportSensor`."""
  reportSensorsBySensorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReportSensor`."""
    orderBy: [ReportSensorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportSensorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportSensorFilter
  ): ReportSensorsConnection!

  """Reads and enables pagination through a set of `SensorElementLog`."""
  sensorElementLogsBySensorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorElementLog`."""
    orderBy: [SensorElementLogsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorElementLogCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorElementLogFilter
  ): SensorElementLogsConnection!

  """Reads and enables pagination through a set of `SensorOrder`."""
  sensorOrdersBySensorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorOrder`."""
    orderBy: [SensorOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorOrderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorOrderFilter
  ): SensorOrdersConnection!

  """Reads and enables pagination through a set of `SensorSensorElement`."""
  sensorSensorElementsBySensorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorSensorElement`."""
    orderBy: [SensorSensorElementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorSensorElementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorSensorElementFilter
  ): SensorSensorElementsConnection!

  """Reads and enables pagination through a set of `SensorTestResult`."""
  sensorTestResultsBySensorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorTestResult`."""
    orderBy: [SensorTestResultsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorTestResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorTestResultFilter
  ): SensorTestResultsConnection!
}

"""A connection to a list of `ReportSensor` values."""
type ReportSensorsConnection {
  """A list of `ReportSensor` objects."""
  nodes: [ReportSensor!]!

  """
  A list of edges which contains the `ReportSensor` and cursor to aid in pagination.
  """
  edges: [ReportSensorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportSensor` you could get from the connection."""
  totalCount: Int!
}

type ReportSensor implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  reportId: Int
  sensorId: Int

  """Reads a single `Report` that is related to this `ReportSensor`."""
  reportByReportId: Report

  """Reads a single `Sensor` that is related to this `ReportSensor`."""
  sensorBySensorId: Sensor
}

type Report implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  created: Datetime
  modified: Datetime
  remarks: String
  ownerId: Int!
  endUserId: Int
  id: Int!
  date: Date
  startup: Boolean
  maintenance: Boolean
  repair: Boolean
  extraWork: Boolean
  other: Boolean
  filename: String
  userId: Int!
  closedOld: Boolean
  tsrNumber: String
  closed: Boolean
  checkedTechcentre: Boolean
  factuuropdracht: String
  version: String!
  destroyed: Boolean
  type: String!

  """Reads a single `User` that is related to this `Report`."""
  userByOwnerId: User

  """Reads a single `EndUser` that is related to this `Report`."""
  endUserByEndUserId: EndUser

  """Reads a single `User` that is related to this `Report`."""
  userByUserId: User

  """Reads and enables pagination through a set of `Action`."""
  actionsByReportId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ActionFilter
  ): ActionsConnection!

  """Reads and enables pagination through a set of `ReportDetector`."""
  reportDetectorsByReportId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReportDetector`."""
    orderBy: [ReportDetectorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportDetectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportDetectorFilter
  ): ReportDetectorsConnection!

  """Reads and enables pagination through a set of `ReportItem`."""
  reportItemsByReportId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReportItem`."""
    orderBy: [ReportItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportItemFilter
  ): ReportItemsConnection!

  """Reads and enables pagination through a set of `ReportSensor`."""
  reportSensorsByReportId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReportSensor`."""
    orderBy: [ReportSensorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportSensorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportSensorFilter
  ): ReportSensorsConnection!
}

"""A connection to a list of `ReportDetector` values."""
type ReportDetectorsConnection {
  """A list of `ReportDetector` objects."""
  nodes: [ReportDetector!]!

  """
  A list of edges which contains the `ReportDetector` and cursor to aid in pagination.
  """
  edges: [ReportDetectorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportDetector` you could get from the connection."""
  totalCount: Int!
}

type ReportDetector implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  reportId: Int
  detectorId: Int

  """Reads a single `Report` that is related to this `ReportDetector`."""
  reportByReportId: Report

  """Reads a single `Detector` that is related to this `ReportDetector`."""
  detectorByDetectorId: Detector
}

"""A `ReportDetector` edge in the connection."""
type ReportDetectorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportDetector` at the end of the edge."""
  node: ReportDetector!
}

"""Methods to use when ordering `ReportDetector`."""
enum ReportDetectorsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  DETECTOR_ID_ASC
  DETECTOR_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORT_BY_REPORT_ID__CREATED_ASC
  REPORT_BY_REPORT_ID__CREATED_DESC
  REPORT_BY_REPORT_ID__MODIFIED_ASC
  REPORT_BY_REPORT_ID__MODIFIED_DESC
  REPORT_BY_REPORT_ID__REMARKS_ASC
  REPORT_BY_REPORT_ID__REMARKS_DESC
  REPORT_BY_REPORT_ID__OWNER_ID_ASC
  REPORT_BY_REPORT_ID__OWNER_ID_DESC
  REPORT_BY_REPORT_ID__END_USER_ID_ASC
  REPORT_BY_REPORT_ID__END_USER_ID_DESC
  REPORT_BY_REPORT_ID__ID_ASC
  REPORT_BY_REPORT_ID__ID_DESC
  REPORT_BY_REPORT_ID__DATE_ASC
  REPORT_BY_REPORT_ID__DATE_DESC
  REPORT_BY_REPORT_ID__STARTUP_ASC
  REPORT_BY_REPORT_ID__STARTUP_DESC
  REPORT_BY_REPORT_ID__MAINTENANCE_ASC
  REPORT_BY_REPORT_ID__MAINTENANCE_DESC
  REPORT_BY_REPORT_ID__REPAIR_ASC
  REPORT_BY_REPORT_ID__REPAIR_DESC
  REPORT_BY_REPORT_ID__EXTRA_WORK_ASC
  REPORT_BY_REPORT_ID__EXTRA_WORK_DESC
  REPORT_BY_REPORT_ID__OTHER_ASC
  REPORT_BY_REPORT_ID__OTHER_DESC
  REPORT_BY_REPORT_ID__FILENAME_ASC
  REPORT_BY_REPORT_ID__FILENAME_DESC
  REPORT_BY_REPORT_ID__USER_ID_ASC
  REPORT_BY_REPORT_ID__USER_ID_DESC
  REPORT_BY_REPORT_ID__CLOSED_OLD_ASC
  REPORT_BY_REPORT_ID__CLOSED_OLD_DESC
  REPORT_BY_REPORT_ID__TSR_NUMBER_ASC
  REPORT_BY_REPORT_ID__TSR_NUMBER_DESC
  REPORT_BY_REPORT_ID__CLOSED_ASC
  REPORT_BY_REPORT_ID__CLOSED_DESC
  REPORT_BY_REPORT_ID__CHECKED_TECHCENTRE_ASC
  REPORT_BY_REPORT_ID__CHECKED_TECHCENTRE_DESC
  REPORT_BY_REPORT_ID__FACTUUROPDRACHT_ASC
  REPORT_BY_REPORT_ID__FACTUUROPDRACHT_DESC
  REPORT_BY_REPORT_ID__VERSION_ASC
  REPORT_BY_REPORT_ID__VERSION_DESC
  REPORT_BY_REPORT_ID__DESTROYED_ASC
  REPORT_BY_REPORT_ID__DESTROYED_DESC
  REPORT_BY_REPORT_ID__TYPE_ASC
  REPORT_BY_REPORT_ID__TYPE_DESC
  DETECTOR_BY_DETECTOR_ID__ID_ASC
  DETECTOR_BY_DETECTOR_ID__ID_DESC
  DETECTOR_BY_DETECTOR_ID__DETECTOR_TYPE_ID_ASC
  DETECTOR_BY_DETECTOR_ID__DETECTOR_TYPE_ID_DESC
  DETECTOR_BY_DETECTOR_ID__SERIAL_NUMBER_ASC
  DETECTOR_BY_DETECTOR_ID__SERIAL_NUMBER_DESC
  DETECTOR_BY_DETECTOR_ID__LABEL_DATE_ASC
  DETECTOR_BY_DETECTOR_ID__LABEL_DATE_DESC
  DETECTOR_BY_DETECTOR_ID__REMARKS_ASC
  DETECTOR_BY_DETECTOR_ID__REMARKS_DESC
  DETECTOR_BY_DETECTOR_ID__CREATED_ASC
  DETECTOR_BY_DETECTOR_ID__CREATED_DESC
  DETECTOR_BY_DETECTOR_ID__OWNER_ID_ASC
  DETECTOR_BY_DETECTOR_ID__OWNER_ID_DESC
  DETECTOR_BY_DETECTOR_ID__MODIFIED_ASC
  DETECTOR_BY_DETECTOR_ID__MODIFIED_DESC
}

"""
A condition to be used against `ReportDetector` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ReportDetectorCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `detectorId` field."""
  detectorId: Int
}

"""A connection to a list of `ReportItem` values."""
type ReportItemsConnection {
  """A list of `ReportItem` objects."""
  nodes: [ReportItem!]!

  """
  A list of edges which contains the `ReportItem` and cursor to aid in pagination.
  """
  edges: [ReportItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportItem` you could get from the connection."""
  totalCount: Int!
}

type ReportItem implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  reportId: Int!
  itemId: Int!

  """Reads a single `Report` that is related to this `ReportItem`."""
  reportByReportId: Report

  """Reads a single `Item` that is related to this `ReportItem`."""
  itemByItemId: Item
}

type Item implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  cdartikel: String!
  serialNumber: String!
  labelDate: Date
  remarks: String
  created: Datetime
  modified: Datetime
  ownerId: Int!
  endUserId: Int

  """Reads a single `User` that is related to this `Item`."""
  userByOwnerId: User

  """Reads a single `EndUser` that is related to this `Item`."""
  endUserByEndUserId: EndUser

  """Reads and enables pagination through a set of `ReportItem`."""
  reportItemsByItemId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReportItem`."""
    orderBy: [ReportItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportItemFilter
  ): ReportItemsConnection!
}

"""Methods to use when ordering `ReportItem`."""
enum ReportItemsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  ITEM_ID_ASC
  ITEM_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORT_BY_REPORT_ID__CREATED_ASC
  REPORT_BY_REPORT_ID__CREATED_DESC
  REPORT_BY_REPORT_ID__MODIFIED_ASC
  REPORT_BY_REPORT_ID__MODIFIED_DESC
  REPORT_BY_REPORT_ID__REMARKS_ASC
  REPORT_BY_REPORT_ID__REMARKS_DESC
  REPORT_BY_REPORT_ID__OWNER_ID_ASC
  REPORT_BY_REPORT_ID__OWNER_ID_DESC
  REPORT_BY_REPORT_ID__END_USER_ID_ASC
  REPORT_BY_REPORT_ID__END_USER_ID_DESC
  REPORT_BY_REPORT_ID__ID_ASC
  REPORT_BY_REPORT_ID__ID_DESC
  REPORT_BY_REPORT_ID__DATE_ASC
  REPORT_BY_REPORT_ID__DATE_DESC
  REPORT_BY_REPORT_ID__STARTUP_ASC
  REPORT_BY_REPORT_ID__STARTUP_DESC
  REPORT_BY_REPORT_ID__MAINTENANCE_ASC
  REPORT_BY_REPORT_ID__MAINTENANCE_DESC
  REPORT_BY_REPORT_ID__REPAIR_ASC
  REPORT_BY_REPORT_ID__REPAIR_DESC
  REPORT_BY_REPORT_ID__EXTRA_WORK_ASC
  REPORT_BY_REPORT_ID__EXTRA_WORK_DESC
  REPORT_BY_REPORT_ID__OTHER_ASC
  REPORT_BY_REPORT_ID__OTHER_DESC
  REPORT_BY_REPORT_ID__FILENAME_ASC
  REPORT_BY_REPORT_ID__FILENAME_DESC
  REPORT_BY_REPORT_ID__USER_ID_ASC
  REPORT_BY_REPORT_ID__USER_ID_DESC
  REPORT_BY_REPORT_ID__CLOSED_OLD_ASC
  REPORT_BY_REPORT_ID__CLOSED_OLD_DESC
  REPORT_BY_REPORT_ID__TSR_NUMBER_ASC
  REPORT_BY_REPORT_ID__TSR_NUMBER_DESC
  REPORT_BY_REPORT_ID__CLOSED_ASC
  REPORT_BY_REPORT_ID__CLOSED_DESC
  REPORT_BY_REPORT_ID__CHECKED_TECHCENTRE_ASC
  REPORT_BY_REPORT_ID__CHECKED_TECHCENTRE_DESC
  REPORT_BY_REPORT_ID__FACTUUROPDRACHT_ASC
  REPORT_BY_REPORT_ID__FACTUUROPDRACHT_DESC
  REPORT_BY_REPORT_ID__VERSION_ASC
  REPORT_BY_REPORT_ID__VERSION_DESC
  REPORT_BY_REPORT_ID__DESTROYED_ASC
  REPORT_BY_REPORT_ID__DESTROYED_DESC
  REPORT_BY_REPORT_ID__TYPE_ASC
  REPORT_BY_REPORT_ID__TYPE_DESC
  ITEM_BY_ITEM_ID__ID_ASC
  ITEM_BY_ITEM_ID__ID_DESC
  ITEM_BY_ITEM_ID__CDARTIKEL_ASC
  ITEM_BY_ITEM_ID__CDARTIKEL_DESC
  ITEM_BY_ITEM_ID__SERIAL_NUMBER_ASC
  ITEM_BY_ITEM_ID__SERIAL_NUMBER_DESC
  ITEM_BY_ITEM_ID__LABEL_DATE_ASC
  ITEM_BY_ITEM_ID__LABEL_DATE_DESC
  ITEM_BY_ITEM_ID__REMARKS_ASC
  ITEM_BY_ITEM_ID__REMARKS_DESC
  ITEM_BY_ITEM_ID__CREATED_ASC
  ITEM_BY_ITEM_ID__CREATED_DESC
  ITEM_BY_ITEM_ID__MODIFIED_ASC
  ITEM_BY_ITEM_ID__MODIFIED_DESC
  ITEM_BY_ITEM_ID__OWNER_ID_ASC
  ITEM_BY_ITEM_ID__OWNER_ID_DESC
  ITEM_BY_ITEM_ID__END_USER_ID_ASC
  ITEM_BY_ITEM_ID__END_USER_ID_DESC
}

"""
A condition to be used against `ReportItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ReportItemCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `itemId` field."""
  itemId: Int
}

"""A `ReportItem` edge in the connection."""
type ReportItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportItem` at the end of the edge."""
  node: ReportItem!
}

"""Methods to use when ordering `ReportSensor`."""
enum ReportSensorsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  SENSOR_ID_ASC
  SENSOR_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORT_BY_REPORT_ID__CREATED_ASC
  REPORT_BY_REPORT_ID__CREATED_DESC
  REPORT_BY_REPORT_ID__MODIFIED_ASC
  REPORT_BY_REPORT_ID__MODIFIED_DESC
  REPORT_BY_REPORT_ID__REMARKS_ASC
  REPORT_BY_REPORT_ID__REMARKS_DESC
  REPORT_BY_REPORT_ID__OWNER_ID_ASC
  REPORT_BY_REPORT_ID__OWNER_ID_DESC
  REPORT_BY_REPORT_ID__END_USER_ID_ASC
  REPORT_BY_REPORT_ID__END_USER_ID_DESC
  REPORT_BY_REPORT_ID__ID_ASC
  REPORT_BY_REPORT_ID__ID_DESC
  REPORT_BY_REPORT_ID__DATE_ASC
  REPORT_BY_REPORT_ID__DATE_DESC
  REPORT_BY_REPORT_ID__STARTUP_ASC
  REPORT_BY_REPORT_ID__STARTUP_DESC
  REPORT_BY_REPORT_ID__MAINTENANCE_ASC
  REPORT_BY_REPORT_ID__MAINTENANCE_DESC
  REPORT_BY_REPORT_ID__REPAIR_ASC
  REPORT_BY_REPORT_ID__REPAIR_DESC
  REPORT_BY_REPORT_ID__EXTRA_WORK_ASC
  REPORT_BY_REPORT_ID__EXTRA_WORK_DESC
  REPORT_BY_REPORT_ID__OTHER_ASC
  REPORT_BY_REPORT_ID__OTHER_DESC
  REPORT_BY_REPORT_ID__FILENAME_ASC
  REPORT_BY_REPORT_ID__FILENAME_DESC
  REPORT_BY_REPORT_ID__USER_ID_ASC
  REPORT_BY_REPORT_ID__USER_ID_DESC
  REPORT_BY_REPORT_ID__CLOSED_OLD_ASC
  REPORT_BY_REPORT_ID__CLOSED_OLD_DESC
  REPORT_BY_REPORT_ID__TSR_NUMBER_ASC
  REPORT_BY_REPORT_ID__TSR_NUMBER_DESC
  REPORT_BY_REPORT_ID__CLOSED_ASC
  REPORT_BY_REPORT_ID__CLOSED_DESC
  REPORT_BY_REPORT_ID__CHECKED_TECHCENTRE_ASC
  REPORT_BY_REPORT_ID__CHECKED_TECHCENTRE_DESC
  REPORT_BY_REPORT_ID__FACTUUROPDRACHT_ASC
  REPORT_BY_REPORT_ID__FACTUUROPDRACHT_DESC
  REPORT_BY_REPORT_ID__VERSION_ASC
  REPORT_BY_REPORT_ID__VERSION_DESC
  REPORT_BY_REPORT_ID__DESTROYED_ASC
  REPORT_BY_REPORT_ID__DESTROYED_DESC
  REPORT_BY_REPORT_ID__TYPE_ASC
  REPORT_BY_REPORT_ID__TYPE_DESC
  SENSOR_BY_SENSOR_ID__ID_ASC
  SENSOR_BY_SENSOR_ID__ID_DESC
  SENSOR_BY_SENSOR_ID__SERIAL_NUMBER_ASC
  SENSOR_BY_SENSOR_ID__SERIAL_NUMBER_DESC
  SENSOR_BY_SENSOR_ID__LABEL_DATE_ASC
  SENSOR_BY_SENSOR_ID__LABEL_DATE_DESC
  SENSOR_BY_SENSOR_ID__REMARKS_ASC
  SENSOR_BY_SENSOR_ID__REMARKS_DESC
  SENSOR_BY_SENSOR_ID__CREATED_ASC
  SENSOR_BY_SENSOR_ID__CREATED_DESC
  SENSOR_BY_SENSOR_ID__OWNER_ID_ASC
  SENSOR_BY_SENSOR_ID__OWNER_ID_DESC
  SENSOR_BY_SENSOR_ID__MODIFIED_ASC
  SENSOR_BY_SENSOR_ID__MODIFIED_DESC
  SENSOR_BY_SENSOR_ID__SENSOR_TYPE_ID_ASC
  SENSOR_BY_SENSOR_ID__SENSOR_TYPE_ID_DESC
}

"""
A condition to be used against `ReportSensor` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ReportSensorCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `sensorId` field."""
  sensorId: Int
}

"""A `ReportSensor` edge in the connection."""
type ReportSensorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportSensor` at the end of the edge."""
  node: ReportSensor!
}

"""Methods to use when ordering `SensorElementLog`."""
enum SensorElementLogsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TIME_ASC
  TIME_DESC
  SENSOR_ELEMENT_ID_ASC
  SENSOR_ELEMENT_ID_DESC
  SENSOR_ID_ASC
  SENSOR_ID_DESC
  SENSOR_POSITION_ASC
  SENSOR_POSITION_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__ID_ASC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__ID_DESC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__SENSOR_ELEMENT_TYPE_ID_ASC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__SENSOR_ELEMENT_TYPE_ID_DESC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__SERIAL_NUMBER_ASC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__SERIAL_NUMBER_DESC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__CREATED_ASC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__CREATED_DESC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__MODIFIED_ASC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__MODIFIED_DESC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__OWNER_ID_ASC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__OWNER_ID_DESC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__LABEL_DATE_ASC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__LABEL_DATE_DESC
  SENSOR_BY_SENSOR_ID__ID_ASC
  SENSOR_BY_SENSOR_ID__ID_DESC
  SENSOR_BY_SENSOR_ID__SERIAL_NUMBER_ASC
  SENSOR_BY_SENSOR_ID__SERIAL_NUMBER_DESC
  SENSOR_BY_SENSOR_ID__LABEL_DATE_ASC
  SENSOR_BY_SENSOR_ID__LABEL_DATE_DESC
  SENSOR_BY_SENSOR_ID__REMARKS_ASC
  SENSOR_BY_SENSOR_ID__REMARKS_DESC
  SENSOR_BY_SENSOR_ID__CREATED_ASC
  SENSOR_BY_SENSOR_ID__CREATED_DESC
  SENSOR_BY_SENSOR_ID__OWNER_ID_ASC
  SENSOR_BY_SENSOR_ID__OWNER_ID_DESC
  SENSOR_BY_SENSOR_ID__MODIFIED_ASC
  SENSOR_BY_SENSOR_ID__MODIFIED_DESC
  SENSOR_BY_SENSOR_ID__SENSOR_TYPE_ID_ASC
  SENSOR_BY_SENSOR_ID__SENSOR_TYPE_ID_DESC
}

"""
A condition to be used against `SensorElementLog` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SensorElementLogCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `time` field."""
  time: Datetime

  """Checks for equality with the object’s `sensorElementId` field."""
  sensorElementId: Int

  """Checks for equality with the object’s `sensorId` field."""
  sensorId: Int

  """Checks for equality with the object’s `sensorPosition` field."""
  sensorPosition: Int

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int
}

"""A connection to a list of `SensorOrder` values."""
type SensorOrdersConnection {
  """A list of `SensorOrder` objects."""
  nodes: [SensorOrder!]!

  """
  A list of edges which contains the `SensorOrder` and cursor to aid in pagination.
  """
  edges: [SensorOrdersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SensorOrder` you could get from the connection."""
  totalCount: Int!
}

type SensorOrder implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  sensorId: Int!
  created: Datetime!
  ownerId: Int!
  checkedUserId: Int
  verifiedUserId: Int
  factuuropdracht: String!
  modified: Datetime

  """Reads a single `Sensor` that is related to this `SensorOrder`."""
  sensorBySensorId: Sensor

  """Reads a single `User` that is related to this `SensorOrder`."""
  userByOwnerId: User

  """Reads a single `User` that is related to this `SensorOrder`."""
  userByCheckedUserId: User

  """Reads a single `User` that is related to this `SensorOrder`."""
  userByVerifiedUserId: User

  """
  Reads a single `Factureeropdracht` that is related to this `SensorOrder`.
  """
  factureeropdrachtByFactuuropdracht: Factureeropdracht

  """Reads and enables pagination through a set of `SensorTestResult`."""
  sensorTestResultsBySensorOrderId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorTestResult`."""
    orderBy: [SensorTestResultsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorTestResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorTestResultFilter
  ): SensorTestResultsConnection!
}

type Factureeropdracht implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  factuuropdracht: String!
  cddebiteur: String
  cdfactuur: String
  opdrachtdatum: Date
  cdbetcond: String
  cdlevcond: String
  cdvaluta: String
  cdbtw: String
  btwscenario: Int
  cddossier: String
  referentie: String
  kortingperc: BigFloat
  percgrek: BigFloat
  cdloonwerk: String
  status: String
  adres: String
  afdrukteller: Int
  boekjaar: Int
  periode: Int
  transactie: Int
  factuurnummer: String
  factuurdatum: Date
  cddagboek: String
  kredbepperc: BigFloat
  cdsoort: String
  subadres: String
  magazijnbon: String
  pakbon: String
  factureren: String
  vervolgopdrachtvan: String
  blokkeren: String
  cdbestland: String
  cdkostenplaats: String
  cdstroom: Int
  cdvervoer: Int
  cdverkeer: Int
  cdstelsel: Int
  cdtype: String
  cdverzamel: Int
  ordbevteller: Int
  btwopkredb: String
  bron: String
  abonnement: String
  cdadres: Int
  cdbetwijze1: String
  cdbetwijze2: String
  betaaldbedrag1: BigFloat
  betaaldbedrag2: BigFloat
  kvc: String
  betkortperc: BigFloat
  cdvert: String
  verwerktbo: String
  verwerktvrd: String
  cddebiteurFact: String
  lidnrBijInkorg: String
  cdproject: String
  cdexpediteur: String
  aantalcolli: Int
  aantalpallets: Int
  vrachtgewicht: BigFloat
  cdpersoon: String
  persoon: String
  cdbehandelddoor: String
  behandelddoor: String
  vertegenwoordiger: String
  betkenmerk: String
  gefiatteerd: String
  cdfiatteur: String
  gebruiker: String
  guidItem: String
  sysCreate: String
  sysUpdate: String
  margeblokkade: String
  projFactureren: String
  offertenummer: String
  offertevolgnr: Int

  """Reads a single `Debiteur` that is related to this `Factureeropdracht`."""
  debiteurByCddebiteur: Debiteur

  """Reads and enables pagination through a set of `Factopdrachtregel`."""
  factopdrachtregelsByFactuuropdracht(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Factopdrachtregel`."""
    orderBy: [FactopdrachtregelsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactopdrachtregelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactopdrachtregelFilter
  ): FactopdrachtregelsConnection!

  """Reads and enables pagination through a set of `SensorOrder`."""
  sensorOrdersByFactuuropdracht(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorOrder`."""
    orderBy: [SensorOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorOrderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorOrderFilter
  ): SensorOrdersConnection!
}

type Debiteur {
  cdrelatie: Int
  cddebiteur: String
  zoeknaam: String
  naam: String
  naamstraat: String
  straat: String
  woonplaats: String
  postcode: String
  cdland: String
  persoon: String
  telefoon: String
  telefoonmobiel: String
  telefax: String
  email: String
  btwnummer: String
  datumverif: Date
  cdvaluta: String
  cdbetcond: String
  cdlevcond: String
  cdvert: String
  vertegenwoordiger: String
  cdtaal: String
  cdjournaal: Int
  cdbtwberekenen: String
  cdkredbep: String
  cdaanmanen: String
  kredietlimiet: Int
  kortperc: BigFloat
  btwscenario: Int
  homepage: String
  cdstroom: Int
  cdvervoer: Int
  cdverkeer: Int
  cdstelsel: Int
  cdtype: String
  cdgoedcode: Int
  nummerkvk: String
  plaatskvk: String
  datumkvk: Date
  cdprijslijst: String
  cdverzamel: Int
  berekenordkost: String
  telebankfact: String
  isinkooporg: String
  ontvFactIpvLid: String
  ontvBorderel: String
  cddebiteurInkorg: String
  lidnrBijInkorg: String
  aanmaakdatum: Date
  datumltstewijz: Date
  status: String
  inFactoring: String
  controleBetkenmerk: String
  cdgrbrekening: String
  ondernemersnr: String
  btwExIncl: String
  guidItem: String
  sysCreate: String
  sysUpdate: String
  overhIdNr: String

  """Reads and enables pagination through a set of `Factureeropdracht`."""
  factureeropdrachtsByCddebiteur(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Factureeropdracht`."""
    orderBy: [FactureeropdrachtsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactureeropdrachtCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FactureeropdrachtFilter
  ): FactureeropdrachtsConnection!
}

"""A connection to a list of `Factureeropdracht` values."""
type FactureeropdrachtsConnection {
  """A list of `Factureeropdracht` objects."""
  nodes: [Factureeropdracht!]!

  """
  A list of edges which contains the `Factureeropdracht` and cursor to aid in pagination.
  """
  edges: [FactureeropdrachtsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `Factureeropdracht` you could get from the connection.
  """
  totalCount: Int!
}

"""A `Factureeropdracht` edge in the connection."""
type FactureeropdrachtsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Factureeropdracht` at the end of the edge."""
  node: Factureeropdracht!
}

"""Methods to use when ordering `Factureeropdracht`."""
enum FactureeropdrachtsOrderBy {
  NATURAL
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  CDDEBITEUR_ASC
  CDDEBITEUR_DESC
  CDFACTUUR_ASC
  CDFACTUUR_DESC
  OPDRACHTDATUM_ASC
  OPDRACHTDATUM_DESC
  CDBETCOND_ASC
  CDBETCOND_DESC
  CDLEVCOND_ASC
  CDLEVCOND_DESC
  CDVALUTA_ASC
  CDVALUTA_DESC
  CDBTW_ASC
  CDBTW_DESC
  BTWSCENARIO_ASC
  BTWSCENARIO_DESC
  CDDOSSIER_ASC
  CDDOSSIER_DESC
  REFERENTIE_ASC
  REFERENTIE_DESC
  KORTINGPERC_ASC
  KORTINGPERC_DESC
  PERCGREK_ASC
  PERCGREK_DESC
  CDLOONWERK_ASC
  CDLOONWERK_DESC
  STATUS_ASC
  STATUS_DESC
  ADRES_ASC
  ADRES_DESC
  AFDRUKTELLER_ASC
  AFDRUKTELLER_DESC
  BOEKJAAR_ASC
  BOEKJAAR_DESC
  PERIODE_ASC
  PERIODE_DESC
  TRANSACTIE_ASC
  TRANSACTIE_DESC
  FACTUURNUMMER_ASC
  FACTUURNUMMER_DESC
  FACTUURDATUM_ASC
  FACTUURDATUM_DESC
  CDDAGBOEK_ASC
  CDDAGBOEK_DESC
  KREDBEPPERC_ASC
  KREDBEPPERC_DESC
  CDSOORT_ASC
  CDSOORT_DESC
  SUBADRES_ASC
  SUBADRES_DESC
  MAGAZIJNBON_ASC
  MAGAZIJNBON_DESC
  PAKBON_ASC
  PAKBON_DESC
  FACTUREREN_ASC
  FACTUREREN_DESC
  VERVOLGOPDRACHTVAN_ASC
  VERVOLGOPDRACHTVAN_DESC
  BLOKKEREN_ASC
  BLOKKEREN_DESC
  CDBESTLAND_ASC
  CDBESTLAND_DESC
  CDKOSTENPLAATS_ASC
  CDKOSTENPLAATS_DESC
  CDSTROOM_ASC
  CDSTROOM_DESC
  CDVERVOER_ASC
  CDVERVOER_DESC
  CDVERKEER_ASC
  CDVERKEER_DESC
  CDSTELSEL_ASC
  CDSTELSEL_DESC
  CDTYPE_ASC
  CDTYPE_DESC
  CDVERZAMEL_ASC
  CDVERZAMEL_DESC
  ORDBEVTELLER_ASC
  ORDBEVTELLER_DESC
  BTWOPKREDB_ASC
  BTWOPKREDB_DESC
  BRON_ASC
  BRON_DESC
  ABONNEMENT_ASC
  ABONNEMENT_DESC
  CDADRES_ASC
  CDADRES_DESC
  CDBETWIJZE1_ASC
  CDBETWIJZE1_DESC
  CDBETWIJZE2_ASC
  CDBETWIJZE2_DESC
  BETAALDBEDRAG1_ASC
  BETAALDBEDRAG1_DESC
  BETAALDBEDRAG2_ASC
  BETAALDBEDRAG2_DESC
  KVC_ASC
  KVC_DESC
  BETKORTPERC_ASC
  BETKORTPERC_DESC
  CDVERT_ASC
  CDVERT_DESC
  VERWERKTBO_ASC
  VERWERKTBO_DESC
  VERWERKTVRD_ASC
  VERWERKTVRD_DESC
  CDDEBITEUR_FACT_ASC
  CDDEBITEUR_FACT_DESC
  LIDNR_BIJ_INKORG_ASC
  LIDNR_BIJ_INKORG_DESC
  CDPROJECT_ASC
  CDPROJECT_DESC
  CDEXPEDITEUR_ASC
  CDEXPEDITEUR_DESC
  AANTALCOLLI_ASC
  AANTALCOLLI_DESC
  AANTALPALLETS_ASC
  AANTALPALLETS_DESC
  VRACHTGEWICHT_ASC
  VRACHTGEWICHT_DESC
  CDPERSOON_ASC
  CDPERSOON_DESC
  PERSOON_ASC
  PERSOON_DESC
  CDBEHANDELDDOOR_ASC
  CDBEHANDELDDOOR_DESC
  BEHANDELDDOOR_ASC
  BEHANDELDDOOR_DESC
  VERTEGENWOORDIGER_ASC
  VERTEGENWOORDIGER_DESC
  BETKENMERK_ASC
  BETKENMERK_DESC
  GEFIATTEERD_ASC
  GEFIATTEERD_DESC
  CDFIATTEUR_ASC
  CDFIATTEUR_DESC
  GEBRUIKER_ASC
  GEBRUIKER_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  SYS_CREATE_ASC
  SYS_CREATE_DESC
  SYS_UPDATE_ASC
  SYS_UPDATE_DESC
  MARGEBLOKKADE_ASC
  MARGEBLOKKADE_DESC
  PROJ_FACTUREREN_ASC
  PROJ_FACTUREREN_DESC
  OFFERTENUMMER_ASC
  OFFERTENUMMER_DESC
  OFFERTEVOLGNR_ASC
  OFFERTEVOLGNR_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  DEBITEUR_BY_CDDEBITEUR__CDRELATIE_ASC
  DEBITEUR_BY_CDDEBITEUR__CDRELATIE_DESC
  DEBITEUR_BY_CDDEBITEUR__CDDEBITEUR_ASC
  DEBITEUR_BY_CDDEBITEUR__CDDEBITEUR_DESC
  DEBITEUR_BY_CDDEBITEUR__ZOEKNAAM_ASC
  DEBITEUR_BY_CDDEBITEUR__ZOEKNAAM_DESC
  DEBITEUR_BY_CDDEBITEUR__NAAM_ASC
  DEBITEUR_BY_CDDEBITEUR__NAAM_DESC
  DEBITEUR_BY_CDDEBITEUR__NAAMSTRAAT_ASC
  DEBITEUR_BY_CDDEBITEUR__NAAMSTRAAT_DESC
  DEBITEUR_BY_CDDEBITEUR__STRAAT_ASC
  DEBITEUR_BY_CDDEBITEUR__STRAAT_DESC
  DEBITEUR_BY_CDDEBITEUR__WOONPLAATS_ASC
  DEBITEUR_BY_CDDEBITEUR__WOONPLAATS_DESC
  DEBITEUR_BY_CDDEBITEUR__POSTCODE_ASC
  DEBITEUR_BY_CDDEBITEUR__POSTCODE_DESC
  DEBITEUR_BY_CDDEBITEUR__CDLAND_ASC
  DEBITEUR_BY_CDDEBITEUR__CDLAND_DESC
  DEBITEUR_BY_CDDEBITEUR__PERSOON_ASC
  DEBITEUR_BY_CDDEBITEUR__PERSOON_DESC
  DEBITEUR_BY_CDDEBITEUR__TELEFOON_ASC
  DEBITEUR_BY_CDDEBITEUR__TELEFOON_DESC
  DEBITEUR_BY_CDDEBITEUR__TELEFOONMOBIEL_ASC
  DEBITEUR_BY_CDDEBITEUR__TELEFOONMOBIEL_DESC
  DEBITEUR_BY_CDDEBITEUR__TELEFAX_ASC
  DEBITEUR_BY_CDDEBITEUR__TELEFAX_DESC
  DEBITEUR_BY_CDDEBITEUR__EMAIL_ASC
  DEBITEUR_BY_CDDEBITEUR__EMAIL_DESC
  DEBITEUR_BY_CDDEBITEUR__BTWNUMMER_ASC
  DEBITEUR_BY_CDDEBITEUR__BTWNUMMER_DESC
  DEBITEUR_BY_CDDEBITEUR__DATUMVERIF_ASC
  DEBITEUR_BY_CDDEBITEUR__DATUMVERIF_DESC
  DEBITEUR_BY_CDDEBITEUR__CDVALUTA_ASC
  DEBITEUR_BY_CDDEBITEUR__CDVALUTA_DESC
  DEBITEUR_BY_CDDEBITEUR__CDBETCOND_ASC
  DEBITEUR_BY_CDDEBITEUR__CDBETCOND_DESC
  DEBITEUR_BY_CDDEBITEUR__CDLEVCOND_ASC
  DEBITEUR_BY_CDDEBITEUR__CDLEVCOND_DESC
  DEBITEUR_BY_CDDEBITEUR__CDVERT_ASC
  DEBITEUR_BY_CDDEBITEUR__CDVERT_DESC
  DEBITEUR_BY_CDDEBITEUR__VERTEGENWOORDIGER_ASC
  DEBITEUR_BY_CDDEBITEUR__VERTEGENWOORDIGER_DESC
  DEBITEUR_BY_CDDEBITEUR__CDTAAL_ASC
  DEBITEUR_BY_CDDEBITEUR__CDTAAL_DESC
  DEBITEUR_BY_CDDEBITEUR__CDJOURNAAL_ASC
  DEBITEUR_BY_CDDEBITEUR__CDJOURNAAL_DESC
  DEBITEUR_BY_CDDEBITEUR__CDBTWBEREKENEN_ASC
  DEBITEUR_BY_CDDEBITEUR__CDBTWBEREKENEN_DESC
  DEBITEUR_BY_CDDEBITEUR__CDKREDBEP_ASC
  DEBITEUR_BY_CDDEBITEUR__CDKREDBEP_DESC
  DEBITEUR_BY_CDDEBITEUR__CDAANMANEN_ASC
  DEBITEUR_BY_CDDEBITEUR__CDAANMANEN_DESC
  DEBITEUR_BY_CDDEBITEUR__KREDIETLIMIET_ASC
  DEBITEUR_BY_CDDEBITEUR__KREDIETLIMIET_DESC
  DEBITEUR_BY_CDDEBITEUR__KORTPERC_ASC
  DEBITEUR_BY_CDDEBITEUR__KORTPERC_DESC
  DEBITEUR_BY_CDDEBITEUR__BTWSCENARIO_ASC
  DEBITEUR_BY_CDDEBITEUR__BTWSCENARIO_DESC
  DEBITEUR_BY_CDDEBITEUR__HOMEPAGE_ASC
  DEBITEUR_BY_CDDEBITEUR__HOMEPAGE_DESC
  DEBITEUR_BY_CDDEBITEUR__CDSTROOM_ASC
  DEBITEUR_BY_CDDEBITEUR__CDSTROOM_DESC
  DEBITEUR_BY_CDDEBITEUR__CDVERVOER_ASC
  DEBITEUR_BY_CDDEBITEUR__CDVERVOER_DESC
  DEBITEUR_BY_CDDEBITEUR__CDVERKEER_ASC
  DEBITEUR_BY_CDDEBITEUR__CDVERKEER_DESC
  DEBITEUR_BY_CDDEBITEUR__CDSTELSEL_ASC
  DEBITEUR_BY_CDDEBITEUR__CDSTELSEL_DESC
  DEBITEUR_BY_CDDEBITEUR__CDTYPE_ASC
  DEBITEUR_BY_CDDEBITEUR__CDTYPE_DESC
  DEBITEUR_BY_CDDEBITEUR__CDGOEDCODE_ASC
  DEBITEUR_BY_CDDEBITEUR__CDGOEDCODE_DESC
  DEBITEUR_BY_CDDEBITEUR__NUMMERKVK_ASC
  DEBITEUR_BY_CDDEBITEUR__NUMMERKVK_DESC
  DEBITEUR_BY_CDDEBITEUR__PLAATSKVK_ASC
  DEBITEUR_BY_CDDEBITEUR__PLAATSKVK_DESC
  DEBITEUR_BY_CDDEBITEUR__DATUMKVK_ASC
  DEBITEUR_BY_CDDEBITEUR__DATUMKVK_DESC
  DEBITEUR_BY_CDDEBITEUR__CDPRIJSLIJST_ASC
  DEBITEUR_BY_CDDEBITEUR__CDPRIJSLIJST_DESC
  DEBITEUR_BY_CDDEBITEUR__CDVERZAMEL_ASC
  DEBITEUR_BY_CDDEBITEUR__CDVERZAMEL_DESC
  DEBITEUR_BY_CDDEBITEUR__BEREKENORDKOST_ASC
  DEBITEUR_BY_CDDEBITEUR__BEREKENORDKOST_DESC
  DEBITEUR_BY_CDDEBITEUR__TELEBANKFACT_ASC
  DEBITEUR_BY_CDDEBITEUR__TELEBANKFACT_DESC
  DEBITEUR_BY_CDDEBITEUR__ISINKOOPORG_ASC
  DEBITEUR_BY_CDDEBITEUR__ISINKOOPORG_DESC
  DEBITEUR_BY_CDDEBITEUR__ONTV_FACT_IPV_LID_ASC
  DEBITEUR_BY_CDDEBITEUR__ONTV_FACT_IPV_LID_DESC
  DEBITEUR_BY_CDDEBITEUR__ONTV_BORDEREL_ASC
  DEBITEUR_BY_CDDEBITEUR__ONTV_BORDEREL_DESC
  DEBITEUR_BY_CDDEBITEUR__CDDEBITEUR_INKORG_ASC
  DEBITEUR_BY_CDDEBITEUR__CDDEBITEUR_INKORG_DESC
  DEBITEUR_BY_CDDEBITEUR__LIDNR_BIJ_INKORG_ASC
  DEBITEUR_BY_CDDEBITEUR__LIDNR_BIJ_INKORG_DESC
  DEBITEUR_BY_CDDEBITEUR__AANMAAKDATUM_ASC
  DEBITEUR_BY_CDDEBITEUR__AANMAAKDATUM_DESC
  DEBITEUR_BY_CDDEBITEUR__DATUMLTSTEWIJZ_ASC
  DEBITEUR_BY_CDDEBITEUR__DATUMLTSTEWIJZ_DESC
  DEBITEUR_BY_CDDEBITEUR__STATUS_ASC
  DEBITEUR_BY_CDDEBITEUR__STATUS_DESC
  DEBITEUR_BY_CDDEBITEUR__IN_FACTORING_ASC
  DEBITEUR_BY_CDDEBITEUR__IN_FACTORING_DESC
  DEBITEUR_BY_CDDEBITEUR__CONTROLE_BETKENMERK_ASC
  DEBITEUR_BY_CDDEBITEUR__CONTROLE_BETKENMERK_DESC
  DEBITEUR_BY_CDDEBITEUR__CDGRBREKENING_ASC
  DEBITEUR_BY_CDDEBITEUR__CDGRBREKENING_DESC
  DEBITEUR_BY_CDDEBITEUR__ONDERNEMERSNR_ASC
  DEBITEUR_BY_CDDEBITEUR__ONDERNEMERSNR_DESC
  DEBITEUR_BY_CDDEBITEUR__BTW_EX_INCL_ASC
  DEBITEUR_BY_CDDEBITEUR__BTW_EX_INCL_DESC
  DEBITEUR_BY_CDDEBITEUR__GUID_ITEM_ASC
  DEBITEUR_BY_CDDEBITEUR__GUID_ITEM_DESC
  DEBITEUR_BY_CDDEBITEUR__SYS_CREATE_ASC
  DEBITEUR_BY_CDDEBITEUR__SYS_CREATE_DESC
  DEBITEUR_BY_CDDEBITEUR__SYS_UPDATE_ASC
  DEBITEUR_BY_CDDEBITEUR__SYS_UPDATE_DESC
  DEBITEUR_BY_CDDEBITEUR__OVERH_ID_NR_ASC
  DEBITEUR_BY_CDDEBITEUR__OVERH_ID_NR_DESC
  FACTOPDRACHTREGELS_BY_FACTUUROPDRACHT__COUNT_ASC
  FACTOPDRACHTREGELS_BY_FACTUUROPDRACHT__COUNT_DESC
  SENSOR_ORDERS_BY_FACTUUROPDRACHT__COUNT_ASC
  SENSOR_ORDERS_BY_FACTUUROPDRACHT__COUNT_DESC
}

"""
A condition to be used against `Factureeropdracht` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FactureeropdrachtCondition {
  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `cddebiteur` field."""
  cddebiteur: String

  """Checks for equality with the object’s `cdfactuur` field."""
  cdfactuur: String

  """Checks for equality with the object’s `opdrachtdatum` field."""
  opdrachtdatum: Date

  """Checks for equality with the object’s `cdbetcond` field."""
  cdbetcond: String

  """Checks for equality with the object’s `cdlevcond` field."""
  cdlevcond: String

  """Checks for equality with the object’s `cdvaluta` field."""
  cdvaluta: String

  """Checks for equality with the object’s `cdbtw` field."""
  cdbtw: String

  """Checks for equality with the object’s `btwscenario` field."""
  btwscenario: Int

  """Checks for equality with the object’s `cddossier` field."""
  cddossier: String

  """Checks for equality with the object’s `referentie` field."""
  referentie: String

  """Checks for equality with the object’s `kortingperc` field."""
  kortingperc: BigFloat

  """Checks for equality with the object’s `percgrek` field."""
  percgrek: BigFloat

  """Checks for equality with the object’s `cdloonwerk` field."""
  cdloonwerk: String

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `adres` field."""
  adres: String

  """Checks for equality with the object’s `afdrukteller` field."""
  afdrukteller: Int

  """Checks for equality with the object’s `boekjaar` field."""
  boekjaar: Int

  """Checks for equality with the object’s `periode` field."""
  periode: Int

  """Checks for equality with the object’s `transactie` field."""
  transactie: Int

  """Checks for equality with the object’s `factuurnummer` field."""
  factuurnummer: String

  """Checks for equality with the object’s `factuurdatum` field."""
  factuurdatum: Date

  """Checks for equality with the object’s `cddagboek` field."""
  cddagboek: String

  """Checks for equality with the object’s `kredbepperc` field."""
  kredbepperc: BigFloat

  """Checks for equality with the object’s `cdsoort` field."""
  cdsoort: String

  """Checks for equality with the object’s `subadres` field."""
  subadres: String

  """Checks for equality with the object’s `magazijnbon` field."""
  magazijnbon: String

  """Checks for equality with the object’s `pakbon` field."""
  pakbon: String

  """Checks for equality with the object’s `factureren` field."""
  factureren: String

  """Checks for equality with the object’s `vervolgopdrachtvan` field."""
  vervolgopdrachtvan: String

  """Checks for equality with the object’s `blokkeren` field."""
  blokkeren: String

  """Checks for equality with the object’s `cdbestland` field."""
  cdbestland: String

  """Checks for equality with the object’s `cdkostenplaats` field."""
  cdkostenplaats: String

  """Checks for equality with the object’s `cdstroom` field."""
  cdstroom: Int

  """Checks for equality with the object’s `cdvervoer` field."""
  cdvervoer: Int

  """Checks for equality with the object’s `cdverkeer` field."""
  cdverkeer: Int

  """Checks for equality with the object’s `cdstelsel` field."""
  cdstelsel: Int

  """Checks for equality with the object’s `cdtype` field."""
  cdtype: String

  """Checks for equality with the object’s `cdverzamel` field."""
  cdverzamel: Int

  """Checks for equality with the object’s `ordbevteller` field."""
  ordbevteller: Int

  """Checks for equality with the object’s `btwopkredb` field."""
  btwopkredb: String

  """Checks for equality with the object’s `bron` field."""
  bron: String

  """Checks for equality with the object’s `abonnement` field."""
  abonnement: String

  """Checks for equality with the object’s `cdadres` field."""
  cdadres: Int

  """Checks for equality with the object’s `cdbetwijze1` field."""
  cdbetwijze1: String

  """Checks for equality with the object’s `cdbetwijze2` field."""
  cdbetwijze2: String

  """Checks for equality with the object’s `betaaldbedrag1` field."""
  betaaldbedrag1: BigFloat

  """Checks for equality with the object’s `betaaldbedrag2` field."""
  betaaldbedrag2: BigFloat

  """Checks for equality with the object’s `kvc` field."""
  kvc: String

  """Checks for equality with the object’s `betkortperc` field."""
  betkortperc: BigFloat

  """Checks for equality with the object’s `cdvert` field."""
  cdvert: String

  """Checks for equality with the object’s `verwerktbo` field."""
  verwerktbo: String

  """Checks for equality with the object’s `verwerktvrd` field."""
  verwerktvrd: String

  """Checks for equality with the object’s `cddebiteurFact` field."""
  cddebiteurFact: String

  """Checks for equality with the object’s `lidnrBijInkorg` field."""
  lidnrBijInkorg: String

  """Checks for equality with the object’s `cdproject` field."""
  cdproject: String

  """Checks for equality with the object’s `cdexpediteur` field."""
  cdexpediteur: String

  """Checks for equality with the object’s `aantalcolli` field."""
  aantalcolli: Int

  """Checks for equality with the object’s `aantalpallets` field."""
  aantalpallets: Int

  """Checks for equality with the object’s `vrachtgewicht` field."""
  vrachtgewicht: BigFloat

  """Checks for equality with the object’s `cdpersoon` field."""
  cdpersoon: String

  """Checks for equality with the object’s `persoon` field."""
  persoon: String

  """Checks for equality with the object’s `cdbehandelddoor` field."""
  cdbehandelddoor: String

  """Checks for equality with the object’s `behandelddoor` field."""
  behandelddoor: String

  """Checks for equality with the object’s `vertegenwoordiger` field."""
  vertegenwoordiger: String

  """Checks for equality with the object’s `betkenmerk` field."""
  betkenmerk: String

  """Checks for equality with the object’s `gefiatteerd` field."""
  gefiatteerd: String

  """Checks for equality with the object’s `cdfiatteur` field."""
  cdfiatteur: String

  """Checks for equality with the object’s `gebruiker` field."""
  gebruiker: String

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `sysCreate` field."""
  sysCreate: String

  """Checks for equality with the object’s `sysUpdate` field."""
  sysUpdate: String

  """Checks for equality with the object’s `margeblokkade` field."""
  margeblokkade: String

  """Checks for equality with the object’s `projFactureren` field."""
  projFactureren: String

  """Checks for equality with the object’s `offertenummer` field."""
  offertenummer: String

  """Checks for equality with the object’s `offertevolgnr` field."""
  offertevolgnr: Int
}

"""A connection to a list of `Factopdrachtregel` values."""
type FactopdrachtregelsConnection {
  """A list of `Factopdrachtregel` objects."""
  nodes: [Factopdrachtregel!]!

  """
  A list of edges which contains the `Factopdrachtregel` and cursor to aid in pagination.
  """
  edges: [FactopdrachtregelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `Factopdrachtregel` you could get from the connection.
  """
  totalCount: Int!
}

type Factopdrachtregel {
  factuuropdracht: String
  factuurregel: Int
  hoofdregel: Int
  soort: String
  cdartikel: String
  cdmagazijn: String
  omschr: String
  eenheid: String
  aantaldec: Int
  aantalgeleverd: BigFloat
  prijs: BigFloat
  prijsper: BigFloat
  kortingperc: BigFloat
  factbedragincl: BigFloat
  factbedragexcl: BigFloat
  btwcode: Int
  btwperc: BigFloat
  cdgrbrekening: String
  nettoomzet: BigFloat
  kostprijs: BigFloat
  statcode: String
  aantalbesteld: BigFloat
  aantalleveren: BigFloat
  datum: Date
  cdstatus: String
  aantalnaleveren: BigFloat
  tekstmagb: String
  cdgrbrekomzvj: String
  factbedragexclvj: BigFloat
  aantalgereserv: BigFloat
  kvc: String
  cdkostenplaats: String
  cddossier: String
  cdgrbrekkort: String
  cdwerknemer: String
  weeknummer: Int
  factopdrRglGuid: String
  koppelMetInkoop: String
  cddeelproject: String
  cdtermijn: Int
  bonnummer: String
  projMutsoort: String
  voorschot: Int
  cdgrbkostprijs: String
  cdgrbdekking: String
  samVersie: String
  declarabel: String
  vvbestand: String
  cduursoort: String
  projRegelFactureren: String
  projKostprijs: BigFloat
  projKosten: BigFloat

  """
  Reads a single `Factureeropdracht` that is related to this `Factopdrachtregel`.
  """
  factureeropdrachtByFactuuropdracht: Factureeropdracht
}

"""A `Factopdrachtregel` edge in the connection."""
type FactopdrachtregelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Factopdrachtregel` at the end of the edge."""
  node: Factopdrachtregel!
}

"""Methods to use when ordering `Factopdrachtregel`."""
enum FactopdrachtregelsOrderBy {
  NATURAL
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  FACTUURREGEL_ASC
  FACTUURREGEL_DESC
  HOOFDREGEL_ASC
  HOOFDREGEL_DESC
  SOORT_ASC
  SOORT_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  EENHEID_ASC
  EENHEID_DESC
  AANTALDEC_ASC
  AANTALDEC_DESC
  AANTALGELEVERD_ASC
  AANTALGELEVERD_DESC
  PRIJS_ASC
  PRIJS_DESC
  PRIJSPER_ASC
  PRIJSPER_DESC
  KORTINGPERC_ASC
  KORTINGPERC_DESC
  FACTBEDRAGINCL_ASC
  FACTBEDRAGINCL_DESC
  FACTBEDRAGEXCL_ASC
  FACTBEDRAGEXCL_DESC
  BTWCODE_ASC
  BTWCODE_DESC
  BTWPERC_ASC
  BTWPERC_DESC
  CDGRBREKENING_ASC
  CDGRBREKENING_DESC
  NETTOOMZET_ASC
  NETTOOMZET_DESC
  KOSTPRIJS_ASC
  KOSTPRIJS_DESC
  STATCODE_ASC
  STATCODE_DESC
  AANTALBESTELD_ASC
  AANTALBESTELD_DESC
  AANTALLEVEREN_ASC
  AANTALLEVEREN_DESC
  DATUM_ASC
  DATUM_DESC
  CDSTATUS_ASC
  CDSTATUS_DESC
  AANTALNALEVEREN_ASC
  AANTALNALEVEREN_DESC
  TEKSTMAGB_ASC
  TEKSTMAGB_DESC
  CDGRBREKOMZVJ_ASC
  CDGRBREKOMZVJ_DESC
  FACTBEDRAGEXCLVJ_ASC
  FACTBEDRAGEXCLVJ_DESC
  AANTALGERESERV_ASC
  AANTALGERESERV_DESC
  KVC_ASC
  KVC_DESC
  CDKOSTENPLAATS_ASC
  CDKOSTENPLAATS_DESC
  CDDOSSIER_ASC
  CDDOSSIER_DESC
  CDGRBREKKORT_ASC
  CDGRBREKKORT_DESC
  CDWERKNEMER_ASC
  CDWERKNEMER_DESC
  WEEKNUMMER_ASC
  WEEKNUMMER_DESC
  FACTOPDR_RGL_GUID_ASC
  FACTOPDR_RGL_GUID_DESC
  KOPPEL_MET_INKOOP_ASC
  KOPPEL_MET_INKOOP_DESC
  CDDEELPROJECT_ASC
  CDDEELPROJECT_DESC
  CDTERMIJN_ASC
  CDTERMIJN_DESC
  BONNUMMER_ASC
  BONNUMMER_DESC
  PROJ_MUTSOORT_ASC
  PROJ_MUTSOORT_DESC
  VOORSCHOT_ASC
  VOORSCHOT_DESC
  CDGRBKOSTPRIJS_ASC
  CDGRBKOSTPRIJS_DESC
  CDGRBDEKKING_ASC
  CDGRBDEKKING_DESC
  SAM_VERSIE_ASC
  SAM_VERSIE_DESC
  DECLARABEL_ASC
  DECLARABEL_DESC
  VVBESTAND_ASC
  VVBESTAND_DESC
  CDUURSOORT_ASC
  CDUURSOORT_DESC
  PROJ_REGEL_FACTUREREN_ASC
  PROJ_REGEL_FACTUREREN_DESC
  PROJ_KOSTPRIJS_ASC
  PROJ_KOSTPRIJS_DESC
  PROJ_KOSTEN_ASC
  PROJ_KOSTEN_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__FACTUUROPDRACHT_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__FACTUUROPDRACHT_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDDEBITEUR_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDDEBITEUR_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDFACTUUR_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDFACTUUR_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__OPDRACHTDATUM_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__OPDRACHTDATUM_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBETCOND_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBETCOND_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDLEVCOND_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDLEVCOND_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDVALUTA_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDVALUTA_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBTW_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBTW_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BTWSCENARIO_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BTWSCENARIO_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDDOSSIER_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDDOSSIER_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__REFERENTIE_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__REFERENTIE_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__KORTINGPERC_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__KORTINGPERC_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__PERCGREK_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__PERCGREK_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDLOONWERK_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDLOONWERK_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__STATUS_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__STATUS_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__ADRES_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__ADRES_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__AFDRUKTELLER_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__AFDRUKTELLER_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BOEKJAAR_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BOEKJAAR_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__PERIODE_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__PERIODE_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__TRANSACTIE_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__TRANSACTIE_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__FACTUURNUMMER_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__FACTUURNUMMER_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__FACTUURDATUM_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__FACTUURDATUM_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDDAGBOEK_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDDAGBOEK_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__KREDBEPPERC_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__KREDBEPPERC_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDSOORT_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDSOORT_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__SUBADRES_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__SUBADRES_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__MAGAZIJNBON_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__MAGAZIJNBON_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__PAKBON_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__PAKBON_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__FACTUREREN_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__FACTUREREN_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__VERVOLGOPDRACHTVAN_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__VERVOLGOPDRACHTVAN_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BLOKKEREN_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BLOKKEREN_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBESTLAND_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBESTLAND_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDKOSTENPLAATS_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDKOSTENPLAATS_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDSTROOM_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDSTROOM_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDVERVOER_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDVERVOER_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDVERKEER_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDVERKEER_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDSTELSEL_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDSTELSEL_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDTYPE_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDTYPE_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDVERZAMEL_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDVERZAMEL_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__ORDBEVTELLER_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__ORDBEVTELLER_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BTWOPKREDB_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BTWOPKREDB_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BRON_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BRON_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__ABONNEMENT_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__ABONNEMENT_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDADRES_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDADRES_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBETWIJZE1_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBETWIJZE1_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBETWIJZE2_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBETWIJZE2_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BETAALDBEDRAG1_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BETAALDBEDRAG1_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BETAALDBEDRAG2_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BETAALDBEDRAG2_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__KVC_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__KVC_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BETKORTPERC_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BETKORTPERC_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDVERT_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDVERT_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__VERWERKTBO_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__VERWERKTBO_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__VERWERKTVRD_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__VERWERKTVRD_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDDEBITEUR_FACT_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDDEBITEUR_FACT_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__LIDNR_BIJ_INKORG_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__LIDNR_BIJ_INKORG_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDPROJECT_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDPROJECT_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDEXPEDITEUR_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDEXPEDITEUR_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__AANTALCOLLI_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__AANTALCOLLI_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__AANTALPALLETS_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__AANTALPALLETS_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__VRACHTGEWICHT_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__VRACHTGEWICHT_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDPERSOON_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDPERSOON_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__PERSOON_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__PERSOON_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBEHANDELDDOOR_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBEHANDELDDOOR_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BEHANDELDDOOR_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BEHANDELDDOOR_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__VERTEGENWOORDIGER_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__VERTEGENWOORDIGER_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BETKENMERK_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BETKENMERK_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__GEFIATTEERD_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__GEFIATTEERD_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDFIATTEUR_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDFIATTEUR_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__GEBRUIKER_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__GEBRUIKER_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__GUID_ITEM_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__GUID_ITEM_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__SYS_CREATE_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__SYS_CREATE_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__SYS_UPDATE_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__SYS_UPDATE_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__MARGEBLOKKADE_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__MARGEBLOKKADE_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__PROJ_FACTUREREN_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__PROJ_FACTUREREN_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__OFFERTENUMMER_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__OFFERTENUMMER_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__OFFERTEVOLGNR_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__OFFERTEVOLGNR_DESC
}

"""
A condition to be used against `Factopdrachtregel` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FactopdrachtregelCondition {
  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `factuurregel` field."""
  factuurregel: Int

  """Checks for equality with the object’s `hoofdregel` field."""
  hoofdregel: Int

  """Checks for equality with the object’s `soort` field."""
  soort: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `eenheid` field."""
  eenheid: String

  """Checks for equality with the object’s `aantaldec` field."""
  aantaldec: Int

  """Checks for equality with the object’s `aantalgeleverd` field."""
  aantalgeleverd: BigFloat

  """Checks for equality with the object’s `prijs` field."""
  prijs: BigFloat

  """Checks for equality with the object’s `prijsper` field."""
  prijsper: BigFloat

  """Checks for equality with the object’s `kortingperc` field."""
  kortingperc: BigFloat

  """Checks for equality with the object’s `factbedragincl` field."""
  factbedragincl: BigFloat

  """Checks for equality with the object’s `factbedragexcl` field."""
  factbedragexcl: BigFloat

  """Checks for equality with the object’s `btwcode` field."""
  btwcode: Int

  """Checks for equality with the object’s `btwperc` field."""
  btwperc: BigFloat

  """Checks for equality with the object’s `cdgrbrekening` field."""
  cdgrbrekening: String

  """Checks for equality with the object’s `nettoomzet` field."""
  nettoomzet: BigFloat

  """Checks for equality with the object’s `kostprijs` field."""
  kostprijs: BigFloat

  """Checks for equality with the object’s `statcode` field."""
  statcode: String

  """Checks for equality with the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloat

  """Checks for equality with the object’s `aantalleveren` field."""
  aantalleveren: BigFloat

  """Checks for equality with the object’s `datum` field."""
  datum: Date

  """Checks for equality with the object’s `cdstatus` field."""
  cdstatus: String

  """Checks for equality with the object’s `aantalnaleveren` field."""
  aantalnaleveren: BigFloat

  """Checks for equality with the object’s `tekstmagb` field."""
  tekstmagb: String

  """Checks for equality with the object’s `cdgrbrekomzvj` field."""
  cdgrbrekomzvj: String

  """Checks for equality with the object’s `factbedragexclvj` field."""
  factbedragexclvj: BigFloat

  """Checks for equality with the object’s `aantalgereserv` field."""
  aantalgereserv: BigFloat

  """Checks for equality with the object’s `kvc` field."""
  kvc: String

  """Checks for equality with the object’s `cdkostenplaats` field."""
  cdkostenplaats: String

  """Checks for equality with the object’s `cddossier` field."""
  cddossier: String

  """Checks for equality with the object’s `cdgrbrekkort` field."""
  cdgrbrekkort: String

  """Checks for equality with the object’s `cdwerknemer` field."""
  cdwerknemer: String

  """Checks for equality with the object’s `weeknummer` field."""
  weeknummer: Int

  """Checks for equality with the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: String

  """Checks for equality with the object’s `koppelMetInkoop` field."""
  koppelMetInkoop: String

  """Checks for equality with the object’s `cddeelproject` field."""
  cddeelproject: String

  """Checks for equality with the object’s `cdtermijn` field."""
  cdtermijn: Int

  """Checks for equality with the object’s `bonnummer` field."""
  bonnummer: String

  """Checks for equality with the object’s `projMutsoort` field."""
  projMutsoort: String

  """Checks for equality with the object’s `voorschot` field."""
  voorschot: Int

  """Checks for equality with the object’s `cdgrbkostprijs` field."""
  cdgrbkostprijs: String

  """Checks for equality with the object’s `cdgrbdekking` field."""
  cdgrbdekking: String

  """Checks for equality with the object’s `samVersie` field."""
  samVersie: String

  """Checks for equality with the object’s `declarabel` field."""
  declarabel: String

  """Checks for equality with the object’s `vvbestand` field."""
  vvbestand: String

  """Checks for equality with the object’s `cduursoort` field."""
  cduursoort: String

  """Checks for equality with the object’s `projRegelFactureren` field."""
  projRegelFactureren: String

  """Checks for equality with the object’s `projKostprijs` field."""
  projKostprijs: BigFloat

  """Checks for equality with the object’s `projKosten` field."""
  projKosten: BigFloat
}

"""Methods to use when ordering `SensorOrder`."""
enum SensorOrdersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SENSOR_ID_ASC
  SENSOR_ID_DESC
  CREATED_ASC
  CREATED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CHECKED_USER_ID_ASC
  CHECKED_USER_ID_DESC
  VERIFIED_USER_ID_ASC
  VERIFIED_USER_ID_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SENSOR_BY_SENSOR_ID__ID_ASC
  SENSOR_BY_SENSOR_ID__ID_DESC
  SENSOR_BY_SENSOR_ID__SERIAL_NUMBER_ASC
  SENSOR_BY_SENSOR_ID__SERIAL_NUMBER_DESC
  SENSOR_BY_SENSOR_ID__LABEL_DATE_ASC
  SENSOR_BY_SENSOR_ID__LABEL_DATE_DESC
  SENSOR_BY_SENSOR_ID__REMARKS_ASC
  SENSOR_BY_SENSOR_ID__REMARKS_DESC
  SENSOR_BY_SENSOR_ID__CREATED_ASC
  SENSOR_BY_SENSOR_ID__CREATED_DESC
  SENSOR_BY_SENSOR_ID__OWNER_ID_ASC
  SENSOR_BY_SENSOR_ID__OWNER_ID_DESC
  SENSOR_BY_SENSOR_ID__MODIFIED_ASC
  SENSOR_BY_SENSOR_ID__MODIFIED_DESC
  SENSOR_BY_SENSOR_ID__SENSOR_TYPE_ID_ASC
  SENSOR_BY_SENSOR_ID__SENSOR_TYPE_ID_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  USER_BY_CHECKED_USER_ID__ID_ASC
  USER_BY_CHECKED_USER_ID__ID_DESC
  USER_BY_CHECKED_USER_ID__USERNAME_ASC
  USER_BY_CHECKED_USER_ID__USERNAME_DESC
  USER_BY_CHECKED_USER_ID__PASSWORD_ASC
  USER_BY_CHECKED_USER_ID__PASSWORD_DESC
  USER_BY_CHECKED_USER_ID__CREATED_ASC
  USER_BY_CHECKED_USER_ID__CREATED_DESC
  USER_BY_CHECKED_USER_ID__MODIFIED_ASC
  USER_BY_CHECKED_USER_ID__MODIFIED_DESC
  USER_BY_CHECKED_USER_ID__GROUP_ID_ASC
  USER_BY_CHECKED_USER_ID__GROUP_ID_DESC
  USER_BY_CHECKED_USER_ID__INITIALS_ASC
  USER_BY_CHECKED_USER_ID__INITIALS_DESC
  USER_BY_CHECKED_USER_ID__FULLNAME_ASC
  USER_BY_CHECKED_USER_ID__FULLNAME_DESC
  USER_BY_CHECKED_USER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_CHECKED_USER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_CHECKED_USER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_CHECKED_USER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_CHECKED_USER_ID__URL_ASC
  USER_BY_CHECKED_USER_ID__URL_DESC
  USER_BY_CHECKED_USER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_CHECKED_USER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  USER_BY_VERIFIED_USER_ID__ID_ASC
  USER_BY_VERIFIED_USER_ID__ID_DESC
  USER_BY_VERIFIED_USER_ID__USERNAME_ASC
  USER_BY_VERIFIED_USER_ID__USERNAME_DESC
  USER_BY_VERIFIED_USER_ID__PASSWORD_ASC
  USER_BY_VERIFIED_USER_ID__PASSWORD_DESC
  USER_BY_VERIFIED_USER_ID__CREATED_ASC
  USER_BY_VERIFIED_USER_ID__CREATED_DESC
  USER_BY_VERIFIED_USER_ID__MODIFIED_ASC
  USER_BY_VERIFIED_USER_ID__MODIFIED_DESC
  USER_BY_VERIFIED_USER_ID__GROUP_ID_ASC
  USER_BY_VERIFIED_USER_ID__GROUP_ID_DESC
  USER_BY_VERIFIED_USER_ID__INITIALS_ASC
  USER_BY_VERIFIED_USER_ID__INITIALS_DESC
  USER_BY_VERIFIED_USER_ID__FULLNAME_ASC
  USER_BY_VERIFIED_USER_ID__FULLNAME_DESC
  USER_BY_VERIFIED_USER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_VERIFIED_USER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_VERIFIED_USER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_VERIFIED_USER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_VERIFIED_USER_ID__URL_ASC
  USER_BY_VERIFIED_USER_ID__URL_DESC
  USER_BY_VERIFIED_USER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_VERIFIED_USER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__FACTUUROPDRACHT_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__FACTUUROPDRACHT_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDDEBITEUR_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDDEBITEUR_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDFACTUUR_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDFACTUUR_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__OPDRACHTDATUM_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__OPDRACHTDATUM_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBETCOND_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBETCOND_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDLEVCOND_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDLEVCOND_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDVALUTA_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDVALUTA_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBTW_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBTW_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BTWSCENARIO_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BTWSCENARIO_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDDOSSIER_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDDOSSIER_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__REFERENTIE_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__REFERENTIE_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__KORTINGPERC_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__KORTINGPERC_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__PERCGREK_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__PERCGREK_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDLOONWERK_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDLOONWERK_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__STATUS_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__STATUS_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__ADRES_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__ADRES_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__AFDRUKTELLER_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__AFDRUKTELLER_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BOEKJAAR_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BOEKJAAR_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__PERIODE_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__PERIODE_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__TRANSACTIE_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__TRANSACTIE_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__FACTUURNUMMER_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__FACTUURNUMMER_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__FACTUURDATUM_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__FACTUURDATUM_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDDAGBOEK_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDDAGBOEK_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__KREDBEPPERC_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__KREDBEPPERC_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDSOORT_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDSOORT_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__SUBADRES_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__SUBADRES_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__MAGAZIJNBON_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__MAGAZIJNBON_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__PAKBON_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__PAKBON_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__FACTUREREN_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__FACTUREREN_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__VERVOLGOPDRACHTVAN_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__VERVOLGOPDRACHTVAN_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BLOKKEREN_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BLOKKEREN_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBESTLAND_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBESTLAND_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDKOSTENPLAATS_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDKOSTENPLAATS_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDSTROOM_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDSTROOM_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDVERVOER_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDVERVOER_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDVERKEER_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDVERKEER_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDSTELSEL_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDSTELSEL_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDTYPE_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDTYPE_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDVERZAMEL_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDVERZAMEL_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__ORDBEVTELLER_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__ORDBEVTELLER_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BTWOPKREDB_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BTWOPKREDB_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BRON_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BRON_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__ABONNEMENT_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__ABONNEMENT_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDADRES_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDADRES_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBETWIJZE1_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBETWIJZE1_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBETWIJZE2_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBETWIJZE2_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BETAALDBEDRAG1_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BETAALDBEDRAG1_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BETAALDBEDRAG2_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BETAALDBEDRAG2_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__KVC_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__KVC_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BETKORTPERC_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BETKORTPERC_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDVERT_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDVERT_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__VERWERKTBO_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__VERWERKTBO_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__VERWERKTVRD_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__VERWERKTVRD_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDDEBITEUR_FACT_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDDEBITEUR_FACT_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__LIDNR_BIJ_INKORG_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__LIDNR_BIJ_INKORG_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDPROJECT_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDPROJECT_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDEXPEDITEUR_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDEXPEDITEUR_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__AANTALCOLLI_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__AANTALCOLLI_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__AANTALPALLETS_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__AANTALPALLETS_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__VRACHTGEWICHT_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__VRACHTGEWICHT_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDPERSOON_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDPERSOON_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__PERSOON_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__PERSOON_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBEHANDELDDOOR_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDBEHANDELDDOOR_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BEHANDELDDOOR_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BEHANDELDDOOR_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__VERTEGENWOORDIGER_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__VERTEGENWOORDIGER_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BETKENMERK_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__BETKENMERK_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__GEFIATTEERD_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__GEFIATTEERD_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDFIATTEUR_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__CDFIATTEUR_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__GEBRUIKER_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__GEBRUIKER_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__GUID_ITEM_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__GUID_ITEM_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__SYS_CREATE_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__SYS_CREATE_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__SYS_UPDATE_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__SYS_UPDATE_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__MARGEBLOKKADE_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__MARGEBLOKKADE_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__PROJ_FACTUREREN_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__PROJ_FACTUREREN_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__OFFERTENUMMER_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__OFFERTENUMMER_DESC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__OFFERTEVOLGNR_ASC
  FACTUREEROPDRACHT_BY_FACTUUROPDRACHT__OFFERTEVOLGNR_DESC
  SENSOR_TEST_RESULTS_BY_SENSOR_ORDER_ID__COUNT_ASC
  SENSOR_TEST_RESULTS_BY_SENSOR_ORDER_ID__COUNT_DESC
}

"""
A condition to be used against `SensorOrder` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SensorOrderCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `sensorId` field."""
  sensorId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `checkedUserId` field."""
  checkedUserId: Int

  """Checks for equality with the object’s `verifiedUserId` field."""
  verifiedUserId: Int

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime
}

"""A connection to a list of `SensorTestResult` values."""
type SensorTestResultsConnection {
  """A list of `SensorTestResult` objects."""
  nodes: [SensorTestResult!]!

  """
  A list of edges which contains the `SensorTestResult` and cursor to aid in pagination.
  """
  edges: [SensorTestResultsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SensorTestResult` you could get from the connection.
  """
  totalCount: Int!
}

type SensorTestResult implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  sensorId: Int!
  date: Date
  zeroResponse: Float!
  spanResponse: Float!
  created: Datetime
  modified: Datetime
  ownerId: Int!
  factuuropdrachtOld: String
  userId: Int!
  fsCalGasId: Int
  usedSpanConcentration: Float
  sensorOrderId: Int

  """Reads a single `Sensor` that is related to this `SensorTestResult`."""
  sensorBySensorId: Sensor

  """Reads a single `User` that is related to this `SensorTestResult`."""
  userByOwnerId: User

  """Reads a single `User` that is related to this `SensorTestResult`."""
  userByUserId: User

  """Reads a single `CalGas` that is related to this `SensorTestResult`."""
  calGasByFsCalGasId: CalGas

  """
  Reads a single `SensorOrder` that is related to this `SensorTestResult`.
  """
  sensorOrderBySensorOrderId: SensorOrder
}

"""A `SensorTestResult` edge in the connection."""
type SensorTestResultsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SensorTestResult` at the end of the edge."""
  node: SensorTestResult!
}

"""Methods to use when ordering `SensorTestResult`."""
enum SensorTestResultsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SENSOR_ID_ASC
  SENSOR_ID_DESC
  DATE_ASC
  DATE_DESC
  ZERO_RESPONSE_ASC
  ZERO_RESPONSE_DESC
  SPAN_RESPONSE_ASC
  SPAN_RESPONSE_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  FACTUUROPDRACHT_OLD_ASC
  FACTUUROPDRACHT_OLD_DESC
  USER_ID_ASC
  USER_ID_DESC
  FS_CAL_GAS_ID_ASC
  FS_CAL_GAS_ID_DESC
  USED_SPAN_CONCENTRATION_ASC
  USED_SPAN_CONCENTRATION_DESC
  SENSOR_ORDER_ID_ASC
  SENSOR_ORDER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SENSOR_BY_SENSOR_ID__ID_ASC
  SENSOR_BY_SENSOR_ID__ID_DESC
  SENSOR_BY_SENSOR_ID__SERIAL_NUMBER_ASC
  SENSOR_BY_SENSOR_ID__SERIAL_NUMBER_DESC
  SENSOR_BY_SENSOR_ID__LABEL_DATE_ASC
  SENSOR_BY_SENSOR_ID__LABEL_DATE_DESC
  SENSOR_BY_SENSOR_ID__REMARKS_ASC
  SENSOR_BY_SENSOR_ID__REMARKS_DESC
  SENSOR_BY_SENSOR_ID__CREATED_ASC
  SENSOR_BY_SENSOR_ID__CREATED_DESC
  SENSOR_BY_SENSOR_ID__OWNER_ID_ASC
  SENSOR_BY_SENSOR_ID__OWNER_ID_DESC
  SENSOR_BY_SENSOR_ID__MODIFIED_ASC
  SENSOR_BY_SENSOR_ID__MODIFIED_DESC
  SENSOR_BY_SENSOR_ID__SENSOR_TYPE_ID_ASC
  SENSOR_BY_SENSOR_ID__SENSOR_TYPE_ID_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  USER_BY_USER_ID__ID_ASC
  USER_BY_USER_ID__ID_DESC
  USER_BY_USER_ID__USERNAME_ASC
  USER_BY_USER_ID__USERNAME_DESC
  USER_BY_USER_ID__PASSWORD_ASC
  USER_BY_USER_ID__PASSWORD_DESC
  USER_BY_USER_ID__CREATED_ASC
  USER_BY_USER_ID__CREATED_DESC
  USER_BY_USER_ID__MODIFIED_ASC
  USER_BY_USER_ID__MODIFIED_DESC
  USER_BY_USER_ID__GROUP_ID_ASC
  USER_BY_USER_ID__GROUP_ID_DESC
  USER_BY_USER_ID__INITIALS_ASC
  USER_BY_USER_ID__INITIALS_DESC
  USER_BY_USER_ID__FULLNAME_ASC
  USER_BY_USER_ID__FULLNAME_DESC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_USER_ID__URL_ASC
  USER_BY_USER_ID__URL_DESC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  CAL_GAS_BY_FS_CAL_GAS_ID__ID_ASC
  CAL_GAS_BY_FS_CAL_GAS_ID__ID_DESC
  CAL_GAS_BY_FS_CAL_GAS_ID__GAS_ID_ASC
  CAL_GAS_BY_FS_CAL_GAS_ID__GAS_ID_DESC
  CAL_GAS_BY_FS_CAL_GAS_ID__CONCENTRATION_ASC
  CAL_GAS_BY_FS_CAL_GAS_ID__CONCENTRATION_DESC
  CAL_GAS_BY_FS_CAL_GAS_ID__ENGINEERING_UNITS_ASC
  CAL_GAS_BY_FS_CAL_GAS_ID__ENGINEERING_UNITS_DESC
  CAL_GAS_BY_FS_CAL_GAS_ID__CREATED_ASC
  CAL_GAS_BY_FS_CAL_GAS_ID__CREATED_DESC
  CAL_GAS_BY_FS_CAL_GAS_ID__MODIFIED_ASC
  CAL_GAS_BY_FS_CAL_GAS_ID__MODIFIED_DESC
  CAL_GAS_BY_FS_CAL_GAS_ID__OWNER_ID_ASC
  CAL_GAS_BY_FS_CAL_GAS_ID__OWNER_ID_DESC
  CAL_GAS_BY_FS_CAL_GAS_ID__CDARTIKEL_ASC
  CAL_GAS_BY_FS_CAL_GAS_ID__CDARTIKEL_DESC
  SENSOR_ORDER_BY_SENSOR_ORDER_ID__ID_ASC
  SENSOR_ORDER_BY_SENSOR_ORDER_ID__ID_DESC
  SENSOR_ORDER_BY_SENSOR_ORDER_ID__SENSOR_ID_ASC
  SENSOR_ORDER_BY_SENSOR_ORDER_ID__SENSOR_ID_DESC
  SENSOR_ORDER_BY_SENSOR_ORDER_ID__CREATED_ASC
  SENSOR_ORDER_BY_SENSOR_ORDER_ID__CREATED_DESC
  SENSOR_ORDER_BY_SENSOR_ORDER_ID__OWNER_ID_ASC
  SENSOR_ORDER_BY_SENSOR_ORDER_ID__OWNER_ID_DESC
  SENSOR_ORDER_BY_SENSOR_ORDER_ID__CHECKED_USER_ID_ASC
  SENSOR_ORDER_BY_SENSOR_ORDER_ID__CHECKED_USER_ID_DESC
  SENSOR_ORDER_BY_SENSOR_ORDER_ID__VERIFIED_USER_ID_ASC
  SENSOR_ORDER_BY_SENSOR_ORDER_ID__VERIFIED_USER_ID_DESC
  SENSOR_ORDER_BY_SENSOR_ORDER_ID__FACTUUROPDRACHT_ASC
  SENSOR_ORDER_BY_SENSOR_ORDER_ID__FACTUUROPDRACHT_DESC
  SENSOR_ORDER_BY_SENSOR_ORDER_ID__MODIFIED_ASC
  SENSOR_ORDER_BY_SENSOR_ORDER_ID__MODIFIED_DESC
}

"""
A condition to be used against `SensorTestResult` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SensorTestResultCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `sensorId` field."""
  sensorId: Int

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `zeroResponse` field."""
  zeroResponse: Float

  """Checks for equality with the object’s `spanResponse` field."""
  spanResponse: Float

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `factuuropdrachtOld` field."""
  factuuropdrachtOld: String

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `fsCalGasId` field."""
  fsCalGasId: Int

  """Checks for equality with the object’s `usedSpanConcentration` field."""
  usedSpanConcentration: Float

  """Checks for equality with the object’s `sensorOrderId` field."""
  sensorOrderId: Int
}

"""A `SensorOrder` edge in the connection."""
type SensorOrdersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SensorOrder` at the end of the edge."""
  node: SensorOrder!
}

"""A connection to a list of `SensorSensorElement` values."""
type SensorSensorElementsConnection {
  """A list of `SensorSensorElement` objects."""
  nodes: [SensorSensorElement!]!

  """
  A list of edges which contains the `SensorSensorElement` and cursor to aid in pagination.
  """
  edges: [SensorSensorElementsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SensorSensorElement` you could get from the connection.
  """
  totalCount: Int!
}

type SensorSensorElement implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  sensorId: Int!
  sensorElementId: Int!
  sensorPosition: Int!
  installed: Date
  created: Datetime
  modified: Datetime
  ownerId: Int!

  """Reads a single `Sensor` that is related to this `SensorSensorElement`."""
  sensorBySensorId: Sensor

  """
  Reads a single `SensorElement` that is related to this `SensorSensorElement`.
  """
  sensorElementBySensorElementId: SensorElement

  """Reads a single `User` that is related to this `SensorSensorElement`."""
  userByOwnerId: User
}

"""A `SensorSensorElement` edge in the connection."""
type SensorSensorElementsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SensorSensorElement` at the end of the edge."""
  node: SensorSensorElement!
}

"""Methods to use when ordering `SensorSensorElement`."""
enum SensorSensorElementsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SENSOR_ID_ASC
  SENSOR_ID_DESC
  SENSOR_ELEMENT_ID_ASC
  SENSOR_ELEMENT_ID_DESC
  SENSOR_POSITION_ASC
  SENSOR_POSITION_DESC
  INSTALLED_ASC
  INSTALLED_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SENSOR_BY_SENSOR_ID__ID_ASC
  SENSOR_BY_SENSOR_ID__ID_DESC
  SENSOR_BY_SENSOR_ID__SERIAL_NUMBER_ASC
  SENSOR_BY_SENSOR_ID__SERIAL_NUMBER_DESC
  SENSOR_BY_SENSOR_ID__LABEL_DATE_ASC
  SENSOR_BY_SENSOR_ID__LABEL_DATE_DESC
  SENSOR_BY_SENSOR_ID__REMARKS_ASC
  SENSOR_BY_SENSOR_ID__REMARKS_DESC
  SENSOR_BY_SENSOR_ID__CREATED_ASC
  SENSOR_BY_SENSOR_ID__CREATED_DESC
  SENSOR_BY_SENSOR_ID__OWNER_ID_ASC
  SENSOR_BY_SENSOR_ID__OWNER_ID_DESC
  SENSOR_BY_SENSOR_ID__MODIFIED_ASC
  SENSOR_BY_SENSOR_ID__MODIFIED_DESC
  SENSOR_BY_SENSOR_ID__SENSOR_TYPE_ID_ASC
  SENSOR_BY_SENSOR_ID__SENSOR_TYPE_ID_DESC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__ID_ASC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__ID_DESC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__SENSOR_ELEMENT_TYPE_ID_ASC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__SENSOR_ELEMENT_TYPE_ID_DESC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__SERIAL_NUMBER_ASC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__SERIAL_NUMBER_DESC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__CREATED_ASC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__CREATED_DESC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__MODIFIED_ASC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__MODIFIED_DESC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__OWNER_ID_ASC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__OWNER_ID_DESC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__LABEL_DATE_ASC
  SENSOR_ELEMENT_BY_SENSOR_ELEMENT_ID__LABEL_DATE_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `SensorSensorElement` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SensorSensorElementCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `sensorId` field."""
  sensorId: Int

  """Checks for equality with the object’s `sensorElementId` field."""
  sensorElementId: Int

  """Checks for equality with the object’s `sensorPosition` field."""
  sensorPosition: Int

  """Checks for equality with the object’s `installed` field."""
  installed: Date

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int
}

"""A `SensorElementLog` edge in the connection."""
type SensorElementLogsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SensorElementLog` at the end of the edge."""
  node: SensorElementLog!
}

"""A `SensorElementLocation` edge in the connection."""
type SensorElementLocationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SensorElementLocation` at the end of the edge."""
  node: SensorElementLocation!
}

"""
An interval of time that has passed where the smallest distinct unit is a second.
"""
type Interval {
  """
  A quantity of seconds. This is the only non-integer field, as all the other
  fields will dump their overflow into a smaller unit of time. Intervals don’t
  have a smaller unit than seconds.
  """
  seconds: Float

  """A quantity of minutes."""
  minutes: Int

  """A quantity of hours."""
  hours: Int

  """A quantity of days."""
  days: Int

  """A quantity of months."""
  months: Int

  """A quantity of years."""
  years: Int
}

type Filter implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  created: Datetime
  modified: Datetime
  ownerId: Int
  replacementIntervalMonths: Int
  cdartikel: String!
  consumable: Boolean

  """Reads a single `User` that is related to this `Filter`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `DetectorSensor`."""
  detectorSensorsByFilterId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DetectorSensor`."""
    orderBy: [DetectorSensorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DetectorSensorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DetectorSensorFilter
  ): DetectorSensorsConnection!

  """Reads and enables pagination through a set of `SensorType`."""
  sensorTypesByFilterId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorType`."""
    orderBy: [SensorTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorTypeFilter
  ): SensorTypesConnection!

  """Reads and enables pagination through a set of `MaintenanceVisitLine`."""
  maintenanceVisitLinesByFilterId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenanceVisitLine`."""
    orderBy: [MaintenanceVisitLinesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceVisitLineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MaintenanceVisitLineFilter
  ): MaintenanceVisitLinesConnection!
}

"""A `MaintenanceVisitLine` edge in the connection."""
type MaintenanceVisitLinesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MaintenanceVisitLine` at the end of the edge."""
  node: MaintenanceVisitLine!
}

"""A connection to a list of `MaintenanceVisitRemark` values."""
type MaintenanceVisitRemarksConnection {
  """A list of `MaintenanceVisitRemark` objects."""
  nodes: [MaintenanceVisitRemark!]!

  """
  A list of edges which contains the `MaintenanceVisitRemark` and cursor to aid in pagination.
  """
  edges: [MaintenanceVisitRemarksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MaintenanceVisitRemark` you could get from the connection.
  """
  totalCount: Int!
}

type MaintenanceVisitRemark implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  maintenanceVisitId: Int!
  line: Int
  remarks: String
  cdartikel: String
  aantal: BigFloat
  cdmagazijn: String
  followUp: String

  """
  Reads a single `MaintenanceVisit` that is related to this `MaintenanceVisitRemark`.
  """
  maintenanceVisitByMaintenanceVisitId: MaintenanceVisit
}

"""A `MaintenanceVisitRemark` edge in the connection."""
type MaintenanceVisitRemarksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MaintenanceVisitRemark` at the end of the edge."""
  node: MaintenanceVisitRemark!
}

"""Methods to use when ordering `MaintenanceVisitRemark`."""
enum MaintenanceVisitRemarksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MAINTENANCE_VISIT_ID_ASC
  MAINTENANCE_VISIT_ID_DESC
  LINE_ASC
  LINE_DESC
  REMARKS_ASC
  REMARKS_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  AANTAL_ASC
  AANTAL_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  FOLLOW_UP_ASC
  FOLLOW_UP_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__ID_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__ID_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__END_USER_ID_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__END_USER_ID_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__USER_ID_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__USER_ID_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__FACTUUROPDRACHT_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__FACTUUROPDRACHT_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__DATE_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__DATE_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__DURATION_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__DURATION_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CREATED_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CREATED_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__MODIFIED_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__MODIFIED_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__OWNER_ID_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__OWNER_ID_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CHECKED_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CHECKED_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CONTACT_NAME_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CONTACT_NAME_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CONTACT_EMAIL_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CONTACT_EMAIL_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__LABOUR_HOURS_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__LABOUR_HOURS_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__LOCKED_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__LOCKED_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CONTACT_PHONE_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CONTACT_PHONE_DESC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CDMAGAZIJN_ASC
  MAINTENANCE_VISIT_BY_MAINTENANCE_VISIT_ID__CDMAGAZIJN_DESC
}

"""
A condition to be used against `MaintenanceVisitRemark` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input MaintenanceVisitRemarkCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `maintenanceVisitId` field."""
  maintenanceVisitId: Int

  """Checks for equality with the object’s `line` field."""
  line: Int

  """Checks for equality with the object’s `remarks` field."""
  remarks: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `aantal` field."""
  aantal: BigFloat

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `followUp` field."""
  followUp: String
}

"""A `MaintenanceVisit` edge in the connection."""
type MaintenanceVisitsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MaintenanceVisit` at the end of the edge."""
  node: MaintenanceVisit!
}

"""Methods to use when ordering `MaintenanceVisit`."""
enum MaintenanceVisitsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  END_USER_ID_ASC
  END_USER_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  DATE_ASC
  DATE_DESC
  DURATION_ASC
  DURATION_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CHECKED_ASC
  CHECKED_DESC
  CONTACT_NAME_ASC
  CONTACT_NAME_DESC
  CONTACT_EMAIL_ASC
  CONTACT_EMAIL_DESC
  LABOUR_HOURS_ASC
  LABOUR_HOURS_DESC
  LOCKED_ASC
  LOCKED_DESC
  CONTACT_PHONE_ASC
  CONTACT_PHONE_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  END_USER_BY_END_USER_ID__ID_ASC
  END_USER_BY_END_USER_ID__ID_DESC
  END_USER_BY_END_USER_ID__NAME_ASC
  END_USER_BY_END_USER_ID__NAME_DESC
  END_USER_BY_END_USER_ID__ADDRESS1_ASC
  END_USER_BY_END_USER_ID__ADDRESS1_DESC
  END_USER_BY_END_USER_ID__CITY_ASC
  END_USER_BY_END_USER_ID__CITY_DESC
  END_USER_BY_END_USER_ID__COUNTRY_ASC
  END_USER_BY_END_USER_ID__COUNTRY_DESC
  END_USER_BY_END_USER_ID__CREATED_ASC
  END_USER_BY_END_USER_ID__CREATED_DESC
  END_USER_BY_END_USER_ID__MODIFIED_ASC
  END_USER_BY_END_USER_ID__MODIFIED_DESC
  END_USER_BY_END_USER_ID__FORMER_NAME1_ASC
  END_USER_BY_END_USER_ID__FORMER_NAME1_DESC
  END_USER_BY_END_USER_ID__FORMER_NAME2_ASC
  END_USER_BY_END_USER_ID__FORMER_NAME2_DESC
  END_USER_BY_END_USER_ID__ADDRESS2_ASC
  END_USER_BY_END_USER_ID__ADDRESS2_DESC
  END_USER_BY_END_USER_ID__ZIP_CODE_ASC
  END_USER_BY_END_USER_ID__ZIP_CODE_DESC
  END_USER_BY_END_USER_ID__REGION_ASC
  END_USER_BY_END_USER_ID__REGION_DESC
  END_USER_BY_END_USER_ID__OWNER_ID_ASC
  END_USER_BY_END_USER_ID__OWNER_ID_DESC
  END_USER_BY_END_USER_ID__SUB_LOCATION_ASC
  END_USER_BY_END_USER_ID__SUB_LOCATION_DESC
  END_USER_BY_END_USER_ID__LOCATION_ASC
  END_USER_BY_END_USER_ID__LOCATION_DESC
  END_USER_BY_END_USER_ID__CONTACT_NAME_ASC
  END_USER_BY_END_USER_ID__CONTACT_NAME_DESC
  END_USER_BY_END_USER_ID__CONTACT_EMAIL_ASC
  END_USER_BY_END_USER_ID__CONTACT_EMAIL_DESC
  END_USER_BY_END_USER_ID__CONTACT_PHONE_ASC
  END_USER_BY_END_USER_ID__CONTACT_PHONE_DESC
  USER_BY_USER_ID__ID_ASC
  USER_BY_USER_ID__ID_DESC
  USER_BY_USER_ID__USERNAME_ASC
  USER_BY_USER_ID__USERNAME_DESC
  USER_BY_USER_ID__PASSWORD_ASC
  USER_BY_USER_ID__PASSWORD_DESC
  USER_BY_USER_ID__CREATED_ASC
  USER_BY_USER_ID__CREATED_DESC
  USER_BY_USER_ID__MODIFIED_ASC
  USER_BY_USER_ID__MODIFIED_DESC
  USER_BY_USER_ID__GROUP_ID_ASC
  USER_BY_USER_ID__GROUP_ID_DESC
  USER_BY_USER_ID__INITIALS_ASC
  USER_BY_USER_ID__INITIALS_DESC
  USER_BY_USER_ID__FULLNAME_ASC
  USER_BY_USER_ID__FULLNAME_DESC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_USER_ID__URL_ASC
  USER_BY_USER_ID__URL_DESC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  MAINTENANCE_VISIT_LINES_BY_MAINTENANCE_VISIT_ID__COUNT_ASC
  MAINTENANCE_VISIT_LINES_BY_MAINTENANCE_VISIT_ID__COUNT_DESC
  MAINTENANCE_VISIT_REMARKS_BY_MAINTENANCE_VISIT_ID__COUNT_ASC
  MAINTENANCE_VISIT_REMARKS_BY_MAINTENANCE_VISIT_ID__COUNT_DESC
}

"""
A condition to be used against `MaintenanceVisit` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MaintenanceVisitCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `endUserId` field."""
  endUserId: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `duration` field."""
  duration: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `checked` field."""
  checked: Boolean

  """Checks for equality with the object’s `contactName` field."""
  contactName: String

  """Checks for equality with the object’s `contactEmail` field."""
  contactEmail: String

  """Checks for equality with the object’s `labourHours` field."""
  labourHours: BigFloat

  """Checks for equality with the object’s `locked` field."""
  locked: Boolean

  """Checks for equality with the object’s `contactPhone` field."""
  contactPhone: String

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String
}

"""A connection to a list of `Item` values."""
type ItemsConnection {
  """A list of `Item` objects."""
  nodes: [Item!]!

  """
  A list of edges which contains the `Item` and cursor to aid in pagination.
  """
  edges: [ItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Item` you could get from the connection."""
  totalCount: Int!
}

"""A `Item` edge in the connection."""
type ItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Item` at the end of the edge."""
  node: Item!
}

"""Methods to use when ordering `Item`."""
enum ItemsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  SERIAL_NUMBER_ASC
  SERIAL_NUMBER_DESC
  LABEL_DATE_ASC
  LABEL_DATE_DESC
  REMARKS_ASC
  REMARKS_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  END_USER_ID_ASC
  END_USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  END_USER_BY_END_USER_ID__ID_ASC
  END_USER_BY_END_USER_ID__ID_DESC
  END_USER_BY_END_USER_ID__NAME_ASC
  END_USER_BY_END_USER_ID__NAME_DESC
  END_USER_BY_END_USER_ID__ADDRESS1_ASC
  END_USER_BY_END_USER_ID__ADDRESS1_DESC
  END_USER_BY_END_USER_ID__CITY_ASC
  END_USER_BY_END_USER_ID__CITY_DESC
  END_USER_BY_END_USER_ID__COUNTRY_ASC
  END_USER_BY_END_USER_ID__COUNTRY_DESC
  END_USER_BY_END_USER_ID__CREATED_ASC
  END_USER_BY_END_USER_ID__CREATED_DESC
  END_USER_BY_END_USER_ID__MODIFIED_ASC
  END_USER_BY_END_USER_ID__MODIFIED_DESC
  END_USER_BY_END_USER_ID__FORMER_NAME1_ASC
  END_USER_BY_END_USER_ID__FORMER_NAME1_DESC
  END_USER_BY_END_USER_ID__FORMER_NAME2_ASC
  END_USER_BY_END_USER_ID__FORMER_NAME2_DESC
  END_USER_BY_END_USER_ID__ADDRESS2_ASC
  END_USER_BY_END_USER_ID__ADDRESS2_DESC
  END_USER_BY_END_USER_ID__ZIP_CODE_ASC
  END_USER_BY_END_USER_ID__ZIP_CODE_DESC
  END_USER_BY_END_USER_ID__REGION_ASC
  END_USER_BY_END_USER_ID__REGION_DESC
  END_USER_BY_END_USER_ID__OWNER_ID_ASC
  END_USER_BY_END_USER_ID__OWNER_ID_DESC
  END_USER_BY_END_USER_ID__SUB_LOCATION_ASC
  END_USER_BY_END_USER_ID__SUB_LOCATION_DESC
  END_USER_BY_END_USER_ID__LOCATION_ASC
  END_USER_BY_END_USER_ID__LOCATION_DESC
  END_USER_BY_END_USER_ID__CONTACT_NAME_ASC
  END_USER_BY_END_USER_ID__CONTACT_NAME_DESC
  END_USER_BY_END_USER_ID__CONTACT_EMAIL_ASC
  END_USER_BY_END_USER_ID__CONTACT_EMAIL_DESC
  END_USER_BY_END_USER_ID__CONTACT_PHONE_ASC
  END_USER_BY_END_USER_ID__CONTACT_PHONE_DESC
  REPORT_ITEMS_BY_ITEM_ID__COUNT_ASC
  REPORT_ITEMS_BY_ITEM_ID__COUNT_DESC
}

"""
A condition to be used against `Item` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ItemCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `serialNumber` field."""
  serialNumber: String

  """Checks for equality with the object’s `labelDate` field."""
  labelDate: Date

  """Checks for equality with the object’s `remarks` field."""
  remarks: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `endUserId` field."""
  endUserId: Int
}

"""A connection to a list of `Job` values."""
type JobsConnection {
  """A list of `Job` objects."""
  nodes: [Job!]!

  """
  A list of edges which contains the `Job` and cursor to aid in pagination.
  """
  edges: [JobsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Job` you could get from the connection."""
  totalCount: Int!
}

type Job implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  factuuropdracht: String!
  endUserId: Int
  startDate: Date
  endDate: Date
  confirmed: Boolean
  created: Datetime
  modified: Datetime
  ownerId: Int

  """Reads a single `EndUser` that is related to this `Job`."""
  endUserByEndUserId: EndUser

  """Reads a single `User` that is related to this `Job`."""
  userByOwnerId: User
}

"""A `Job` edge in the connection."""
type JobsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Job` at the end of the edge."""
  node: Job!
}

"""Methods to use when ordering `Job`."""
enum JobsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  END_USER_ID_ASC
  END_USER_ID_DESC
  START_DATE_ASC
  START_DATE_DESC
  END_DATE_ASC
  END_DATE_DESC
  CONFIRMED_ASC
  CONFIRMED_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  END_USER_BY_END_USER_ID__ID_ASC
  END_USER_BY_END_USER_ID__ID_DESC
  END_USER_BY_END_USER_ID__NAME_ASC
  END_USER_BY_END_USER_ID__NAME_DESC
  END_USER_BY_END_USER_ID__ADDRESS1_ASC
  END_USER_BY_END_USER_ID__ADDRESS1_DESC
  END_USER_BY_END_USER_ID__CITY_ASC
  END_USER_BY_END_USER_ID__CITY_DESC
  END_USER_BY_END_USER_ID__COUNTRY_ASC
  END_USER_BY_END_USER_ID__COUNTRY_DESC
  END_USER_BY_END_USER_ID__CREATED_ASC
  END_USER_BY_END_USER_ID__CREATED_DESC
  END_USER_BY_END_USER_ID__MODIFIED_ASC
  END_USER_BY_END_USER_ID__MODIFIED_DESC
  END_USER_BY_END_USER_ID__FORMER_NAME1_ASC
  END_USER_BY_END_USER_ID__FORMER_NAME1_DESC
  END_USER_BY_END_USER_ID__FORMER_NAME2_ASC
  END_USER_BY_END_USER_ID__FORMER_NAME2_DESC
  END_USER_BY_END_USER_ID__ADDRESS2_ASC
  END_USER_BY_END_USER_ID__ADDRESS2_DESC
  END_USER_BY_END_USER_ID__ZIP_CODE_ASC
  END_USER_BY_END_USER_ID__ZIP_CODE_DESC
  END_USER_BY_END_USER_ID__REGION_ASC
  END_USER_BY_END_USER_ID__REGION_DESC
  END_USER_BY_END_USER_ID__OWNER_ID_ASC
  END_USER_BY_END_USER_ID__OWNER_ID_DESC
  END_USER_BY_END_USER_ID__SUB_LOCATION_ASC
  END_USER_BY_END_USER_ID__SUB_LOCATION_DESC
  END_USER_BY_END_USER_ID__LOCATION_ASC
  END_USER_BY_END_USER_ID__LOCATION_DESC
  END_USER_BY_END_USER_ID__CONTACT_NAME_ASC
  END_USER_BY_END_USER_ID__CONTACT_NAME_DESC
  END_USER_BY_END_USER_ID__CONTACT_EMAIL_ASC
  END_USER_BY_END_USER_ID__CONTACT_EMAIL_DESC
  END_USER_BY_END_USER_ID__CONTACT_PHONE_ASC
  END_USER_BY_END_USER_ID__CONTACT_PHONE_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `Job` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input JobCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `endUserId` field."""
  endUserId: Int

  """Checks for equality with the object’s `startDate` field."""
  startDate: Date

  """Checks for equality with the object’s `endDate` field."""
  endDate: Date

  """Checks for equality with the object’s `confirmed` field."""
  confirmed: Boolean

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int
}

"""A connection to a list of `Report` values."""
type ReportsConnection {
  """A list of `Report` objects."""
  nodes: [Report!]!

  """
  A list of edges which contains the `Report` and cursor to aid in pagination.
  """
  edges: [ReportsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Report` you could get from the connection."""
  totalCount: Int!
}

"""A `Report` edge in the connection."""
type ReportsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Report` at the end of the edge."""
  node: Report!
}

"""Methods to use when ordering `Report`."""
enum ReportsOrderBy {
  NATURAL
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  REMARKS_ASC
  REMARKS_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  END_USER_ID_ASC
  END_USER_ID_DESC
  ID_ASC
  ID_DESC
  DATE_ASC
  DATE_DESC
  STARTUP_ASC
  STARTUP_DESC
  MAINTENANCE_ASC
  MAINTENANCE_DESC
  REPAIR_ASC
  REPAIR_DESC
  EXTRA_WORK_ASC
  EXTRA_WORK_DESC
  OTHER_ASC
  OTHER_DESC
  FILENAME_ASC
  FILENAME_DESC
  USER_ID_ASC
  USER_ID_DESC
  CLOSED_OLD_ASC
  CLOSED_OLD_DESC
  TSR_NUMBER_ASC
  TSR_NUMBER_DESC
  CLOSED_ASC
  CLOSED_DESC
  CHECKED_TECHCENTRE_ASC
  CHECKED_TECHCENTRE_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  VERSION_ASC
  VERSION_DESC
  DESTROYED_ASC
  DESTROYED_DESC
  TYPE_ASC
  TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  END_USER_BY_END_USER_ID__ID_ASC
  END_USER_BY_END_USER_ID__ID_DESC
  END_USER_BY_END_USER_ID__NAME_ASC
  END_USER_BY_END_USER_ID__NAME_DESC
  END_USER_BY_END_USER_ID__ADDRESS1_ASC
  END_USER_BY_END_USER_ID__ADDRESS1_DESC
  END_USER_BY_END_USER_ID__CITY_ASC
  END_USER_BY_END_USER_ID__CITY_DESC
  END_USER_BY_END_USER_ID__COUNTRY_ASC
  END_USER_BY_END_USER_ID__COUNTRY_DESC
  END_USER_BY_END_USER_ID__CREATED_ASC
  END_USER_BY_END_USER_ID__CREATED_DESC
  END_USER_BY_END_USER_ID__MODIFIED_ASC
  END_USER_BY_END_USER_ID__MODIFIED_DESC
  END_USER_BY_END_USER_ID__FORMER_NAME1_ASC
  END_USER_BY_END_USER_ID__FORMER_NAME1_DESC
  END_USER_BY_END_USER_ID__FORMER_NAME2_ASC
  END_USER_BY_END_USER_ID__FORMER_NAME2_DESC
  END_USER_BY_END_USER_ID__ADDRESS2_ASC
  END_USER_BY_END_USER_ID__ADDRESS2_DESC
  END_USER_BY_END_USER_ID__ZIP_CODE_ASC
  END_USER_BY_END_USER_ID__ZIP_CODE_DESC
  END_USER_BY_END_USER_ID__REGION_ASC
  END_USER_BY_END_USER_ID__REGION_DESC
  END_USER_BY_END_USER_ID__OWNER_ID_ASC
  END_USER_BY_END_USER_ID__OWNER_ID_DESC
  END_USER_BY_END_USER_ID__SUB_LOCATION_ASC
  END_USER_BY_END_USER_ID__SUB_LOCATION_DESC
  END_USER_BY_END_USER_ID__LOCATION_ASC
  END_USER_BY_END_USER_ID__LOCATION_DESC
  END_USER_BY_END_USER_ID__CONTACT_NAME_ASC
  END_USER_BY_END_USER_ID__CONTACT_NAME_DESC
  END_USER_BY_END_USER_ID__CONTACT_EMAIL_ASC
  END_USER_BY_END_USER_ID__CONTACT_EMAIL_DESC
  END_USER_BY_END_USER_ID__CONTACT_PHONE_ASC
  END_USER_BY_END_USER_ID__CONTACT_PHONE_DESC
  USER_BY_USER_ID__ID_ASC
  USER_BY_USER_ID__ID_DESC
  USER_BY_USER_ID__USERNAME_ASC
  USER_BY_USER_ID__USERNAME_DESC
  USER_BY_USER_ID__PASSWORD_ASC
  USER_BY_USER_ID__PASSWORD_DESC
  USER_BY_USER_ID__CREATED_ASC
  USER_BY_USER_ID__CREATED_DESC
  USER_BY_USER_ID__MODIFIED_ASC
  USER_BY_USER_ID__MODIFIED_DESC
  USER_BY_USER_ID__GROUP_ID_ASC
  USER_BY_USER_ID__GROUP_ID_DESC
  USER_BY_USER_ID__INITIALS_ASC
  USER_BY_USER_ID__INITIALS_DESC
  USER_BY_USER_ID__FULLNAME_ASC
  USER_BY_USER_ID__FULLNAME_DESC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_USER_ID__URL_ASC
  USER_BY_USER_ID__URL_DESC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  ACTIONS_BY_REPORT_ID__COUNT_ASC
  ACTIONS_BY_REPORT_ID__COUNT_DESC
  REPORT_DETECTORS_BY_REPORT_ID__COUNT_ASC
  REPORT_DETECTORS_BY_REPORT_ID__COUNT_DESC
  REPORT_ITEMS_BY_REPORT_ID__COUNT_ASC
  REPORT_ITEMS_BY_REPORT_ID__COUNT_DESC
  REPORT_SENSORS_BY_REPORT_ID__COUNT_ASC
  REPORT_SENSORS_BY_REPORT_ID__COUNT_DESC
}

"""
A condition to be used against `Report` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ReportCondition {
  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `remarks` field."""
  remarks: String

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `endUserId` field."""
  endUserId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `startup` field."""
  startup: Boolean

  """Checks for equality with the object’s `maintenance` field."""
  maintenance: Boolean

  """Checks for equality with the object’s `repair` field."""
  repair: Boolean

  """Checks for equality with the object’s `extraWork` field."""
  extraWork: Boolean

  """Checks for equality with the object’s `other` field."""
  other: Boolean

  """Checks for equality with the object’s `filename` field."""
  filename: String

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `closedOld` field."""
  closedOld: Boolean

  """Checks for equality with the object’s `tsrNumber` field."""
  tsrNumber: String

  """Checks for equality with the object’s `closed` field."""
  closed: Boolean

  """Checks for equality with the object’s `checkedTechcentre` field."""
  checkedTechcentre: Boolean

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `version` field."""
  version: String

  """Checks for equality with the object’s `destroyed` field."""
  destroyed: Boolean

  """Checks for equality with the object’s `type` field."""
  type: String
}

"""A connection to a list of `Floor` values."""
type FloorsConnection {
  """A list of `Floor` objects."""
  nodes: [Floor!]!

  """
  A list of edges which contains the `Floor` and cursor to aid in pagination.
  """
  edges: [FloorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Floor` you could get from the connection."""
  totalCount: Int!
}

"""A `Floor` edge in the connection."""
type FloorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Floor` at the end of the edge."""
  node: Floor!
}

"""Methods to use when ordering `Floor`."""
enum FloorsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  BUILDING_ID_ASC
  BUILDING_ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  BUILDING_BY_BUILDING_ID__ID_ASC
  BUILDING_BY_BUILDING_ID__ID_DESC
  BUILDING_BY_BUILDING_ID__END_USER_ID_ASC
  BUILDING_BY_BUILDING_ID__END_USER_ID_DESC
  BUILDING_BY_BUILDING_ID__NAME_ASC
  BUILDING_BY_BUILDING_ID__NAME_DESC
  BUILDING_BY_BUILDING_ID__CREATED_ASC
  BUILDING_BY_BUILDING_ID__CREATED_DESC
  BUILDING_BY_BUILDING_ID__MODIFIED_ASC
  BUILDING_BY_BUILDING_ID__MODIFIED_DESC
  BUILDING_BY_BUILDING_ID__OWNER_ID_ASC
  BUILDING_BY_BUILDING_ID__OWNER_ID_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  AREAS_BY_FLOOR_ID__COUNT_ASC
  AREAS_BY_FLOOR_ID__COUNT_DESC
}

"""
A condition to be used against `Floor` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FloorCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `buildingId` field."""
  buildingId: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int
}

"""A connection to a list of `Area` values."""
type AreasConnection {
  """A list of `Area` objects."""
  nodes: [Area!]!

  """
  A list of edges which contains the `Area` and cursor to aid in pagination.
  """
  edges: [AreasEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Area` you could get from the connection."""
  totalCount: Int!
}

"""A `Area` edge in the connection."""
type AreasEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Area` at the end of the edge."""
  node: Area!
}

"""Methods to use when ordering `Area`."""
enum AreasOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FLOOR_ID_ASC
  FLOOR_ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  REMARKS_ASC
  REMARKS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  FLOOR_BY_FLOOR_ID__ID_ASC
  FLOOR_BY_FLOOR_ID__ID_DESC
  FLOOR_BY_FLOOR_ID__BUILDING_ID_ASC
  FLOOR_BY_FLOOR_ID__BUILDING_ID_DESC
  FLOOR_BY_FLOOR_ID__NAME_ASC
  FLOOR_BY_FLOOR_ID__NAME_DESC
  FLOOR_BY_FLOOR_ID__CREATED_ASC
  FLOOR_BY_FLOOR_ID__CREATED_DESC
  FLOOR_BY_FLOOR_ID__MODIFIED_ASC
  FLOOR_BY_FLOOR_ID__MODIFIED_DESC
  FLOOR_BY_FLOOR_ID__OWNER_ID_ASC
  FLOOR_BY_FLOOR_ID__OWNER_ID_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  SAMPLE_POINTS_BY_AREA_ID__COUNT_ASC
  SAMPLE_POINTS_BY_AREA_ID__COUNT_DESC
  DETECTOR_LOCATIONS_BY_AREA_ID__COUNT_ASC
  DETECTOR_LOCATIONS_BY_AREA_ID__COUNT_DESC
}

"""
A condition to be used against `Area` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AreaCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `floorId` field."""
  floorId: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `remarks` field."""
  remarks: String
}

"""A connection to a list of `SamplePoint` values."""
type SamplePointsConnection {
  """A list of `SamplePoint` objects."""
  nodes: [SamplePoint!]!

  """
  A list of edges which contains the `SamplePoint` and cursor to aid in pagination.
  """
  edges: [SamplePointsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SamplePoint` you could get from the connection."""
  totalCount: Int!
}

"""A `SamplePoint` edge in the connection."""
type SamplePointsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SamplePoint` at the end of the edge."""
  node: SamplePoint!
}

"""Methods to use when ordering `SamplePoint`."""
enum SamplePointsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  AREA_ID_ASC
  AREA_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  AREA_BY_AREA_ID__ID_ASC
  AREA_BY_AREA_ID__ID_DESC
  AREA_BY_AREA_ID__FLOOR_ID_ASC
  AREA_BY_AREA_ID__FLOOR_ID_DESC
  AREA_BY_AREA_ID__NAME_ASC
  AREA_BY_AREA_ID__NAME_DESC
  AREA_BY_AREA_ID__CREATED_ASC
  AREA_BY_AREA_ID__CREATED_DESC
  AREA_BY_AREA_ID__MODIFIED_ASC
  AREA_BY_AREA_ID__MODIFIED_DESC
  AREA_BY_AREA_ID__OWNER_ID_ASC
  AREA_BY_AREA_ID__OWNER_ID_DESC
  AREA_BY_AREA_ID__REMARKS_ASC
  AREA_BY_AREA_ID__REMARKS_DESC
  DETECTOR_SENSOR_LOCATIONS_BY_SAMPLE_POINT_ID__COUNT_ASC
  DETECTOR_SENSOR_LOCATIONS_BY_SAMPLE_POINT_ID__COUNT_DESC
}

"""
A condition to be used against `SamplePoint` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SamplePointCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `areaId` field."""
  areaId: Int
}

"""A connection to a list of `DetectorLocation` values."""
type DetectorLocationsConnection {
  """A list of `DetectorLocation` objects."""
  nodes: [DetectorLocation!]!

  """
  A list of edges which contains the `DetectorLocation` and cursor to aid in pagination.
  """
  edges: [DetectorLocationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DetectorLocation` you could get from the connection.
  """
  totalCount: Int!
}

"""A `DetectorLocation` edge in the connection."""
type DetectorLocationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DetectorLocation` at the end of the edge."""
  node: DetectorLocation!
}

"""Methods to use when ordering `DetectorLocation`."""
enum DetectorLocationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DETECTOR_ID_ASC
  DETECTOR_ID_DESC
  AREA_ID_ASC
  AREA_ID_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  BUS_ASC
  BUS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  DETECTOR_BY_DETECTOR_ID__ID_ASC
  DETECTOR_BY_DETECTOR_ID__ID_DESC
  DETECTOR_BY_DETECTOR_ID__DETECTOR_TYPE_ID_ASC
  DETECTOR_BY_DETECTOR_ID__DETECTOR_TYPE_ID_DESC
  DETECTOR_BY_DETECTOR_ID__SERIAL_NUMBER_ASC
  DETECTOR_BY_DETECTOR_ID__SERIAL_NUMBER_DESC
  DETECTOR_BY_DETECTOR_ID__LABEL_DATE_ASC
  DETECTOR_BY_DETECTOR_ID__LABEL_DATE_DESC
  DETECTOR_BY_DETECTOR_ID__REMARKS_ASC
  DETECTOR_BY_DETECTOR_ID__REMARKS_DESC
  DETECTOR_BY_DETECTOR_ID__CREATED_ASC
  DETECTOR_BY_DETECTOR_ID__CREATED_DESC
  DETECTOR_BY_DETECTOR_ID__OWNER_ID_ASC
  DETECTOR_BY_DETECTOR_ID__OWNER_ID_DESC
  DETECTOR_BY_DETECTOR_ID__MODIFIED_ASC
  DETECTOR_BY_DETECTOR_ID__MODIFIED_DESC
  AREA_BY_AREA_ID__ID_ASC
  AREA_BY_AREA_ID__ID_DESC
  AREA_BY_AREA_ID__FLOOR_ID_ASC
  AREA_BY_AREA_ID__FLOOR_ID_DESC
  AREA_BY_AREA_ID__NAME_ASC
  AREA_BY_AREA_ID__NAME_DESC
  AREA_BY_AREA_ID__CREATED_ASC
  AREA_BY_AREA_ID__CREATED_DESC
  AREA_BY_AREA_ID__MODIFIED_ASC
  AREA_BY_AREA_ID__MODIFIED_DESC
  AREA_BY_AREA_ID__OWNER_ID_ASC
  AREA_BY_AREA_ID__OWNER_ID_DESC
  AREA_BY_AREA_ID__REMARKS_ASC
  AREA_BY_AREA_ID__REMARKS_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  DETECTOR_SENSOR_LOCATIONS_BY_DETECTOR_LOCATION_ID__COUNT_ASC
  DETECTOR_SENSOR_LOCATIONS_BY_DETECTOR_LOCATION_ID__COUNT_DESC
}

"""
A condition to be used against `DetectorLocation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DetectorLocationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `detectorId` field."""
  detectorId: Int

  """Checks for equality with the object’s `areaId` field."""
  areaId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `address` field."""
  address: Int

  """Checks for equality with the object’s `bus` field."""
  bus: Int
}

"""A connection to a list of `DetectorOrder` values."""
type DetectorOrdersConnection {
  """A list of `DetectorOrder` objects."""
  nodes: [DetectorOrder!]!

  """
  A list of edges which contains the `DetectorOrder` and cursor to aid in pagination.
  """
  edges: [DetectorOrdersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DetectorOrder` you could get from the connection."""
  totalCount: Int!
}

type DetectorOrder implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  detectorId: Int!
  completed: Boolean
  created: Datetime!
  ownerId: Int!
  factuuropdracht: String!
  modified: Datetime

  """Reads a single `Detector` that is related to this `DetectorOrder`."""
  detectorByDetectorId: Detector

  """Reads a single `User` that is related to this `DetectorOrder`."""
  userByOwnerId: User
}

"""A `DetectorOrder` edge in the connection."""
type DetectorOrdersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DetectorOrder` at the end of the edge."""
  node: DetectorOrder!
}

"""Methods to use when ordering `DetectorOrder`."""
enum DetectorOrdersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DETECTOR_ID_ASC
  DETECTOR_ID_DESC
  COMPLETED_ASC
  COMPLETED_DESC
  CREATED_ASC
  CREATED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  DETECTOR_BY_DETECTOR_ID__ID_ASC
  DETECTOR_BY_DETECTOR_ID__ID_DESC
  DETECTOR_BY_DETECTOR_ID__DETECTOR_TYPE_ID_ASC
  DETECTOR_BY_DETECTOR_ID__DETECTOR_TYPE_ID_DESC
  DETECTOR_BY_DETECTOR_ID__SERIAL_NUMBER_ASC
  DETECTOR_BY_DETECTOR_ID__SERIAL_NUMBER_DESC
  DETECTOR_BY_DETECTOR_ID__LABEL_DATE_ASC
  DETECTOR_BY_DETECTOR_ID__LABEL_DATE_DESC
  DETECTOR_BY_DETECTOR_ID__REMARKS_ASC
  DETECTOR_BY_DETECTOR_ID__REMARKS_DESC
  DETECTOR_BY_DETECTOR_ID__CREATED_ASC
  DETECTOR_BY_DETECTOR_ID__CREATED_DESC
  DETECTOR_BY_DETECTOR_ID__OWNER_ID_ASC
  DETECTOR_BY_DETECTOR_ID__OWNER_ID_DESC
  DETECTOR_BY_DETECTOR_ID__MODIFIED_ASC
  DETECTOR_BY_DETECTOR_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `DetectorOrder` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DetectorOrderCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `detectorId` field."""
  detectorId: Int

  """Checks for equality with the object’s `completed` field."""
  completed: Boolean

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime
}

"""A `DetectorSensor` edge in the connection."""
type DetectorSensorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DetectorSensor` at the end of the edge."""
  node: DetectorSensor!
}

type Plug implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  created: Datetime
  modified: Datetime
  ownerId: Int

  """Reads a single `User` that is related to this `Plug`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `SensorType`."""
  sensorTypesByPlugId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SensorType`."""
    orderBy: [SensorTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SensorTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SensorTypeFilter
  ): SensorTypesConnection!
}

"""A connection to a list of `Sensor` values."""
type SensorsConnection {
  """A list of `Sensor` objects."""
  nodes: [Sensor!]!

  """
  A list of edges which contains the `Sensor` and cursor to aid in pagination.
  """
  edges: [SensorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Sensor` you could get from the connection."""
  totalCount: Int!
}

"""A `Sensor` edge in the connection."""
type SensorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Sensor` at the end of the edge."""
  node: Sensor!
}

"""Methods to use when ordering `Sensor`."""
enum SensorsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SERIAL_NUMBER_ASC
  SERIAL_NUMBER_DESC
  LABEL_DATE_ASC
  LABEL_DATE_DESC
  REMARKS_ASC
  REMARKS_DESC
  CREATED_ASC
  CREATED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  SENSOR_TYPE_ID_ASC
  SENSOR_TYPE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__SENSOR_TYPE_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__SENSOR_TYPE_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__ELECTROLYTE_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__ELECTROLYTE_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__MEMBRANE_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__MEMBRANE_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__O_RING_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__O_RING_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__PYROLYSER_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__PYROLYSER_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__FILTER_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__FILTER_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__BATTERY_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__BATTERY_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__RESTRICTOR_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__RESTRICTOR_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__MEMBRANE_SEAL_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__MEMBRANE_SEAL_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__RANGE_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__RANGE_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__FLOW_RATE_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__FLOW_RATE_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CAL_FLOW_RATE_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CAL_FLOW_RATE_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CODE_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CODE_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__OBSOLETE_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__OBSOLETE_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__PYROLYSER_VOLTAGE_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__PYROLYSER_VOLTAGE_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__PRINCIPLE_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__PRINCIPLE_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__SENSOR_BASE_TYPE_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__SENSOR_BASE_TYPE_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CREATED_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CREATED_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__MODIFIED_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__MODIFIED_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__OWNER_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__OWNER_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__MODEL_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__MODEL_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CAL_GAS_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CAL_GAS_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__SILICONE_SHEET_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__SILICONE_SHEET_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__ELEMENT_COUNT_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__ELEMENT_COUNT_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__MAINTENANCE_INTERVAL_MONTHS_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__MAINTENANCE_INTERVAL_MONTHS_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__REPLACEMENT_INTERVAL_MONTHS_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__REPLACEMENT_INTERVAL_MONTHS_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CDARTIKEL_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CDARTIKEL_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__VOLUME_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__VOLUME_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CAL_RESPONSE_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CAL_RESPONSE_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__ELECTRODE_COUNT_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__ELECTRODE_COUNT_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__BIAS_MV_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__BIAS_MV_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__DIRECTION_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__DIRECTION_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__LOW_ELECTROLYTE_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__LOW_ELECTROLYTE_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__SPAN_RESISTOR_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__SPAN_RESISTOR_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__PLUG_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__PLUG_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__TRANSPORT_SWITCH_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__TRANSPORT_SWITCH_DESC
  DETECTOR_SENSOR_BY_SENSOR_ID__ID_ASC
  DETECTOR_SENSOR_BY_SENSOR_ID__ID_DESC
  DETECTOR_SENSOR_BY_SENSOR_ID__DETECTOR_ID_ASC
  DETECTOR_SENSOR_BY_SENSOR_ID__DETECTOR_ID_DESC
  DETECTOR_SENSOR_BY_SENSOR_ID__DETECTOR_POSITION_ASC
  DETECTOR_SENSOR_BY_SENSOR_ID__DETECTOR_POSITION_DESC
  DETECTOR_SENSOR_BY_SENSOR_ID__SENSOR_ID_ASC
  DETECTOR_SENSOR_BY_SENSOR_ID__SENSOR_ID_DESC
  DETECTOR_SENSOR_BY_SENSOR_ID__FILTER_ID_ASC
  DETECTOR_SENSOR_BY_SENSOR_ID__FILTER_ID_DESC
  DETECTOR_SENSOR_BY_SENSOR_ID___FILTER_LABEL_DATE_ASC
  DETECTOR_SENSOR_BY_SENSOR_ID___FILTER_LABEL_DATE_DESC
  DETECTOR_SENSOR_BY_SENSOR_ID__PYROLYSER_ID_ASC
  DETECTOR_SENSOR_BY_SENSOR_ID__PYROLYSER_ID_DESC
  DETECTOR_SENSOR_BY_SENSOR_ID___PYROLYSER_LABEL_DATE_ASC
  DETECTOR_SENSOR_BY_SENSOR_ID___PYROLYSER_LABEL_DATE_DESC
  DETECTOR_SENSOR_BY_SENSOR_ID__CREATED_ASC
  DETECTOR_SENSOR_BY_SENSOR_ID__CREATED_DESC
  DETECTOR_SENSOR_BY_SENSOR_ID__MODIFIED_ASC
  DETECTOR_SENSOR_BY_SENSOR_ID__MODIFIED_DESC
  DETECTOR_SENSOR_BY_SENSOR_ID__OWNER_ID_ASC
  DETECTOR_SENSOR_BY_SENSOR_ID__OWNER_ID_DESC
  MAINTENANCE_VISIT_LINES_BY_SENSOR_ID__COUNT_ASC
  MAINTENANCE_VISIT_LINES_BY_SENSOR_ID__COUNT_DESC
  MAINTENANCE_VISIT_LINES_BY_ORIGINAL_SENSOR_ID__COUNT_ASC
  MAINTENANCE_VISIT_LINES_BY_ORIGINAL_SENSOR_ID__COUNT_DESC
  REPORT_SENSORS_BY_SENSOR_ID__COUNT_ASC
  REPORT_SENSORS_BY_SENSOR_ID__COUNT_DESC
  SENSOR_ELEMENT_LOGS_BY_SENSOR_ID__COUNT_ASC
  SENSOR_ELEMENT_LOGS_BY_SENSOR_ID__COUNT_DESC
  SENSOR_ORDERS_BY_SENSOR_ID__COUNT_ASC
  SENSOR_ORDERS_BY_SENSOR_ID__COUNT_DESC
  SENSOR_SENSOR_ELEMENTS_BY_SENSOR_ID__COUNT_ASC
  SENSOR_SENSOR_ELEMENTS_BY_SENSOR_ID__COUNT_DESC
  SENSOR_TEST_RESULTS_BY_SENSOR_ID__COUNT_ASC
  SENSOR_TEST_RESULTS_BY_SENSOR_ID__COUNT_DESC
}

"""
A condition to be used against `Sensor` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SensorCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `serialNumber` field."""
  serialNumber: String

  """Checks for equality with the object’s `labelDate` field."""
  labelDate: Date

  """Checks for equality with the object’s `remarks` field."""
  remarks: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `sensorTypeId` field."""
  sensorTypeId: Int
}

"""A connection to a list of `DetectorSensorType` values."""
type DetectorSensorTypesConnection {
  """A list of `DetectorSensorType` objects."""
  nodes: [DetectorSensorType!]!

  """
  A list of edges which contains the `DetectorSensorType` and cursor to aid in pagination.
  """
  edges: [DetectorSensorTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DetectorSensorType` you could get from the connection.
  """
  totalCount: Int!
}

type DetectorSensorType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  sensorTypeId: Int!
  detectorId: Int
  detectorPosition: Int
  ownerId: Int!
  created: Datetime
  modified: Datetime

  """
  Reads a single `SensorType` that is related to this `DetectorSensorType`.
  """
  sensorTypeBySensorTypeId: SensorType

  """Reads a single `User` that is related to this `DetectorSensorType`."""
  userByOwnerId: User
}

"""A `DetectorSensorType` edge in the connection."""
type DetectorSensorTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DetectorSensorType` at the end of the edge."""
  node: DetectorSensorType!
}

"""Methods to use when ordering `DetectorSensorType`."""
enum DetectorSensorTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SENSOR_TYPE_ID_ASC
  SENSOR_TYPE_ID_DESC
  DETECTOR_ID_ASC
  DETECTOR_ID_DESC
  DETECTOR_POSITION_ASC
  DETECTOR_POSITION_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__SENSOR_TYPE_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__SENSOR_TYPE_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__ELECTROLYTE_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__ELECTROLYTE_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__MEMBRANE_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__MEMBRANE_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__O_RING_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__O_RING_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__PYROLYSER_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__PYROLYSER_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__FILTER_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__FILTER_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__BATTERY_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__BATTERY_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__RESTRICTOR_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__RESTRICTOR_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__MEMBRANE_SEAL_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__MEMBRANE_SEAL_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__RANGE_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__RANGE_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__FLOW_RATE_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__FLOW_RATE_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CAL_FLOW_RATE_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CAL_FLOW_RATE_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CODE_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CODE_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__OBSOLETE_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__OBSOLETE_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__PYROLYSER_VOLTAGE_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__PYROLYSER_VOLTAGE_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__PRINCIPLE_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__PRINCIPLE_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__SENSOR_BASE_TYPE_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__SENSOR_BASE_TYPE_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CREATED_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CREATED_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__MODIFIED_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__MODIFIED_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__OWNER_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__OWNER_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__MODEL_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__MODEL_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CAL_GAS_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CAL_GAS_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__SILICONE_SHEET_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__SILICONE_SHEET_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__ELEMENT_COUNT_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__ELEMENT_COUNT_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__MAINTENANCE_INTERVAL_MONTHS_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__MAINTENANCE_INTERVAL_MONTHS_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__REPLACEMENT_INTERVAL_MONTHS_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__REPLACEMENT_INTERVAL_MONTHS_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CDARTIKEL_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CDARTIKEL_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__VOLUME_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__VOLUME_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CAL_RESPONSE_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__CAL_RESPONSE_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__ELECTRODE_COUNT_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__ELECTRODE_COUNT_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__BIAS_MV_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__BIAS_MV_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__DIRECTION_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__DIRECTION_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__LOW_ELECTROLYTE_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__LOW_ELECTROLYTE_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__SPAN_RESISTOR_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__SPAN_RESISTOR_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__PLUG_ID_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__PLUG_ID_DESC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__TRANSPORT_SWITCH_ASC
  SENSOR_TYPE_BY_SENSOR_TYPE_ID__TRANSPORT_SWITCH_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `DetectorSensorType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DetectorSensorTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `sensorTypeId` field."""
  sensorTypeId: Int

  """Checks for equality with the object’s `detectorId` field."""
  detectorId: Int

  """Checks for equality with the object’s `detectorPosition` field."""
  detectorPosition: Int

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime
}

"""A `SensorType` edge in the connection."""
type SensorTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SensorType` at the end of the edge."""
  node: SensorType!
}

"""A `Range` edge in the connection."""
type RangesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Range` at the end of the edge."""
  node: Range!
}

"""Methods to use when ordering `Range`."""
enum RangesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  GAS_ID_ASC
  GAS_ID_DESC
  LOW_EU_ASC
  LOW_EU_DESC
  HIGH_EU_ASC
  HIGH_EU_DESC
  ENGINEERING_UNITS_ASC
  ENGINEERING_UNITS_DESC
  ALARM_1_LEVEL_ASC
  ALARM_1_LEVEL_DESC
  ALARM_2_LEVEL_ASC
  ALARM_2_LEVEL_DESC
  WARNING_1_LEVEL_ASC
  WARNING_1_LEVEL_DESC
  WARNING_2_LEVEL_ASC
  WARNING_2_LEVEL_DESC
  ALARM_1_DIRECTION_UP_ASC
  ALARM_1_DIRECTION_UP_DESC
  ALARM_2_DIRECTION_UP_ASC
  ALARM_2_DIRECTION_UP_DESC
  ALARM_UNITS_ASC
  ALARM_UNITS_DESC
  PRECISION_ASC
  PRECISION_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  HIGH_EU_NUMERIC_ASC
  HIGH_EU_NUMERIC_DESC
  HIGH_EU_BACKUP_ASC
  HIGH_EU_BACKUP_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  GAS_BY_GAS_ID__ID_ASC
  GAS_BY_GAS_ID__ID_DESC
  GAS_BY_GAS_ID__NAME_ASC
  GAS_BY_GAS_ID__NAME_DESC
  GAS_BY_GAS_ID__FORMULA_ASC
  GAS_BY_GAS_ID__FORMULA_DESC
  GAS_BY_GAS_ID__CREATED_ASC
  GAS_BY_GAS_ID__CREATED_DESC
  GAS_BY_GAS_ID__MODIFIED_ASC
  GAS_BY_GAS_ID__MODIFIED_DESC
  GAS_BY_GAS_ID__OWNER_ID_ASC
  GAS_BY_GAS_ID__OWNER_ID_DESC
  GAS_BY_GAS_ID__CHEMICAL_COMPOUND_ID_ASC
  GAS_BY_GAS_ID__CHEMICAL_COMPOUND_ID_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  SENSOR_TYPES_BY_RANGE_ID__COUNT_ASC
  SENSOR_TYPES_BY_RANGE_ID__COUNT_DESC
  SENSOR_ELEMENT_TYPES_BY_RANGE_ID__COUNT_ASC
  SENSOR_ELEMENT_TYPES_BY_RANGE_ID__COUNT_DESC
  SENSOR_ELEMENT_TYPES_BY_CAL_RANGE_ID__COUNT_ASC
  SENSOR_ELEMENT_TYPES_BY_CAL_RANGE_ID__COUNT_DESC
}

"""
A condition to be used against `Range` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RangeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `gasId` field."""
  gasId: Int

  """Checks for equality with the object’s `lowEu` field."""
  lowEu: Float

  """Checks for equality with the object’s `highEu` field."""
  highEu: Float

  """Checks for equality with the object’s `engineeringUnits` field."""
  engineeringUnits: String

  """Checks for equality with the object’s `alarm1Level` field."""
  alarm1Level: BigFloat

  """Checks for equality with the object’s `alarm2Level` field."""
  alarm2Level: BigFloat

  """Checks for equality with the object’s `warning1Level` field."""
  warning1Level: BigFloat

  """Checks for equality with the object’s `warning2Level` field."""
  warning2Level: BigFloat

  """Checks for equality with the object’s `alarm1DirectionUp` field."""
  alarm1DirectionUp: Boolean

  """Checks for equality with the object’s `alarm2DirectionUp` field."""
  alarm2DirectionUp: Boolean

  """Checks for equality with the object’s `alarmUnits` field."""
  alarmUnits: Boolean

  """Checks for equality with the object’s `precision` field."""
  precision: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `highEuNumeric` field."""
  highEuNumeric: BigFloat

  """Checks for equality with the object’s `highEuBackup` field."""
  highEuBackup: Float
}

"""A `CalGas` edge in the connection."""
type CalGasesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CalGas` at the end of the edge."""
  node: CalGas!
}

"""A connection to a list of `Group` values."""
type GroupsConnection {
  """A list of `Group` objects."""
  nodes: [Group!]!

  """
  A list of edges which contains the `Group` and cursor to aid in pagination.
  """
  edges: [GroupsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Group` you could get from the connection."""
  totalCount: Int!
}

"""A `Group` edge in the connection."""
type GroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Group` at the end of the edge."""
  node: Group!
}

"""Methods to use when ordering `Group`."""
enum GroupsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  USERS_BY_GROUP_ID__COUNT_ASC
  USERS_BY_GROUP_ID__COUNT_DESC
  ACTIONS_BY_GROUP_ID__COUNT_ASC
  ACTIONS_BY_GROUP_ID__COUNT_DESC
  GROUP_PERMISSION_BY_GROUP_ID__ID_ASC
  GROUP_PERMISSION_BY_GROUP_ID__ID_DESC
  GROUP_PERMISSION_BY_GROUP_ID__WRITE_IDS_ASC
  GROUP_PERMISSION_BY_GROUP_ID__WRITE_IDS_DESC
  GROUP_PERMISSION_BY_GROUP_ID__READ_IDS_ASC
  GROUP_PERMISSION_BY_GROUP_ID__READ_IDS_DESC
  GROUP_PERMISSION_BY_GROUP_ID__GROUP_ID_ASC
  GROUP_PERMISSION_BY_GROUP_ID__GROUP_ID_DESC
  GROUP_RIGHTS_BY_GROUP_ID__COUNT_ASC
  GROUP_RIGHTS_BY_GROUP_ID__COUNT_DESC
  USERS_GROUPS_BY_GROUP_ID__COUNT_ASC
  USERS_GROUPS_BY_GROUP_ID__COUNT_DESC
}

"""
A condition to be used against `Group` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GroupCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int
}

"""A connection to a list of `DetectorType` values."""
type DetectorTypesConnection {
  """A list of `DetectorType` objects."""
  nodes: [DetectorType!]!

  """
  A list of edges which contains the `DetectorType` and cursor to aid in pagination.
  """
  edges: [DetectorTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DetectorType` you could get from the connection."""
  totalCount: Int!
}

"""A `DetectorType` edge in the connection."""
type DetectorTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DetectorType` at the end of the edge."""
  node: DetectorType!
}

"""Methods to use when ordering `DetectorType`."""
enum DetectorTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  OBSOLETE_ASC
  OBSOLETE_DESC
  PREFIX_ASC
  PREFIX_DESC
  CODE_ASC
  CODE_DESC
  SUFFIX_ASC
  SUFFIX_DESC
  SENSOR_COUNT_ASC
  SENSOR_COUNT_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  DETECTORS_BY_DETECTOR_TYPE_ID__COUNT_ASC
  DETECTORS_BY_DETECTOR_TYPE_ID__COUNT_DESC
}

"""
A condition to be used against `DetectorType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DetectorTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `obsolete` field."""
  obsolete: Boolean

  """Checks for equality with the object’s `prefix` field."""
  prefix: String

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `suffix` field."""
  suffix: String

  """Checks for equality with the object’s `sensorCount` field."""
  sensorCount: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int
}

"""A connection to a list of `EndUser` values."""
type EndUsersConnection {
  """A list of `EndUser` objects."""
  nodes: [EndUser!]!

  """
  A list of edges which contains the `EndUser` and cursor to aid in pagination.
  """
  edges: [EndUsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EndUser` you could get from the connection."""
  totalCount: Int!
}

"""A `EndUser` edge in the connection."""
type EndUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EndUser` at the end of the edge."""
  node: EndUser!
}

"""Methods to use when ordering `EndUser`."""
enum EndUsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  ADDRESS1_ASC
  ADDRESS1_DESC
  CITY_ASC
  CITY_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  FORMER_NAME1_ASC
  FORMER_NAME1_DESC
  FORMER_NAME2_ASC
  FORMER_NAME2_DESC
  ADDRESS2_ASC
  ADDRESS2_DESC
  ZIP_CODE_ASC
  ZIP_CODE_DESC
  REGION_ASC
  REGION_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  SUB_LOCATION_ASC
  SUB_LOCATION_DESC
  LOCATION_ASC
  LOCATION_DESC
  CONTACT_NAME_ASC
  CONTACT_NAME_DESC
  CONTACT_EMAIL_ASC
  CONTACT_EMAIL_DESC
  CONTACT_PHONE_ASC
  CONTACT_PHONE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  BUILDINGS_BY_END_USER_ID__COUNT_ASC
  BUILDINGS_BY_END_USER_ID__COUNT_DESC
  MAINTENANCE_VISITS_BY_END_USER_ID__COUNT_ASC
  MAINTENANCE_VISITS_BY_END_USER_ID__COUNT_DESC
  ITEMS_BY_END_USER_ID__COUNT_ASC
  ITEMS_BY_END_USER_ID__COUNT_DESC
  JOBS_BY_END_USER_ID__COUNT_ASC
  JOBS_BY_END_USER_ID__COUNT_DESC
  LICENSES_BY_END_USER_ID__COUNT_ASC
  LICENSES_BY_END_USER_ID__COUNT_DESC
  REPORTS_BY_END_USER_ID__COUNT_ASC
  REPORTS_BY_END_USER_ID__COUNT_DESC
}

"""
A condition to be used against `EndUser` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EndUserCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `address1` field."""
  address1: String

  """Checks for equality with the object’s `city` field."""
  city: String

  """Checks for equality with the object’s `country` field."""
  country: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `formerName1` field."""
  formerName1: String

  """Checks for equality with the object’s `formerName2` field."""
  formerName2: String

  """Checks for equality with the object’s `address2` field."""
  address2: String

  """Checks for equality with the object’s `zipCode` field."""
  zipCode: String

  """Checks for equality with the object’s `region` field."""
  region: String

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `subLocation` field."""
  subLocation: String

  """Checks for equality with the object’s `location` field."""
  location: String

  """Checks for equality with the object’s `contactName` field."""
  contactName: String

  """Checks for equality with the object’s `contactEmail` field."""
  contactEmail: String

  """Checks for equality with the object’s `contactPhone` field."""
  contactPhone: String
}

"""A connection to a list of `Application` values."""
type ApplicationsConnection {
  """A list of `Application` objects."""
  nodes: [Application!]!

  """
  A list of edges which contains the `Application` and cursor to aid in pagination.
  """
  edges: [ApplicationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection."""
type ApplicationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application!
}

"""Methods to use when ordering `Application`."""
enum ApplicationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  _TOOL_ID_ASC
  _TOOL_ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  DETECTOR_SENSOR_LOCATIONS_BY_APPLICATION_ID__COUNT_ASC
  DETECTOR_SENSOR_LOCATIONS_BY_APPLICATION_ID__COUNT_DESC
}

"""
A condition to be used against `Application` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ApplicationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `_toolId` field."""
  _toolId: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int
}

"""A connection to a list of `Assembly` values."""
type AssembliesConnection {
  """A list of `Assembly` objects."""
  nodes: [Assembly!]!

  """
  A list of edges which contains the `Assembly` and cursor to aid in pagination.
  """
  edges: [AssembliesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Assembly` you could get from the connection."""
  totalCount: Int!
}

type Assembly implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  code: String
  startSerialNumber: String
  quantity: Int
  assemblyTypeId: Int
  ownerId: Int!
  created: Datetime!
  modified: Datetime
  completed: Boolean!
  mvDoc: String
  checked: Boolean!
  po: Boolean!

  """Reads a single `AssemblyType` that is related to this `Assembly`."""
  assemblyTypeByAssemblyTypeId: AssemblyType

  """Reads a single `User` that is related to this `Assembly`."""
  userByOwnerId: User
}

type AssemblyType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
  cdartikel: String
  ownerId: Int!
  created: Datetime!
  modified: Datetime

  """Reads a single `User` that is related to this `AssemblyType`."""
  userByOwnerId: User

  """Reads a single `Artikel` that is related to this `AssemblyType`."""
  artikelByCdartikel: Artikel

  """Reads and enables pagination through a set of `Assembly`."""
  assembliesByAssemblyTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Assembly`."""
    orderBy: [AssembliesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssemblyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssemblyFilter
  ): AssembliesConnection!

  """Reads and enables pagination through a set of `AssemblyTypePart`."""
  assemblyTypePartsByAssemblyTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssemblyTypePart`."""
    orderBy: [AssemblyTypePartsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssemblyTypePartCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssemblyTypePartFilter
  ): AssemblyTypePartsConnection!
}

type Artikel implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  cdartikel: String!
  zoeknaam: String
  omschr: String
  soort: String
  cdartgroep: String
  cdgrbrekening: String
  prijsper: BigFloat
  aantaldec: Int
  prijsincl: BigFloat
  prijsexcl: BigFloat
  verrekenprijs: BigFloat
  voorraad: BigFloat
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  eenheid: String
  btwcode: Int
  cdartkortgrp: String
  cdgoedcode: Int
  gewicht: BigFloat
  aanveenh: BigFloat
  inkvolgnr: Int
  uitloop: String
  aanmaakdatum: Date
  opweb: String
  magbon: String
  pakbon: String
  factuur: String
  cdgrbrekkort: String
  datumltstewijz: Date
  cdgrbrekdekking: String
  projOpslag: BigFloat
  projMutsoort: String
  eannummer: String
  afdrukSamOpOfferte: String
  samVersie: String
  assemblageArtikel: String
  margePerc: BigFloat
  guidItem: String
  sysCreate: String
  sysUpdate: String
  vvbestand: String
  vvgroep: String
  vvvrijvelda: String
  vvvrijveldb: String
  cdlandOorspr: String

  """Reads and enables pagination through a set of `AssemblyType`."""
  assemblyTypesByCdartikel(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssemblyType`."""
    orderBy: [AssemblyTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssemblyTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssemblyTypeFilter
  ): AssemblyTypesConnection!
}

"""A connection to a list of `AssemblyType` values."""
type AssemblyTypesConnection {
  """A list of `AssemblyType` objects."""
  nodes: [AssemblyType!]!

  """
  A list of edges which contains the `AssemblyType` and cursor to aid in pagination.
  """
  edges: [AssemblyTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AssemblyType` you could get from the connection."""
  totalCount: Int!
}

"""A `AssemblyType` edge in the connection."""
type AssemblyTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AssemblyType` at the end of the edge."""
  node: AssemblyType!
}

"""Methods to use when ordering `AssemblyType`."""
enum AssemblyTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  ARTIKEL_BY_CDARTIKEL__CDARTIKEL_ASC
  ARTIKEL_BY_CDARTIKEL__CDARTIKEL_DESC
  ARTIKEL_BY_CDARTIKEL__ZOEKNAAM_ASC
  ARTIKEL_BY_CDARTIKEL__ZOEKNAAM_DESC
  ARTIKEL_BY_CDARTIKEL__OMSCHR_ASC
  ARTIKEL_BY_CDARTIKEL__OMSCHR_DESC
  ARTIKEL_BY_CDARTIKEL__SOORT_ASC
  ARTIKEL_BY_CDARTIKEL__SOORT_DESC
  ARTIKEL_BY_CDARTIKEL__CDARTGROEP_ASC
  ARTIKEL_BY_CDARTIKEL__CDARTGROEP_DESC
  ARTIKEL_BY_CDARTIKEL__CDGRBREKENING_ASC
  ARTIKEL_BY_CDARTIKEL__CDGRBREKENING_DESC
  ARTIKEL_BY_CDARTIKEL__PRIJSPER_ASC
  ARTIKEL_BY_CDARTIKEL__PRIJSPER_DESC
  ARTIKEL_BY_CDARTIKEL__AANTALDEC_ASC
  ARTIKEL_BY_CDARTIKEL__AANTALDEC_DESC
  ARTIKEL_BY_CDARTIKEL__PRIJSINCL_ASC
  ARTIKEL_BY_CDARTIKEL__PRIJSINCL_DESC
  ARTIKEL_BY_CDARTIKEL__PRIJSEXCL_ASC
  ARTIKEL_BY_CDARTIKEL__PRIJSEXCL_DESC
  ARTIKEL_BY_CDARTIKEL__VERREKENPRIJS_ASC
  ARTIKEL_BY_CDARTIKEL__VERREKENPRIJS_DESC
  ARTIKEL_BY_CDARTIKEL__VOORRAAD_ASC
  ARTIKEL_BY_CDARTIKEL__VOORRAAD_DESC
  ARTIKEL_BY_CDARTIKEL__MINVOORRAAD_ASC
  ARTIKEL_BY_CDARTIKEL__MINVOORRAAD_DESC
  ARTIKEL_BY_CDARTIKEL__MAXVOORRAAD_ASC
  ARTIKEL_BY_CDARTIKEL__MAXVOORRAAD_DESC
  ARTIKEL_BY_CDARTIKEL__EENHEID_ASC
  ARTIKEL_BY_CDARTIKEL__EENHEID_DESC
  ARTIKEL_BY_CDARTIKEL__BTWCODE_ASC
  ARTIKEL_BY_CDARTIKEL__BTWCODE_DESC
  ARTIKEL_BY_CDARTIKEL__CDARTKORTGRP_ASC
  ARTIKEL_BY_CDARTIKEL__CDARTKORTGRP_DESC
  ARTIKEL_BY_CDARTIKEL__CDGOEDCODE_ASC
  ARTIKEL_BY_CDARTIKEL__CDGOEDCODE_DESC
  ARTIKEL_BY_CDARTIKEL__GEWICHT_ASC
  ARTIKEL_BY_CDARTIKEL__GEWICHT_DESC
  ARTIKEL_BY_CDARTIKEL__AANVEENH_ASC
  ARTIKEL_BY_CDARTIKEL__AANVEENH_DESC
  ARTIKEL_BY_CDARTIKEL__INKVOLGNR_ASC
  ARTIKEL_BY_CDARTIKEL__INKVOLGNR_DESC
  ARTIKEL_BY_CDARTIKEL__UITLOOP_ASC
  ARTIKEL_BY_CDARTIKEL__UITLOOP_DESC
  ARTIKEL_BY_CDARTIKEL__AANMAAKDATUM_ASC
  ARTIKEL_BY_CDARTIKEL__AANMAAKDATUM_DESC
  ARTIKEL_BY_CDARTIKEL__OPWEB_ASC
  ARTIKEL_BY_CDARTIKEL__OPWEB_DESC
  ARTIKEL_BY_CDARTIKEL__MAGBON_ASC
  ARTIKEL_BY_CDARTIKEL__MAGBON_DESC
  ARTIKEL_BY_CDARTIKEL__PAKBON_ASC
  ARTIKEL_BY_CDARTIKEL__PAKBON_DESC
  ARTIKEL_BY_CDARTIKEL__FACTUUR_ASC
  ARTIKEL_BY_CDARTIKEL__FACTUUR_DESC
  ARTIKEL_BY_CDARTIKEL__CDGRBREKKORT_ASC
  ARTIKEL_BY_CDARTIKEL__CDGRBREKKORT_DESC
  ARTIKEL_BY_CDARTIKEL__DATUMLTSTEWIJZ_ASC
  ARTIKEL_BY_CDARTIKEL__DATUMLTSTEWIJZ_DESC
  ARTIKEL_BY_CDARTIKEL__CDGRBREKDEKKING_ASC
  ARTIKEL_BY_CDARTIKEL__CDGRBREKDEKKING_DESC
  ARTIKEL_BY_CDARTIKEL__PROJ_OPSLAG_ASC
  ARTIKEL_BY_CDARTIKEL__PROJ_OPSLAG_DESC
  ARTIKEL_BY_CDARTIKEL__PROJ_MUTSOORT_ASC
  ARTIKEL_BY_CDARTIKEL__PROJ_MUTSOORT_DESC
  ARTIKEL_BY_CDARTIKEL__EANNUMMER_ASC
  ARTIKEL_BY_CDARTIKEL__EANNUMMER_DESC
  ARTIKEL_BY_CDARTIKEL__AFDRUK_SAM_OP_OFFERTE_ASC
  ARTIKEL_BY_CDARTIKEL__AFDRUK_SAM_OP_OFFERTE_DESC
  ARTIKEL_BY_CDARTIKEL__SAM_VERSIE_ASC
  ARTIKEL_BY_CDARTIKEL__SAM_VERSIE_DESC
  ARTIKEL_BY_CDARTIKEL__ASSEMBLAGE_ARTIKEL_ASC
  ARTIKEL_BY_CDARTIKEL__ASSEMBLAGE_ARTIKEL_DESC
  ARTIKEL_BY_CDARTIKEL__MARGE_PERC_ASC
  ARTIKEL_BY_CDARTIKEL__MARGE_PERC_DESC
  ARTIKEL_BY_CDARTIKEL__GUID_ITEM_ASC
  ARTIKEL_BY_CDARTIKEL__GUID_ITEM_DESC
  ARTIKEL_BY_CDARTIKEL__SYS_CREATE_ASC
  ARTIKEL_BY_CDARTIKEL__SYS_CREATE_DESC
  ARTIKEL_BY_CDARTIKEL__SYS_UPDATE_ASC
  ARTIKEL_BY_CDARTIKEL__SYS_UPDATE_DESC
  ARTIKEL_BY_CDARTIKEL__VVBESTAND_ASC
  ARTIKEL_BY_CDARTIKEL__VVBESTAND_DESC
  ARTIKEL_BY_CDARTIKEL__VVGROEP_ASC
  ARTIKEL_BY_CDARTIKEL__VVGROEP_DESC
  ARTIKEL_BY_CDARTIKEL__VVVRIJVELDA_ASC
  ARTIKEL_BY_CDARTIKEL__VVVRIJVELDA_DESC
  ARTIKEL_BY_CDARTIKEL__VVVRIJVELDB_ASC
  ARTIKEL_BY_CDARTIKEL__VVVRIJVELDB_DESC
  ARTIKEL_BY_CDARTIKEL__CDLAND_OORSPR_ASC
  ARTIKEL_BY_CDARTIKEL__CDLAND_OORSPR_DESC
  ASSEMBLIES_BY_ASSEMBLY_TYPE_ID__COUNT_ASC
  ASSEMBLIES_BY_ASSEMBLY_TYPE_ID__COUNT_DESC
  ASSEMBLY_TYPE_PARTS_BY_ASSEMBLY_TYPE_ID__COUNT_ASC
  ASSEMBLY_TYPE_PARTS_BY_ASSEMBLY_TYPE_ID__COUNT_DESC
}

"""
A condition to be used against `AssemblyType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AssemblyTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime
}

"""Methods to use when ordering `Assembly`."""
enum AssembliesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CODE_ASC
  CODE_DESC
  START_SERIAL_NUMBER_ASC
  START_SERIAL_NUMBER_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  ASSEMBLY_TYPE_ID_ASC
  ASSEMBLY_TYPE_ID_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  COMPLETED_ASC
  COMPLETED_DESC
  MV_DOC_ASC
  MV_DOC_DESC
  CHECKED_ASC
  CHECKED_DESC
  PO_ASC
  PO_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__ID_ASC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__ID_DESC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__NAME_ASC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__NAME_DESC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__CDARTIKEL_ASC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__CDARTIKEL_DESC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__OWNER_ID_ASC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__OWNER_ID_DESC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__CREATED_ASC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__CREATED_DESC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__MODIFIED_ASC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `Assembly` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AssemblyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `startSerialNumber` field."""
  startSerialNumber: String

  """Checks for equality with the object’s `quantity` field."""
  quantity: Int

  """Checks for equality with the object’s `assemblyTypeId` field."""
  assemblyTypeId: Int

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `completed` field."""
  completed: Boolean

  """Checks for equality with the object’s `mvDoc` field."""
  mvDoc: String

  """Checks for equality with the object’s `checked` field."""
  checked: Boolean

  """Checks for equality with the object’s `po` field."""
  po: Boolean
}

"""A connection to a list of `AssemblyTypePart` values."""
type AssemblyTypePartsConnection {
  """A list of `AssemblyTypePart` objects."""
  nodes: [AssemblyTypePart!]!

  """
  A list of edges which contains the `AssemblyTypePart` and cursor to aid in pagination.
  """
  edges: [AssemblyTypePartsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AssemblyTypePart` you could get from the connection.
  """
  totalCount: Int!
}

type AssemblyTypePart implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  assemblyTypeId: Int!
  cdartikel: String
  quantity: Float
  ownerId: Int!
  created: Datetime
  modified: Datetime
  prijsper: BigFloat
  omschr: String
  zoeknaam: String
  bestcode: String
  locatie: String
  verrekenprijs: BigFloat

  """
  Reads a single `AssemblyType` that is related to this `AssemblyTypePart`.
  """
  assemblyTypeByAssemblyTypeId: AssemblyType

  """Reads a single `User` that is related to this `AssemblyTypePart`."""
  userByOwnerId: User
}

"""A `AssemblyTypePart` edge in the connection."""
type AssemblyTypePartsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AssemblyTypePart` at the end of the edge."""
  node: AssemblyTypePart!
}

"""Methods to use when ordering `AssemblyTypePart`."""
enum AssemblyTypePartsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ASSEMBLY_TYPE_ID_ASC
  ASSEMBLY_TYPE_ID_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  PRIJSPER_ASC
  PRIJSPER_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  BESTCODE_ASC
  BESTCODE_DESC
  LOCATIE_ASC
  LOCATIE_DESC
  VERREKENPRIJS_ASC
  VERREKENPRIJS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__ID_ASC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__ID_DESC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__NAME_ASC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__NAME_DESC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__CDARTIKEL_ASC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__CDARTIKEL_DESC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__OWNER_ID_ASC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__OWNER_ID_DESC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__CREATED_ASC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__CREATED_DESC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__MODIFIED_ASC
  ASSEMBLY_TYPE_BY_ASSEMBLY_TYPE_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `AssemblyTypePart` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AssemblyTypePartCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `assemblyTypeId` field."""
  assemblyTypeId: Int

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `quantity` field."""
  quantity: Float

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `prijsper` field."""
  prijsper: BigFloat

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `bestcode` field."""
  bestcode: String

  """Checks for equality with the object’s `locatie` field."""
  locatie: String

  """Checks for equality with the object’s `verrekenprijs` field."""
  verrekenprijs: BigFloat
}

"""A `Assembly` edge in the connection."""
type AssembliesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Assembly` at the end of the edge."""
  node: Assembly!
}

"""A connection to a list of `AssemblyPart` values."""
type AssemblyPartsConnection {
  """A list of `AssemblyPart` objects."""
  nodes: [AssemblyPart!]!

  """
  A list of edges which contains the `AssemblyPart` and cursor to aid in pagination.
  """
  edges: [AssemblyPartsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AssemblyPart` you could get from the connection."""
  totalCount: Int!
}

type AssemblyPart implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  assemblyId: Int!
  cdartikel: String
  used1: String
  used2: String
  short: String
  po: String
  quantity: Float
  ownerId: Int!
  created: Datetime
  modified: Datetime
  ext: String
  xxx: String
  usedQuantity: String
  deliveryEstimate: String
  prijsper: BigFloat
  omschr: String
  zoeknaam: String
  bestcode: String
  locatie: String
  verrekenprijs: BigFloat

  """Reads a single `User` that is related to this `AssemblyPart`."""
  userByOwnerId: User
}

"""A `AssemblyPart` edge in the connection."""
type AssemblyPartsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AssemblyPart` at the end of the edge."""
  node: AssemblyPart!
}

"""Methods to use when ordering `AssemblyPart`."""
enum AssemblyPartsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ASSEMBLY_ID_ASC
  ASSEMBLY_ID_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  USED1_ASC
  USED1_DESC
  USED2_ASC
  USED2_DESC
  SHORT_ASC
  SHORT_DESC
  PO_ASC
  PO_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  EXT_ASC
  EXT_DESC
  XXX_ASC
  XXX_DESC
  USED_QUANTITY_ASC
  USED_QUANTITY_DESC
  DELIVERY_ESTIMATE_ASC
  DELIVERY_ESTIMATE_DESC
  PRIJSPER_ASC
  PRIJSPER_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  BESTCODE_ASC
  BESTCODE_DESC
  LOCATIE_ASC
  LOCATIE_DESC
  VERREKENPRIJS_ASC
  VERREKENPRIJS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `AssemblyPart` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AssemblyPartCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `assemblyId` field."""
  assemblyId: Int

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `used1` field."""
  used1: String

  """Checks for equality with the object’s `used2` field."""
  used2: String

  """Checks for equality with the object’s `short` field."""
  short: String

  """Checks for equality with the object’s `po` field."""
  po: String

  """Checks for equality with the object’s `quantity` field."""
  quantity: Float

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ext` field."""
  ext: String

  """Checks for equality with the object’s `xxx` field."""
  xxx: String

  """Checks for equality with the object’s `usedQuantity` field."""
  usedQuantity: String

  """Checks for equality with the object’s `deliveryEstimate` field."""
  deliveryEstimate: String

  """Checks for equality with the object’s `prijsper` field."""
  prijsper: BigFloat

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `bestcode` field."""
  bestcode: String

  """Checks for equality with the object’s `locatie` field."""
  locatie: String

  """Checks for equality with the object’s `verrekenprijs` field."""
  verrekenprijs: BigFloat
}

"""A connection to a list of `StockSupplier` values."""
type StockSuppliersConnection {
  """A list of `StockSupplier` objects."""
  nodes: [StockSupplier!]!

  """
  A list of edges which contains the `StockSupplier` and cursor to aid in pagination.
  """
  edges: [StockSuppliersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `StockSupplier` you could get from the connection."""
  totalCount: Int!
}

type StockSupplier implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  cdcrediteur: String!
  ownerId: Int!
  created: Datetime
  modified: Datetime
  name: String
  shipmentDays: Int!
  shipmentDay: Int

  """Reads a single `User` that is related to this `StockSupplier`."""
  userByOwnerId: User
}

"""A `StockSupplier` edge in the connection."""
type StockSuppliersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StockSupplier` at the end of the edge."""
  node: StockSupplier!
}

"""Methods to use when ordering `StockSupplier`."""
enum StockSuppliersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CDCREDITEUR_ASC
  CDCREDITEUR_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  NAME_ASC
  NAME_DESC
  SHIPMENT_DAYS_ASC
  SHIPMENT_DAYS_DESC
  SHIPMENT_DAY_ASC
  SHIPMENT_DAY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `StockSupplier` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input StockSupplierCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `cdcrediteur` field."""
  cdcrediteur: String

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `shipmentDays` field."""
  shipmentDays: Int

  """Checks for equality with the object’s `shipmentDay` field."""
  shipmentDay: Int
}

"""A connection to a list of `CatalogGroup` values."""
type CatalogGroupsConnection {
  """A list of `CatalogGroup` objects."""
  nodes: [CatalogGroup!]!

  """
  A list of edges which contains the `CatalogGroup` and cursor to aid in pagination.
  """
  edges: [CatalogGroupsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CatalogGroup` you could get from the connection."""
  totalCount: Int!
}

type CatalogGroup implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int!
  sortCode: String

  """Reads a single `User` that is related to this `CatalogGroup`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `CatalogSubGroup`."""
  catalogSubGroupsByCatalogGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CatalogSubGroup`."""
    orderBy: [CatalogSubGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CatalogSubGroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CatalogSubGroupFilter
  ): CatalogSubGroupsConnection!
}

"""A connection to a list of `CatalogSubGroup` values."""
type CatalogSubGroupsConnection {
  """A list of `CatalogSubGroup` objects."""
  nodes: [CatalogSubGroup!]!

  """
  A list of edges which contains the `CatalogSubGroup` and cursor to aid in pagination.
  """
  edges: [CatalogSubGroupsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CatalogSubGroup` you could get from the connection.
  """
  totalCount: Int!
}

type CatalogSubGroup implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int!
  catalogGroupId: Int!
  sortCode: String

  """Reads a single `User` that is related to this `CatalogSubGroup`."""
  userByOwnerId: User

  """
  Reads a single `CatalogGroup` that is related to this `CatalogSubGroup`.
  """
  catalogGroupByCatalogGroupId: CatalogGroup

  """Reads and enables pagination through a set of `CatalogItem`."""
  catalogItemsByCatalogSubGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CatalogItem`."""
    orderBy: [CatalogItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CatalogItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CatalogItemFilter
  ): CatalogItemsConnection!
}

"""A connection to a list of `CatalogItem` values."""
type CatalogItemsConnection {
  """A list of `CatalogItem` objects."""
  nodes: [CatalogItem!]!

  """
  A list of edges which contains the `CatalogItem` and cursor to aid in pagination.
  """
  edges: [CatalogItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CatalogItem` you could get from the connection."""
  totalCount: Int!
}

type CatalogItem implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  catalogSubGroupId: Int!
  cdartikel: String!
  remarks: String
  created: Datetime
  modified: Datetime
  ownerId: Int!
  defaultItem: Boolean
  sortCode: String

  """
  Reads a single `CatalogSubGroup` that is related to this `CatalogItem`.
  """
  catalogSubGroupByCatalogSubGroupId: CatalogSubGroup

  """Reads a single `User` that is related to this `CatalogItem`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `CatalogItemFile`."""
  catalogItemFilesByCatalogItemId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CatalogItemFile`."""
    orderBy: [CatalogItemFilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CatalogItemFileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CatalogItemFileFilter
  ): CatalogItemFilesConnection!

  """Reads and enables pagination through a set of `CatalogItemRelation`."""
  catalogItemRelationsByParentCatalogItemId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CatalogItemRelation`."""
    orderBy: [CatalogItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CatalogItemRelationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CatalogItemRelationFilter
  ): CatalogItemRelationsConnection!

  """Reads and enables pagination through a set of `CatalogItemRelation`."""
  catalogItemRelationsByChildCatalogItemId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CatalogItemRelation`."""
    orderBy: [CatalogItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CatalogItemRelationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CatalogItemRelationFilter
  ): CatalogItemRelationsConnection!
}

"""A connection to a list of `CatalogItemFile` values."""
type CatalogItemFilesConnection {
  """A list of `CatalogItemFile` objects."""
  nodes: [CatalogItemFile!]!

  """
  A list of edges which contains the `CatalogItemFile` and cursor to aid in pagination.
  """
  edges: [CatalogItemFilesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CatalogItemFile` you could get from the connection.
  """
  totalCount: Int!
}

type CatalogItemFile implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  filename: String!
  created: Datetime
  modified: Datetime
  ownerId: Int
  catalogItemId: Int!
  type: Int!

  """Reads a single `User` that is related to this `CatalogItemFile`."""
  userByOwnerId: User

  """
  Reads a single `CatalogItem` that is related to this `CatalogItemFile`.
  """
  catalogItemByCatalogItemId: CatalogItem
}

"""A `CatalogItemFile` edge in the connection."""
type CatalogItemFilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CatalogItemFile` at the end of the edge."""
  node: CatalogItemFile!
}

"""Methods to use when ordering `CatalogItemFile`."""
enum CatalogItemFilesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FILENAME_ASC
  FILENAME_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CATALOG_ITEM_ID_ASC
  CATALOG_ITEM_ID_DESC
  TYPE_ASC
  TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  CATALOG_ITEM_BY_CATALOG_ITEM_ID__ID_ASC
  CATALOG_ITEM_BY_CATALOG_ITEM_ID__ID_DESC
  CATALOG_ITEM_BY_CATALOG_ITEM_ID__CATALOG_SUB_GROUP_ID_ASC
  CATALOG_ITEM_BY_CATALOG_ITEM_ID__CATALOG_SUB_GROUP_ID_DESC
  CATALOG_ITEM_BY_CATALOG_ITEM_ID__CDARTIKEL_ASC
  CATALOG_ITEM_BY_CATALOG_ITEM_ID__CDARTIKEL_DESC
  CATALOG_ITEM_BY_CATALOG_ITEM_ID__REMARKS_ASC
  CATALOG_ITEM_BY_CATALOG_ITEM_ID__REMARKS_DESC
  CATALOG_ITEM_BY_CATALOG_ITEM_ID__CREATED_ASC
  CATALOG_ITEM_BY_CATALOG_ITEM_ID__CREATED_DESC
  CATALOG_ITEM_BY_CATALOG_ITEM_ID__MODIFIED_ASC
  CATALOG_ITEM_BY_CATALOG_ITEM_ID__MODIFIED_DESC
  CATALOG_ITEM_BY_CATALOG_ITEM_ID__OWNER_ID_ASC
  CATALOG_ITEM_BY_CATALOG_ITEM_ID__OWNER_ID_DESC
  CATALOG_ITEM_BY_CATALOG_ITEM_ID__DEFAULT_ITEM_ASC
  CATALOG_ITEM_BY_CATALOG_ITEM_ID__DEFAULT_ITEM_DESC
  CATALOG_ITEM_BY_CATALOG_ITEM_ID__SORT_CODE_ASC
  CATALOG_ITEM_BY_CATALOG_ITEM_ID__SORT_CODE_DESC
}

"""
A condition to be used against `CatalogItemFile` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CatalogItemFileCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `filename` field."""
  filename: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `catalogItemId` field."""
  catalogItemId: Int

  """Checks for equality with the object’s `type` field."""
  type: Int
}

"""A connection to a list of `CatalogItemRelation` values."""
type CatalogItemRelationsConnection {
  """A list of `CatalogItemRelation` objects."""
  nodes: [CatalogItemRelation!]!

  """
  A list of edges which contains the `CatalogItemRelation` and cursor to aid in pagination.
  """
  edges: [CatalogItemRelationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CatalogItemRelation` you could get from the connection.
  """
  totalCount: Int!
}

type CatalogItemRelation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  parentCatalogItemId: Int!
  childCatalogItemId: Int!

  """
  Reads a single `CatalogItem` that is related to this `CatalogItemRelation`.
  """
  catalogItemByParentCatalogItemId: CatalogItem

  """
  Reads a single `CatalogItem` that is related to this `CatalogItemRelation`.
  """
  catalogItemByChildCatalogItemId: CatalogItem
}

"""A `CatalogItemRelation` edge in the connection."""
type CatalogItemRelationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CatalogItemRelation` at the end of the edge."""
  node: CatalogItemRelation!
}

"""Methods to use when ordering `CatalogItemRelation`."""
enum CatalogItemRelationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PARENT_CATALOG_ITEM_ID_ASC
  PARENT_CATALOG_ITEM_ID_DESC
  CHILD_CATALOG_ITEM_ID_ASC
  CHILD_CATALOG_ITEM_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  CATALOG_ITEM_BY_PARENT_CATALOG_ITEM_ID__ID_ASC
  CATALOG_ITEM_BY_PARENT_CATALOG_ITEM_ID__ID_DESC
  CATALOG_ITEM_BY_PARENT_CATALOG_ITEM_ID__CATALOG_SUB_GROUP_ID_ASC
  CATALOG_ITEM_BY_PARENT_CATALOG_ITEM_ID__CATALOG_SUB_GROUP_ID_DESC
  CATALOG_ITEM_BY_PARENT_CATALOG_ITEM_ID__CDARTIKEL_ASC
  CATALOG_ITEM_BY_PARENT_CATALOG_ITEM_ID__CDARTIKEL_DESC
  CATALOG_ITEM_BY_PARENT_CATALOG_ITEM_ID__REMARKS_ASC
  CATALOG_ITEM_BY_PARENT_CATALOG_ITEM_ID__REMARKS_DESC
  CATALOG_ITEM_BY_PARENT_CATALOG_ITEM_ID__CREATED_ASC
  CATALOG_ITEM_BY_PARENT_CATALOG_ITEM_ID__CREATED_DESC
  CATALOG_ITEM_BY_PARENT_CATALOG_ITEM_ID__MODIFIED_ASC
  CATALOG_ITEM_BY_PARENT_CATALOG_ITEM_ID__MODIFIED_DESC
  CATALOG_ITEM_BY_PARENT_CATALOG_ITEM_ID__OWNER_ID_ASC
  CATALOG_ITEM_BY_PARENT_CATALOG_ITEM_ID__OWNER_ID_DESC
  CATALOG_ITEM_BY_PARENT_CATALOG_ITEM_ID__DEFAULT_ITEM_ASC
  CATALOG_ITEM_BY_PARENT_CATALOG_ITEM_ID__DEFAULT_ITEM_DESC
  CATALOG_ITEM_BY_PARENT_CATALOG_ITEM_ID__SORT_CODE_ASC
  CATALOG_ITEM_BY_PARENT_CATALOG_ITEM_ID__SORT_CODE_DESC
  CATALOG_ITEM_BY_CHILD_CATALOG_ITEM_ID__ID_ASC
  CATALOG_ITEM_BY_CHILD_CATALOG_ITEM_ID__ID_DESC
  CATALOG_ITEM_BY_CHILD_CATALOG_ITEM_ID__CATALOG_SUB_GROUP_ID_ASC
  CATALOG_ITEM_BY_CHILD_CATALOG_ITEM_ID__CATALOG_SUB_GROUP_ID_DESC
  CATALOG_ITEM_BY_CHILD_CATALOG_ITEM_ID__CDARTIKEL_ASC
  CATALOG_ITEM_BY_CHILD_CATALOG_ITEM_ID__CDARTIKEL_DESC
  CATALOG_ITEM_BY_CHILD_CATALOG_ITEM_ID__REMARKS_ASC
  CATALOG_ITEM_BY_CHILD_CATALOG_ITEM_ID__REMARKS_DESC
  CATALOG_ITEM_BY_CHILD_CATALOG_ITEM_ID__CREATED_ASC
  CATALOG_ITEM_BY_CHILD_CATALOG_ITEM_ID__CREATED_DESC
  CATALOG_ITEM_BY_CHILD_CATALOG_ITEM_ID__MODIFIED_ASC
  CATALOG_ITEM_BY_CHILD_CATALOG_ITEM_ID__MODIFIED_DESC
  CATALOG_ITEM_BY_CHILD_CATALOG_ITEM_ID__OWNER_ID_ASC
  CATALOG_ITEM_BY_CHILD_CATALOG_ITEM_ID__OWNER_ID_DESC
  CATALOG_ITEM_BY_CHILD_CATALOG_ITEM_ID__DEFAULT_ITEM_ASC
  CATALOG_ITEM_BY_CHILD_CATALOG_ITEM_ID__DEFAULT_ITEM_DESC
  CATALOG_ITEM_BY_CHILD_CATALOG_ITEM_ID__SORT_CODE_ASC
  CATALOG_ITEM_BY_CHILD_CATALOG_ITEM_ID__SORT_CODE_DESC
}

"""
A condition to be used against `CatalogItemRelation` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CatalogItemRelationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `parentCatalogItemId` field."""
  parentCatalogItemId: Int

  """Checks for equality with the object’s `childCatalogItemId` field."""
  childCatalogItemId: Int
}

"""A `CatalogItem` edge in the connection."""
type CatalogItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CatalogItem` at the end of the edge."""
  node: CatalogItem!
}

"""Methods to use when ordering `CatalogItem`."""
enum CatalogItemsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CATALOG_SUB_GROUP_ID_ASC
  CATALOG_SUB_GROUP_ID_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  REMARKS_ASC
  REMARKS_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  DEFAULT_ITEM_ASC
  DEFAULT_ITEM_DESC
  SORT_CODE_ASC
  SORT_CODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  CATALOG_SUB_GROUP_BY_CATALOG_SUB_GROUP_ID__ID_ASC
  CATALOG_SUB_GROUP_BY_CATALOG_SUB_GROUP_ID__ID_DESC
  CATALOG_SUB_GROUP_BY_CATALOG_SUB_GROUP_ID__NAME_ASC
  CATALOG_SUB_GROUP_BY_CATALOG_SUB_GROUP_ID__NAME_DESC
  CATALOG_SUB_GROUP_BY_CATALOG_SUB_GROUP_ID__CREATED_ASC
  CATALOG_SUB_GROUP_BY_CATALOG_SUB_GROUP_ID__CREATED_DESC
  CATALOG_SUB_GROUP_BY_CATALOG_SUB_GROUP_ID__MODIFIED_ASC
  CATALOG_SUB_GROUP_BY_CATALOG_SUB_GROUP_ID__MODIFIED_DESC
  CATALOG_SUB_GROUP_BY_CATALOG_SUB_GROUP_ID__OWNER_ID_ASC
  CATALOG_SUB_GROUP_BY_CATALOG_SUB_GROUP_ID__OWNER_ID_DESC
  CATALOG_SUB_GROUP_BY_CATALOG_SUB_GROUP_ID__CATALOG_GROUP_ID_ASC
  CATALOG_SUB_GROUP_BY_CATALOG_SUB_GROUP_ID__CATALOG_GROUP_ID_DESC
  CATALOG_SUB_GROUP_BY_CATALOG_SUB_GROUP_ID__SORT_CODE_ASC
  CATALOG_SUB_GROUP_BY_CATALOG_SUB_GROUP_ID__SORT_CODE_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  CATALOG_ITEM_FILES_BY_CATALOG_ITEM_ID__COUNT_ASC
  CATALOG_ITEM_FILES_BY_CATALOG_ITEM_ID__COUNT_DESC
  CATALOG_ITEM_RELATIONS_BY_PARENT_CATALOG_ITEM_ID__COUNT_ASC
  CATALOG_ITEM_RELATIONS_BY_PARENT_CATALOG_ITEM_ID__COUNT_DESC
  CATALOG_ITEM_RELATIONS_BY_CHILD_CATALOG_ITEM_ID__COUNT_ASC
  CATALOG_ITEM_RELATIONS_BY_CHILD_CATALOG_ITEM_ID__COUNT_DESC
}

"""
A condition to be used against `CatalogItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CatalogItemCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `catalogSubGroupId` field."""
  catalogSubGroupId: Int

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `remarks` field."""
  remarks: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `defaultItem` field."""
  defaultItem: Boolean

  """Checks for equality with the object’s `sortCode` field."""
  sortCode: String
}

"""A `CatalogSubGroup` edge in the connection."""
type CatalogSubGroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CatalogSubGroup` at the end of the edge."""
  node: CatalogSubGroup!
}

"""Methods to use when ordering `CatalogSubGroup`."""
enum CatalogSubGroupsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CATALOG_GROUP_ID_ASC
  CATALOG_GROUP_ID_DESC
  SORT_CODE_ASC
  SORT_CODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  CATALOG_GROUP_BY_CATALOG_GROUP_ID__ID_ASC
  CATALOG_GROUP_BY_CATALOG_GROUP_ID__ID_DESC
  CATALOG_GROUP_BY_CATALOG_GROUP_ID__NAME_ASC
  CATALOG_GROUP_BY_CATALOG_GROUP_ID__NAME_DESC
  CATALOG_GROUP_BY_CATALOG_GROUP_ID__CREATED_ASC
  CATALOG_GROUP_BY_CATALOG_GROUP_ID__CREATED_DESC
  CATALOG_GROUP_BY_CATALOG_GROUP_ID__MODIFIED_ASC
  CATALOG_GROUP_BY_CATALOG_GROUP_ID__MODIFIED_DESC
  CATALOG_GROUP_BY_CATALOG_GROUP_ID__OWNER_ID_ASC
  CATALOG_GROUP_BY_CATALOG_GROUP_ID__OWNER_ID_DESC
  CATALOG_GROUP_BY_CATALOG_GROUP_ID__SORT_CODE_ASC
  CATALOG_GROUP_BY_CATALOG_GROUP_ID__SORT_CODE_DESC
  CATALOG_ITEMS_BY_CATALOG_SUB_GROUP_ID__COUNT_ASC
  CATALOG_ITEMS_BY_CATALOG_SUB_GROUP_ID__COUNT_DESC
}

"""
A condition to be used against `CatalogSubGroup` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CatalogSubGroupCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `catalogGroupId` field."""
  catalogGroupId: Int

  """Checks for equality with the object’s `sortCode` field."""
  sortCode: String
}

"""A `CatalogGroup` edge in the connection."""
type CatalogGroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CatalogGroup` at the end of the edge."""
  node: CatalogGroup!
}

"""Methods to use when ordering `CatalogGroup`."""
enum CatalogGroupsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  SORT_CODE_ASC
  SORT_CODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  CATALOG_SUB_GROUPS_BY_CATALOG_GROUP_ID__COUNT_ASC
  CATALOG_SUB_GROUPS_BY_CATALOG_GROUP_ID__COUNT_DESC
}

"""
A condition to be used against `CatalogGroup` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CatalogGroupCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `sortCode` field."""
  sortCode: String
}

"""A connection to a list of `ChemicalCompound` values."""
type ChemicalCompoundsConnection {
  """A list of `ChemicalCompound` objects."""
  nodes: [ChemicalCompound!]!

  """
  A list of edges which contains the `ChemicalCompound` and cursor to aid in pagination.
  """
  edges: [ChemicalCompoundsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ChemicalCompound` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ChemicalCompound` edge in the connection."""
type ChemicalCompoundsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChemicalCompound` at the end of the edge."""
  node: ChemicalCompound!
}

"""Methods to use when ordering `ChemicalCompound`."""
enum ChemicalCompoundsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  OTHER_NAME_ASC
  OTHER_NAME_DESC
  FORMULA_ASC
  FORMULA_DESC
  CAS_ASC
  CAS_DESC
  ICSC_ASC
  ICSC_DESC
  MOLAR_MASS_ASC
  MOLAR_MASS_DESC
  DENSITY_ASC
  DENSITY_DESC
  URL_ASC
  URL_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  GASES_BY_CHEMICAL_COMPOUND_ID__COUNT_ASC
  GASES_BY_CHEMICAL_COMPOUND_ID__COUNT_DESC
}

"""
A condition to be used against `ChemicalCompound` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ChemicalCompoundCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `otherName` field."""
  otherName: String

  """Checks for equality with the object’s `formula` field."""
  formula: String

  """Checks for equality with the object’s `cas` field."""
  cas: String

  """Checks for equality with the object’s `icsc` field."""
  icsc: String

  """Checks for equality with the object’s `molarMass` field."""
  molarMass: Float

  """Checks for equality with the object’s `density` field."""
  density: Float

  """Checks for equality with the object’s `url` field."""
  url: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int
}

"""A connection to a list of `Electrolyte` values."""
type ElectrolytesConnection {
  """A list of `Electrolyte` objects."""
  nodes: [Electrolyte!]!

  """
  A list of edges which contains the `Electrolyte` and cursor to aid in pagination.
  """
  edges: [ElectrolytesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Electrolyte` you could get from the connection."""
  totalCount: Int!
}

"""A `Electrolyte` edge in the connection."""
type ElectrolytesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Electrolyte` at the end of the edge."""
  node: Electrolyte!
}

"""Methods to use when ordering `Electrolyte`."""
enum ElectrolytesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  REPLACEMENT_INTERVAL_MONTHS_ASC
  REPLACEMENT_INTERVAL_MONTHS_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  VOLUME_ASC
  VOLUME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  SENSOR_TYPES_BY_ELECTROLYTE_ID__COUNT_ASC
  SENSOR_TYPES_BY_ELECTROLYTE_ID__COUNT_DESC
}

"""
A condition to be used against `Electrolyte` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ElectrolyteCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """
  Checks for equality with the object’s `replacementIntervalMonths` field.
  """
  replacementIntervalMonths: Int

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `volume` field."""
  volume: Int
}

"""A connection to a list of `Filter` values."""
type FiltersConnection {
  """A list of `Filter` objects."""
  nodes: [Filter!]!

  """
  A list of edges which contains the `Filter` and cursor to aid in pagination.
  """
  edges: [FiltersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Filter` you could get from the connection."""
  totalCount: Int!
}

"""A `Filter` edge in the connection."""
type FiltersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Filter` at the end of the edge."""
  node: Filter!
}

"""Methods to use when ordering `Filter`."""
enum FiltersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  REPLACEMENT_INTERVAL_MONTHS_ASC
  REPLACEMENT_INTERVAL_MONTHS_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  CONSUMABLE_ASC
  CONSUMABLE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  DETECTOR_SENSORS_BY_FILTER_ID__COUNT_ASC
  DETECTOR_SENSORS_BY_FILTER_ID__COUNT_DESC
  SENSOR_TYPES_BY_FILTER_ID__COUNT_ASC
  SENSOR_TYPES_BY_FILTER_ID__COUNT_DESC
  MAINTENANCE_VISIT_LINES_BY_FILTER_ID__COUNT_ASC
  MAINTENANCE_VISIT_LINES_BY_FILTER_ID__COUNT_DESC
}

"""
A condition to be used against `Filter` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FilterCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """
  Checks for equality with the object’s `replacementIntervalMonths` field.
  """
  replacementIntervalMonths: Int

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `consumable` field."""
  consumable: Boolean
}

"""A connection to a list of `Membrane` values."""
type MembranesConnection {
  """A list of `Membrane` objects."""
  nodes: [Membrane!]!

  """
  A list of edges which contains the `Membrane` and cursor to aid in pagination.
  """
  edges: [MembranesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Membrane` you could get from the connection."""
  totalCount: Int!
}

"""A `Membrane` edge in the connection."""
type MembranesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Membrane` at the end of the edge."""
  node: Membrane!
}

"""Methods to use when ordering `Membrane`."""
enum MembranesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  REPLACEMENT_INTERVAL_MONTHS_ASC
  REPLACEMENT_INTERVAL_MONTHS_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  SENSOR_TYPES_BY_MEMBRANE_ID__COUNT_ASC
  SENSOR_TYPES_BY_MEMBRANE_ID__COUNT_DESC
}

"""
A condition to be used against `Membrane` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MembraneCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """
  Checks for equality with the object’s `replacementIntervalMonths` field.
  """
  replacementIntervalMonths: Int

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `quantity` field."""
  quantity: Int
}

"""A connection to a list of `ORing` values."""
type ORingsConnection {
  """A list of `ORing` objects."""
  nodes: [ORing!]!

  """
  A list of edges which contains the `ORing` and cursor to aid in pagination.
  """
  edges: [ORingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ORing` you could get from the connection."""
  totalCount: Int!
}

"""A `ORing` edge in the connection."""
type ORingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ORing` at the end of the edge."""
  node: ORing!
}

"""Methods to use when ordering `ORing`."""
enum ORingsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  REPLACEMENT_INTERVAL_MONTHS_ASC
  REPLACEMENT_INTERVAL_MONTHS_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  SENSOR_TYPES_BY_O_RING_ID__COUNT_ASC
  SENSOR_TYPES_BY_O_RING_ID__COUNT_DESC
}

"""
A condition to be used against `ORing` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ORingCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """
  Checks for equality with the object’s `replacementIntervalMonths` field.
  """
  replacementIntervalMonths: Int

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `quantity` field."""
  quantity: Int
}

"""A connection to a list of `Pyrolyser` values."""
type PyrolysersConnection {
  """A list of `Pyrolyser` objects."""
  nodes: [Pyrolyser!]!

  """
  A list of edges which contains the `Pyrolyser` and cursor to aid in pagination.
  """
  edges: [PyrolysersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Pyrolyser` you could get from the connection."""
  totalCount: Int!
}

"""A `Pyrolyser` edge in the connection."""
type PyrolysersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Pyrolyser` at the end of the edge."""
  node: Pyrolyser!
}

"""Methods to use when ordering `Pyrolyser`."""
enum PyrolysersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  REPLACEMENT_INTERVAL_MONTHS_ASC
  REPLACEMENT_INTERVAL_MONTHS_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  DETECTOR_SENSORS_BY_PYROLYSER_ID__COUNT_ASC
  DETECTOR_SENSORS_BY_PYROLYSER_ID__COUNT_DESC
  SENSOR_TYPES_BY_PYROLYSER_ID__COUNT_ASC
  SENSOR_TYPES_BY_PYROLYSER_ID__COUNT_DESC
  MAINTENANCE_VISIT_LINES_BY_PYROLYSER_ID__COUNT_ASC
  MAINTENANCE_VISIT_LINES_BY_PYROLYSER_ID__COUNT_DESC
}

"""
A condition to be used against `Pyrolyser` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PyrolyserCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """
  Checks for equality with the object’s `replacementIntervalMonths` field.
  """
  replacementIntervalMonths: Int

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String
}

"""A connection to a list of `DpCard` values."""
type DpCardsConnection {
  """A list of `DpCard` objects."""
  nodes: [DpCard!]!

  """
  A list of edges which contains the `DpCard` and cursor to aid in pagination.
  """
  edges: [DpCardsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DpCard` you could get from the connection."""
  totalCount: Int!
}

type DpCard implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  serialNumber: String
  ownerId: Int
  created: Datetime
  modified: Datetime

  """Reads a single `User` that is related to this `DpCard`."""
  userByOwnerId: User
}

"""A `DpCard` edge in the connection."""
type DpCardsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DpCard` at the end of the edge."""
  node: DpCard!
}

"""Methods to use when ordering `DpCard`."""
enum DpCardsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SERIAL_NUMBER_ASC
  SERIAL_NUMBER_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `DpCard` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input DpCardCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `serialNumber` field."""
  serialNumber: String

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime
}

"""A connection to a list of `FactopdrachtregelLineRemark` values."""
type FactopdrachtregelLineRemarksConnection {
  """A list of `FactopdrachtregelLineRemark` objects."""
  nodes: [FactopdrachtregelLineRemark!]!

  """
  A list of edges which contains the `FactopdrachtregelLineRemark` and cursor to aid in pagination.
  """
  edges: [FactopdrachtregelLineRemarksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FactopdrachtregelLineRemark` you could get from the connection.
  """
  totalCount: Int!
}

type FactopdrachtregelLineRemark implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  remark: String!
  attention: Boolean
  factopdrachtregelLineId: Int!
  userId: Int

  """
  Reads a single `User` that is related to this `FactopdrachtregelLineRemark`.
  """
  userByUserId: User
}

"""A `FactopdrachtregelLineRemark` edge in the connection."""
type FactopdrachtregelLineRemarksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FactopdrachtregelLineRemark` at the end of the edge."""
  node: FactopdrachtregelLineRemark!
}

"""Methods to use when ordering `FactopdrachtregelLineRemark`."""
enum FactopdrachtregelLineRemarksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  REMARK_ASC
  REMARK_DESC
  ATTENTION_ASC
  ATTENTION_DESC
  FACTOPDRACHTREGEL_LINE_ID_ASC
  FACTOPDRACHTREGEL_LINE_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_USER_ID__ID_ASC
  USER_BY_USER_ID__ID_DESC
  USER_BY_USER_ID__USERNAME_ASC
  USER_BY_USER_ID__USERNAME_DESC
  USER_BY_USER_ID__PASSWORD_ASC
  USER_BY_USER_ID__PASSWORD_DESC
  USER_BY_USER_ID__CREATED_ASC
  USER_BY_USER_ID__CREATED_DESC
  USER_BY_USER_ID__MODIFIED_ASC
  USER_BY_USER_ID__MODIFIED_DESC
  USER_BY_USER_ID__GROUP_ID_ASC
  USER_BY_USER_ID__GROUP_ID_DESC
  USER_BY_USER_ID__INITIALS_ASC
  USER_BY_USER_ID__INITIALS_DESC
  USER_BY_USER_ID__FULLNAME_ASC
  USER_BY_USER_ID__FULLNAME_DESC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_USER_ID__URL_ASC
  USER_BY_USER_ID__URL_DESC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `FactopdrachtregelLineRemark` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input FactopdrachtregelLineRemarkCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `remark` field."""
  remark: String

  """Checks for equality with the object’s `attention` field."""
  attention: Boolean

  """Checks for equality with the object’s `factopdrachtregelLineId` field."""
  factopdrachtregelLineId: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

"""A connection to a list of `Factuur` values."""
type FactuursConnection {
  """A list of `Factuur` objects."""
  nodes: [Factuur!]!

  """
  A list of edges which contains the `Factuur` and cursor to aid in pagination.
  """
  edges: [FactuursEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Factuur` you could get from the connection."""
  totalCount: Int!
}

type Factuur implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  factuuropdracht: String!
  filename: String
  ownerId: Int!
  created: Datetime
  modified: Datetime
  checked: Boolean!
  sent: Boolean!
  checkedId: Int
  sentId: Int

  """Reads a single `User` that is related to this `Factuur`."""
  userByOwnerId: User

  """Reads a single `User` that is related to this `Factuur`."""
  userByCheckedId: User

  """Reads a single `User` that is related to this `Factuur`."""
  userBySentId: User
}

"""A `Factuur` edge in the connection."""
type FactuursEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Factuur` at the end of the edge."""
  node: Factuur!
}

"""Methods to use when ordering `Factuur`."""
enum FactuursOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  FILENAME_ASC
  FILENAME_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  CHECKED_ASC
  CHECKED_DESC
  SENT_ASC
  SENT_DESC
  CHECKED_ID_ASC
  CHECKED_ID_DESC
  SENT_ID_ASC
  SENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  USER_BY_CHECKED_ID__ID_ASC
  USER_BY_CHECKED_ID__ID_DESC
  USER_BY_CHECKED_ID__USERNAME_ASC
  USER_BY_CHECKED_ID__USERNAME_DESC
  USER_BY_CHECKED_ID__PASSWORD_ASC
  USER_BY_CHECKED_ID__PASSWORD_DESC
  USER_BY_CHECKED_ID__CREATED_ASC
  USER_BY_CHECKED_ID__CREATED_DESC
  USER_BY_CHECKED_ID__MODIFIED_ASC
  USER_BY_CHECKED_ID__MODIFIED_DESC
  USER_BY_CHECKED_ID__GROUP_ID_ASC
  USER_BY_CHECKED_ID__GROUP_ID_DESC
  USER_BY_CHECKED_ID__INITIALS_ASC
  USER_BY_CHECKED_ID__INITIALS_DESC
  USER_BY_CHECKED_ID__FULLNAME_ASC
  USER_BY_CHECKED_ID__FULLNAME_DESC
  USER_BY_CHECKED_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_CHECKED_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_CHECKED_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_CHECKED_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_CHECKED_ID__URL_ASC
  USER_BY_CHECKED_ID__URL_DESC
  USER_BY_CHECKED_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_CHECKED_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  USER_BY_SENT_ID__ID_ASC
  USER_BY_SENT_ID__ID_DESC
  USER_BY_SENT_ID__USERNAME_ASC
  USER_BY_SENT_ID__USERNAME_DESC
  USER_BY_SENT_ID__PASSWORD_ASC
  USER_BY_SENT_ID__PASSWORD_DESC
  USER_BY_SENT_ID__CREATED_ASC
  USER_BY_SENT_ID__CREATED_DESC
  USER_BY_SENT_ID__MODIFIED_ASC
  USER_BY_SENT_ID__MODIFIED_DESC
  USER_BY_SENT_ID__GROUP_ID_ASC
  USER_BY_SENT_ID__GROUP_ID_DESC
  USER_BY_SENT_ID__INITIALS_ASC
  USER_BY_SENT_ID__INITIALS_DESC
  USER_BY_SENT_ID__FULLNAME_ASC
  USER_BY_SENT_ID__FULLNAME_DESC
  USER_BY_SENT_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_SENT_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_SENT_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_SENT_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_SENT_ID__URL_ASC
  USER_BY_SENT_ID__URL_DESC
  USER_BY_SENT_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_SENT_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `Factuur` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FactuurCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `filename` field."""
  filename: String

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `checked` field."""
  checked: Boolean

  """Checks for equality with the object’s `sent` field."""
  sent: Boolean

  """Checks for equality with the object’s `checkedId` field."""
  checkedId: Int

  """Checks for equality with the object’s `sentId` field."""
  sentId: Int
}

"""A connection to a list of `Hardware` values."""
type HardwaresConnection {
  """A list of `Hardware` objects."""
  nodes: [Hardware!]!

  """
  A list of edges which contains the `Hardware` and cursor to aid in pagination.
  """
  edges: [HardwaresEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Hardware` you could get from the connection."""
  totalCount: Int!
}

type Hardware implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  type: String!
  serialNumber: String
  purchaseDate: Date
  remarks: String
  userId: Int
  ownerId: Int
  created: Datetime
  modified: Datetime
  specs: String
  model: String
  macAddress: String
  ipAddress: String
  operatingSystem: String
  ordernummer: String
  prijs: BigFloat

  """Reads a single `User` that is related to this `Hardware`."""
  userByUserId: User

  """Reads a single `User` that is related to this `Hardware`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `Software`."""
  softwaresByHardwareId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Software`."""
    orderBy: [SoftwaresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SoftwareCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SoftwareFilter
  ): SoftwaresConnection!
}

"""A connection to a list of `Software` values."""
type SoftwaresConnection {
  """A list of `Software` objects."""
  nodes: [Software!]!

  """
  A list of edges which contains the `Software` and cursor to aid in pagination.
  """
  edges: [SoftwaresEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Software` you could get from the connection."""
  totalCount: Int!
}

type Software implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  type: String!
  serialNumber: String
  purchaseDate: Date
  hardwareId: Int
  ownerId: Int
  remarks: String
  created: Datetime
  modified: Datetime
  registrationCode: String
  activationCode: String
  login: String
  password: String

  """Reads a single `Hardware` that is related to this `Software`."""
  hardwareByHardwareId: Hardware

  """Reads a single `User` that is related to this `Software`."""
  userByOwnerId: User
}

"""A `Software` edge in the connection."""
type SoftwaresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Software` at the end of the edge."""
  node: Software!
}

"""Methods to use when ordering `Software`."""
enum SoftwaresOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TYPE_ASC
  TYPE_DESC
  SERIAL_NUMBER_ASC
  SERIAL_NUMBER_DESC
  PURCHASE_DATE_ASC
  PURCHASE_DATE_DESC
  HARDWARE_ID_ASC
  HARDWARE_ID_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  REMARKS_ASC
  REMARKS_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  REGISTRATION_CODE_ASC
  REGISTRATION_CODE_DESC
  ACTIVATION_CODE_ASC
  ACTIVATION_CODE_DESC
  LOGIN_ASC
  LOGIN_DESC
  PASSWORD_ASC
  PASSWORD_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  HARDWARE_BY_HARDWARE_ID__ID_ASC
  HARDWARE_BY_HARDWARE_ID__ID_DESC
  HARDWARE_BY_HARDWARE_ID__TYPE_ASC
  HARDWARE_BY_HARDWARE_ID__TYPE_DESC
  HARDWARE_BY_HARDWARE_ID__SERIAL_NUMBER_ASC
  HARDWARE_BY_HARDWARE_ID__SERIAL_NUMBER_DESC
  HARDWARE_BY_HARDWARE_ID__PURCHASE_DATE_ASC
  HARDWARE_BY_HARDWARE_ID__PURCHASE_DATE_DESC
  HARDWARE_BY_HARDWARE_ID__REMARKS_ASC
  HARDWARE_BY_HARDWARE_ID__REMARKS_DESC
  HARDWARE_BY_HARDWARE_ID__USER_ID_ASC
  HARDWARE_BY_HARDWARE_ID__USER_ID_DESC
  HARDWARE_BY_HARDWARE_ID__OWNER_ID_ASC
  HARDWARE_BY_HARDWARE_ID__OWNER_ID_DESC
  HARDWARE_BY_HARDWARE_ID__CREATED_ASC
  HARDWARE_BY_HARDWARE_ID__CREATED_DESC
  HARDWARE_BY_HARDWARE_ID__MODIFIED_ASC
  HARDWARE_BY_HARDWARE_ID__MODIFIED_DESC
  HARDWARE_BY_HARDWARE_ID__SPECS_ASC
  HARDWARE_BY_HARDWARE_ID__SPECS_DESC
  HARDWARE_BY_HARDWARE_ID__MODEL_ASC
  HARDWARE_BY_HARDWARE_ID__MODEL_DESC
  HARDWARE_BY_HARDWARE_ID__MAC_ADDRESS_ASC
  HARDWARE_BY_HARDWARE_ID__MAC_ADDRESS_DESC
  HARDWARE_BY_HARDWARE_ID__IP_ADDRESS_ASC
  HARDWARE_BY_HARDWARE_ID__IP_ADDRESS_DESC
  HARDWARE_BY_HARDWARE_ID__OPERATING_SYSTEM_ASC
  HARDWARE_BY_HARDWARE_ID__OPERATING_SYSTEM_DESC
  HARDWARE_BY_HARDWARE_ID__ORDERNUMMER_ASC
  HARDWARE_BY_HARDWARE_ID__ORDERNUMMER_DESC
  HARDWARE_BY_HARDWARE_ID__PRIJS_ASC
  HARDWARE_BY_HARDWARE_ID__PRIJS_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `Software` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SoftwareCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `serialNumber` field."""
  serialNumber: String

  """Checks for equality with the object’s `purchaseDate` field."""
  purchaseDate: Date

  """Checks for equality with the object’s `hardwareId` field."""
  hardwareId: Int

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `remarks` field."""
  remarks: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `registrationCode` field."""
  registrationCode: String

  """Checks for equality with the object’s `activationCode` field."""
  activationCode: String

  """Checks for equality with the object’s `login` field."""
  login: String

  """Checks for equality with the object’s `password` field."""
  password: String
}

"""A `Hardware` edge in the connection."""
type HardwaresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Hardware` at the end of the edge."""
  node: Hardware!
}

"""Methods to use when ordering `Hardware`."""
enum HardwaresOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TYPE_ASC
  TYPE_DESC
  SERIAL_NUMBER_ASC
  SERIAL_NUMBER_DESC
  PURCHASE_DATE_ASC
  PURCHASE_DATE_DESC
  REMARKS_ASC
  REMARKS_DESC
  USER_ID_ASC
  USER_ID_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  SPECS_ASC
  SPECS_DESC
  MODEL_ASC
  MODEL_DESC
  MAC_ADDRESS_ASC
  MAC_ADDRESS_DESC
  IP_ADDRESS_ASC
  IP_ADDRESS_DESC
  OPERATING_SYSTEM_ASC
  OPERATING_SYSTEM_DESC
  ORDERNUMMER_ASC
  ORDERNUMMER_DESC
  PRIJS_ASC
  PRIJS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_USER_ID__ID_ASC
  USER_BY_USER_ID__ID_DESC
  USER_BY_USER_ID__USERNAME_ASC
  USER_BY_USER_ID__USERNAME_DESC
  USER_BY_USER_ID__PASSWORD_ASC
  USER_BY_USER_ID__PASSWORD_DESC
  USER_BY_USER_ID__CREATED_ASC
  USER_BY_USER_ID__CREATED_DESC
  USER_BY_USER_ID__MODIFIED_ASC
  USER_BY_USER_ID__MODIFIED_DESC
  USER_BY_USER_ID__GROUP_ID_ASC
  USER_BY_USER_ID__GROUP_ID_DESC
  USER_BY_USER_ID__INITIALS_ASC
  USER_BY_USER_ID__INITIALS_DESC
  USER_BY_USER_ID__FULLNAME_ASC
  USER_BY_USER_ID__FULLNAME_DESC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_USER_ID__URL_ASC
  USER_BY_USER_ID__URL_DESC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  SOFTWARES_BY_HARDWARE_ID__COUNT_ASC
  SOFTWARES_BY_HARDWARE_ID__COUNT_DESC
}

"""
A condition to be used against `Hardware` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input HardwareCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `serialNumber` field."""
  serialNumber: String

  """Checks for equality with the object’s `purchaseDate` field."""
  purchaseDate: Date

  """Checks for equality with the object’s `remarks` field."""
  remarks: String

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `specs` field."""
  specs: String

  """Checks for equality with the object’s `model` field."""
  model: String

  """Checks for equality with the object’s `macAddress` field."""
  macAddress: String

  """Checks for equality with the object’s `ipAddress` field."""
  ipAddress: String

  """Checks for equality with the object’s `operatingSystem` field."""
  operatingSystem: String

  """Checks for equality with the object’s `ordernummer` field."""
  ordernummer: String

  """Checks for equality with the object’s `prijs` field."""
  prijs: BigFloat
}

"""A connection to a list of `IncomingDocument` values."""
type IncomingDocumentsConnection {
  """A list of `IncomingDocument` objects."""
  nodes: [IncomingDocument!]!

  """
  A list of edges which contains the `IncomingDocument` and cursor to aid in pagination.
  """
  edges: [IncomingDocumentsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `IncomingDocument` you could get from the connection.
  """
  totalCount: Int!
}

type IncomingDocument implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  description: String
  amount: Float
  isovaluta: String
  type: String
  created: Datetime
  modified: Datetime
  ownerId: Int!
  userId: Int!
  date: Date

  """Reads a single `User` that is related to this `IncomingDocument`."""
  userByOwnerId: User

  """Reads a single `User` that is related to this `IncomingDocument`."""
  userByUserId: User
}

"""A `IncomingDocument` edge in the connection."""
type IncomingDocumentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `IncomingDocument` at the end of the edge."""
  node: IncomingDocument!
}

"""Methods to use when ordering `IncomingDocument`."""
enum IncomingDocumentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  ISOVALUTA_ASC
  ISOVALUTA_DESC
  TYPE_ASC
  TYPE_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  DATE_ASC
  DATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  USER_BY_USER_ID__ID_ASC
  USER_BY_USER_ID__ID_DESC
  USER_BY_USER_ID__USERNAME_ASC
  USER_BY_USER_ID__USERNAME_DESC
  USER_BY_USER_ID__PASSWORD_ASC
  USER_BY_USER_ID__PASSWORD_DESC
  USER_BY_USER_ID__CREATED_ASC
  USER_BY_USER_ID__CREATED_DESC
  USER_BY_USER_ID__MODIFIED_ASC
  USER_BY_USER_ID__MODIFIED_DESC
  USER_BY_USER_ID__GROUP_ID_ASC
  USER_BY_USER_ID__GROUP_ID_DESC
  USER_BY_USER_ID__INITIALS_ASC
  USER_BY_USER_ID__INITIALS_DESC
  USER_BY_USER_ID__FULLNAME_ASC
  USER_BY_USER_ID__FULLNAME_DESC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_USER_ID__URL_ASC
  USER_BY_USER_ID__URL_DESC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `IncomingDocument` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input IncomingDocumentCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `amount` field."""
  amount: Float

  """Checks for equality with the object’s `isovaluta` field."""
  isovaluta: String

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `date` field."""
  date: Date
}

"""A connection to a list of `JunctionBox` values."""
type JunctionBoxesConnection {
  """A list of `JunctionBox` objects."""
  nodes: [JunctionBox!]!

  """
  A list of edges which contains the `JunctionBox` and cursor to aid in pagination.
  """
  edges: [JunctionBoxesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `JunctionBox` you could get from the connection."""
  totalCount: Int!
}

type JunctionBox implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  serialNumber: String
  ownerId: Int
  created: Datetime
  modified: Datetime

  """Reads a single `User` that is related to this `JunctionBox`."""
  userByOwnerId: User
}

"""A `JunctionBox` edge in the connection."""
type JunctionBoxesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `JunctionBox` at the end of the edge."""
  node: JunctionBox!
}

"""Methods to use when ordering `JunctionBox`."""
enum JunctionBoxesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SERIAL_NUMBER_ASC
  SERIAL_NUMBER_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `JunctionBox` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input JunctionBoxCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `serialNumber` field."""
  serialNumber: String

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime
}

"""A connection to a list of `Lead` values."""
type LeadsConnection {
  """A list of `Lead` objects."""
  nodes: [Lead!]!

  """
  A list of edges which contains the `Lead` and cursor to aid in pagination.
  """
  edges: [LeadsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Lead` you could get from the connection."""
  totalCount: Int!
}

type Lead implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  country: String
  dateOfLastVisit: Date
  dateOfLastRequest: Date
  company: String
  lastName: String
  firstName: String
  telephone: String
  contactEmail: String
  webSite: String
  businessSector: String
  typeOfCompany: String
  address: String
  zipCode: String
  city: String
  requests: String
  clickThroughsToYourSite: String
  viewedElements: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  noOfEmployees: String

  """Reads a single `User` that is related to this `Lead`."""
  userByOwnerId: User
}

"""A `Lead` edge in the connection."""
type LeadsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Lead` at the end of the edge."""
  node: Lead!
}

"""Methods to use when ordering `Lead`."""
enum LeadsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  DATE_OF_LAST_VISIT_ASC
  DATE_OF_LAST_VISIT_DESC
  DATE_OF_LAST_REQUEST_ASC
  DATE_OF_LAST_REQUEST_DESC
  COMPANY_ASC
  COMPANY_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  TELEPHONE_ASC
  TELEPHONE_DESC
  CONTACT_EMAIL_ASC
  CONTACT_EMAIL_DESC
  WEB_SITE_ASC
  WEB_SITE_DESC
  BUSINESS_SECTOR_ASC
  BUSINESS_SECTOR_DESC
  TYPE_OF_COMPANY_ASC
  TYPE_OF_COMPANY_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  ZIP_CODE_ASC
  ZIP_CODE_DESC
  CITY_ASC
  CITY_DESC
  REQUESTS_ASC
  REQUESTS_DESC
  CLICK_THROUGHS_TO_YOUR_SITE_ASC
  CLICK_THROUGHS_TO_YOUR_SITE_DESC
  VIEWED_ELEMENTS_ASC
  VIEWED_ELEMENTS_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  NO_OF_EMPLOYEES_ASC
  NO_OF_EMPLOYEES_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `Lead` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input LeadCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `country` field."""
  country: String

  """Checks for equality with the object’s `dateOfLastVisit` field."""
  dateOfLastVisit: Date

  """Checks for equality with the object’s `dateOfLastRequest` field."""
  dateOfLastRequest: Date

  """Checks for equality with the object’s `company` field."""
  company: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `telephone` field."""
  telephone: String

  """Checks for equality with the object’s `contactEmail` field."""
  contactEmail: String

  """Checks for equality with the object’s `webSite` field."""
  webSite: String

  """Checks for equality with the object’s `businessSector` field."""
  businessSector: String

  """Checks for equality with the object’s `typeOfCompany` field."""
  typeOfCompany: String

  """Checks for equality with the object’s `address` field."""
  address: String

  """Checks for equality with the object’s `zipCode` field."""
  zipCode: String

  """Checks for equality with the object’s `city` field."""
  city: String

  """Checks for equality with the object’s `requests` field."""
  requests: String

  """Checks for equality with the object’s `clickThroughsToYourSite` field."""
  clickThroughsToYourSite: String

  """Checks for equality with the object’s `viewedElements` field."""
  viewedElements: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `noOfEmployees` field."""
  noOfEmployees: String
}

"""A connection to a list of `LicenseCustomer` values."""
type LicenseCustomersConnection {
  """A list of `LicenseCustomer` objects."""
  nodes: [LicenseCustomer!]!

  """
  A list of edges which contains the `LicenseCustomer` and cursor to aid in pagination.
  """
  edges: [LicenseCustomersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `LicenseCustomer` you could get from the connection.
  """
  totalCount: Int!
}

"""A `LicenseCustomer` edge in the connection."""
type LicenseCustomersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LicenseCustomer` at the end of the edge."""
  node: LicenseCustomer!
}

"""Methods to use when ordering `LicenseCustomer`."""
enum LicenseCustomersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  LICENSES_BY_LICENSE_CUSTOMER_ID__COUNT_ASC
  LICENSES_BY_LICENSE_CUSTOMER_ID__COUNT_DESC
}

"""
A condition to be used against `LicenseCustomer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LicenseCustomerCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int
}

"""A connection to a list of `LicenseModule` values."""
type LicenseModulesConnection {
  """A list of `LicenseModule` objects."""
  nodes: [LicenseModule!]!

  """
  A list of edges which contains the `LicenseModule` and cursor to aid in pagination.
  """
  edges: [LicenseModulesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LicenseModule` you could get from the connection."""
  totalCount: Int!
}

"""A `LicenseModule` edge in the connection."""
type LicenseModulesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LicenseModule` at the end of the edge."""
  node: LicenseModule!
}

"""Methods to use when ordering `LicenseModule`."""
enum LicenseModulesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  LATEST_VERSION_ASC
  LATEST_VERSION_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  LICENSES_BY_LICENSE_MODULE_ID__COUNT_ASC
  LICENSES_BY_LICENSE_MODULE_ID__COUNT_DESC
}

"""
A condition to be used against `LicenseModule` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LicenseModuleCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `latestVersion` field."""
  latestVersion: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int
}

"""A connection to a list of `OfferteRemark` values."""
type OfferteRemarksConnection {
  """A list of `OfferteRemark` objects."""
  nodes: [OfferteRemark!]!

  """
  A list of edges which contains the `OfferteRemark` and cursor to aid in pagination.
  """
  edges: [OfferteRemarksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `OfferteRemark` you could get from the connection."""
  totalCount: Int!
}

type OfferteRemark implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  offerteId: String!
  actions: String
  actionDate: Date
  decisionDate: Date
  kans: BigFloat
  rejectRequest: Boolean
  statusApproved: Boolean
  name: String
  status: String
  competitors: String
  created: Datetime
  modified: Datetime
  ownerId: Int!
  representative: String

  """Reads a single `User` that is related to this `OfferteRemark`."""
  userByOwnerId: User
}

"""A `OfferteRemark` edge in the connection."""
type OfferteRemarksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OfferteRemark` at the end of the edge."""
  node: OfferteRemark!
}

"""Methods to use when ordering `OfferteRemark`."""
enum OfferteRemarksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  OFFERTE_ID_ASC
  OFFERTE_ID_DESC
  ACTIONS_ASC
  ACTIONS_DESC
  ACTION_DATE_ASC
  ACTION_DATE_DESC
  DECISION_DATE_ASC
  DECISION_DATE_DESC
  KANS_ASC
  KANS_DESC
  REJECT_REQUEST_ASC
  REJECT_REQUEST_DESC
  STATUS_APPROVED_ASC
  STATUS_APPROVED_DESC
  NAME_ASC
  NAME_DESC
  STATUS_ASC
  STATUS_DESC
  COMPETITORS_ASC
  COMPETITORS_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  REPRESENTATIVE_ASC
  REPRESENTATIVE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `OfferteRemark` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OfferteRemarkCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `offerteId` field."""
  offerteId: String

  """Checks for equality with the object’s `actions` field."""
  actions: String

  """Checks for equality with the object’s `actionDate` field."""
  actionDate: Date

  """Checks for equality with the object’s `decisionDate` field."""
  decisionDate: Date

  """Checks for equality with the object’s `kans` field."""
  kans: BigFloat

  """Checks for equality with the object’s `rejectRequest` field."""
  rejectRequest: Boolean

  """Checks for equality with the object’s `statusApproved` field."""
  statusApproved: Boolean

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `competitors` field."""
  competitors: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `representative` field."""
  representative: String
}

"""A connection to a list of `Opportunity` values."""
type OpportunitiesConnection {
  """A list of `Opportunity` objects."""
  nodes: [Opportunity!]!

  """
  A list of edges which contains the `Opportunity` and cursor to aid in pagination.
  """
  edges: [OpportunitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Opportunity` you could get from the connection."""
  totalCount: Int!
}

type Opportunity implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  source: String
  customer: String
  description: String
  amount: BigFloat
  cdland: String
  actions: String
  actionDate: Date
  cdvert: String
  created: Datetime
  modified: Datetime
  ownerId: Int!
  status: String!
  distributor: String
  projectDate: Date

  """Reads a single `_Land` that is related to this `Opportunity`."""
  _landByCdland: _Land

  """Reads a single `User` that is related to this `Opportunity`."""
  userByOwnerId: User
}

type _Land implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  cdland: String!
  omschr: String
  cbsland: String
  cdeglid: String
  isoland: String
  rszland: Int
  sepa: String

  """Reads and enables pagination through a set of `Opportunity`."""
  opportunitiesByCdland(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Opportunity`."""
    orderBy: [OpportunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpportunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OpportunityFilter
  ): OpportunitiesConnection!
}

"""Methods to use when ordering `Opportunity`."""
enum OpportunitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SOURCE_ASC
  SOURCE_DESC
  CUSTOMER_ASC
  CUSTOMER_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  CDLAND_ASC
  CDLAND_DESC
  ACTIONS_ASC
  ACTIONS_DESC
  ACTION_DATE_ASC
  ACTION_DATE_DESC
  CDVERT_ASC
  CDVERT_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  STATUS_ASC
  STATUS_DESC
  DISTRIBUTOR_ASC
  DISTRIBUTOR_DESC
  PROJECT_DATE_ASC
  PROJECT_DATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  _LAND_BY_CDLAND__CDLAND_ASC
  _LAND_BY_CDLAND__CDLAND_DESC
  _LAND_BY_CDLAND__OMSCHR_ASC
  _LAND_BY_CDLAND__OMSCHR_DESC
  _LAND_BY_CDLAND__CBSLAND_ASC
  _LAND_BY_CDLAND__CBSLAND_DESC
  _LAND_BY_CDLAND__CDEGLID_ASC
  _LAND_BY_CDLAND__CDEGLID_DESC
  _LAND_BY_CDLAND__ISOLAND_ASC
  _LAND_BY_CDLAND__ISOLAND_DESC
  _LAND_BY_CDLAND__RSZLAND_ASC
  _LAND_BY_CDLAND__RSZLAND_DESC
  _LAND_BY_CDLAND__SEPA_ASC
  _LAND_BY_CDLAND__SEPA_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `Opportunity` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OpportunityCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `source` field."""
  source: String

  """Checks for equality with the object’s `customer` field."""
  customer: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `amount` field."""
  amount: BigFloat

  """Checks for equality with the object’s `cdland` field."""
  cdland: String

  """Checks for equality with the object’s `actions` field."""
  actions: String

  """Checks for equality with the object’s `actionDate` field."""
  actionDate: Date

  """Checks for equality with the object’s `cdvert` field."""
  cdvert: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `distributor` field."""
  distributor: String

  """Checks for equality with the object’s `projectDate` field."""
  projectDate: Date
}

"""A `Opportunity` edge in the connection."""
type OpportunitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Opportunity` at the end of the edge."""
  node: Opportunity!
}

"""A connection to a list of `UserTask` values."""
type UserTasksConnection {
  """A list of `UserTask` objects."""
  nodes: [UserTask!]!

  """
  A list of edges which contains the `UserTask` and cursor to aid in pagination.
  """
  edges: [UserTasksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserTask` you could get from the connection."""
  totalCount: Int!
}

type UserTask implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  userId: Int
  taskId: Int
  created: Datetime
  modified: Datetime
  ownerId: Int
  qualifiesForOvertime: Boolean

  """Reads a single `User` that is related to this `UserTask`."""
  userByUserId: User

  """Reads a single `Task` that is related to this `UserTask`."""
  taskByTaskId: Task

  """Reads a single `User` that is related to this `UserTask`."""
  userByOwnerId: User
}

type Task implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  code: String
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  groupCode: Int
  sortCode: Int
  wbsoStartDate: Date
  wbsoEndDate: Date
  description: String

  """Reads a single `User` that is related to this `Task`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `UserTask`."""
  userTasksByTaskId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserTask`."""
    orderBy: [UserTasksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserTaskCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserTaskFilter
  ): UserTasksConnection!

  """Reads and enables pagination through a set of `WeeklyHour`."""
  weeklyHoursByTaskId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WeeklyHour`."""
    orderBy: [WeeklyHoursOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WeeklyHourCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WeeklyHourFilter
  ): WeeklyHoursConnection!

  """Reads and enables pagination through a set of `WeeklyHourRemark`."""
  weeklyHourRemarksByTaskId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `WeeklyHourRemark`."""
    orderBy: [WeeklyHourRemarksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WeeklyHourRemarkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WeeklyHourRemarkFilter
  ): WeeklyHourRemarksConnection!
}

"""Methods to use when ordering `UserTask`."""
enum UserTasksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  TASK_ID_ASC
  TASK_ID_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  QUALIFIES_FOR_OVERTIME_ASC
  QUALIFIES_FOR_OVERTIME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_USER_ID__ID_ASC
  USER_BY_USER_ID__ID_DESC
  USER_BY_USER_ID__USERNAME_ASC
  USER_BY_USER_ID__USERNAME_DESC
  USER_BY_USER_ID__PASSWORD_ASC
  USER_BY_USER_ID__PASSWORD_DESC
  USER_BY_USER_ID__CREATED_ASC
  USER_BY_USER_ID__CREATED_DESC
  USER_BY_USER_ID__MODIFIED_ASC
  USER_BY_USER_ID__MODIFIED_DESC
  USER_BY_USER_ID__GROUP_ID_ASC
  USER_BY_USER_ID__GROUP_ID_DESC
  USER_BY_USER_ID__INITIALS_ASC
  USER_BY_USER_ID__INITIALS_DESC
  USER_BY_USER_ID__FULLNAME_ASC
  USER_BY_USER_ID__FULLNAME_DESC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_USER_ID__URL_ASC
  USER_BY_USER_ID__URL_DESC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  TASK_BY_TASK_ID__ID_ASC
  TASK_BY_TASK_ID__ID_DESC
  TASK_BY_TASK_ID__CODE_ASC
  TASK_BY_TASK_ID__CODE_DESC
  TASK_BY_TASK_ID__NAME_ASC
  TASK_BY_TASK_ID__NAME_DESC
  TASK_BY_TASK_ID__CREATED_ASC
  TASK_BY_TASK_ID__CREATED_DESC
  TASK_BY_TASK_ID__MODIFIED_ASC
  TASK_BY_TASK_ID__MODIFIED_DESC
  TASK_BY_TASK_ID__OWNER_ID_ASC
  TASK_BY_TASK_ID__OWNER_ID_DESC
  TASK_BY_TASK_ID__GROUP_CODE_ASC
  TASK_BY_TASK_ID__GROUP_CODE_DESC
  TASK_BY_TASK_ID__SORT_CODE_ASC
  TASK_BY_TASK_ID__SORT_CODE_DESC
  TASK_BY_TASK_ID__WBSO_START_DATE_ASC
  TASK_BY_TASK_ID__WBSO_START_DATE_DESC
  TASK_BY_TASK_ID__WBSO_END_DATE_ASC
  TASK_BY_TASK_ID__WBSO_END_DATE_DESC
  TASK_BY_TASK_ID__DESCRIPTION_ASC
  TASK_BY_TASK_ID__DESCRIPTION_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `UserTask` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserTaskCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `taskId` field."""
  taskId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `qualifiesForOvertime` field."""
  qualifiesForOvertime: Boolean
}

"""A connection to a list of `WeeklyHour` values."""
type WeeklyHoursConnection {
  """A list of `WeeklyHour` objects."""
  nodes: [WeeklyHour!]!

  """
  A list of edges which contains the `WeeklyHour` and cursor to aid in pagination.
  """
  edges: [WeeklyHoursEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `WeeklyHour` you could get from the connection."""
  totalCount: Int!
}

type WeeklyHour implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  userId: Int!
  taskId: Int!
  startTime: Datetime
  endTime: Datetime
  created: Datetime
  modified: Datetime
  ownerId: Int
  office: Boolean!

  """Reads a single `User` that is related to this `WeeklyHour`."""
  userByUserId: User

  """Reads a single `Task` that is related to this `WeeklyHour`."""
  taskByTaskId: Task

  """Reads a single `User` that is related to this `WeeklyHour`."""
  userByOwnerId: User
}

"""A `WeeklyHour` edge in the connection."""
type WeeklyHoursEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WeeklyHour` at the end of the edge."""
  node: WeeklyHour!
}

"""Methods to use when ordering `WeeklyHour`."""
enum WeeklyHoursOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  TASK_ID_ASC
  TASK_ID_DESC
  START_TIME_ASC
  START_TIME_DESC
  END_TIME_ASC
  END_TIME_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  OFFICE_ASC
  OFFICE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_USER_ID__ID_ASC
  USER_BY_USER_ID__ID_DESC
  USER_BY_USER_ID__USERNAME_ASC
  USER_BY_USER_ID__USERNAME_DESC
  USER_BY_USER_ID__PASSWORD_ASC
  USER_BY_USER_ID__PASSWORD_DESC
  USER_BY_USER_ID__CREATED_ASC
  USER_BY_USER_ID__CREATED_DESC
  USER_BY_USER_ID__MODIFIED_ASC
  USER_BY_USER_ID__MODIFIED_DESC
  USER_BY_USER_ID__GROUP_ID_ASC
  USER_BY_USER_ID__GROUP_ID_DESC
  USER_BY_USER_ID__INITIALS_ASC
  USER_BY_USER_ID__INITIALS_DESC
  USER_BY_USER_ID__FULLNAME_ASC
  USER_BY_USER_ID__FULLNAME_DESC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_USER_ID__URL_ASC
  USER_BY_USER_ID__URL_DESC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  TASK_BY_TASK_ID__ID_ASC
  TASK_BY_TASK_ID__ID_DESC
  TASK_BY_TASK_ID__CODE_ASC
  TASK_BY_TASK_ID__CODE_DESC
  TASK_BY_TASK_ID__NAME_ASC
  TASK_BY_TASK_ID__NAME_DESC
  TASK_BY_TASK_ID__CREATED_ASC
  TASK_BY_TASK_ID__CREATED_DESC
  TASK_BY_TASK_ID__MODIFIED_ASC
  TASK_BY_TASK_ID__MODIFIED_DESC
  TASK_BY_TASK_ID__OWNER_ID_ASC
  TASK_BY_TASK_ID__OWNER_ID_DESC
  TASK_BY_TASK_ID__GROUP_CODE_ASC
  TASK_BY_TASK_ID__GROUP_CODE_DESC
  TASK_BY_TASK_ID__SORT_CODE_ASC
  TASK_BY_TASK_ID__SORT_CODE_DESC
  TASK_BY_TASK_ID__WBSO_START_DATE_ASC
  TASK_BY_TASK_ID__WBSO_START_DATE_DESC
  TASK_BY_TASK_ID__WBSO_END_DATE_ASC
  TASK_BY_TASK_ID__WBSO_END_DATE_DESC
  TASK_BY_TASK_ID__DESCRIPTION_ASC
  TASK_BY_TASK_ID__DESCRIPTION_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `WeeklyHour` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input WeeklyHourCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `taskId` field."""
  taskId: Int

  """Checks for equality with the object’s `startTime` field."""
  startTime: Datetime

  """Checks for equality with the object’s `endTime` field."""
  endTime: Datetime

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `office` field."""
  office: Boolean
}

"""A connection to a list of `WeeklyHourRemark` values."""
type WeeklyHourRemarksConnection {
  """A list of `WeeklyHourRemark` objects."""
  nodes: [WeeklyHourRemark!]!

  """
  A list of edges which contains the `WeeklyHourRemark` and cursor to aid in pagination.
  """
  edges: [WeeklyHourRemarksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `WeeklyHourRemark` you could get from the connection.
  """
  totalCount: Int!
}

type WeeklyHourRemark implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  userId: Int
  taskId: Int
  date: Date
  created: Datetime
  modified: Datetime
  ownerId: Int
  remark: String

  """Reads a single `User` that is related to this `WeeklyHourRemark`."""
  userByUserId: User

  """Reads a single `Task` that is related to this `WeeklyHourRemark`."""
  taskByTaskId: Task

  """Reads a single `User` that is related to this `WeeklyHourRemark`."""
  userByOwnerId: User
}

"""A `WeeklyHourRemark` edge in the connection."""
type WeeklyHourRemarksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WeeklyHourRemark` at the end of the edge."""
  node: WeeklyHourRemark!
}

"""Methods to use when ordering `WeeklyHourRemark`."""
enum WeeklyHourRemarksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  TASK_ID_ASC
  TASK_ID_DESC
  DATE_ASC
  DATE_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  REMARK_ASC
  REMARK_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_USER_ID__ID_ASC
  USER_BY_USER_ID__ID_DESC
  USER_BY_USER_ID__USERNAME_ASC
  USER_BY_USER_ID__USERNAME_DESC
  USER_BY_USER_ID__PASSWORD_ASC
  USER_BY_USER_ID__PASSWORD_DESC
  USER_BY_USER_ID__CREATED_ASC
  USER_BY_USER_ID__CREATED_DESC
  USER_BY_USER_ID__MODIFIED_ASC
  USER_BY_USER_ID__MODIFIED_DESC
  USER_BY_USER_ID__GROUP_ID_ASC
  USER_BY_USER_ID__GROUP_ID_DESC
  USER_BY_USER_ID__INITIALS_ASC
  USER_BY_USER_ID__INITIALS_DESC
  USER_BY_USER_ID__FULLNAME_ASC
  USER_BY_USER_ID__FULLNAME_DESC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_USER_ID__URL_ASC
  USER_BY_USER_ID__URL_DESC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  TASK_BY_TASK_ID__ID_ASC
  TASK_BY_TASK_ID__ID_DESC
  TASK_BY_TASK_ID__CODE_ASC
  TASK_BY_TASK_ID__CODE_DESC
  TASK_BY_TASK_ID__NAME_ASC
  TASK_BY_TASK_ID__NAME_DESC
  TASK_BY_TASK_ID__CREATED_ASC
  TASK_BY_TASK_ID__CREATED_DESC
  TASK_BY_TASK_ID__MODIFIED_ASC
  TASK_BY_TASK_ID__MODIFIED_DESC
  TASK_BY_TASK_ID__OWNER_ID_ASC
  TASK_BY_TASK_ID__OWNER_ID_DESC
  TASK_BY_TASK_ID__GROUP_CODE_ASC
  TASK_BY_TASK_ID__GROUP_CODE_DESC
  TASK_BY_TASK_ID__SORT_CODE_ASC
  TASK_BY_TASK_ID__SORT_CODE_DESC
  TASK_BY_TASK_ID__WBSO_START_DATE_ASC
  TASK_BY_TASK_ID__WBSO_START_DATE_DESC
  TASK_BY_TASK_ID__WBSO_END_DATE_ASC
  TASK_BY_TASK_ID__WBSO_END_DATE_DESC
  TASK_BY_TASK_ID__DESCRIPTION_ASC
  TASK_BY_TASK_ID__DESCRIPTION_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `WeeklyHourRemark` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input WeeklyHourRemarkCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `taskId` field."""
  taskId: Int

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `remark` field."""
  remark: String
}

"""A `UserTask` edge in the connection."""
type UserTasksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserTask` at the end of the edge."""
  node: UserTask!
}

"""A connection to a list of `Plug` values."""
type PlugsConnection {
  """A list of `Plug` objects."""
  nodes: [Plug!]!

  """
  A list of edges which contains the `Plug` and cursor to aid in pagination.
  """
  edges: [PlugsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Plug` you could get from the connection."""
  totalCount: Int!
}

"""A `Plug` edge in the connection."""
type PlugsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Plug` at the end of the edge."""
  node: Plug!
}

"""Methods to use when ordering `Plug`."""
enum PlugsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  SENSOR_TYPES_BY_PLUG_ID__COUNT_ASC
  SENSOR_TYPES_BY_PLUG_ID__COUNT_DESC
}

"""
A condition to be used against `Plug` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PlugCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int
}

"""A connection to a list of `Principle` values."""
type PrinciplesConnection {
  """A list of `Principle` objects."""
  nodes: [Principle!]!

  """
  A list of edges which contains the `Principle` and cursor to aid in pagination.
  """
  edges: [PrinciplesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Principle` you could get from the connection."""
  totalCount: Int!
}

"""A `Principle` edge in the connection."""
type PrinciplesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Principle` at the end of the edge."""
  node: Principle!
}

"""Methods to use when ordering `Principle`."""
enum PrinciplesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  SENSOR_BASE_TYPES_BY_PRINCIPLE_ID__COUNT_ASC
  SENSOR_BASE_TYPES_BY_PRINCIPLE_ID__COUNT_DESC
}

"""
A condition to be used against `Principle` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PrincipleCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int
}

"""A connection to a list of `RcCard` values."""
type RcCardsConnection {
  """A list of `RcCard` objects."""
  nodes: [RcCard!]!

  """
  A list of edges which contains the `RcCard` and cursor to aid in pagination.
  """
  edges: [RcCardsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RcCard` you could get from the connection."""
  totalCount: Int!
}

type RcCard implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  serialNumber: String
  ownerId: Int
  created: Datetime
  modified: Datetime

  """Reads a single `User` that is related to this `RcCard`."""
  userByOwnerId: User
}

"""A `RcCard` edge in the connection."""
type RcCardsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RcCard` at the end of the edge."""
  node: RcCard!
}

"""Methods to use when ordering `RcCard`."""
enum RcCardsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SERIAL_NUMBER_ASC
  SERIAL_NUMBER_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `RcCard` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RcCardCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `serialNumber` field."""
  serialNumber: String

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime
}

"""A connection to a list of `Request` values."""
type RequestsConnection {
  """A list of `Request` objects."""
  nodes: [Request!]!

  """
  A list of edges which contains the `Request` and cursor to aid in pagination.
  """
  edges: [RequestsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Request` you could get from the connection."""
  totalCount: Int!
}

type Request implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  tableName: String
  request: String
  created: Datetime
  modified: Datetime
  ownerId: Int!
  completed: Boolean

  """Reads a single `User` that is related to this `Request`."""
  userByOwnerId: User
}

"""A `Request` edge in the connection."""
type RequestsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Request` at the end of the edge."""
  node: Request!
}

"""Methods to use when ordering `Request`."""
enum RequestsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  REQUEST_ASC
  REQUEST_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  COMPLETED_ASC
  COMPLETED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `Request` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RequestCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `tableName` field."""
  tableName: String

  """Checks for equality with the object’s `request` field."""
  request: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `completed` field."""
  completed: Boolean
}

"""A connection to a list of `RxCard` values."""
type RxCardsConnection {
  """A list of `RxCard` objects."""
  nodes: [RxCard!]!

  """
  A list of edges which contains the `RxCard` and cursor to aid in pagination.
  """
  edges: [RxCardsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RxCard` you could get from the connection."""
  totalCount: Int!
}

type RxCard implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  serialNumber: String
  ownerId: Int
  created: Datetime
  modified: Datetime

  """Reads a single `User` that is related to this `RxCard`."""
  userByOwnerId: User
}

"""A `RxCard` edge in the connection."""
type RxCardsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RxCard` at the end of the edge."""
  node: RxCard!
}

"""Methods to use when ordering `RxCard`."""
enum RxCardsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SERIAL_NUMBER_ASC
  SERIAL_NUMBER_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `RxCard` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RxCardCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `serialNumber` field."""
  serialNumber: String

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime
}

"""A connection to a list of `StockGroup` values."""
type StockGroupsConnection {
  """A list of `StockGroup` objects."""
  nodes: [StockGroup!]!

  """
  A list of edges which contains the `StockGroup` and cursor to aid in pagination.
  """
  edges: [StockGroupsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `StockGroup` you could get from the connection."""
  totalCount: Int!
}

type StockGroup implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
  ownerId: Int!
  created: Datetime!
  modified: Datetime

  """Reads a single `User` that is related to this `StockGroup`."""
  userByOwnerId: User

  """Reads and enables pagination through a set of `StockItem`."""
  stockItemsByStockGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StockItem`."""
    orderBy: [StockItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StockItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StockItemFilter
  ): StockItemsConnection!
}

"""A connection to a list of `StockItem` values."""
type StockItemsConnection {
  """A list of `StockItem` objects."""
  nodes: [StockItem!]!

  """
  A list of edges which contains the `StockItem` and cursor to aid in pagination.
  """
  edges: [StockItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `StockItem` you could get from the connection."""
  totalCount: Int!
}

type StockItem implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  stockGroupId: Int!
  cdartikel: String!
  ownerId: Int!
  created: Datetime
  modified: Datetime
  prijsper: Float
  action: String

  """Reads a single `StockGroup` that is related to this `StockItem`."""
  stockGroupByStockGroupId: StockGroup

  """Reads a single `User` that is related to this `StockItem`."""
  userByOwnerId: User
}

"""A `StockItem` edge in the connection."""
type StockItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StockItem` at the end of the edge."""
  node: StockItem!
}

"""Methods to use when ordering `StockItem`."""
enum StockItemsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  STOCK_GROUP_ID_ASC
  STOCK_GROUP_ID_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  PRIJSPER_ASC
  PRIJSPER_DESC
  ACTION_ASC
  ACTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STOCK_GROUP_BY_STOCK_GROUP_ID__ID_ASC
  STOCK_GROUP_BY_STOCK_GROUP_ID__ID_DESC
  STOCK_GROUP_BY_STOCK_GROUP_ID__NAME_ASC
  STOCK_GROUP_BY_STOCK_GROUP_ID__NAME_DESC
  STOCK_GROUP_BY_STOCK_GROUP_ID__OWNER_ID_ASC
  STOCK_GROUP_BY_STOCK_GROUP_ID__OWNER_ID_DESC
  STOCK_GROUP_BY_STOCK_GROUP_ID__CREATED_ASC
  STOCK_GROUP_BY_STOCK_GROUP_ID__CREATED_DESC
  STOCK_GROUP_BY_STOCK_GROUP_ID__MODIFIED_ASC
  STOCK_GROUP_BY_STOCK_GROUP_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `StockItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input StockItemCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `stockGroupId` field."""
  stockGroupId: Int

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `prijsper` field."""
  prijsper: Float

  """Checks for equality with the object’s `action` field."""
  action: String
}

"""A `StockGroup` edge in the connection."""
type StockGroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StockGroup` at the end of the edge."""
  node: StockGroup!
}

"""Methods to use when ordering `StockGroup`."""
enum StockGroupsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  STOCK_ITEMS_BY_STOCK_GROUP_ID__COUNT_ASC
  STOCK_ITEMS_BY_STOCK_GROUP_ID__COUNT_DESC
}

"""
A condition to be used against `StockGroup` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input StockGroupCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime
}

"""A connection to a list of `Task` values."""
type TasksConnection {
  """A list of `Task` objects."""
  nodes: [Task!]!

  """
  A list of edges which contains the `Task` and cursor to aid in pagination.
  """
  edges: [TasksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection."""
type TasksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Task` at the end of the edge."""
  node: Task!
}

"""Methods to use when ordering `Task`."""
enum TasksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CODE_ASC
  CODE_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  GROUP_CODE_ASC
  GROUP_CODE_DESC
  SORT_CODE_ASC
  SORT_CODE_DESC
  WBSO_START_DATE_ASC
  WBSO_START_DATE_DESC
  WBSO_END_DATE_ASC
  WBSO_END_DATE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_OWNER_ID__ID_ASC
  USER_BY_OWNER_ID__ID_DESC
  USER_BY_OWNER_ID__USERNAME_ASC
  USER_BY_OWNER_ID__USERNAME_DESC
  USER_BY_OWNER_ID__PASSWORD_ASC
  USER_BY_OWNER_ID__PASSWORD_DESC
  USER_BY_OWNER_ID__CREATED_ASC
  USER_BY_OWNER_ID__CREATED_DESC
  USER_BY_OWNER_ID__MODIFIED_ASC
  USER_BY_OWNER_ID__MODIFIED_DESC
  USER_BY_OWNER_ID__GROUP_ID_ASC
  USER_BY_OWNER_ID__GROUP_ID_DESC
  USER_BY_OWNER_ID__INITIALS_ASC
  USER_BY_OWNER_ID__INITIALS_DESC
  USER_BY_OWNER_ID__FULLNAME_ASC
  USER_BY_OWNER_ID__FULLNAME_DESC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_OWNER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_OWNER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_OWNER_ID__URL_ASC
  USER_BY_OWNER_ID__URL_DESC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_OWNER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
  USER_TASKS_BY_TASK_ID__COUNT_ASC
  USER_TASKS_BY_TASK_ID__COUNT_DESC
  WEEKLY_HOURS_BY_TASK_ID__COUNT_ASC
  WEEKLY_HOURS_BY_TASK_ID__COUNT_DESC
  WEEKLY_HOUR_REMARKS_BY_TASK_ID__COUNT_ASC
  WEEKLY_HOUR_REMARKS_BY_TASK_ID__COUNT_DESC
}

"""
A condition to be used against `Task` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TaskCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `groupCode` field."""
  groupCode: Int

  """Checks for equality with the object’s `sortCode` field."""
  sortCode: Int

  """Checks for equality with the object’s `wbsoStartDate` field."""
  wbsoStartDate: Date

  """Checks for equality with the object’s `wbsoEndDate` field."""
  wbsoEndDate: Date

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""A connection to a list of `UserRight` values."""
type UserRightsConnection {
  """A list of `UserRight` objects."""
  nodes: [UserRight!]!

  """
  A list of edges which contains the `UserRight` and cursor to aid in pagination.
  """
  edges: [UserRightsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserRight` you could get from the connection."""
  totalCount: Int!
}

type UserRight implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  userId: Int
  path: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  authorized: Boolean!

  """Reads a single `User` that is related to this `UserRight`."""
  userByUserId: User
}

"""A `UserRight` edge in the connection."""
type UserRightsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserRight` at the end of the edge."""
  node: UserRight!
}

"""Methods to use when ordering `UserRight`."""
enum UserRightsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  PATH_ASC
  PATH_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  AUTHORIZED_ASC
  AUTHORIZED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_USER_ID__ID_ASC
  USER_BY_USER_ID__ID_DESC
  USER_BY_USER_ID__USERNAME_ASC
  USER_BY_USER_ID__USERNAME_DESC
  USER_BY_USER_ID__PASSWORD_ASC
  USER_BY_USER_ID__PASSWORD_DESC
  USER_BY_USER_ID__CREATED_ASC
  USER_BY_USER_ID__CREATED_DESC
  USER_BY_USER_ID__MODIFIED_ASC
  USER_BY_USER_ID__MODIFIED_DESC
  USER_BY_USER_ID__GROUP_ID_ASC
  USER_BY_USER_ID__GROUP_ID_DESC
  USER_BY_USER_ID__INITIALS_ASC
  USER_BY_USER_ID__INITIALS_DESC
  USER_BY_USER_ID__FULLNAME_ASC
  USER_BY_USER_ID__FULLNAME_DESC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_ASC
  USER_BY_USER_ID__HOLIDAY_START_BALANCE_DESC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_ASC
  USER_BY_USER_ID__OVERTIME_START_BALANCE_DESC
  USER_BY_USER_ID__URL_ASC
  USER_BY_USER_ID__URL_DESC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_ASC
  USER_BY_USER_ID__WEEKLY_HOURS_FULL_ACCESS_DESC
}

"""
A condition to be used against `UserRight` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserRightCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `path` field."""
  path: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `authorized` field."""
  authorized: Boolean
}

"""A `Action` edge in the connection."""
type ActionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Action` at the end of the edge."""
  node: Action!
}

"""A connection to a list of `AdresMv` values."""
type AdresMvsConnection {
  """A list of `AdresMv` objects."""
  nodes: [AdresMv!]!

  """
  A list of edges which contains the `AdresMv` and cursor to aid in pagination.
  """
  edges: [AdresMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AdresMv` you could get from the connection."""
  totalCount: Int!
}

type AdresMv {
  cdrelatie: Int
  cdadres: Int
  adrestype: String
  naam: String
  naamstraat: String
  straat: String
  woonplaats: String
  postcode: String
  cdland: String
  telefoon: String
  telefax: String
  email: String
  cdtaal: String
  persoon: String
  adresGuid: String
  homepage: String
  telefoonmobiel: String
  cdpersoon: String
}

"""A `AdresMv` edge in the connection."""
type AdresMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AdresMv` at the end of the edge."""
  node: AdresMv!
}

"""Methods to use when ordering `AdresMv`."""
enum AdresMvsOrderBy {
  NATURAL
  CDRELATIE_ASC
  CDRELATIE_DESC
  CDADRES_ASC
  CDADRES_DESC
  ADRESTYPE_ASC
  ADRESTYPE_DESC
  NAAM_ASC
  NAAM_DESC
  NAAMSTRAAT_ASC
  NAAMSTRAAT_DESC
  STRAAT_ASC
  STRAAT_DESC
  WOONPLAATS_ASC
  WOONPLAATS_DESC
  POSTCODE_ASC
  POSTCODE_DESC
  CDLAND_ASC
  CDLAND_DESC
  TELEFOON_ASC
  TELEFOON_DESC
  TELEFAX_ASC
  TELEFAX_DESC
  EMAIL_ASC
  EMAIL_DESC
  CDTAAL_ASC
  CDTAAL_DESC
  PERSOON_ASC
  PERSOON_DESC
  ADRES_GUID_ASC
  ADRES_GUID_DESC
  HOMEPAGE_ASC
  HOMEPAGE_DESC
  TELEFOONMOBIEL_ASC
  TELEFOONMOBIEL_DESC
  CDPERSOON_ASC
  CDPERSOON_DESC
}

"""
A condition to be used against `AdresMv` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AdresMvCondition {
  """Checks for equality with the object’s `cdrelatie` field."""
  cdrelatie: Int

  """Checks for equality with the object’s `cdadres` field."""
  cdadres: Int

  """Checks for equality with the object’s `adrestype` field."""
  adrestype: String

  """Checks for equality with the object’s `naam` field."""
  naam: String

  """Checks for equality with the object’s `naamstraat` field."""
  naamstraat: String

  """Checks for equality with the object’s `straat` field."""
  straat: String

  """Checks for equality with the object’s `woonplaats` field."""
  woonplaats: String

  """Checks for equality with the object’s `postcode` field."""
  postcode: String

  """Checks for equality with the object’s `cdland` field."""
  cdland: String

  """Checks for equality with the object’s `telefoon` field."""
  telefoon: String

  """Checks for equality with the object’s `telefax` field."""
  telefax: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `cdtaal` field."""
  cdtaal: String

  """Checks for equality with the object’s `persoon` field."""
  persoon: String

  """Checks for equality with the object’s `adresGuid` field."""
  adresGuid: String

  """Checks for equality with the object’s `homepage` field."""
  homepage: String

  """Checks for equality with the object’s `telefoonmobiel` field."""
  telefoonmobiel: String

  """Checks for equality with the object’s `cdpersoon` field."""
  cdpersoon: String
}

"""
A filter to be used against `AdresMv` object types. All fields are combined with a logical ‘and.’
"""
input AdresMvFilter {
  """Filter by the object’s `cdrelatie` field."""
  cdrelatie: IntFilter

  """Filter by the object’s `cdadres` field."""
  cdadres: IntFilter

  """Filter by the object’s `adrestype` field."""
  adrestype: StringFilter

  """Filter by the object’s `naam` field."""
  naam: StringFilter

  """Filter by the object’s `naamstraat` field."""
  naamstraat: StringFilter

  """Filter by the object’s `straat` field."""
  straat: StringFilter

  """Filter by the object’s `woonplaats` field."""
  woonplaats: StringFilter

  """Filter by the object’s `postcode` field."""
  postcode: StringFilter

  """Filter by the object’s `cdland` field."""
  cdland: StringFilter

  """Filter by the object’s `telefoon` field."""
  telefoon: StringFilter

  """Filter by the object’s `telefax` field."""
  telefax: StringFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `cdtaal` field."""
  cdtaal: StringFilter

  """Filter by the object’s `persoon` field."""
  persoon: StringFilter

  """Filter by the object’s `adresGuid` field."""
  adresGuid: StringFilter

  """Filter by the object’s `homepage` field."""
  homepage: StringFilter

  """Filter by the object’s `telefoonmobiel` field."""
  telefoonmobiel: StringFilter

  """Filter by the object’s `cdpersoon` field."""
  cdpersoon: StringFilter

  """Checks for all expressions in this list."""
  and: [AdresMvFilter!]

  """Checks for any expressions in this list."""
  or: [AdresMvFilter!]

  """Negates the expression."""
  not: AdresMvFilter
}

"""A connection to a list of `AreaEntity` values."""
type AreaEntitiesConnection {
  """A list of `AreaEntity` objects."""
  nodes: [AreaEntity!]!

  """
  A list of edges which contains the `AreaEntity` and cursor to aid in pagination.
  """
  edges: [AreaEntitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AreaEntity` you could get from the connection."""
  totalCount: Int!
}

type AreaEntity {
  id: Int
  name: String
  created: Datetime
  remarks: String
  floorId: Int
  floorName: String
  buildingId: Int
  buildingName: String
  endUserId: Int
  endUserName: String
  ownerId: Int
  initials: String
}

"""A `AreaEntity` edge in the connection."""
type AreaEntitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AreaEntity` at the end of the edge."""
  node: AreaEntity!
}

"""Methods to use when ordering `AreaEntity`."""
enum AreaEntitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  REMARKS_ASC
  REMARKS_DESC
  FLOOR_ID_ASC
  FLOOR_ID_DESC
  FLOOR_NAME_ASC
  FLOOR_NAME_DESC
  BUILDING_ID_ASC
  BUILDING_ID_DESC
  BUILDING_NAME_ASC
  BUILDING_NAME_DESC
  END_USER_ID_ASC
  END_USER_ID_DESC
  END_USER_NAME_ASC
  END_USER_NAME_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  INITIALS_ASC
  INITIALS_DESC
}

"""
A condition to be used against `AreaEntity` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AreaEntityCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `remarks` field."""
  remarks: String

  """Checks for equality with the object’s `floorId` field."""
  floorId: Int

  """Checks for equality with the object’s `floorName` field."""
  floorName: String

  """Checks for equality with the object’s `buildingId` field."""
  buildingId: Int

  """Checks for equality with the object’s `buildingName` field."""
  buildingName: String

  """Checks for equality with the object’s `endUserId` field."""
  endUserId: Int

  """Checks for equality with the object’s `endUserName` field."""
  endUserName: String

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `initials` field."""
  initials: String
}

"""
A filter to be used against `AreaEntity` object types. All fields are combined with a logical ‘and.’
"""
input AreaEntityFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `remarks` field."""
  remarks: StringFilter

  """Filter by the object’s `floorId` field."""
  floorId: IntFilter

  """Filter by the object’s `floorName` field."""
  floorName: StringFilter

  """Filter by the object’s `buildingId` field."""
  buildingId: IntFilter

  """Filter by the object’s `buildingName` field."""
  buildingName: StringFilter

  """Filter by the object’s `endUserId` field."""
  endUserId: IntFilter

  """Filter by the object’s `endUserName` field."""
  endUserName: StringFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `initials` field."""
  initials: StringFilter

  """Checks for all expressions in this list."""
  and: [AreaEntityFilter!]

  """Checks for any expressions in this list."""
  or: [AreaEntityFilter!]

  """Negates the expression."""
  not: AreaEntityFilter
}

"""A connection to a list of `Aro` values."""
type ArosConnection {
  """A list of `Aro` objects."""
  nodes: [Aro!]!

  """
  A list of edges which contains the `Aro` and cursor to aid in pagination.
  """
  edges: [ArosEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Aro` you could get from the connection."""
  totalCount: Int!
}

type Aro implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  parentId: Int
  model: String
  foreignKey: Int
  alias: String
  lft: Int
  rght: Int
}

"""A `Aro` edge in the connection."""
type ArosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Aro` at the end of the edge."""
  node: Aro!
}

"""Methods to use when ordering `Aro`."""
enum ArosOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PARENT_ID_ASC
  PARENT_ID_DESC
  MODEL_ASC
  MODEL_DESC
  FOREIGN_KEY_ASC
  FOREIGN_KEY_DESC
  ALIAS_ASC
  ALIAS_DESC
  LFT_ASC
  LFT_DESC
  RGHT_ASC
  RGHT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Aro` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AroCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `parentId` field."""
  parentId: Int

  """Checks for equality with the object’s `model` field."""
  model: String

  """Checks for equality with the object’s `foreignKey` field."""
  foreignKey: Int

  """Checks for equality with the object’s `alias` field."""
  alias: String

  """Checks for equality with the object’s `lft` field."""
  lft: Int

  """Checks for equality with the object’s `rght` field."""
  rght: Int
}

"""
A filter to be used against `Aro` object types. All fields are combined with a logical ‘and.’
"""
input AroFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `parentId` field."""
  parentId: IntFilter

  """Filter by the object’s `model` field."""
  model: StringFilter

  """Filter by the object’s `foreignKey` field."""
  foreignKey: IntFilter

  """Filter by the object’s `alias` field."""
  alias: StringFilter

  """Filter by the object’s `lft` field."""
  lft: IntFilter

  """Filter by the object’s `rght` field."""
  rght: IntFilter

  """Checks for all expressions in this list."""
  and: [AroFilter!]

  """Checks for any expressions in this list."""
  or: [AroFilter!]

  """Negates the expression."""
  not: AroFilter
}

"""A connection to a list of `ArosAco` values."""
type ArosAcosConnection {
  """A list of `ArosAco` objects."""
  nodes: [ArosAco!]!

  """
  A list of edges which contains the `ArosAco` and cursor to aid in pagination.
  """
  edges: [ArosAcosEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ArosAco` you could get from the connection."""
  totalCount: Int!
}

type ArosAco implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  aroId: Int!
  acoId: Int!
  _create: String!
  _read: String!
  _update: String!
  _delete: String!
}

"""A `ArosAco` edge in the connection."""
type ArosAcosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ArosAco` at the end of the edge."""
  node: ArosAco!
}

"""Methods to use when ordering `ArosAco`."""
enum ArosAcosOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ARO_ID_ASC
  ARO_ID_DESC
  ACO_ID_ASC
  ACO_ID_DESC
  _CREATE_ASC
  _CREATE_DESC
  _READ_ASC
  _READ_DESC
  _UPDATE_ASC
  _UPDATE_DESC
  _DELETE_ASC
  _DELETE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ArosAco` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ArosAcoCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `aroId` field."""
  aroId: Int

  """Checks for equality with the object’s `acoId` field."""
  acoId: Int

  """Checks for equality with the object’s `_create` field."""
  _create: String

  """Checks for equality with the object’s `_read` field."""
  _read: String

  """Checks for equality with the object’s `_update` field."""
  _update: String

  """Checks for equality with the object’s `_delete` field."""
  _delete: String
}

"""
A filter to be used against `ArosAco` object types. All fields are combined with a logical ‘and.’
"""
input ArosAcoFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `aroId` field."""
  aroId: IntFilter

  """Filter by the object’s `acoId` field."""
  acoId: IntFilter

  """Filter by the object’s `_create` field."""
  _create: StringFilter

  """Filter by the object’s `_read` field."""
  _read: StringFilter

  """Filter by the object’s `_update` field."""
  _update: StringFilter

  """Filter by the object’s `_delete` field."""
  _delete: StringFilter

  """Checks for all expressions in this list."""
  and: [ArosAcoFilter!]

  """Checks for any expressions in this list."""
  or: [ArosAcoFilter!]

  """Negates the expression."""
  not: ArosAcoFilter
}

"""A connection to a list of `Artikel` values."""
type ArtikelsConnection {
  """A list of `Artikel` objects."""
  nodes: [Artikel!]!

  """
  A list of edges which contains the `Artikel` and cursor to aid in pagination.
  """
  edges: [ArtikelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Artikel` you could get from the connection."""
  totalCount: Int!
}

"""A `Artikel` edge in the connection."""
type ArtikelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Artikel` at the end of the edge."""
  node: Artikel!
}

"""Methods to use when ordering `Artikel`."""
enum ArtikelsOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  SOORT_ASC
  SOORT_DESC
  CDARTGROEP_ASC
  CDARTGROEP_DESC
  CDGRBREKENING_ASC
  CDGRBREKENING_DESC
  PRIJSPER_ASC
  PRIJSPER_DESC
  AANTALDEC_ASC
  AANTALDEC_DESC
  PRIJSINCL_ASC
  PRIJSINCL_DESC
  PRIJSEXCL_ASC
  PRIJSEXCL_DESC
  VERREKENPRIJS_ASC
  VERREKENPRIJS_DESC
  VOORRAAD_ASC
  VOORRAAD_DESC
  MINVOORRAAD_ASC
  MINVOORRAAD_DESC
  MAXVOORRAAD_ASC
  MAXVOORRAAD_DESC
  EENHEID_ASC
  EENHEID_DESC
  BTWCODE_ASC
  BTWCODE_DESC
  CDARTKORTGRP_ASC
  CDARTKORTGRP_DESC
  CDGOEDCODE_ASC
  CDGOEDCODE_DESC
  GEWICHT_ASC
  GEWICHT_DESC
  AANVEENH_ASC
  AANVEENH_DESC
  INKVOLGNR_ASC
  INKVOLGNR_DESC
  UITLOOP_ASC
  UITLOOP_DESC
  AANMAAKDATUM_ASC
  AANMAAKDATUM_DESC
  OPWEB_ASC
  OPWEB_DESC
  MAGBON_ASC
  MAGBON_DESC
  PAKBON_ASC
  PAKBON_DESC
  FACTUUR_ASC
  FACTUUR_DESC
  CDGRBREKKORT_ASC
  CDGRBREKKORT_DESC
  DATUMLTSTEWIJZ_ASC
  DATUMLTSTEWIJZ_DESC
  CDGRBREKDEKKING_ASC
  CDGRBREKDEKKING_DESC
  PROJ_OPSLAG_ASC
  PROJ_OPSLAG_DESC
  PROJ_MUTSOORT_ASC
  PROJ_MUTSOORT_DESC
  EANNUMMER_ASC
  EANNUMMER_DESC
  AFDRUK_SAM_OP_OFFERTE_ASC
  AFDRUK_SAM_OP_OFFERTE_DESC
  SAM_VERSIE_ASC
  SAM_VERSIE_DESC
  ASSEMBLAGE_ARTIKEL_ASC
  ASSEMBLAGE_ARTIKEL_DESC
  MARGE_PERC_ASC
  MARGE_PERC_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  SYS_CREATE_ASC
  SYS_CREATE_DESC
  SYS_UPDATE_ASC
  SYS_UPDATE_DESC
  VVBESTAND_ASC
  VVBESTAND_DESC
  VVGROEP_ASC
  VVGROEP_DESC
  VVVRIJVELDA_ASC
  VVVRIJVELDA_DESC
  VVVRIJVELDB_ASC
  VVVRIJVELDB_DESC
  CDLAND_OORSPR_ASC
  CDLAND_OORSPR_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ASSEMBLY_TYPES_BY_CDARTIKEL__COUNT_ASC
  ASSEMBLY_TYPES_BY_CDARTIKEL__COUNT_DESC
}

"""
A condition to be used against `Artikel` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ArtikelCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `soort` field."""
  soort: String

  """Checks for equality with the object’s `cdartgroep` field."""
  cdartgroep: String

  """Checks for equality with the object’s `cdgrbrekening` field."""
  cdgrbrekening: String

  """Checks for equality with the object’s `prijsper` field."""
  prijsper: BigFloat

  """Checks for equality with the object’s `aantaldec` field."""
  aantaldec: Int

  """Checks for equality with the object’s `prijsincl` field."""
  prijsincl: BigFloat

  """Checks for equality with the object’s `prijsexcl` field."""
  prijsexcl: BigFloat

  """Checks for equality with the object’s `verrekenprijs` field."""
  verrekenprijs: BigFloat

  """Checks for equality with the object’s `voorraad` field."""
  voorraad: BigFloat

  """Checks for equality with the object’s `minvoorraad` field."""
  minvoorraad: BigFloat

  """Checks for equality with the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloat

  """Checks for equality with the object’s `eenheid` field."""
  eenheid: String

  """Checks for equality with the object’s `btwcode` field."""
  btwcode: Int

  """Checks for equality with the object’s `cdartkortgrp` field."""
  cdartkortgrp: String

  """Checks for equality with the object’s `cdgoedcode` field."""
  cdgoedcode: Int

  """Checks for equality with the object’s `gewicht` field."""
  gewicht: BigFloat

  """Checks for equality with the object’s `aanveenh` field."""
  aanveenh: BigFloat

  """Checks for equality with the object’s `inkvolgnr` field."""
  inkvolgnr: Int

  """Checks for equality with the object’s `uitloop` field."""
  uitloop: String

  """Checks for equality with the object’s `aanmaakdatum` field."""
  aanmaakdatum: Date

  """Checks for equality with the object’s `opweb` field."""
  opweb: String

  """Checks for equality with the object’s `magbon` field."""
  magbon: String

  """Checks for equality with the object’s `pakbon` field."""
  pakbon: String

  """Checks for equality with the object’s `factuur` field."""
  factuur: String

  """Checks for equality with the object’s `cdgrbrekkort` field."""
  cdgrbrekkort: String

  """Checks for equality with the object’s `datumltstewijz` field."""
  datumltstewijz: Date

  """Checks for equality with the object’s `cdgrbrekdekking` field."""
  cdgrbrekdekking: String

  """Checks for equality with the object’s `projOpslag` field."""
  projOpslag: BigFloat

  """Checks for equality with the object’s `projMutsoort` field."""
  projMutsoort: String

  """Checks for equality with the object’s `eannummer` field."""
  eannummer: String

  """Checks for equality with the object’s `afdrukSamOpOfferte` field."""
  afdrukSamOpOfferte: String

  """Checks for equality with the object’s `samVersie` field."""
  samVersie: String

  """Checks for equality with the object’s `assemblageArtikel` field."""
  assemblageArtikel: String

  """Checks for equality with the object’s `margePerc` field."""
  margePerc: BigFloat

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `sysCreate` field."""
  sysCreate: String

  """Checks for equality with the object’s `sysUpdate` field."""
  sysUpdate: String

  """Checks for equality with the object’s `vvbestand` field."""
  vvbestand: String

  """Checks for equality with the object’s `vvgroep` field."""
  vvgroep: String

  """Checks for equality with the object’s `vvvrijvelda` field."""
  vvvrijvelda: String

  """Checks for equality with the object’s `vvvrijveldb` field."""
  vvvrijveldb: String

  """Checks for equality with the object’s `cdlandOorspr` field."""
  cdlandOorspr: String
}

"""A connection to a list of `Artikel2` values."""
type Artikel2SConnection {
  """A list of `Artikel2` objects."""
  nodes: [Artikel2!]!

  """
  A list of edges which contains the `Artikel2` and cursor to aid in pagination.
  """
  edges: [Artikel2SEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Artikel2` you could get from the connection."""
  totalCount: Int!
}

type Artikel2 {
  cdartikel: String
  zoeknaam: String
  omschr: String
  soort: String
  cdartgroep: String
  cdgrbrekening: String
  prijsper: BigFloat
  aantaldec: Int
  prijsincl: BigFloat
  prijsexcl: BigFloat
  verrekenprijs: BigFloat
  voorraad: BigFloat
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  eenheid: String
  btwcode: Int
  cdartkortgrp: String
  cdgoedcode: Int
  gewicht: BigFloat
  aanveenh: BigFloat
  inkvolgnr: Int
  uitloop: String
  aanmaakdatum: Date
  opweb: String
  magbon: String
  pakbon: String
  factuur: String
  cdgrbrekkort: String
  datumltstewijz: Date
  cdgrbrekdekking: String
  projOpslag: BigFloat
  projMutsoort: String
  eannummer: String
  afdrukSamOpOfferte: String
  samVersie: String
  assemblageArtikel: String
  margePerc: BigFloat
  guidItem: String
  sysCreate: String
  sysUpdate: String
  vvbestand: String
  vvgroep: String
  vvvrijvelda: String
  vvvrijveldb: String
  cdlandOorspr: String
}

"""A `Artikel2` edge in the connection."""
type Artikel2SEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Artikel2` at the end of the edge."""
  node: Artikel2!
}

"""Methods to use when ordering `Artikel2`."""
enum Artikel2SOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  SOORT_ASC
  SOORT_DESC
  CDARTGROEP_ASC
  CDARTGROEP_DESC
  CDGRBREKENING_ASC
  CDGRBREKENING_DESC
  PRIJSPER_ASC
  PRIJSPER_DESC
  AANTALDEC_ASC
  AANTALDEC_DESC
  PRIJSINCL_ASC
  PRIJSINCL_DESC
  PRIJSEXCL_ASC
  PRIJSEXCL_DESC
  VERREKENPRIJS_ASC
  VERREKENPRIJS_DESC
  VOORRAAD_ASC
  VOORRAAD_DESC
  MINVOORRAAD_ASC
  MINVOORRAAD_DESC
  MAXVOORRAAD_ASC
  MAXVOORRAAD_DESC
  EENHEID_ASC
  EENHEID_DESC
  BTWCODE_ASC
  BTWCODE_DESC
  CDARTKORTGRP_ASC
  CDARTKORTGRP_DESC
  CDGOEDCODE_ASC
  CDGOEDCODE_DESC
  GEWICHT_ASC
  GEWICHT_DESC
  AANVEENH_ASC
  AANVEENH_DESC
  INKVOLGNR_ASC
  INKVOLGNR_DESC
  UITLOOP_ASC
  UITLOOP_DESC
  AANMAAKDATUM_ASC
  AANMAAKDATUM_DESC
  OPWEB_ASC
  OPWEB_DESC
  MAGBON_ASC
  MAGBON_DESC
  PAKBON_ASC
  PAKBON_DESC
  FACTUUR_ASC
  FACTUUR_DESC
  CDGRBREKKORT_ASC
  CDGRBREKKORT_DESC
  DATUMLTSTEWIJZ_ASC
  DATUMLTSTEWIJZ_DESC
  CDGRBREKDEKKING_ASC
  CDGRBREKDEKKING_DESC
  PROJ_OPSLAG_ASC
  PROJ_OPSLAG_DESC
  PROJ_MUTSOORT_ASC
  PROJ_MUTSOORT_DESC
  EANNUMMER_ASC
  EANNUMMER_DESC
  AFDRUK_SAM_OP_OFFERTE_ASC
  AFDRUK_SAM_OP_OFFERTE_DESC
  SAM_VERSIE_ASC
  SAM_VERSIE_DESC
  ASSEMBLAGE_ARTIKEL_ASC
  ASSEMBLAGE_ARTIKEL_DESC
  MARGE_PERC_ASC
  MARGE_PERC_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  SYS_CREATE_ASC
  SYS_CREATE_DESC
  SYS_UPDATE_ASC
  SYS_UPDATE_DESC
  VVBESTAND_ASC
  VVBESTAND_DESC
  VVGROEP_ASC
  VVGROEP_DESC
  VVVRIJVELDA_ASC
  VVVRIJVELDA_DESC
  VVVRIJVELDB_ASC
  VVVRIJVELDB_DESC
  CDLAND_OORSPR_ASC
  CDLAND_OORSPR_DESC
}

"""
A condition to be used against `Artikel2` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input Artikel2Condition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `soort` field."""
  soort: String

  """Checks for equality with the object’s `cdartgroep` field."""
  cdartgroep: String

  """Checks for equality with the object’s `cdgrbrekening` field."""
  cdgrbrekening: String

  """Checks for equality with the object’s `prijsper` field."""
  prijsper: BigFloat

  """Checks for equality with the object’s `aantaldec` field."""
  aantaldec: Int

  """Checks for equality with the object’s `prijsincl` field."""
  prijsincl: BigFloat

  """Checks for equality with the object’s `prijsexcl` field."""
  prijsexcl: BigFloat

  """Checks for equality with the object’s `verrekenprijs` field."""
  verrekenprijs: BigFloat

  """Checks for equality with the object’s `voorraad` field."""
  voorraad: BigFloat

  """Checks for equality with the object’s `minvoorraad` field."""
  minvoorraad: BigFloat

  """Checks for equality with the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloat

  """Checks for equality with the object’s `eenheid` field."""
  eenheid: String

  """Checks for equality with the object’s `btwcode` field."""
  btwcode: Int

  """Checks for equality with the object’s `cdartkortgrp` field."""
  cdartkortgrp: String

  """Checks for equality with the object’s `cdgoedcode` field."""
  cdgoedcode: Int

  """Checks for equality with the object’s `gewicht` field."""
  gewicht: BigFloat

  """Checks for equality with the object’s `aanveenh` field."""
  aanveenh: BigFloat

  """Checks for equality with the object’s `inkvolgnr` field."""
  inkvolgnr: Int

  """Checks for equality with the object’s `uitloop` field."""
  uitloop: String

  """Checks for equality with the object’s `aanmaakdatum` field."""
  aanmaakdatum: Date

  """Checks for equality with the object’s `opweb` field."""
  opweb: String

  """Checks for equality with the object’s `magbon` field."""
  magbon: String

  """Checks for equality with the object’s `pakbon` field."""
  pakbon: String

  """Checks for equality with the object’s `factuur` field."""
  factuur: String

  """Checks for equality with the object’s `cdgrbrekkort` field."""
  cdgrbrekkort: String

  """Checks for equality with the object’s `datumltstewijz` field."""
  datumltstewijz: Date

  """Checks for equality with the object’s `cdgrbrekdekking` field."""
  cdgrbrekdekking: String

  """Checks for equality with the object’s `projOpslag` field."""
  projOpslag: BigFloat

  """Checks for equality with the object’s `projMutsoort` field."""
  projMutsoort: String

  """Checks for equality with the object’s `eannummer` field."""
  eannummer: String

  """Checks for equality with the object’s `afdrukSamOpOfferte` field."""
  afdrukSamOpOfferte: String

  """Checks for equality with the object’s `samVersie` field."""
  samVersie: String

  """Checks for equality with the object’s `assemblageArtikel` field."""
  assemblageArtikel: String

  """Checks for equality with the object’s `margePerc` field."""
  margePerc: BigFloat

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `sysCreate` field."""
  sysCreate: String

  """Checks for equality with the object’s `sysUpdate` field."""
  sysUpdate: String

  """Checks for equality with the object’s `vvbestand` field."""
  vvbestand: String

  """Checks for equality with the object’s `vvgroep` field."""
  vvgroep: String

  """Checks for equality with the object’s `vvvrijvelda` field."""
  vvvrijvelda: String

  """Checks for equality with the object’s `vvvrijveldb` field."""
  vvvrijveldb: String

  """Checks for equality with the object’s `cdlandOorspr` field."""
  cdlandOorspr: String
}

"""
A filter to be used against `Artikel2` object types. All fields are combined with a logical ‘and.’
"""
input Artikel2Filter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `soort` field."""
  soort: StringFilter

  """Filter by the object’s `cdartgroep` field."""
  cdartgroep: StringFilter

  """Filter by the object’s `cdgrbrekening` field."""
  cdgrbrekening: StringFilter

  """Filter by the object’s `prijsper` field."""
  prijsper: BigFloatFilter

  """Filter by the object’s `aantaldec` field."""
  aantaldec: IntFilter

  """Filter by the object’s `prijsincl` field."""
  prijsincl: BigFloatFilter

  """Filter by the object’s `prijsexcl` field."""
  prijsexcl: BigFloatFilter

  """Filter by the object’s `verrekenprijs` field."""
  verrekenprijs: BigFloatFilter

  """Filter by the object’s `voorraad` field."""
  voorraad: BigFloatFilter

  """Filter by the object’s `minvoorraad` field."""
  minvoorraad: BigFloatFilter

  """Filter by the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloatFilter

  """Filter by the object’s `eenheid` field."""
  eenheid: StringFilter

  """Filter by the object’s `btwcode` field."""
  btwcode: IntFilter

  """Filter by the object’s `cdartkortgrp` field."""
  cdartkortgrp: StringFilter

  """Filter by the object’s `cdgoedcode` field."""
  cdgoedcode: IntFilter

  """Filter by the object’s `gewicht` field."""
  gewicht: BigFloatFilter

  """Filter by the object’s `aanveenh` field."""
  aanveenh: BigFloatFilter

  """Filter by the object’s `inkvolgnr` field."""
  inkvolgnr: IntFilter

  """Filter by the object’s `uitloop` field."""
  uitloop: StringFilter

  """Filter by the object’s `aanmaakdatum` field."""
  aanmaakdatum: DateFilter

  """Filter by the object’s `opweb` field."""
  opweb: StringFilter

  """Filter by the object’s `magbon` field."""
  magbon: StringFilter

  """Filter by the object’s `pakbon` field."""
  pakbon: StringFilter

  """Filter by the object’s `factuur` field."""
  factuur: StringFilter

  """Filter by the object’s `cdgrbrekkort` field."""
  cdgrbrekkort: StringFilter

  """Filter by the object’s `datumltstewijz` field."""
  datumltstewijz: DateFilter

  """Filter by the object’s `cdgrbrekdekking` field."""
  cdgrbrekdekking: StringFilter

  """Filter by the object’s `projOpslag` field."""
  projOpslag: BigFloatFilter

  """Filter by the object’s `projMutsoort` field."""
  projMutsoort: StringFilter

  """Filter by the object’s `eannummer` field."""
  eannummer: StringFilter

  """Filter by the object’s `afdrukSamOpOfferte` field."""
  afdrukSamOpOfferte: StringFilter

  """Filter by the object’s `samVersie` field."""
  samVersie: StringFilter

  """Filter by the object’s `assemblageArtikel` field."""
  assemblageArtikel: StringFilter

  """Filter by the object’s `margePerc` field."""
  margePerc: BigFloatFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `sysCreate` field."""
  sysCreate: StringFilter

  """Filter by the object’s `sysUpdate` field."""
  sysUpdate: StringFilter

  """Filter by the object’s `vvbestand` field."""
  vvbestand: StringFilter

  """Filter by the object’s `vvgroep` field."""
  vvgroep: StringFilter

  """Filter by the object’s `vvvrijvelda` field."""
  vvvrijvelda: StringFilter

  """Filter by the object’s `vvvrijveldb` field."""
  vvvrijveldb: StringFilter

  """Filter by the object’s `cdlandOorspr` field."""
  cdlandOorspr: StringFilter

  """Checks for all expressions in this list."""
  and: [Artikel2Filter!]

  """Checks for any expressions in this list."""
  or: [Artikel2Filter!]

  """Negates the expression."""
  not: Artikel2Filter
}

"""A connection to a list of `ArtikelAssemblyIndex` values."""
type ArtikelAssemblyIndicesConnection {
  """A list of `ArtikelAssemblyIndex` objects."""
  nodes: [ArtikelAssemblyIndex!]!

  """
  A list of edges which contains the `ArtikelAssemblyIndex` and cursor to aid in pagination.
  """
  edges: [ArtikelAssemblyIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ArtikelAssemblyIndex` you could get from the connection.
  """
  totalCount: Int!
}

type ArtikelAssemblyIndex {
  cdartikel: String
  omschr: String
  verrekenprijs: BigFloat
  assemblageArtikel: String
  besthoeveelheid: BigFloat
  voorraad: BigFloat
  inkopen: BigFloat
  assemblbij: BigFloat
  gereserveerd: BigFloat
  assemblaf: BigFloat
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  vrij: BigFloat
  advice: BigFloat
}

"""A `ArtikelAssemblyIndex` edge in the connection."""
type ArtikelAssemblyIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ArtikelAssemblyIndex` at the end of the edge."""
  node: ArtikelAssemblyIndex!
}

"""Methods to use when ordering `ArtikelAssemblyIndex`."""
enum ArtikelAssemblyIndicesOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  VERREKENPRIJS_ASC
  VERREKENPRIJS_DESC
  ASSEMBLAGE_ARTIKEL_ASC
  ASSEMBLAGE_ARTIKEL_DESC
  BESTHOEVEELHEID_ASC
  BESTHOEVEELHEID_DESC
  VOORRAAD_ASC
  VOORRAAD_DESC
  INKOPEN_ASC
  INKOPEN_DESC
  ASSEMBLBIJ_ASC
  ASSEMBLBIJ_DESC
  GERESERVEERD_ASC
  GERESERVEERD_DESC
  ASSEMBLAF_ASC
  ASSEMBLAF_DESC
  MINVOORRAAD_ASC
  MINVOORRAAD_DESC
  MAXVOORRAAD_ASC
  MAXVOORRAAD_DESC
  VRIJ_ASC
  VRIJ_DESC
  ADVICE_ASC
  ADVICE_DESC
}

"""
A condition to be used against `ArtikelAssemblyIndex` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ArtikelAssemblyIndexCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `verrekenprijs` field."""
  verrekenprijs: BigFloat

  """Checks for equality with the object’s `assemblageArtikel` field."""
  assemblageArtikel: String

  """Checks for equality with the object’s `besthoeveelheid` field."""
  besthoeveelheid: BigFloat

  """Checks for equality with the object’s `voorraad` field."""
  voorraad: BigFloat

  """Checks for equality with the object’s `inkopen` field."""
  inkopen: BigFloat

  """Checks for equality with the object’s `assemblbij` field."""
  assemblbij: BigFloat

  """Checks for equality with the object’s `gereserveerd` field."""
  gereserveerd: BigFloat

  """Checks for equality with the object’s `assemblaf` field."""
  assemblaf: BigFloat

  """Checks for equality with the object’s `minvoorraad` field."""
  minvoorraad: BigFloat

  """Checks for equality with the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloat

  """Checks for equality with the object’s `vrij` field."""
  vrij: BigFloat

  """Checks for equality with the object’s `advice` field."""
  advice: BigFloat
}

"""
A filter to be used against `ArtikelAssemblyIndex` object types. All fields are combined with a logical ‘and.’
"""
input ArtikelAssemblyIndexFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `verrekenprijs` field."""
  verrekenprijs: BigFloatFilter

  """Filter by the object’s `assemblageArtikel` field."""
  assemblageArtikel: StringFilter

  """Filter by the object’s `besthoeveelheid` field."""
  besthoeveelheid: BigFloatFilter

  """Filter by the object’s `voorraad` field."""
  voorraad: BigFloatFilter

  """Filter by the object’s `inkopen` field."""
  inkopen: BigFloatFilter

  """Filter by the object’s `assemblbij` field."""
  assemblbij: BigFloatFilter

  """Filter by the object’s `gereserveerd` field."""
  gereserveerd: BigFloatFilter

  """Filter by the object’s `assemblaf` field."""
  assemblaf: BigFloatFilter

  """Filter by the object’s `minvoorraad` field."""
  minvoorraad: BigFloatFilter

  """Filter by the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloatFilter

  """Filter by the object’s `vrij` field."""
  vrij: BigFloatFilter

  """Filter by the object’s `advice` field."""
  advice: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [ArtikelAssemblyIndexFilter!]

  """Checks for any expressions in this list."""
  or: [ArtikelAssemblyIndexFilter!]

  """Negates the expression."""
  not: ArtikelAssemblyIndexFilter
}

"""A connection to a list of `ArtikelComponenten` values."""
type ArtikelComponentensConnection {
  """A list of `ArtikelComponenten` objects."""
  nodes: [ArtikelComponenten!]!

  """
  A list of edges which contains the `ArtikelComponenten` and cursor to aid in pagination.
  """
  edges: [ArtikelComponentensEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ArtikelComponenten` you could get from the connection.
  """
  totalCount: Int!
}

type ArtikelComponenten {
  cdartsamenstel: String
  cdartikel: String
  samVersie: String
  omschr: String
  aantal: BigFloat
  locatie: String
  inkopen: BigFloat
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  voorraad: BigFloat
  gereserveerd: BigFloat
  assemblaf: BigFloat
  vrij: BigFloat
  virtualStock: BigFloat
  bestcode: String
  cdcrediteur: String
  zoeknaam: String
}

"""A `ArtikelComponenten` edge in the connection."""
type ArtikelComponentensEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ArtikelComponenten` at the end of the edge."""
  node: ArtikelComponenten!
}

"""Methods to use when ordering `ArtikelComponenten`."""
enum ArtikelComponentensOrderBy {
  NATURAL
  CDARTSAMENSTEL_ASC
  CDARTSAMENSTEL_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  SAM_VERSIE_ASC
  SAM_VERSIE_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  AANTAL_ASC
  AANTAL_DESC
  LOCATIE_ASC
  LOCATIE_DESC
  INKOPEN_ASC
  INKOPEN_DESC
  MINVOORRAAD_ASC
  MINVOORRAAD_DESC
  MAXVOORRAAD_ASC
  MAXVOORRAAD_DESC
  VOORRAAD_ASC
  VOORRAAD_DESC
  GERESERVEERD_ASC
  GERESERVEERD_DESC
  ASSEMBLAF_ASC
  ASSEMBLAF_DESC
  VRIJ_ASC
  VRIJ_DESC
  VIRTUAL_STOCK_ASC
  VIRTUAL_STOCK_DESC
  BESTCODE_ASC
  BESTCODE_DESC
  CDCREDITEUR_ASC
  CDCREDITEUR_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
}

"""
A condition to be used against `ArtikelComponenten` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ArtikelComponentenCondition {
  """Checks for equality with the object’s `cdartsamenstel` field."""
  cdartsamenstel: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `samVersie` field."""
  samVersie: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `aantal` field."""
  aantal: BigFloat

  """Checks for equality with the object’s `locatie` field."""
  locatie: String

  """Checks for equality with the object’s `inkopen` field."""
  inkopen: BigFloat

  """Checks for equality with the object’s `minvoorraad` field."""
  minvoorraad: BigFloat

  """Checks for equality with the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloat

  """Checks for equality with the object’s `voorraad` field."""
  voorraad: BigFloat

  """Checks for equality with the object’s `gereserveerd` field."""
  gereserveerd: BigFloat

  """Checks for equality with the object’s `assemblaf` field."""
  assemblaf: BigFloat

  """Checks for equality with the object’s `vrij` field."""
  vrij: BigFloat

  """Checks for equality with the object’s `virtualStock` field."""
  virtualStock: BigFloat

  """Checks for equality with the object’s `bestcode` field."""
  bestcode: String

  """Checks for equality with the object’s `cdcrediteur` field."""
  cdcrediteur: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String
}

"""
A filter to be used against `ArtikelComponenten` object types. All fields are combined with a logical ‘and.’
"""
input ArtikelComponentenFilter {
  """Filter by the object’s `cdartsamenstel` field."""
  cdartsamenstel: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `samVersie` field."""
  samVersie: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `aantal` field."""
  aantal: BigFloatFilter

  """Filter by the object’s `locatie` field."""
  locatie: StringFilter

  """Filter by the object’s `inkopen` field."""
  inkopen: BigFloatFilter

  """Filter by the object’s `minvoorraad` field."""
  minvoorraad: BigFloatFilter

  """Filter by the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloatFilter

  """Filter by the object’s `voorraad` field."""
  voorraad: BigFloatFilter

  """Filter by the object’s `gereserveerd` field."""
  gereserveerd: BigFloatFilter

  """Filter by the object’s `assemblaf` field."""
  assemblaf: BigFloatFilter

  """Filter by the object’s `vrij` field."""
  vrij: BigFloatFilter

  """Filter by the object’s `virtualStock` field."""
  virtualStock: BigFloatFilter

  """Filter by the object’s `bestcode` field."""
  bestcode: StringFilter

  """Filter by the object’s `cdcrediteur` field."""
  cdcrediteur: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Checks for all expressions in this list."""
  and: [ArtikelComponentenFilter!]

  """Checks for any expressions in this list."""
  or: [ArtikelComponentenFilter!]

  """Negates the expression."""
  not: ArtikelComponentenFilter
}

"""A connection to a list of `ArtikelIndex` values."""
type ArtikelIndicesConnection {
  """A list of `ArtikelIndex` objects."""
  nodes: [ArtikelIndex!]!

  """
  A list of edges which contains the `ArtikelIndex` and cursor to aid in pagination.
  """
  edges: [ArtikelIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ArtikelIndex` you could get from the connection."""
  totalCount: Int!
}

type ArtikelIndex {
  cdartikel: String
  omschr: String
  prijsexcl: BigFloat
  margin: BigFloat
  uitloop: String
  locatie: String
  voorraad: BigFloat
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  voorraadGereserveerd2: BigFloat
  gereserveerd: BigFloat
  inkopen: BigFloat
  assemblbij: BigFloat
  assemblaf: BigFloat
  voorraadVrij: BigFloat
  samenstelling: String
  virtualStock: BigFloat
  virtualStock2: BigFloat
  cdcrediteur: String
  zoeknaam: String
}

"""A `ArtikelIndex` edge in the connection."""
type ArtikelIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ArtikelIndex` at the end of the edge."""
  node: ArtikelIndex!
}

"""Methods to use when ordering `ArtikelIndex`."""
enum ArtikelIndicesOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  PRIJSEXCL_ASC
  PRIJSEXCL_DESC
  MARGIN_ASC
  MARGIN_DESC
  UITLOOP_ASC
  UITLOOP_DESC
  LOCATIE_ASC
  LOCATIE_DESC
  VOORRAAD_ASC
  VOORRAAD_DESC
  MINVOORRAAD_ASC
  MINVOORRAAD_DESC
  MAXVOORRAAD_ASC
  MAXVOORRAAD_DESC
  VOORRAAD_GERESERVEERD2_ASC
  VOORRAAD_GERESERVEERD2_DESC
  GERESERVEERD_ASC
  GERESERVEERD_DESC
  INKOPEN_ASC
  INKOPEN_DESC
  ASSEMBLBIJ_ASC
  ASSEMBLBIJ_DESC
  ASSEMBLAF_ASC
  ASSEMBLAF_DESC
  VOORRAAD_VRIJ_ASC
  VOORRAAD_VRIJ_DESC
  SAMENSTELLING_ASC
  SAMENSTELLING_DESC
  VIRTUAL_STOCK_ASC
  VIRTUAL_STOCK_DESC
  VIRTUAL_STOCK2_ASC
  VIRTUAL_STOCK2_DESC
  CDCREDITEUR_ASC
  CDCREDITEUR_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
}

"""
A condition to be used against `ArtikelIndex` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ArtikelIndexCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `prijsexcl` field."""
  prijsexcl: BigFloat

  """Checks for equality with the object’s `margin` field."""
  margin: BigFloat

  """Checks for equality with the object’s `uitloop` field."""
  uitloop: String

  """Checks for equality with the object’s `locatie` field."""
  locatie: String

  """Checks for equality with the object’s `voorraad` field."""
  voorraad: BigFloat

  """Checks for equality with the object’s `minvoorraad` field."""
  minvoorraad: BigFloat

  """Checks for equality with the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloat

  """Checks for equality with the object’s `voorraadGereserveerd2` field."""
  voorraadGereserveerd2: BigFloat

  """Checks for equality with the object’s `gereserveerd` field."""
  gereserveerd: BigFloat

  """Checks for equality with the object’s `inkopen` field."""
  inkopen: BigFloat

  """Checks for equality with the object’s `assemblbij` field."""
  assemblbij: BigFloat

  """Checks for equality with the object’s `assemblaf` field."""
  assemblaf: BigFloat

  """Checks for equality with the object’s `voorraadVrij` field."""
  voorraadVrij: BigFloat

  """Checks for equality with the object’s `samenstelling` field."""
  samenstelling: String

  """Checks for equality with the object’s `virtualStock` field."""
  virtualStock: BigFloat

  """Checks for equality with the object’s `virtualStock2` field."""
  virtualStock2: BigFloat

  """Checks for equality with the object’s `cdcrediteur` field."""
  cdcrediteur: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String
}

"""
A filter to be used against `ArtikelIndex` object types. All fields are combined with a logical ‘and.’
"""
input ArtikelIndexFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `prijsexcl` field."""
  prijsexcl: BigFloatFilter

  """Filter by the object’s `margin` field."""
  margin: BigFloatFilter

  """Filter by the object’s `uitloop` field."""
  uitloop: StringFilter

  """Filter by the object’s `locatie` field."""
  locatie: StringFilter

  """Filter by the object’s `voorraad` field."""
  voorraad: BigFloatFilter

  """Filter by the object’s `minvoorraad` field."""
  minvoorraad: BigFloatFilter

  """Filter by the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloatFilter

  """Filter by the object’s `voorraadGereserveerd2` field."""
  voorraadGereserveerd2: BigFloatFilter

  """Filter by the object’s `gereserveerd` field."""
  gereserveerd: BigFloatFilter

  """Filter by the object’s `inkopen` field."""
  inkopen: BigFloatFilter

  """Filter by the object’s `assemblbij` field."""
  assemblbij: BigFloatFilter

  """Filter by the object’s `assemblaf` field."""
  assemblaf: BigFloatFilter

  """Filter by the object’s `voorraadVrij` field."""
  voorraadVrij: BigFloatFilter

  """Filter by the object’s `samenstelling` field."""
  samenstelling: StringFilter

  """Filter by the object’s `virtualStock` field."""
  virtualStock: BigFloatFilter

  """Filter by the object’s `virtualStock2` field."""
  virtualStock2: BigFloatFilter

  """Filter by the object’s `cdcrediteur` field."""
  cdcrediteur: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Checks for all expressions in this list."""
  and: [ArtikelIndexFilter!]

  """Checks for any expressions in this list."""
  or: [ArtikelIndexFilter!]

  """Negates the expression."""
  not: ArtikelIndexFilter
}

"""A connection to a list of `ArtikelIndex2` values."""
type ArtikelIndex2SConnection {
  """A list of `ArtikelIndex2` objects."""
  nodes: [ArtikelIndex2!]!

  """
  A list of edges which contains the `ArtikelIndex2` and cursor to aid in pagination.
  """
  edges: [ArtikelIndex2SEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ArtikelIndex2` you could get from the connection."""
  totalCount: Int!
}

type ArtikelIndex2 {
  cdartikel: String
  omschr: String
  prijsexcl: BigFloat
  samVersie: String
  verrekenprijs: BigFloat
  margin: BigFloat
  samenstelling: String
  virtualStock: BigFloat
  cdartsamenstel: String
  locatie: String
  inkopen: BigFloat
  assemblbij: BigFloat
  assemblaf: BigFloat
  cdmagazijn: String
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  voorraad: BigFloat
  status: BigFloat
  voorraadGereserveerd2: BigFloat
  voorraadVrij: BigFloat
  cdcrediteur: String
  zoeknaam: String
  gereserveerd: BigFloat
}

"""A `ArtikelIndex2` edge in the connection."""
type ArtikelIndex2SEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ArtikelIndex2` at the end of the edge."""
  node: ArtikelIndex2!
}

"""Methods to use when ordering `ArtikelIndex2`."""
enum ArtikelIndex2SOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  PRIJSEXCL_ASC
  PRIJSEXCL_DESC
  SAM_VERSIE_ASC
  SAM_VERSIE_DESC
  VERREKENPRIJS_ASC
  VERREKENPRIJS_DESC
  MARGIN_ASC
  MARGIN_DESC
  SAMENSTELLING_ASC
  SAMENSTELLING_DESC
  VIRTUAL_STOCK_ASC
  VIRTUAL_STOCK_DESC
  CDARTSAMENSTEL_ASC
  CDARTSAMENSTEL_DESC
  LOCATIE_ASC
  LOCATIE_DESC
  INKOPEN_ASC
  INKOPEN_DESC
  ASSEMBLBIJ_ASC
  ASSEMBLBIJ_DESC
  ASSEMBLAF_ASC
  ASSEMBLAF_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  MINVOORRAAD_ASC
  MINVOORRAAD_DESC
  MAXVOORRAAD_ASC
  MAXVOORRAAD_DESC
  VOORRAAD_ASC
  VOORRAAD_DESC
  STATUS_ASC
  STATUS_DESC
  VOORRAAD_GERESERVEERD2_ASC
  VOORRAAD_GERESERVEERD2_DESC
  VOORRAAD_VRIJ_ASC
  VOORRAAD_VRIJ_DESC
  CDCREDITEUR_ASC
  CDCREDITEUR_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  GERESERVEERD_ASC
  GERESERVEERD_DESC
}

"""
A condition to be used against `ArtikelIndex2` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ArtikelIndex2Condition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `prijsexcl` field."""
  prijsexcl: BigFloat

  """Checks for equality with the object’s `samVersie` field."""
  samVersie: String

  """Checks for equality with the object’s `verrekenprijs` field."""
  verrekenprijs: BigFloat

  """Checks for equality with the object’s `margin` field."""
  margin: BigFloat

  """Checks for equality with the object’s `samenstelling` field."""
  samenstelling: String

  """Checks for equality with the object’s `virtualStock` field."""
  virtualStock: BigFloat

  """Checks for equality with the object’s `cdartsamenstel` field."""
  cdartsamenstel: String

  """Checks for equality with the object’s `locatie` field."""
  locatie: String

  """Checks for equality with the object’s `inkopen` field."""
  inkopen: BigFloat

  """Checks for equality with the object’s `assemblbij` field."""
  assemblbij: BigFloat

  """Checks for equality with the object’s `assemblaf` field."""
  assemblaf: BigFloat

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `minvoorraad` field."""
  minvoorraad: BigFloat

  """Checks for equality with the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloat

  """Checks for equality with the object’s `voorraad` field."""
  voorraad: BigFloat

  """Checks for equality with the object’s `status` field."""
  status: BigFloat

  """Checks for equality with the object’s `voorraadGereserveerd2` field."""
  voorraadGereserveerd2: BigFloat

  """Checks for equality with the object’s `voorraadVrij` field."""
  voorraadVrij: BigFloat

  """Checks for equality with the object’s `cdcrediteur` field."""
  cdcrediteur: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `gereserveerd` field."""
  gereserveerd: BigFloat
}

"""
A filter to be used against `ArtikelIndex2` object types. All fields are combined with a logical ‘and.’
"""
input ArtikelIndex2Filter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `prijsexcl` field."""
  prijsexcl: BigFloatFilter

  """Filter by the object’s `samVersie` field."""
  samVersie: StringFilter

  """Filter by the object’s `verrekenprijs` field."""
  verrekenprijs: BigFloatFilter

  """Filter by the object’s `margin` field."""
  margin: BigFloatFilter

  """Filter by the object’s `samenstelling` field."""
  samenstelling: StringFilter

  """Filter by the object’s `virtualStock` field."""
  virtualStock: BigFloatFilter

  """Filter by the object’s `cdartsamenstel` field."""
  cdartsamenstel: StringFilter

  """Filter by the object’s `locatie` field."""
  locatie: StringFilter

  """Filter by the object’s `inkopen` field."""
  inkopen: BigFloatFilter

  """Filter by the object’s `assemblbij` field."""
  assemblbij: BigFloatFilter

  """Filter by the object’s `assemblaf` field."""
  assemblaf: BigFloatFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `minvoorraad` field."""
  minvoorraad: BigFloatFilter

  """Filter by the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloatFilter

  """Filter by the object’s `voorraad` field."""
  voorraad: BigFloatFilter

  """Filter by the object’s `status` field."""
  status: BigFloatFilter

  """Filter by the object’s `voorraadGereserveerd2` field."""
  voorraadGereserveerd2: BigFloatFilter

  """Filter by the object’s `voorraadVrij` field."""
  voorraadVrij: BigFloatFilter

  """Filter by the object’s `cdcrediteur` field."""
  cdcrediteur: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `gereserveerd` field."""
  gereserveerd: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [ArtikelIndex2Filter!]

  """Checks for any expressions in this list."""
  or: [ArtikelIndex2Filter!]

  """Negates the expression."""
  not: ArtikelIndex2Filter
}

"""A connection to a list of `ArtikelLog` values."""
type ArtikelLogsConnection {
  """A list of `ArtikelLog` objects."""
  nodes: [ArtikelLog!]!

  """
  A list of edges which contains the `ArtikelLog` and cursor to aid in pagination.
  """
  edges: [ArtikelLogsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ArtikelLog` you could get from the connection."""
  totalCount: Int!
}

type ArtikelLog implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  created: Datetime
  operation: String
  new: JSON
  old: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""A `ArtikelLog` edge in the connection."""
type ArtikelLogsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ArtikelLog` at the end of the edge."""
  node: ArtikelLog!
}

"""Methods to use when ordering `ArtikelLog`."""
enum ArtikelLogsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_ASC
  CREATED_DESC
  OPERATION_ASC
  OPERATION_DESC
  NEW_ASC
  NEW_DESC
  OLD_ASC
  OLD_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ArtikelLog` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ArtikelLogCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `operation` field."""
  operation: String

  """Checks for equality with the object’s `new` field."""
  new: JSON

  """Checks for equality with the object’s `old` field."""
  old: JSON
}

"""
A filter to be used against `ArtikelLog` object types. All fields are combined with a logical ‘and.’
"""
input ArtikelLogFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `operation` field."""
  operation: StringFilter

  """Filter by the object’s `new` field."""
  new: JSONFilter

  """Filter by the object’s `old` field."""
  old: JSONFilter

  """Checks for all expressions in this list."""
  and: [ArtikelLogFilter!]

  """Checks for any expressions in this list."""
  or: [ArtikelLogFilter!]

  """Negates the expression."""
  not: ArtikelLogFilter
}

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Included in the specified list."""
  in: [JSON!]

  """Not included in the specified list."""
  notIn: [JSON!]

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains the specified key."""
  containsKey: String

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contained by the specified JSON."""
  containedBy: JSON

  """
  Included in the specified list -unless list is empty in which case this operator is not applied.
  """
  inExpansive: [JSON!]
}

"""A connection to a list of `ArtikelLogsIndex` values."""
type ArtikelLogsIndicesConnection {
  """A list of `ArtikelLogsIndex` objects."""
  nodes: [ArtikelLogsIndex!]!

  """
  A list of edges which contains the `ArtikelLogsIndex` and cursor to aid in pagination.
  """
  edges: [ArtikelLogsIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ArtikelLogsIndex` you could get from the connection.
  """
  totalCount: Int!
}

type ArtikelLogsIndex {
  id: Int
  created: Date
  cdartikel: String
  zoeknaam: String
  omschr: String
  key: String
  old: String
  new: String
}

"""A `ArtikelLogsIndex` edge in the connection."""
type ArtikelLogsIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ArtikelLogsIndex` at the end of the edge."""
  node: ArtikelLogsIndex!
}

"""Methods to use when ordering `ArtikelLogsIndex`."""
enum ArtikelLogsIndicesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_ASC
  CREATED_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  KEY_ASC
  KEY_DESC
  OLD_ASC
  OLD_DESC
  NEW_ASC
  NEW_DESC
}

"""
A condition to be used against `ArtikelLogsIndex` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ArtikelLogsIndexCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `created` field."""
  created: Date

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `key` field."""
  key: String

  """Checks for equality with the object’s `old` field."""
  old: String

  """Checks for equality with the object’s `new` field."""
  new: String
}

"""
A filter to be used against `ArtikelLogsIndex` object types. All fields are combined with a logical ‘and.’
"""
input ArtikelLogsIndexFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `created` field."""
  created: DateFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `key` field."""
  key: StringFilter

  """Filter by the object’s `old` field."""
  old: StringFilter

  """Filter by the object’s `new` field."""
  new: StringFilter

  """Checks for all expressions in this list."""
  and: [ArtikelLogsIndexFilter!]

  """Checks for any expressions in this list."""
  or: [ArtikelLogsIndexFilter!]

  """Negates the expression."""
  not: ArtikelLogsIndexFilter
}

"""A connection to a list of `ArtikelMv` values."""
type ArtikelMvsConnection {
  """A list of `ArtikelMv` objects."""
  nodes: [ArtikelMv!]!

  """
  A list of edges which contains the `ArtikelMv` and cursor to aid in pagination.
  """
  edges: [ArtikelMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ArtikelMv` you could get from the connection."""
  totalCount: Int!
}

type ArtikelMv {
  cdartikel: String
  zoeknaam: String
  omschr: String
  soort: String
  cdartgroep: String
  cdgrbrekening: String
  prijsper: BigFloat
  aantaldec: Int
  prijsincl: BigFloat
  prijsexcl: BigFloat
  verrekenprijs: BigFloat
  voorraad: BigFloat
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  eenheid: String
  btwcode: Int
  cdartkortgrp: String
  cdgoedcode: Int
  gewicht: BigFloat
  aanveenh: BigFloat
  inkvolgnr: Int
  uitloop: String
  aanmaakdatum: Date
  opweb: String
  magbon: String
  pakbon: String
  factuur: String
  cdgrbrekkort: String
  datumltstewijz: Date
  cdgrbrekdekking: String
  projOpslag: BigFloat
  projMutsoort: String
  eannummer: String
  afdrukSamOpOfferte: String
  samVersie: String
  assemblageArtikel: String
  margePerc: BigFloat
  guidItem: String
  sysCreate: String
  sysUpdate: String
  vvbestand: String
  vvgroep: String
  vvvrijvelda: String
  vvvrijveldb: String
  cdlandOorspr: String
}

"""A `ArtikelMv` edge in the connection."""
type ArtikelMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ArtikelMv` at the end of the edge."""
  node: ArtikelMv!
}

"""Methods to use when ordering `ArtikelMv`."""
enum ArtikelMvsOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  SOORT_ASC
  SOORT_DESC
  CDARTGROEP_ASC
  CDARTGROEP_DESC
  CDGRBREKENING_ASC
  CDGRBREKENING_DESC
  PRIJSPER_ASC
  PRIJSPER_DESC
  AANTALDEC_ASC
  AANTALDEC_DESC
  PRIJSINCL_ASC
  PRIJSINCL_DESC
  PRIJSEXCL_ASC
  PRIJSEXCL_DESC
  VERREKENPRIJS_ASC
  VERREKENPRIJS_DESC
  VOORRAAD_ASC
  VOORRAAD_DESC
  MINVOORRAAD_ASC
  MINVOORRAAD_DESC
  MAXVOORRAAD_ASC
  MAXVOORRAAD_DESC
  EENHEID_ASC
  EENHEID_DESC
  BTWCODE_ASC
  BTWCODE_DESC
  CDARTKORTGRP_ASC
  CDARTKORTGRP_DESC
  CDGOEDCODE_ASC
  CDGOEDCODE_DESC
  GEWICHT_ASC
  GEWICHT_DESC
  AANVEENH_ASC
  AANVEENH_DESC
  INKVOLGNR_ASC
  INKVOLGNR_DESC
  UITLOOP_ASC
  UITLOOP_DESC
  AANMAAKDATUM_ASC
  AANMAAKDATUM_DESC
  OPWEB_ASC
  OPWEB_DESC
  MAGBON_ASC
  MAGBON_DESC
  PAKBON_ASC
  PAKBON_DESC
  FACTUUR_ASC
  FACTUUR_DESC
  CDGRBREKKORT_ASC
  CDGRBREKKORT_DESC
  DATUMLTSTEWIJZ_ASC
  DATUMLTSTEWIJZ_DESC
  CDGRBREKDEKKING_ASC
  CDGRBREKDEKKING_DESC
  PROJ_OPSLAG_ASC
  PROJ_OPSLAG_DESC
  PROJ_MUTSOORT_ASC
  PROJ_MUTSOORT_DESC
  EANNUMMER_ASC
  EANNUMMER_DESC
  AFDRUK_SAM_OP_OFFERTE_ASC
  AFDRUK_SAM_OP_OFFERTE_DESC
  SAM_VERSIE_ASC
  SAM_VERSIE_DESC
  ASSEMBLAGE_ARTIKEL_ASC
  ASSEMBLAGE_ARTIKEL_DESC
  MARGE_PERC_ASC
  MARGE_PERC_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  SYS_CREATE_ASC
  SYS_CREATE_DESC
  SYS_UPDATE_ASC
  SYS_UPDATE_DESC
  VVBESTAND_ASC
  VVBESTAND_DESC
  VVGROEP_ASC
  VVGROEP_DESC
  VVVRIJVELDA_ASC
  VVVRIJVELDA_DESC
  VVVRIJVELDB_ASC
  VVVRIJVELDB_DESC
  CDLAND_OORSPR_ASC
  CDLAND_OORSPR_DESC
}

"""
A condition to be used against `ArtikelMv` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ArtikelMvCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `soort` field."""
  soort: String

  """Checks for equality with the object’s `cdartgroep` field."""
  cdartgroep: String

  """Checks for equality with the object’s `cdgrbrekening` field."""
  cdgrbrekening: String

  """Checks for equality with the object’s `prijsper` field."""
  prijsper: BigFloat

  """Checks for equality with the object’s `aantaldec` field."""
  aantaldec: Int

  """Checks for equality with the object’s `prijsincl` field."""
  prijsincl: BigFloat

  """Checks for equality with the object’s `prijsexcl` field."""
  prijsexcl: BigFloat

  """Checks for equality with the object’s `verrekenprijs` field."""
  verrekenprijs: BigFloat

  """Checks for equality with the object’s `voorraad` field."""
  voorraad: BigFloat

  """Checks for equality with the object’s `minvoorraad` field."""
  minvoorraad: BigFloat

  """Checks for equality with the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloat

  """Checks for equality with the object’s `eenheid` field."""
  eenheid: String

  """Checks for equality with the object’s `btwcode` field."""
  btwcode: Int

  """Checks for equality with the object’s `cdartkortgrp` field."""
  cdartkortgrp: String

  """Checks for equality with the object’s `cdgoedcode` field."""
  cdgoedcode: Int

  """Checks for equality with the object’s `gewicht` field."""
  gewicht: BigFloat

  """Checks for equality with the object’s `aanveenh` field."""
  aanveenh: BigFloat

  """Checks for equality with the object’s `inkvolgnr` field."""
  inkvolgnr: Int

  """Checks for equality with the object’s `uitloop` field."""
  uitloop: String

  """Checks for equality with the object’s `aanmaakdatum` field."""
  aanmaakdatum: Date

  """Checks for equality with the object’s `opweb` field."""
  opweb: String

  """Checks for equality with the object’s `magbon` field."""
  magbon: String

  """Checks for equality with the object’s `pakbon` field."""
  pakbon: String

  """Checks for equality with the object’s `factuur` field."""
  factuur: String

  """Checks for equality with the object’s `cdgrbrekkort` field."""
  cdgrbrekkort: String

  """Checks for equality with the object’s `datumltstewijz` field."""
  datumltstewijz: Date

  """Checks for equality with the object’s `cdgrbrekdekking` field."""
  cdgrbrekdekking: String

  """Checks for equality with the object’s `projOpslag` field."""
  projOpslag: BigFloat

  """Checks for equality with the object’s `projMutsoort` field."""
  projMutsoort: String

  """Checks for equality with the object’s `eannummer` field."""
  eannummer: String

  """Checks for equality with the object’s `afdrukSamOpOfferte` field."""
  afdrukSamOpOfferte: String

  """Checks for equality with the object’s `samVersie` field."""
  samVersie: String

  """Checks for equality with the object’s `assemblageArtikel` field."""
  assemblageArtikel: String

  """Checks for equality with the object’s `margePerc` field."""
  margePerc: BigFloat

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `sysCreate` field."""
  sysCreate: String

  """Checks for equality with the object’s `sysUpdate` field."""
  sysUpdate: String

  """Checks for equality with the object’s `vvbestand` field."""
  vvbestand: String

  """Checks for equality with the object’s `vvgroep` field."""
  vvgroep: String

  """Checks for equality with the object’s `vvvrijvelda` field."""
  vvvrijvelda: String

  """Checks for equality with the object’s `vvvrijveldb` field."""
  vvvrijveldb: String

  """Checks for equality with the object’s `cdlandOorspr` field."""
  cdlandOorspr: String
}

"""
A filter to be used against `ArtikelMv` object types. All fields are combined with a logical ‘and.’
"""
input ArtikelMvFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `soort` field."""
  soort: StringFilter

  """Filter by the object’s `cdartgroep` field."""
  cdartgroep: StringFilter

  """Filter by the object’s `cdgrbrekening` field."""
  cdgrbrekening: StringFilter

  """Filter by the object’s `prijsper` field."""
  prijsper: BigFloatFilter

  """Filter by the object’s `aantaldec` field."""
  aantaldec: IntFilter

  """Filter by the object’s `prijsincl` field."""
  prijsincl: BigFloatFilter

  """Filter by the object’s `prijsexcl` field."""
  prijsexcl: BigFloatFilter

  """Filter by the object’s `verrekenprijs` field."""
  verrekenprijs: BigFloatFilter

  """Filter by the object’s `voorraad` field."""
  voorraad: BigFloatFilter

  """Filter by the object’s `minvoorraad` field."""
  minvoorraad: BigFloatFilter

  """Filter by the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloatFilter

  """Filter by the object’s `eenheid` field."""
  eenheid: StringFilter

  """Filter by the object’s `btwcode` field."""
  btwcode: IntFilter

  """Filter by the object’s `cdartkortgrp` field."""
  cdartkortgrp: StringFilter

  """Filter by the object’s `cdgoedcode` field."""
  cdgoedcode: IntFilter

  """Filter by the object’s `gewicht` field."""
  gewicht: BigFloatFilter

  """Filter by the object’s `aanveenh` field."""
  aanveenh: BigFloatFilter

  """Filter by the object’s `inkvolgnr` field."""
  inkvolgnr: IntFilter

  """Filter by the object’s `uitloop` field."""
  uitloop: StringFilter

  """Filter by the object’s `aanmaakdatum` field."""
  aanmaakdatum: DateFilter

  """Filter by the object’s `opweb` field."""
  opweb: StringFilter

  """Filter by the object’s `magbon` field."""
  magbon: StringFilter

  """Filter by the object’s `pakbon` field."""
  pakbon: StringFilter

  """Filter by the object’s `factuur` field."""
  factuur: StringFilter

  """Filter by the object’s `cdgrbrekkort` field."""
  cdgrbrekkort: StringFilter

  """Filter by the object’s `datumltstewijz` field."""
  datumltstewijz: DateFilter

  """Filter by the object’s `cdgrbrekdekking` field."""
  cdgrbrekdekking: StringFilter

  """Filter by the object’s `projOpslag` field."""
  projOpslag: BigFloatFilter

  """Filter by the object’s `projMutsoort` field."""
  projMutsoort: StringFilter

  """Filter by the object’s `eannummer` field."""
  eannummer: StringFilter

  """Filter by the object’s `afdrukSamOpOfferte` field."""
  afdrukSamOpOfferte: StringFilter

  """Filter by the object’s `samVersie` field."""
  samVersie: StringFilter

  """Filter by the object’s `assemblageArtikel` field."""
  assemblageArtikel: StringFilter

  """Filter by the object’s `margePerc` field."""
  margePerc: BigFloatFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `sysCreate` field."""
  sysCreate: StringFilter

  """Filter by the object’s `sysUpdate` field."""
  sysUpdate: StringFilter

  """Filter by the object’s `vvbestand` field."""
  vvbestand: StringFilter

  """Filter by the object’s `vvgroep` field."""
  vvgroep: StringFilter

  """Filter by the object’s `vvvrijvelda` field."""
  vvvrijvelda: StringFilter

  """Filter by the object’s `vvvrijveldb` field."""
  vvvrijveldb: StringFilter

  """Filter by the object’s `cdlandOorspr` field."""
  cdlandOorspr: StringFilter

  """Checks for all expressions in this list."""
  and: [ArtikelMvFilter!]

  """Checks for any expressions in this list."""
  or: [ArtikelMvFilter!]

  """Negates the expression."""
  not: ArtikelMvFilter
}

"""A connection to a list of `ArtikelSamenstellingen` values."""
type ArtikelSamenstellingensConnection {
  """A list of `ArtikelSamenstellingen` objects."""
  nodes: [ArtikelSamenstellingen!]!

  """
  A list of edges which contains the `ArtikelSamenstellingen` and cursor to aid in pagination.
  """
  edges: [ArtikelSamenstellingensEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ArtikelSamenstellingen` you could get from the connection.
  """
  totalCount: Int!
}

type ArtikelSamenstellingen {
  samVersie: String
  cdartcomponent: String
  cdartikel: String
  omschr: String
  prijsexcl: BigFloat
  locatie: String
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  voorraad: BigFloat
  gereserveerd: BigFloat
  assemblaf: BigFloat
  vrij: BigFloat
  margin: BigFloat
  virtualStock: BigFloat
}

"""A `ArtikelSamenstellingen` edge in the connection."""
type ArtikelSamenstellingensEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ArtikelSamenstellingen` at the end of the edge."""
  node: ArtikelSamenstellingen!
}

"""Methods to use when ordering `ArtikelSamenstellingen`."""
enum ArtikelSamenstellingensOrderBy {
  NATURAL
  SAM_VERSIE_ASC
  SAM_VERSIE_DESC
  CDARTCOMPONENT_ASC
  CDARTCOMPONENT_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  PRIJSEXCL_ASC
  PRIJSEXCL_DESC
  LOCATIE_ASC
  LOCATIE_DESC
  MINVOORRAAD_ASC
  MINVOORRAAD_DESC
  MAXVOORRAAD_ASC
  MAXVOORRAAD_DESC
  VOORRAAD_ASC
  VOORRAAD_DESC
  GERESERVEERD_ASC
  GERESERVEERD_DESC
  ASSEMBLAF_ASC
  ASSEMBLAF_DESC
  VRIJ_ASC
  VRIJ_DESC
  MARGIN_ASC
  MARGIN_DESC
  VIRTUAL_STOCK_ASC
  VIRTUAL_STOCK_DESC
}

"""
A condition to be used against `ArtikelSamenstellingen` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ArtikelSamenstellingenCondition {
  """Checks for equality with the object’s `samVersie` field."""
  samVersie: String

  """Checks for equality with the object’s `cdartcomponent` field."""
  cdartcomponent: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `prijsexcl` field."""
  prijsexcl: BigFloat

  """Checks for equality with the object’s `locatie` field."""
  locatie: String

  """Checks for equality with the object’s `minvoorraad` field."""
  minvoorraad: BigFloat

  """Checks for equality with the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloat

  """Checks for equality with the object’s `voorraad` field."""
  voorraad: BigFloat

  """Checks for equality with the object’s `gereserveerd` field."""
  gereserveerd: BigFloat

  """Checks for equality with the object’s `assemblaf` field."""
  assemblaf: BigFloat

  """Checks for equality with the object’s `vrij` field."""
  vrij: BigFloat

  """Checks for equality with the object’s `margin` field."""
  margin: BigFloat

  """Checks for equality with the object’s `virtualStock` field."""
  virtualStock: BigFloat
}

"""
A filter to be used against `ArtikelSamenstellingen` object types. All fields are combined with a logical ‘and.’
"""
input ArtikelSamenstellingenFilter {
  """Filter by the object’s `samVersie` field."""
  samVersie: StringFilter

  """Filter by the object’s `cdartcomponent` field."""
  cdartcomponent: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `prijsexcl` field."""
  prijsexcl: BigFloatFilter

  """Filter by the object’s `locatie` field."""
  locatie: StringFilter

  """Filter by the object’s `minvoorraad` field."""
  minvoorraad: BigFloatFilter

  """Filter by the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloatFilter

  """Filter by the object’s `voorraad` field."""
  voorraad: BigFloatFilter

  """Filter by the object’s `gereserveerd` field."""
  gereserveerd: BigFloatFilter

  """Filter by the object’s `assemblaf` field."""
  assemblaf: BigFloatFilter

  """Filter by the object’s `vrij` field."""
  vrij: BigFloatFilter

  """Filter by the object’s `margin` field."""
  margin: BigFloatFilter

  """Filter by the object’s `virtualStock` field."""
  virtualStock: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [ArtikelSamenstellingenFilter!]

  """Checks for any expressions in this list."""
  or: [ArtikelSamenstellingenFilter!]

  """Negates the expression."""
  not: ArtikelSamenstellingenFilter
}

"""A connection to a list of `Artikelomschr` values."""
type ArtikelomschrsConnection {
  """A list of `Artikelomschr` objects."""
  nodes: [Artikelomschr!]!

  """
  A list of edges which contains the `Artikelomschr` and cursor to aid in pagination.
  """
  edges: [ArtikelomschrsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Artikelomschr` you could get from the connection."""
  totalCount: Int!
}

type Artikelomschr implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  cdartikel: String!
  cdtaal: String!
  omschr: String
  eenheid: String
}

"""A `Artikelomschr` edge in the connection."""
type ArtikelomschrsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Artikelomschr` at the end of the edge."""
  node: Artikelomschr!
}

"""Methods to use when ordering `Artikelomschr`."""
enum ArtikelomschrsOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  CDTAAL_ASC
  CDTAAL_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  EENHEID_ASC
  EENHEID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Artikelomschr` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ArtikelomschrCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `cdtaal` field."""
  cdtaal: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `eenheid` field."""
  eenheid: String
}

"""
A filter to be used against `Artikelomschr` object types. All fields are combined with a logical ‘and.’
"""
input ArtikelomschrFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `cdtaal` field."""
  cdtaal: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `eenheid` field."""
  eenheid: StringFilter

  """Checks for all expressions in this list."""
  and: [ArtikelomschrFilter!]

  """Checks for any expressions in this list."""
  or: [ArtikelomschrFilter!]

  """Negates the expression."""
  not: ArtikelomschrFilter
}

"""A connection to a list of `ArtikelomschrMv` values."""
type ArtikelomschrMvsConnection {
  """A list of `ArtikelomschrMv` objects."""
  nodes: [ArtikelomschrMv!]!

  """
  A list of edges which contains the `ArtikelomschrMv` and cursor to aid in pagination.
  """
  edges: [ArtikelomschrMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ArtikelomschrMv` you could get from the connection.
  """
  totalCount: Int!
}

type ArtikelomschrMv {
  cdartikel: String
  cdtaal: String
  omschr: String
  eenheid: String
}

"""A `ArtikelomschrMv` edge in the connection."""
type ArtikelomschrMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ArtikelomschrMv` at the end of the edge."""
  node: ArtikelomschrMv!
}

"""Methods to use when ordering `ArtikelomschrMv`."""
enum ArtikelomschrMvsOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  CDTAAL_ASC
  CDTAAL_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  EENHEID_ASC
  EENHEID_DESC
}

"""
A condition to be used against `ArtikelomschrMv` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ArtikelomschrMvCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `cdtaal` field."""
  cdtaal: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `eenheid` field."""
  eenheid: String
}

"""
A filter to be used against `ArtikelomschrMv` object types. All fields are combined with a logical ‘and.’
"""
input ArtikelomschrMvFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `cdtaal` field."""
  cdtaal: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `eenheid` field."""
  eenheid: StringFilter

  """Checks for all expressions in this list."""
  and: [ArtikelomschrMvFilter!]

  """Checks for any expressions in this list."""
  or: [ArtikelomschrMvFilter!]

  """Negates the expression."""
  not: ArtikelomschrMvFilter
}

"""A connection to a list of `Artsamcomponenten` values."""
type ArtsamcomponentensConnection {
  """A list of `Artsamcomponenten` objects."""
  nodes: [Artsamcomponenten!]!

  """
  A list of edges which contains the `Artsamcomponenten` and cursor to aid in pagination.
  """
  edges: [ArtsamcomponentensEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `Artsamcomponenten` you could get from the connection.
  """
  totalCount: Int!
}

type Artsamcomponenten {
  cdartsamenstel: String
  samVersie: String
  cdartcomponent: String
  aantal: BigFloat
  cdmagazijn: String
}

"""A `Artsamcomponenten` edge in the connection."""
type ArtsamcomponentensEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Artsamcomponenten` at the end of the edge."""
  node: Artsamcomponenten!
}

"""Methods to use when ordering `Artsamcomponenten`."""
enum ArtsamcomponentensOrderBy {
  NATURAL
  CDARTSAMENSTEL_ASC
  CDARTSAMENSTEL_DESC
  SAM_VERSIE_ASC
  SAM_VERSIE_DESC
  CDARTCOMPONENT_ASC
  CDARTCOMPONENT_DESC
  AANTAL_ASC
  AANTAL_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
}

"""
A condition to be used against `Artsamcomponenten` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ArtsamcomponentenCondition {
  """Checks for equality with the object’s `cdartsamenstel` field."""
  cdartsamenstel: String

  """Checks for equality with the object’s `samVersie` field."""
  samVersie: String

  """Checks for equality with the object’s `cdartcomponent` field."""
  cdartcomponent: String

  """Checks for equality with the object’s `aantal` field."""
  aantal: BigFloat

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String
}

"""
A filter to be used against `Artsamcomponenten` object types. All fields are combined with a logical ‘and.’
"""
input ArtsamcomponentenFilter {
  """Filter by the object’s `cdartsamenstel` field."""
  cdartsamenstel: StringFilter

  """Filter by the object’s `samVersie` field."""
  samVersie: StringFilter

  """Filter by the object’s `cdartcomponent` field."""
  cdartcomponent: StringFilter

  """Filter by the object’s `aantal` field."""
  aantal: BigFloatFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Checks for all expressions in this list."""
  and: [ArtsamcomponentenFilter!]

  """Checks for any expressions in this list."""
  or: [ArtsamcomponentenFilter!]

  """Negates the expression."""
  not: ArtsamcomponentenFilter
}

"""A connection to a list of `ArtsamcomponentenMv` values."""
type ArtsamcomponentenMvsConnection {
  """A list of `ArtsamcomponentenMv` objects."""
  nodes: [ArtsamcomponentenMv!]!

  """
  A list of edges which contains the `ArtsamcomponentenMv` and cursor to aid in pagination.
  """
  edges: [ArtsamcomponentenMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ArtsamcomponentenMv` you could get from the connection.
  """
  totalCount: Int!
}

type ArtsamcomponentenMv {
  cdartsamenstel: String
  samVersie: String
  cdartcomponent: String
  aantal: BigFloat
  cdmagazijn: String
}

"""A `ArtsamcomponentenMv` edge in the connection."""
type ArtsamcomponentenMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ArtsamcomponentenMv` at the end of the edge."""
  node: ArtsamcomponentenMv!
}

"""Methods to use when ordering `ArtsamcomponentenMv`."""
enum ArtsamcomponentenMvsOrderBy {
  NATURAL
  CDARTSAMENSTEL_ASC
  CDARTSAMENSTEL_DESC
  SAM_VERSIE_ASC
  SAM_VERSIE_DESC
  CDARTCOMPONENT_ASC
  CDARTCOMPONENT_DESC
  AANTAL_ASC
  AANTAL_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
}

"""
A condition to be used against `ArtsamcomponentenMv` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ArtsamcomponentenMvCondition {
  """Checks for equality with the object’s `cdartsamenstel` field."""
  cdartsamenstel: String

  """Checks for equality with the object’s `samVersie` field."""
  samVersie: String

  """Checks for equality with the object’s `cdartcomponent` field."""
  cdartcomponent: String

  """Checks for equality with the object’s `aantal` field."""
  aantal: BigFloat

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String
}

"""
A filter to be used against `ArtsamcomponentenMv` object types. All fields are combined with a logical ‘and.’
"""
input ArtsamcomponentenMvFilter {
  """Filter by the object’s `cdartsamenstel` field."""
  cdartsamenstel: StringFilter

  """Filter by the object’s `samVersie` field."""
  samVersie: StringFilter

  """Filter by the object’s `cdartcomponent` field."""
  cdartcomponent: StringFilter

  """Filter by the object’s `aantal` field."""
  aantal: BigFloatFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Checks for all expressions in this list."""
  and: [ArtsamcomponentenMvFilter!]

  """Checks for any expressions in this list."""
  or: [ArtsamcomponentenMvFilter!]

  """Negates the expression."""
  not: ArtsamcomponentenMvFilter
}

"""A connection to a list of `Artsamenstelling` values."""
type ArtsamenstellingsConnection {
  """A list of `Artsamenstelling` objects."""
  nodes: [Artsamenstelling!]!

  """
  A list of edges which contains the `Artsamenstelling` and cursor to aid in pagination.
  """
  edges: [ArtsamenstellingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `Artsamenstelling` you could get from the connection.
  """
  totalCount: Int!
}

type Artsamenstelling {
  cdartikel: String
  samVersie: String
  prijsincl: BigFloat
  prijsexcl: BigFloat
  commentaar: String
  aanmaakdatum: Date
  status: String
}

"""A `Artsamenstelling` edge in the connection."""
type ArtsamenstellingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Artsamenstelling` at the end of the edge."""
  node: Artsamenstelling!
}

"""Methods to use when ordering `Artsamenstelling`."""
enum ArtsamenstellingsOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  SAM_VERSIE_ASC
  SAM_VERSIE_DESC
  PRIJSINCL_ASC
  PRIJSINCL_DESC
  PRIJSEXCL_ASC
  PRIJSEXCL_DESC
  COMMENTAAR_ASC
  COMMENTAAR_DESC
  AANMAAKDATUM_ASC
  AANMAAKDATUM_DESC
  STATUS_ASC
  STATUS_DESC
}

"""
A condition to be used against `Artsamenstelling` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ArtsamenstellingCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `samVersie` field."""
  samVersie: String

  """Checks for equality with the object’s `prijsincl` field."""
  prijsincl: BigFloat

  """Checks for equality with the object’s `prijsexcl` field."""
  prijsexcl: BigFloat

  """Checks for equality with the object’s `commentaar` field."""
  commentaar: String

  """Checks for equality with the object’s `aanmaakdatum` field."""
  aanmaakdatum: Date

  """Checks for equality with the object’s `status` field."""
  status: String
}

"""
A filter to be used against `Artsamenstelling` object types. All fields are combined with a logical ‘and.’
"""
input ArtsamenstellingFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `samVersie` field."""
  samVersie: StringFilter

  """Filter by the object’s `prijsincl` field."""
  prijsincl: BigFloatFilter

  """Filter by the object’s `prijsexcl` field."""
  prijsexcl: BigFloatFilter

  """Filter by the object’s `commentaar` field."""
  commentaar: StringFilter

  """Filter by the object’s `aanmaakdatum` field."""
  aanmaakdatum: DateFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Checks for all expressions in this list."""
  and: [ArtsamenstellingFilter!]

  """Checks for any expressions in this list."""
  or: [ArtsamenstellingFilter!]

  """Negates the expression."""
  not: ArtsamenstellingFilter
}

"""A connection to a list of `ArtsamenstellingMv` values."""
type ArtsamenstellingMvsConnection {
  """A list of `ArtsamenstellingMv` objects."""
  nodes: [ArtsamenstellingMv!]!

  """
  A list of edges which contains the `ArtsamenstellingMv` and cursor to aid in pagination.
  """
  edges: [ArtsamenstellingMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ArtsamenstellingMv` you could get from the connection.
  """
  totalCount: Int!
}

type ArtsamenstellingMv {
  cdartikel: String
  samVersie: String
  prijsincl: BigFloat
  prijsexcl: BigFloat
  commentaar: String
  aanmaakdatum: Date
  status: String
}

"""A `ArtsamenstellingMv` edge in the connection."""
type ArtsamenstellingMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ArtsamenstellingMv` at the end of the edge."""
  node: ArtsamenstellingMv!
}

"""Methods to use when ordering `ArtsamenstellingMv`."""
enum ArtsamenstellingMvsOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  SAM_VERSIE_ASC
  SAM_VERSIE_DESC
  PRIJSINCL_ASC
  PRIJSINCL_DESC
  PRIJSEXCL_ASC
  PRIJSEXCL_DESC
  COMMENTAAR_ASC
  COMMENTAAR_DESC
  AANMAAKDATUM_ASC
  AANMAAKDATUM_DESC
  STATUS_ASC
  STATUS_DESC
}

"""
A condition to be used against `ArtsamenstellingMv` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ArtsamenstellingMvCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `samVersie` field."""
  samVersie: String

  """Checks for equality with the object’s `prijsincl` field."""
  prijsincl: BigFloat

  """Checks for equality with the object’s `prijsexcl` field."""
  prijsexcl: BigFloat

  """Checks for equality with the object’s `commentaar` field."""
  commentaar: String

  """Checks for equality with the object’s `aanmaakdatum` field."""
  aanmaakdatum: Date

  """Checks for equality with the object’s `status` field."""
  status: String
}

"""
A filter to be used against `ArtsamenstellingMv` object types. All fields are combined with a logical ‘and.’
"""
input ArtsamenstellingMvFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `samVersie` field."""
  samVersie: StringFilter

  """Filter by the object’s `prijsincl` field."""
  prijsincl: BigFloatFilter

  """Filter by the object’s `prijsexcl` field."""
  prijsexcl: BigFloatFilter

  """Filter by the object’s `commentaar` field."""
  commentaar: StringFilter

  """Filter by the object’s `aanmaakdatum` field."""
  aanmaakdatum: DateFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Checks for all expressions in this list."""
  and: [ArtsamenstellingMvFilter!]

  """Checks for any expressions in this list."""
  or: [ArtsamenstellingMvFilter!]

  """Negates the expression."""
  not: ArtsamenstellingMvFilter
}

"""A connection to a list of `Assemblage` values."""
type AssemblagesConnection {
  """A list of `Assemblage` objects."""
  nodes: [Assemblage!]!

  """
  A list of edges which contains the `Assemblage` and cursor to aid in pagination.
  """
  edges: [AssemblagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Assemblage` you could get from the connection."""
  totalCount: Int!
}

type Assemblage {
  assemblageOrder: String
  cdartikel: String
  orderDatum: Date
  cdmagazijn: String
  aantal: BigFloat
  commentaar: String
  assemblageDatum: Date
  aantalGeassembleerd: BigFloat
  waardeGeassembleerd: BigFloat
  afdrukAssemblageBon: String
  status: String
  guidItem: String
  sysCreate: String
  sysUpdate: String
  aantalgereservbij: BigFloat
}

"""A `Assemblage` edge in the connection."""
type AssemblagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Assemblage` at the end of the edge."""
  node: Assemblage!
}

"""Methods to use when ordering `Assemblage`."""
enum AssemblagesOrderBy {
  NATURAL
  ASSEMBLAGE_ORDER_ASC
  ASSEMBLAGE_ORDER_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  ORDER_DATUM_ASC
  ORDER_DATUM_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  AANTAL_ASC
  AANTAL_DESC
  COMMENTAAR_ASC
  COMMENTAAR_DESC
  ASSEMBLAGE_DATUM_ASC
  ASSEMBLAGE_DATUM_DESC
  AANTAL_GEASSEMBLEERD_ASC
  AANTAL_GEASSEMBLEERD_DESC
  WAARDE_GEASSEMBLEERD_ASC
  WAARDE_GEASSEMBLEERD_DESC
  AFDRUK_ASSEMBLAGE_BON_ASC
  AFDRUK_ASSEMBLAGE_BON_DESC
  STATUS_ASC
  STATUS_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  SYS_CREATE_ASC
  SYS_CREATE_DESC
  SYS_UPDATE_ASC
  SYS_UPDATE_DESC
  AANTALGERESERVBIJ_ASC
  AANTALGERESERVBIJ_DESC
}

"""
A condition to be used against `Assemblage` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AssemblageCondition {
  """Checks for equality with the object’s `assemblageOrder` field."""
  assemblageOrder: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `orderDatum` field."""
  orderDatum: Date

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `aantal` field."""
  aantal: BigFloat

  """Checks for equality with the object’s `commentaar` field."""
  commentaar: String

  """Checks for equality with the object’s `assemblageDatum` field."""
  assemblageDatum: Date

  """Checks for equality with the object’s `aantalGeassembleerd` field."""
  aantalGeassembleerd: BigFloat

  """Checks for equality with the object’s `waardeGeassembleerd` field."""
  waardeGeassembleerd: BigFloat

  """Checks for equality with the object’s `afdrukAssemblageBon` field."""
  afdrukAssemblageBon: String

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `sysCreate` field."""
  sysCreate: String

  """Checks for equality with the object’s `sysUpdate` field."""
  sysUpdate: String

  """Checks for equality with the object’s `aantalgereservbij` field."""
  aantalgereservbij: BigFloat
}

"""
A filter to be used against `Assemblage` object types. All fields are combined with a logical ‘and.’
"""
input AssemblageFilter {
  """Filter by the object’s `assemblageOrder` field."""
  assemblageOrder: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `orderDatum` field."""
  orderDatum: DateFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `aantal` field."""
  aantal: BigFloatFilter

  """Filter by the object’s `commentaar` field."""
  commentaar: StringFilter

  """Filter by the object’s `assemblageDatum` field."""
  assemblageDatum: DateFilter

  """Filter by the object’s `aantalGeassembleerd` field."""
  aantalGeassembleerd: BigFloatFilter

  """Filter by the object’s `waardeGeassembleerd` field."""
  waardeGeassembleerd: BigFloatFilter

  """Filter by the object’s `afdrukAssemblageBon` field."""
  afdrukAssemblageBon: StringFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `sysCreate` field."""
  sysCreate: StringFilter

  """Filter by the object’s `sysUpdate` field."""
  sysUpdate: StringFilter

  """Filter by the object’s `aantalgereservbij` field."""
  aantalgereservbij: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [AssemblageFilter!]

  """Checks for any expressions in this list."""
  or: [AssemblageFilter!]

  """Negates the expression."""
  not: AssemblageFilter
}

"""A connection to a list of `AssemblageMv` values."""
type AssemblageMvsConnection {
  """A list of `AssemblageMv` objects."""
  nodes: [AssemblageMv!]!

  """
  A list of edges which contains the `AssemblageMv` and cursor to aid in pagination.
  """
  edges: [AssemblageMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AssemblageMv` you could get from the connection."""
  totalCount: Int!
}

type AssemblageMv {
  assemblageOrder: String
  cdartikel: String
  orderDatum: Date
  cdmagazijn: String
  aantal: BigFloat
  commentaar: String
  assemblageDatum: Date
  aantalGeassembleerd: BigFloat
  waardeGeassembleerd: BigFloat
  afdrukAssemblageBon: String
  status: String
  guidItem: String
  sysCreate: String
  sysUpdate: String
  aantalgereservbij: BigFloat
}

"""A `AssemblageMv` edge in the connection."""
type AssemblageMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AssemblageMv` at the end of the edge."""
  node: AssemblageMv!
}

"""Methods to use when ordering `AssemblageMv`."""
enum AssemblageMvsOrderBy {
  NATURAL
  ASSEMBLAGE_ORDER_ASC
  ASSEMBLAGE_ORDER_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  ORDER_DATUM_ASC
  ORDER_DATUM_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  AANTAL_ASC
  AANTAL_DESC
  COMMENTAAR_ASC
  COMMENTAAR_DESC
  ASSEMBLAGE_DATUM_ASC
  ASSEMBLAGE_DATUM_DESC
  AANTAL_GEASSEMBLEERD_ASC
  AANTAL_GEASSEMBLEERD_DESC
  WAARDE_GEASSEMBLEERD_ASC
  WAARDE_GEASSEMBLEERD_DESC
  AFDRUK_ASSEMBLAGE_BON_ASC
  AFDRUK_ASSEMBLAGE_BON_DESC
  STATUS_ASC
  STATUS_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  SYS_CREATE_ASC
  SYS_CREATE_DESC
  SYS_UPDATE_ASC
  SYS_UPDATE_DESC
  AANTALGERESERVBIJ_ASC
  AANTALGERESERVBIJ_DESC
}

"""
A condition to be used against `AssemblageMv` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AssemblageMvCondition {
  """Checks for equality with the object’s `assemblageOrder` field."""
  assemblageOrder: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `orderDatum` field."""
  orderDatum: Date

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `aantal` field."""
  aantal: BigFloat

  """Checks for equality with the object’s `commentaar` field."""
  commentaar: String

  """Checks for equality with the object’s `assemblageDatum` field."""
  assemblageDatum: Date

  """Checks for equality with the object’s `aantalGeassembleerd` field."""
  aantalGeassembleerd: BigFloat

  """Checks for equality with the object’s `waardeGeassembleerd` field."""
  waardeGeassembleerd: BigFloat

  """Checks for equality with the object’s `afdrukAssemblageBon` field."""
  afdrukAssemblageBon: String

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `sysCreate` field."""
  sysCreate: String

  """Checks for equality with the object’s `sysUpdate` field."""
  sysUpdate: String

  """Checks for equality with the object’s `aantalgereservbij` field."""
  aantalgereservbij: BigFloat
}

"""
A filter to be used against `AssemblageMv` object types. All fields are combined with a logical ‘and.’
"""
input AssemblageMvFilter {
  """Filter by the object’s `assemblageOrder` field."""
  assemblageOrder: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `orderDatum` field."""
  orderDatum: DateFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `aantal` field."""
  aantal: BigFloatFilter

  """Filter by the object’s `commentaar` field."""
  commentaar: StringFilter

  """Filter by the object’s `assemblageDatum` field."""
  assemblageDatum: DateFilter

  """Filter by the object’s `aantalGeassembleerd` field."""
  aantalGeassembleerd: BigFloatFilter

  """Filter by the object’s `waardeGeassembleerd` field."""
  waardeGeassembleerd: BigFloatFilter

  """Filter by the object’s `afdrukAssemblageBon` field."""
  afdrukAssemblageBon: StringFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `sysCreate` field."""
  sysCreate: StringFilter

  """Filter by the object’s `sysUpdate` field."""
  sysUpdate: StringFilter

  """Filter by the object’s `aantalgereservbij` field."""
  aantalgereservbij: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [AssemblageMvFilter!]

  """Checks for any expressions in this list."""
  or: [AssemblageMvFilter!]

  """Negates the expression."""
  not: AssemblageMvFilter
}

"""A connection to a list of `Assemblageregel` values."""
type AssemblageregelsConnection {
  """A list of `Assemblageregel` objects."""
  nodes: [Assemblageregel!]!

  """
  A list of edges which contains the `Assemblageregel` and cursor to aid in pagination.
  """
  edges: [AssemblageregelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `Assemblageregel` you could get from the connection.
  """
  totalCount: Int!
}

type Assemblageregel {
  assemblageOrder: String
  cdartcomponent: String
  assemblageDatum: Date
  cdmagazijn: String
  aantalNorm: BigFloat
  aantalGebruikt: BigFloat
  waardeGebruikt: BigFloat
  aantalSamenstelling: BigFloat
  aantalgereservaf: BigFloat
}

"""A `Assemblageregel` edge in the connection."""
type AssemblageregelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Assemblageregel` at the end of the edge."""
  node: Assemblageregel!
}

"""Methods to use when ordering `Assemblageregel`."""
enum AssemblageregelsOrderBy {
  NATURAL
  ASSEMBLAGE_ORDER_ASC
  ASSEMBLAGE_ORDER_DESC
  CDARTCOMPONENT_ASC
  CDARTCOMPONENT_DESC
  ASSEMBLAGE_DATUM_ASC
  ASSEMBLAGE_DATUM_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  AANTAL_NORM_ASC
  AANTAL_NORM_DESC
  AANTAL_GEBRUIKT_ASC
  AANTAL_GEBRUIKT_DESC
  WAARDE_GEBRUIKT_ASC
  WAARDE_GEBRUIKT_DESC
  AANTAL_SAMENSTELLING_ASC
  AANTAL_SAMENSTELLING_DESC
  AANTALGERESERVAF_ASC
  AANTALGERESERVAF_DESC
}

"""
A condition to be used against `Assemblageregel` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AssemblageregelCondition {
  """Checks for equality with the object’s `assemblageOrder` field."""
  assemblageOrder: String

  """Checks for equality with the object’s `cdartcomponent` field."""
  cdartcomponent: String

  """Checks for equality with the object’s `assemblageDatum` field."""
  assemblageDatum: Date

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `aantalNorm` field."""
  aantalNorm: BigFloat

  """Checks for equality with the object’s `aantalGebruikt` field."""
  aantalGebruikt: BigFloat

  """Checks for equality with the object’s `waardeGebruikt` field."""
  waardeGebruikt: BigFloat

  """Checks for equality with the object’s `aantalSamenstelling` field."""
  aantalSamenstelling: BigFloat

  """Checks for equality with the object’s `aantalgereservaf` field."""
  aantalgereservaf: BigFloat
}

"""
A filter to be used against `Assemblageregel` object types. All fields are combined with a logical ‘and.’
"""
input AssemblageregelFilter {
  """Filter by the object’s `assemblageOrder` field."""
  assemblageOrder: StringFilter

  """Filter by the object’s `cdartcomponent` field."""
  cdartcomponent: StringFilter

  """Filter by the object’s `assemblageDatum` field."""
  assemblageDatum: DateFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `aantalNorm` field."""
  aantalNorm: BigFloatFilter

  """Filter by the object’s `aantalGebruikt` field."""
  aantalGebruikt: BigFloatFilter

  """Filter by the object’s `waardeGebruikt` field."""
  waardeGebruikt: BigFloatFilter

  """Filter by the object’s `aantalSamenstelling` field."""
  aantalSamenstelling: BigFloatFilter

  """Filter by the object’s `aantalgereservaf` field."""
  aantalgereservaf: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [AssemblageregelFilter!]

  """Checks for any expressions in this list."""
  or: [AssemblageregelFilter!]

  """Negates the expression."""
  not: AssemblageregelFilter
}

"""A connection to a list of `AssemblageregelMv` values."""
type AssemblageregelMvsConnection {
  """A list of `AssemblageregelMv` objects."""
  nodes: [AssemblageregelMv!]!

  """
  A list of edges which contains the `AssemblageregelMv` and cursor to aid in pagination.
  """
  edges: [AssemblageregelMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AssemblageregelMv` you could get from the connection.
  """
  totalCount: Int!
}

type AssemblageregelMv {
  assemblageOrder: String
  cdartcomponent: String
  assemblageDatum: Date
  cdmagazijn: String
  aantalNorm: BigFloat
  aantalGebruikt: BigFloat
  waardeGebruikt: BigFloat
  aantalSamenstelling: BigFloat
  aantalgereservaf: BigFloat
}

"""A `AssemblageregelMv` edge in the connection."""
type AssemblageregelMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AssemblageregelMv` at the end of the edge."""
  node: AssemblageregelMv!
}

"""Methods to use when ordering `AssemblageregelMv`."""
enum AssemblageregelMvsOrderBy {
  NATURAL
  ASSEMBLAGE_ORDER_ASC
  ASSEMBLAGE_ORDER_DESC
  CDARTCOMPONENT_ASC
  CDARTCOMPONENT_DESC
  ASSEMBLAGE_DATUM_ASC
  ASSEMBLAGE_DATUM_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  AANTAL_NORM_ASC
  AANTAL_NORM_DESC
  AANTAL_GEBRUIKT_ASC
  AANTAL_GEBRUIKT_DESC
  WAARDE_GEBRUIKT_ASC
  WAARDE_GEBRUIKT_DESC
  AANTAL_SAMENSTELLING_ASC
  AANTAL_SAMENSTELLING_DESC
  AANTALGERESERVAF_ASC
  AANTALGERESERVAF_DESC
}

"""
A condition to be used against `AssemblageregelMv` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AssemblageregelMvCondition {
  """Checks for equality with the object’s `assemblageOrder` field."""
  assemblageOrder: String

  """Checks for equality with the object’s `cdartcomponent` field."""
  cdartcomponent: String

  """Checks for equality with the object’s `assemblageDatum` field."""
  assemblageDatum: Date

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `aantalNorm` field."""
  aantalNorm: BigFloat

  """Checks for equality with the object’s `aantalGebruikt` field."""
  aantalGebruikt: BigFloat

  """Checks for equality with the object’s `waardeGebruikt` field."""
  waardeGebruikt: BigFloat

  """Checks for equality with the object’s `aantalSamenstelling` field."""
  aantalSamenstelling: BigFloat

  """Checks for equality with the object’s `aantalgereservaf` field."""
  aantalgereservaf: BigFloat
}

"""
A filter to be used against `AssemblageregelMv` object types. All fields are combined with a logical ‘and.’
"""
input AssemblageregelMvFilter {
  """Filter by the object’s `assemblageOrder` field."""
  assemblageOrder: StringFilter

  """Filter by the object’s `cdartcomponent` field."""
  cdartcomponent: StringFilter

  """Filter by the object’s `assemblageDatum` field."""
  assemblageDatum: DateFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `aantalNorm` field."""
  aantalNorm: BigFloatFilter

  """Filter by the object’s `aantalGebruikt` field."""
  aantalGebruikt: BigFloatFilter

  """Filter by the object’s `waardeGebruikt` field."""
  waardeGebruikt: BigFloatFilter

  """Filter by the object’s `aantalSamenstelling` field."""
  aantalSamenstelling: BigFloatFilter

  """Filter by the object’s `aantalgereservaf` field."""
  aantalgereservaf: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [AssemblageregelMvFilter!]

  """Checks for any expressions in this list."""
  or: [AssemblageregelMvFilter!]

  """Negates the expression."""
  not: AssemblageregelMvFilter
}

"""A connection to a list of `AssemblyEntity` values."""
type AssemblyEntitiesConnection {
  """A list of `AssemblyEntity` objects."""
  nodes: [AssemblyEntity!]!

  """
  A list of edges which contains the `AssemblyEntity` and cursor to aid in pagination.
  """
  edges: [AssemblyEntitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AssemblyEntity` you could get from the connection."""
  totalCount: Int!
}

type AssemblyEntity {
  id: Int
  code: String
  completed: Boolean
  checked: Boolean
  po: Boolean
  assemblyTypeId: Int
  name: String
  cdartikel: String
  created: Datetime
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  gereserveerd: BigFloat
  inkopen: BigFloat
  voorraad: BigFloat
  initials: String
  advice: Int
}

"""A `AssemblyEntity` edge in the connection."""
type AssemblyEntitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AssemblyEntity` at the end of the edge."""
  node: AssemblyEntity!
}

"""Methods to use when ordering `AssemblyEntity`."""
enum AssemblyEntitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CODE_ASC
  CODE_DESC
  COMPLETED_ASC
  COMPLETED_DESC
  CHECKED_ASC
  CHECKED_DESC
  PO_ASC
  PO_DESC
  ASSEMBLY_TYPE_ID_ASC
  ASSEMBLY_TYPE_ID_DESC
  NAME_ASC
  NAME_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  CREATED_ASC
  CREATED_DESC
  MINVOORRAAD_ASC
  MINVOORRAAD_DESC
  MAXVOORRAAD_ASC
  MAXVOORRAAD_DESC
  GERESERVEERD_ASC
  GERESERVEERD_DESC
  INKOPEN_ASC
  INKOPEN_DESC
  VOORRAAD_ASC
  VOORRAAD_DESC
  INITIALS_ASC
  INITIALS_DESC
  ADVICE_ASC
  ADVICE_DESC
}

"""
A condition to be used against `AssemblyEntity` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AssemblyEntityCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `completed` field."""
  completed: Boolean

  """Checks for equality with the object’s `checked` field."""
  checked: Boolean

  """Checks for equality with the object’s `po` field."""
  po: Boolean

  """Checks for equality with the object’s `assemblyTypeId` field."""
  assemblyTypeId: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `minvoorraad` field."""
  minvoorraad: BigFloat

  """Checks for equality with the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloat

  """Checks for equality with the object’s `gereserveerd` field."""
  gereserveerd: BigFloat

  """Checks for equality with the object’s `inkopen` field."""
  inkopen: BigFloat

  """Checks for equality with the object’s `voorraad` field."""
  voorraad: BigFloat

  """Checks for equality with the object’s `initials` field."""
  initials: String

  """Checks for equality with the object’s `advice` field."""
  advice: Int
}

"""
A filter to be used against `AssemblyEntity` object types. All fields are combined with a logical ‘and.’
"""
input AssemblyEntityFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `code` field."""
  code: StringFilter

  """Filter by the object’s `completed` field."""
  completed: BooleanFilter

  """Filter by the object’s `checked` field."""
  checked: BooleanFilter

  """Filter by the object’s `po` field."""
  po: BooleanFilter

  """Filter by the object’s `assemblyTypeId` field."""
  assemblyTypeId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `minvoorraad` field."""
  minvoorraad: BigFloatFilter

  """Filter by the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloatFilter

  """Filter by the object’s `gereserveerd` field."""
  gereserveerd: BigFloatFilter

  """Filter by the object’s `inkopen` field."""
  inkopen: BigFloatFilter

  """Filter by the object’s `voorraad` field."""
  voorraad: BigFloatFilter

  """Filter by the object’s `initials` field."""
  initials: StringFilter

  """Filter by the object’s `advice` field."""
  advice: IntFilter

  """Checks for all expressions in this list."""
  and: [AssemblyEntityFilter!]

  """Checks for any expressions in this list."""
  or: [AssemblyEntityFilter!]

  """Negates the expression."""
  not: AssemblyEntityFilter
}

"""A connection to a list of `AssemblyLineEntity` values."""
type AssemblyLineEntitiesConnection {
  """A list of `AssemblyLineEntity` objects."""
  nodes: [AssemblyLineEntity!]!

  """
  A list of edges which contains the `AssemblyLineEntity` and cursor to aid in pagination.
  """
  edges: [AssemblyLineEntitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AssemblyLineEntity` you could get from the connection.
  """
  totalCount: Int!
}

type AssemblyLineEntity {
  assemblageOrder: String
  omschr: String
  cdartikel: String
  cdmagazijn: String
  aantalNorm: BigFloat
  aantalGebruikt: BigFloat
  waardeGebruikt: BigFloat
  aantalSamenstelling: BigFloat
  inkopen: BigFloat
  voorraad: BigFloat
  gereserveerd: BigFloat
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  locatie: String
  bestcode: String
  inkvolgnr: Int
  cdcrediteur: String
  zoeknaam: String
  assemblageDatum: Date
  advice: Int
}

"""A `AssemblyLineEntity` edge in the connection."""
type AssemblyLineEntitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AssemblyLineEntity` at the end of the edge."""
  node: AssemblyLineEntity!
}

"""Methods to use when ordering `AssemblyLineEntity`."""
enum AssemblyLineEntitiesOrderBy {
  NATURAL
  ASSEMBLAGE_ORDER_ASC
  ASSEMBLAGE_ORDER_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  AANTAL_NORM_ASC
  AANTAL_NORM_DESC
  AANTAL_GEBRUIKT_ASC
  AANTAL_GEBRUIKT_DESC
  WAARDE_GEBRUIKT_ASC
  WAARDE_GEBRUIKT_DESC
  AANTAL_SAMENSTELLING_ASC
  AANTAL_SAMENSTELLING_DESC
  INKOPEN_ASC
  INKOPEN_DESC
  VOORRAAD_ASC
  VOORRAAD_DESC
  GERESERVEERD_ASC
  GERESERVEERD_DESC
  MINVOORRAAD_ASC
  MINVOORRAAD_DESC
  MAXVOORRAAD_ASC
  MAXVOORRAAD_DESC
  LOCATIE_ASC
  LOCATIE_DESC
  BESTCODE_ASC
  BESTCODE_DESC
  INKVOLGNR_ASC
  INKVOLGNR_DESC
  CDCREDITEUR_ASC
  CDCREDITEUR_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  ASSEMBLAGE_DATUM_ASC
  ASSEMBLAGE_DATUM_DESC
  ADVICE_ASC
  ADVICE_DESC
}

"""
A condition to be used against `AssemblyLineEntity` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AssemblyLineEntityCondition {
  """Checks for equality with the object’s `assemblageOrder` field."""
  assemblageOrder: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `aantalNorm` field."""
  aantalNorm: BigFloat

  """Checks for equality with the object’s `aantalGebruikt` field."""
  aantalGebruikt: BigFloat

  """Checks for equality with the object’s `waardeGebruikt` field."""
  waardeGebruikt: BigFloat

  """Checks for equality with the object’s `aantalSamenstelling` field."""
  aantalSamenstelling: BigFloat

  """Checks for equality with the object’s `inkopen` field."""
  inkopen: BigFloat

  """Checks for equality with the object’s `voorraad` field."""
  voorraad: BigFloat

  """Checks for equality with the object’s `gereserveerd` field."""
  gereserveerd: BigFloat

  """Checks for equality with the object’s `minvoorraad` field."""
  minvoorraad: BigFloat

  """Checks for equality with the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloat

  """Checks for equality with the object’s `locatie` field."""
  locatie: String

  """Checks for equality with the object’s `bestcode` field."""
  bestcode: String

  """Checks for equality with the object’s `inkvolgnr` field."""
  inkvolgnr: Int

  """Checks for equality with the object’s `cdcrediteur` field."""
  cdcrediteur: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `assemblageDatum` field."""
  assemblageDatum: Date

  """Checks for equality with the object’s `advice` field."""
  advice: Int
}

"""
A filter to be used against `AssemblyLineEntity` object types. All fields are combined with a logical ‘and.’
"""
input AssemblyLineEntityFilter {
  """Filter by the object’s `assemblageOrder` field."""
  assemblageOrder: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `aantalNorm` field."""
  aantalNorm: BigFloatFilter

  """Filter by the object’s `aantalGebruikt` field."""
  aantalGebruikt: BigFloatFilter

  """Filter by the object’s `waardeGebruikt` field."""
  waardeGebruikt: BigFloatFilter

  """Filter by the object’s `aantalSamenstelling` field."""
  aantalSamenstelling: BigFloatFilter

  """Filter by the object’s `inkopen` field."""
  inkopen: BigFloatFilter

  """Filter by the object’s `voorraad` field."""
  voorraad: BigFloatFilter

  """Filter by the object’s `gereserveerd` field."""
  gereserveerd: BigFloatFilter

  """Filter by the object’s `minvoorraad` field."""
  minvoorraad: BigFloatFilter

  """Filter by the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloatFilter

  """Filter by the object’s `locatie` field."""
  locatie: StringFilter

  """Filter by the object’s `bestcode` field."""
  bestcode: StringFilter

  """Filter by the object’s `inkvolgnr` field."""
  inkvolgnr: IntFilter

  """Filter by the object’s `cdcrediteur` field."""
  cdcrediteur: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `assemblageDatum` field."""
  assemblageDatum: DateFilter

  """Filter by the object’s `advice` field."""
  advice: IntFilter

  """Checks for all expressions in this list."""
  and: [AssemblyLineEntityFilter!]

  """Checks for any expressions in this list."""
  or: [AssemblyLineEntityFilter!]

  """Negates the expression."""
  not: AssemblyLineEntityFilter
}

"""A connection to a list of `AssemblyMultiversEntity` values."""
type AssemblyMultiversEntitiesConnection {
  """A list of `AssemblyMultiversEntity` objects."""
  nodes: [AssemblyMultiversEntity!]!

  """
  A list of edges which contains the `AssemblyMultiversEntity` and cursor to aid in pagination.
  """
  edges: [AssemblyMultiversEntitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AssemblyMultiversEntity` you could get from the connection.
  """
  totalCount: Int!
}

type AssemblyMultiversEntity {
  assemblageOrder: String
  id: String
  orderDatum: Date
  cdmagazijn: String
  aantal: BigFloat
  omschr: String
  commentaar: String
  cdartikel: String
  assemblageDatum: Date
  aantalGeassembleerd: BigFloat
  waardeGeassembleerd: BigFloat
  afdrukAssemblageBon: String
  status: String
  guidItem: String
  sysCreate: String
  sysUpdate: String
  aantalgereservbij: BigFloat
  voorraad: BigFloat
  inkopen: BigFloat
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  bestcode: String
  advice: Int
}

"""A `AssemblyMultiversEntity` edge in the connection."""
type AssemblyMultiversEntitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AssemblyMultiversEntity` at the end of the edge."""
  node: AssemblyMultiversEntity!
}

"""Methods to use when ordering `AssemblyMultiversEntity`."""
enum AssemblyMultiversEntitiesOrderBy {
  NATURAL
  ASSEMBLAGE_ORDER_ASC
  ASSEMBLAGE_ORDER_DESC
  ID_ASC
  ID_DESC
  ORDER_DATUM_ASC
  ORDER_DATUM_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  AANTAL_ASC
  AANTAL_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  COMMENTAAR_ASC
  COMMENTAAR_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  ASSEMBLAGE_DATUM_ASC
  ASSEMBLAGE_DATUM_DESC
  AANTAL_GEASSEMBLEERD_ASC
  AANTAL_GEASSEMBLEERD_DESC
  WAARDE_GEASSEMBLEERD_ASC
  WAARDE_GEASSEMBLEERD_DESC
  AFDRUK_ASSEMBLAGE_BON_ASC
  AFDRUK_ASSEMBLAGE_BON_DESC
  STATUS_ASC
  STATUS_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  SYS_CREATE_ASC
  SYS_CREATE_DESC
  SYS_UPDATE_ASC
  SYS_UPDATE_DESC
  AANTALGERESERVBIJ_ASC
  AANTALGERESERVBIJ_DESC
  VOORRAAD_ASC
  VOORRAAD_DESC
  INKOPEN_ASC
  INKOPEN_DESC
  MINVOORRAAD_ASC
  MINVOORRAAD_DESC
  MAXVOORRAAD_ASC
  MAXVOORRAAD_DESC
  BESTCODE_ASC
  BESTCODE_DESC
  ADVICE_ASC
  ADVICE_DESC
}

"""
A condition to be used against `AssemblyMultiversEntity` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input AssemblyMultiversEntityCondition {
  """Checks for equality with the object’s `assemblageOrder` field."""
  assemblageOrder: String

  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `orderDatum` field."""
  orderDatum: Date

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `aantal` field."""
  aantal: BigFloat

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `commentaar` field."""
  commentaar: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `assemblageDatum` field."""
  assemblageDatum: Date

  """Checks for equality with the object’s `aantalGeassembleerd` field."""
  aantalGeassembleerd: BigFloat

  """Checks for equality with the object’s `waardeGeassembleerd` field."""
  waardeGeassembleerd: BigFloat

  """Checks for equality with the object’s `afdrukAssemblageBon` field."""
  afdrukAssemblageBon: String

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `sysCreate` field."""
  sysCreate: String

  """Checks for equality with the object’s `sysUpdate` field."""
  sysUpdate: String

  """Checks for equality with the object’s `aantalgereservbij` field."""
  aantalgereservbij: BigFloat

  """Checks for equality with the object’s `voorraad` field."""
  voorraad: BigFloat

  """Checks for equality with the object’s `inkopen` field."""
  inkopen: BigFloat

  """Checks for equality with the object’s `minvoorraad` field."""
  minvoorraad: BigFloat

  """Checks for equality with the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloat

  """Checks for equality with the object’s `bestcode` field."""
  bestcode: String

  """Checks for equality with the object’s `advice` field."""
  advice: Int
}

"""
A filter to be used against `AssemblyMultiversEntity` object types. All fields are combined with a logical ‘and.’
"""
input AssemblyMultiversEntityFilter {
  """Filter by the object’s `assemblageOrder` field."""
  assemblageOrder: StringFilter

  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `orderDatum` field."""
  orderDatum: DateFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `aantal` field."""
  aantal: BigFloatFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `commentaar` field."""
  commentaar: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `assemblageDatum` field."""
  assemblageDatum: DateFilter

  """Filter by the object’s `aantalGeassembleerd` field."""
  aantalGeassembleerd: BigFloatFilter

  """Filter by the object’s `waardeGeassembleerd` field."""
  waardeGeassembleerd: BigFloatFilter

  """Filter by the object’s `afdrukAssemblageBon` field."""
  afdrukAssemblageBon: StringFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `sysCreate` field."""
  sysCreate: StringFilter

  """Filter by the object’s `sysUpdate` field."""
  sysUpdate: StringFilter

  """Filter by the object’s `aantalgereservbij` field."""
  aantalgereservbij: BigFloatFilter

  """Filter by the object’s `voorraad` field."""
  voorraad: BigFloatFilter

  """Filter by the object’s `inkopen` field."""
  inkopen: BigFloatFilter

  """Filter by the object’s `minvoorraad` field."""
  minvoorraad: BigFloatFilter

  """Filter by the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloatFilter

  """Filter by the object’s `bestcode` field."""
  bestcode: StringFilter

  """Filter by the object’s `advice` field."""
  advice: IntFilter

  """Checks for all expressions in this list."""
  and: [AssemblyMultiversEntityFilter!]

  """Checks for any expressions in this list."""
  or: [AssemblyMultiversEntityFilter!]

  """Negates the expression."""
  not: AssemblyMultiversEntityFilter
}

"""A connection to a list of `AssemblyTypesEntity` values."""
type AssemblyTypesEntitiesConnection {
  """A list of `AssemblyTypesEntity` objects."""
  nodes: [AssemblyTypesEntity!]!

  """
  A list of edges which contains the `AssemblyTypesEntity` and cursor to aid in pagination.
  """
  edges: [AssemblyTypesEntitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AssemblyTypesEntity` you could get from the connection.
  """
  totalCount: Int!
}

type AssemblyTypesEntity {
  id: Int
  name: String
  cdartikel: String
  ownerId: Int
  created: Datetime
  modified: Datetime
  locatie: String
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  voorraad: BigFloat
  gereserveerd: BigFloat
  assemblaf: BigFloat
  initials: String
  advice: Int
}

"""A `AssemblyTypesEntity` edge in the connection."""
type AssemblyTypesEntitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AssemblyTypesEntity` at the end of the edge."""
  node: AssemblyTypesEntity!
}

"""Methods to use when ordering `AssemblyTypesEntity`."""
enum AssemblyTypesEntitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  LOCATIE_ASC
  LOCATIE_DESC
  MINVOORRAAD_ASC
  MINVOORRAAD_DESC
  MAXVOORRAAD_ASC
  MAXVOORRAAD_DESC
  VOORRAAD_ASC
  VOORRAAD_DESC
  GERESERVEERD_ASC
  GERESERVEERD_DESC
  ASSEMBLAF_ASC
  ASSEMBLAF_DESC
  INITIALS_ASC
  INITIALS_DESC
  ADVICE_ASC
  ADVICE_DESC
}

"""
A condition to be used against `AssemblyTypesEntity` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input AssemblyTypesEntityCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `locatie` field."""
  locatie: String

  """Checks for equality with the object’s `minvoorraad` field."""
  minvoorraad: BigFloat

  """Checks for equality with the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloat

  """Checks for equality with the object’s `voorraad` field."""
  voorraad: BigFloat

  """Checks for equality with the object’s `gereserveerd` field."""
  gereserveerd: BigFloat

  """Checks for equality with the object’s `assemblaf` field."""
  assemblaf: BigFloat

  """Checks for equality with the object’s `initials` field."""
  initials: String

  """Checks for equality with the object’s `advice` field."""
  advice: Int
}

"""
A filter to be used against `AssemblyTypesEntity` object types. All fields are combined with a logical ‘and.’
"""
input AssemblyTypesEntityFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `locatie` field."""
  locatie: StringFilter

  """Filter by the object’s `minvoorraad` field."""
  minvoorraad: BigFloatFilter

  """Filter by the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloatFilter

  """Filter by the object’s `voorraad` field."""
  voorraad: BigFloatFilter

  """Filter by the object’s `gereserveerd` field."""
  gereserveerd: BigFloatFilter

  """Filter by the object’s `assemblaf` field."""
  assemblaf: BigFloatFilter

  """Filter by the object’s `initials` field."""
  initials: StringFilter

  """Filter by the object’s `advice` field."""
  advice: IntFilter

  """Checks for all expressions in this list."""
  and: [AssemblyTypesEntityFilter!]

  """Checks for any expressions in this list."""
  or: [AssemblyTypesEntityFilter!]

  """Negates the expression."""
  not: AssemblyTypesEntityFilter
}

"""A connection to a list of `Besteladvy` values."""
type BesteladviesConnection {
  """A list of `Besteladvy` objects."""
  nodes: [Besteladvy!]!

  """
  A list of edges which contains the `Besteladvy` and cursor to aid in pagination.
  """
  edges: [BesteladviesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Besteladvy` you could get from the connection."""
  totalCount: Int!
}

type Besteladvy {
  stockSupplierId: Int
  factuuropdracht: String
  cdartikel: String
  cdartsamenstellingen: JSON
  omschr: String
  bestcode: String
  inkoopprijs: BigFloat
  besthoeveelheid: BigFloat
  voorraad: BigFloat
  gereserveerd: BigFloat
  assemblaf: BigFloat
  vrij: BigFloat
  inkopen: BigFloat
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  isovaluta: String
  aantal: BigFloat
}

"""A `Besteladvy` edge in the connection."""
type BesteladviesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Besteladvy` at the end of the edge."""
  node: Besteladvy!
}

"""Methods to use when ordering `Besteladvy`."""
enum BesteladviesOrderBy {
  NATURAL
  STOCK_SUPPLIER_ID_ASC
  STOCK_SUPPLIER_ID_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  CDARTSAMENSTELLINGEN_ASC
  CDARTSAMENSTELLINGEN_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  BESTCODE_ASC
  BESTCODE_DESC
  INKOOPPRIJS_ASC
  INKOOPPRIJS_DESC
  BESTHOEVEELHEID_ASC
  BESTHOEVEELHEID_DESC
  VOORRAAD_ASC
  VOORRAAD_DESC
  GERESERVEERD_ASC
  GERESERVEERD_DESC
  ASSEMBLAF_ASC
  ASSEMBLAF_DESC
  VRIJ_ASC
  VRIJ_DESC
  INKOPEN_ASC
  INKOPEN_DESC
  MINVOORRAAD_ASC
  MINVOORRAAD_DESC
  MAXVOORRAAD_ASC
  MAXVOORRAAD_DESC
  ISOVALUTA_ASC
  ISOVALUTA_DESC
  AANTAL_ASC
  AANTAL_DESC
}

"""
A condition to be used against `Besteladvy` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input BesteladvyCondition {
  """Checks for equality with the object’s `stockSupplierId` field."""
  stockSupplierId: Int

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `cdartsamenstellingen` field."""
  cdartsamenstellingen: JSON

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `bestcode` field."""
  bestcode: String

  """Checks for equality with the object’s `inkoopprijs` field."""
  inkoopprijs: BigFloat

  """Checks for equality with the object’s `besthoeveelheid` field."""
  besthoeveelheid: BigFloat

  """Checks for equality with the object’s `voorraad` field."""
  voorraad: BigFloat

  """Checks for equality with the object’s `gereserveerd` field."""
  gereserveerd: BigFloat

  """Checks for equality with the object’s `assemblaf` field."""
  assemblaf: BigFloat

  """Checks for equality with the object’s `vrij` field."""
  vrij: BigFloat

  """Checks for equality with the object’s `inkopen` field."""
  inkopen: BigFloat

  """Checks for equality with the object’s `minvoorraad` field."""
  minvoorraad: BigFloat

  """Checks for equality with the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloat

  """Checks for equality with the object’s `isovaluta` field."""
  isovaluta: String

  """Checks for equality with the object’s `aantal` field."""
  aantal: BigFloat
}

"""
A filter to be used against `Besteladvy` object types. All fields are combined with a logical ‘and.’
"""
input BesteladvyFilter {
  """Filter by the object’s `stockSupplierId` field."""
  stockSupplierId: IntFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `bestcode` field."""
  bestcode: StringFilter

  """Filter by the object’s `inkoopprijs` field."""
  inkoopprijs: BigFloatFilter

  """Filter by the object’s `besthoeveelheid` field."""
  besthoeveelheid: BigFloatFilter

  """Filter by the object’s `voorraad` field."""
  voorraad: BigFloatFilter

  """Filter by the object’s `gereserveerd` field."""
  gereserveerd: BigFloatFilter

  """Filter by the object’s `assemblaf` field."""
  assemblaf: BigFloatFilter

  """Filter by the object’s `vrij` field."""
  vrij: BigFloatFilter

  """Filter by the object’s `inkopen` field."""
  inkopen: BigFloatFilter

  """Filter by the object’s `minvoorraad` field."""
  minvoorraad: BigFloatFilter

  """Filter by the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloatFilter

  """Filter by the object’s `isovaluta` field."""
  isovaluta: StringFilter

  """Filter by the object’s `aantal` field."""
  aantal: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [BesteladvyFilter!]

  """Checks for any expressions in this list."""
  or: [BesteladvyFilter!]

  """Negates the expression."""
  not: BesteladvyFilter
}

"""A connection to a list of `BieStatus` values."""
type BieStatusesConnection {
  """A list of `BieStatus` objects."""
  nodes: [BieStatus!]!

  """
  A list of edges which contains the `BieStatus` and cursor to aid in pagination.
  """
  edges: [BieStatusesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BieStatus` you could get from the connection."""
  totalCount: Int!
}

type BieStatus {
  orderregel: Int
  ordernummer: String
  orderdatum: Date
  factuuropdracht: String
  endUser: String
  deliveryDate: Date
  omschr: String
  bestcode: String
  aantalbesteld: BigFloat
  prijs: BigFloat
}

"""A `BieStatus` edge in the connection."""
type BieStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BieStatus` at the end of the edge."""
  node: BieStatus!
}

"""Methods to use when ordering `BieStatus`."""
enum BieStatusesOrderBy {
  NATURAL
  ORDERREGEL_ASC
  ORDERREGEL_DESC
  ORDERNUMMER_ASC
  ORDERNUMMER_DESC
  ORDERDATUM_ASC
  ORDERDATUM_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  END_USER_ASC
  END_USER_DESC
  DELIVERY_DATE_ASC
  DELIVERY_DATE_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  BESTCODE_ASC
  BESTCODE_DESC
  AANTALBESTELD_ASC
  AANTALBESTELD_DESC
  PRIJS_ASC
  PRIJS_DESC
}

"""
A condition to be used against `BieStatus` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input BieStatusCondition {
  """Checks for equality with the object’s `orderregel` field."""
  orderregel: Int

  """Checks for equality with the object’s `ordernummer` field."""
  ordernummer: String

  """Checks for equality with the object’s `orderdatum` field."""
  orderdatum: Date

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `endUser` field."""
  endUser: String

  """Checks for equality with the object’s `deliveryDate` field."""
  deliveryDate: Date

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `bestcode` field."""
  bestcode: String

  """Checks for equality with the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloat

  """Checks for equality with the object’s `prijs` field."""
  prijs: BigFloat
}

"""
A filter to be used against `BieStatus` object types. All fields are combined with a logical ‘and.’
"""
input BieStatusFilter {
  """Filter by the object’s `orderregel` field."""
  orderregel: IntFilter

  """Filter by the object’s `ordernummer` field."""
  ordernummer: StringFilter

  """Filter by the object’s `orderdatum` field."""
  orderdatum: DateFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `endUser` field."""
  endUser: StringFilter

  """Filter by the object’s `deliveryDate` field."""
  deliveryDate: DateFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `bestcode` field."""
  bestcode: StringFilter

  """Filter by the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloatFilter

  """Filter by the object’s `prijs` field."""
  prijs: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [BieStatusFilter!]

  """Checks for any expressions in this list."""
  or: [BieStatusFilter!]

  """Negates the expression."""
  not: BieStatusFilter
}

"""A connection to a list of `CalgasEntity` values."""
type CalgasEntitiesConnection {
  """A list of `CalgasEntity` objects."""
  nodes: [CalgasEntity!]!

  """
  A list of edges which contains the `CalgasEntity` and cursor to aid in pagination.
  """
  edges: [CalgasEntitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CalgasEntity` you could get from the connection."""
  totalCount: Int!
}

type CalgasEntity {
  id: Int
  gasId: Int
  created: Datetime
  gasCreated: Datetime
  concentration: Float
  engineeringUnits: String
  cdartikel: String
  modified: Datetime
  ownerId: Int
  username: String
  initials: String
  name: String
}

"""A `CalgasEntity` edge in the connection."""
type CalgasEntitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CalgasEntity` at the end of the edge."""
  node: CalgasEntity!
}

"""Methods to use when ordering `CalgasEntity`."""
enum CalgasEntitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  GAS_ID_ASC
  GAS_ID_DESC
  CREATED_ASC
  CREATED_DESC
  GAS_CREATED_ASC
  GAS_CREATED_DESC
  CONCENTRATION_ASC
  CONCENTRATION_DESC
  ENGINEERING_UNITS_ASC
  ENGINEERING_UNITS_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  INITIALS_ASC
  INITIALS_DESC
  NAME_ASC
  NAME_DESC
}

"""
A condition to be used against `CalgasEntity` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CalgasEntityCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `gasId` field."""
  gasId: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `gasCreated` field."""
  gasCreated: Datetime

  """Checks for equality with the object’s `concentration` field."""
  concentration: Float

  """Checks for equality with the object’s `engineeringUnits` field."""
  engineeringUnits: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `initials` field."""
  initials: String

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
A filter to be used against `CalgasEntity` object types. All fields are combined with a logical ‘and.’
"""
input CalgasEntityFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `gasId` field."""
  gasId: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `gasCreated` field."""
  gasCreated: DatetimeFilter

  """Filter by the object’s `concentration` field."""
  concentration: FloatFilter

  """Filter by the object’s `engineeringUnits` field."""
  engineeringUnits: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `username` field."""
  username: StringFilter

  """Filter by the object’s `initials` field."""
  initials: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Checks for all expressions in this list."""
  and: [CalgasEntityFilter!]

  """Checks for any expressions in this list."""
  or: [CalgasEntityFilter!]

  """Negates the expression."""
  not: CalgasEntityFilter
}

"""A connection to a list of `CdartikelJoin` values."""
type CdartikelJoinsConnection {
  """A list of `CdartikelJoin` objects."""
  nodes: [CdartikelJoin!]!

  """
  A list of edges which contains the `CdartikelJoin` and cursor to aid in pagination.
  """
  edges: [CdartikelJoinsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CdartikelJoin` you could get from the connection."""
  totalCount: Int!
}

type CdartikelJoin {
  cdartikel: String
  artikelId: String
  voorradenId: String
  verkoopgegevensId: String
  advice: Int
}

"""A `CdartikelJoin` edge in the connection."""
type CdartikelJoinsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CdartikelJoin` at the end of the edge."""
  node: CdartikelJoin!
}

"""Methods to use when ordering `CdartikelJoin`."""
enum CdartikelJoinsOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  ARTIKEL_ID_ASC
  ARTIKEL_ID_DESC
  VOORRADEN_ID_ASC
  VOORRADEN_ID_DESC
  VERKOOPGEGEVENS_ID_ASC
  VERKOOPGEGEVENS_ID_DESC
  ADVICE_ASC
  ADVICE_DESC
}

"""
A condition to be used against `CdartikelJoin` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CdartikelJoinCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `artikelId` field."""
  artikelId: String

  """Checks for equality with the object’s `voorradenId` field."""
  voorradenId: String

  """Checks for equality with the object’s `verkoopgegevensId` field."""
  verkoopgegevensId: String

  """Checks for equality with the object’s `advice` field."""
  advice: Int
}

"""
A filter to be used against `CdartikelJoin` object types. All fields are combined with a logical ‘and.’
"""
input CdartikelJoinFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `artikelId` field."""
  artikelId: StringFilter

  """Filter by the object’s `voorradenId` field."""
  voorradenId: StringFilter

  """Filter by the object’s `verkoopgegevensId` field."""
  verkoopgegevensId: StringFilter

  """Filter by the object’s `advice` field."""
  advice: IntFilter

  """Checks for all expressions in this list."""
  and: [CdartikelJoinFilter!]

  """Checks for any expressions in this list."""
  or: [CdartikelJoinFilter!]

  """Negates the expression."""
  not: CdartikelJoinFilter
}

"""A connection to a list of `ContactpersoonMv` values."""
type ContactpersoonMvsConnection {
  """A list of `ContactpersoonMv` objects."""
  nodes: [ContactpersoonMv!]!

  """
  A list of edges which contains the `ContactpersoonMv` and cursor to aid in pagination.
  """
  edges: [ContactpersoonMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ContactpersoonMv` you could get from the connection.
  """
  totalCount: Int!
}

type ContactpersoonMv {
  cdrelatie: Int
  cdcontact: String
  naam: String
  voornaam: String
  voorletters: String
  email: String
  telefax: String
  telefoon: String
  telefoonmobiel: String
  cdtaal: String
  cdfunctie: String
  cdtitelvoor: String
  cdtitelna: String
  cdaanhef: String
  geslacht: String
}

"""A `ContactpersoonMv` edge in the connection."""
type ContactpersoonMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContactpersoonMv` at the end of the edge."""
  node: ContactpersoonMv!
}

"""Methods to use when ordering `ContactpersoonMv`."""
enum ContactpersoonMvsOrderBy {
  NATURAL
  CDRELATIE_ASC
  CDRELATIE_DESC
  CDCONTACT_ASC
  CDCONTACT_DESC
  NAAM_ASC
  NAAM_DESC
  VOORNAAM_ASC
  VOORNAAM_DESC
  VOORLETTERS_ASC
  VOORLETTERS_DESC
  EMAIL_ASC
  EMAIL_DESC
  TELEFAX_ASC
  TELEFAX_DESC
  TELEFOON_ASC
  TELEFOON_DESC
  TELEFOONMOBIEL_ASC
  TELEFOONMOBIEL_DESC
  CDTAAL_ASC
  CDTAAL_DESC
  CDFUNCTIE_ASC
  CDFUNCTIE_DESC
  CDTITELVOOR_ASC
  CDTITELVOOR_DESC
  CDTITELNA_ASC
  CDTITELNA_DESC
  CDAANHEF_ASC
  CDAANHEF_DESC
  GESLACHT_ASC
  GESLACHT_DESC
}

"""
A condition to be used against `ContactpersoonMv` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ContactpersoonMvCondition {
  """Checks for equality with the object’s `cdrelatie` field."""
  cdrelatie: Int

  """Checks for equality with the object’s `cdcontact` field."""
  cdcontact: String

  """Checks for equality with the object’s `naam` field."""
  naam: String

  """Checks for equality with the object’s `voornaam` field."""
  voornaam: String

  """Checks for equality with the object’s `voorletters` field."""
  voorletters: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `telefax` field."""
  telefax: String

  """Checks for equality with the object’s `telefoon` field."""
  telefoon: String

  """Checks for equality with the object’s `telefoonmobiel` field."""
  telefoonmobiel: String

  """Checks for equality with the object’s `cdtaal` field."""
  cdtaal: String

  """Checks for equality with the object’s `cdfunctie` field."""
  cdfunctie: String

  """Checks for equality with the object’s `cdtitelvoor` field."""
  cdtitelvoor: String

  """Checks for equality with the object’s `cdtitelna` field."""
  cdtitelna: String

  """Checks for equality with the object’s `cdaanhef` field."""
  cdaanhef: String

  """Checks for equality with the object’s `geslacht` field."""
  geslacht: String
}

"""
A filter to be used against `ContactpersoonMv` object types. All fields are combined with a logical ‘and.’
"""
input ContactpersoonMvFilter {
  """Filter by the object’s `cdrelatie` field."""
  cdrelatie: IntFilter

  """Filter by the object’s `cdcontact` field."""
  cdcontact: StringFilter

  """Filter by the object’s `naam` field."""
  naam: StringFilter

  """Filter by the object’s `voornaam` field."""
  voornaam: StringFilter

  """Filter by the object’s `voorletters` field."""
  voorletters: StringFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `telefax` field."""
  telefax: StringFilter

  """Filter by the object’s `telefoon` field."""
  telefoon: StringFilter

  """Filter by the object’s `telefoonmobiel` field."""
  telefoonmobiel: StringFilter

  """Filter by the object’s `cdtaal` field."""
  cdtaal: StringFilter

  """Filter by the object’s `cdfunctie` field."""
  cdfunctie: StringFilter

  """Filter by the object’s `cdtitelvoor` field."""
  cdtitelvoor: StringFilter

  """Filter by the object’s `cdtitelna` field."""
  cdtitelna: StringFilter

  """Filter by the object’s `cdaanhef` field."""
  cdaanhef: StringFilter

  """Filter by the object’s `geslacht` field."""
  geslacht: StringFilter

  """Checks for all expressions in this list."""
  and: [ContactpersoonMvFilter!]

  """Checks for any expressions in this list."""
  or: [ContactpersoonMvFilter!]

  """Negates the expression."""
  not: ContactpersoonMvFilter
}

"""A connection to a list of `Crediteur` values."""
type CrediteursConnection {
  """A list of `Crediteur` objects."""
  nodes: [Crediteur!]!

  """
  A list of edges which contains the `Crediteur` and cursor to aid in pagination.
  """
  edges: [CrediteursEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Crediteur` you could get from the connection."""
  totalCount: Int!
}

type Crediteur {
  cdrelatie: Int
  cdcrediteur: String
  zoeknaam: String
  naam: String
  naamstraat: String
  straat: String
  woonplaats: String
  postcode: String
  cdland: String
  persoon: String
  telefoon: String
  telefoonmobiel: String
  telefax: String
  email: String
  btwnummer: String
  datumverif: Date
  debnrcred: String
  cdvaluta: String
  cdbetcond: String
  cdlevcond: String
  cdtaal: String
  cdjournaal: Int
  nummerkvk: String
  plaatskvk: String
  datumkvk: Date
  cdgrbrekening: String
  btwscenario: Int
  homepage: String
  cdstroom: Int
  cdvervoer: Int
  cdverkeer: Int
  cdstelsel: Int
  cdtype: String
  cdgoedcode: Int
  telebankfact: String
  opslpercinkoop: BigFloat
  aanmaakdatum: Date
  datumltstewijz: Date
  cdonderaannemer: String
  status: String
  controleBetkenmerk: String
  ondernemersnr: String
  guidItem: String
  sysCreate: String
  sysUpdate: String
  fichegeboortedatum: Date
  fichenationaalnr: BigFloat
  ficheaard: String
  fichenaam: String
  fichevoornaam: String
  ficheberoep: String
  fichenaamechtgenoot: String
  fichehandicap: String
  ficheburgstand: String
  fichegezinstoestand: String
  fichekinderen: Int
  fichetenlaste: Int
  btwopkredb: String
  krbperc: BigFloat
  overhIdNr: String
}

"""A `Crediteur` edge in the connection."""
type CrediteursEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Crediteur` at the end of the edge."""
  node: Crediteur!
}

"""Methods to use when ordering `Crediteur`."""
enum CrediteursOrderBy {
  NATURAL
  CDRELATIE_ASC
  CDRELATIE_DESC
  CDCREDITEUR_ASC
  CDCREDITEUR_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  NAAM_ASC
  NAAM_DESC
  NAAMSTRAAT_ASC
  NAAMSTRAAT_DESC
  STRAAT_ASC
  STRAAT_DESC
  WOONPLAATS_ASC
  WOONPLAATS_DESC
  POSTCODE_ASC
  POSTCODE_DESC
  CDLAND_ASC
  CDLAND_DESC
  PERSOON_ASC
  PERSOON_DESC
  TELEFOON_ASC
  TELEFOON_DESC
  TELEFOONMOBIEL_ASC
  TELEFOONMOBIEL_DESC
  TELEFAX_ASC
  TELEFAX_DESC
  EMAIL_ASC
  EMAIL_DESC
  BTWNUMMER_ASC
  BTWNUMMER_DESC
  DATUMVERIF_ASC
  DATUMVERIF_DESC
  DEBNRCRED_ASC
  DEBNRCRED_DESC
  CDVALUTA_ASC
  CDVALUTA_DESC
  CDBETCOND_ASC
  CDBETCOND_DESC
  CDLEVCOND_ASC
  CDLEVCOND_DESC
  CDTAAL_ASC
  CDTAAL_DESC
  CDJOURNAAL_ASC
  CDJOURNAAL_DESC
  NUMMERKVK_ASC
  NUMMERKVK_DESC
  PLAATSKVK_ASC
  PLAATSKVK_DESC
  DATUMKVK_ASC
  DATUMKVK_DESC
  CDGRBREKENING_ASC
  CDGRBREKENING_DESC
  BTWSCENARIO_ASC
  BTWSCENARIO_DESC
  HOMEPAGE_ASC
  HOMEPAGE_DESC
  CDSTROOM_ASC
  CDSTROOM_DESC
  CDVERVOER_ASC
  CDVERVOER_DESC
  CDVERKEER_ASC
  CDVERKEER_DESC
  CDSTELSEL_ASC
  CDSTELSEL_DESC
  CDTYPE_ASC
  CDTYPE_DESC
  CDGOEDCODE_ASC
  CDGOEDCODE_DESC
  TELEBANKFACT_ASC
  TELEBANKFACT_DESC
  OPSLPERCINKOOP_ASC
  OPSLPERCINKOOP_DESC
  AANMAAKDATUM_ASC
  AANMAAKDATUM_DESC
  DATUMLTSTEWIJZ_ASC
  DATUMLTSTEWIJZ_DESC
  CDONDERAANNEMER_ASC
  CDONDERAANNEMER_DESC
  STATUS_ASC
  STATUS_DESC
  CONTROLE_BETKENMERK_ASC
  CONTROLE_BETKENMERK_DESC
  ONDERNEMERSNR_ASC
  ONDERNEMERSNR_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  SYS_CREATE_ASC
  SYS_CREATE_DESC
  SYS_UPDATE_ASC
  SYS_UPDATE_DESC
  FICHEGEBOORTEDATUM_ASC
  FICHEGEBOORTEDATUM_DESC
  FICHENATIONAALNR_ASC
  FICHENATIONAALNR_DESC
  FICHEAARD_ASC
  FICHEAARD_DESC
  FICHENAAM_ASC
  FICHENAAM_DESC
  FICHEVOORNAAM_ASC
  FICHEVOORNAAM_DESC
  FICHEBEROEP_ASC
  FICHEBEROEP_DESC
  FICHENAAMECHTGENOOT_ASC
  FICHENAAMECHTGENOOT_DESC
  FICHEHANDICAP_ASC
  FICHEHANDICAP_DESC
  FICHEBURGSTAND_ASC
  FICHEBURGSTAND_DESC
  FICHEGEZINSTOESTAND_ASC
  FICHEGEZINSTOESTAND_DESC
  FICHEKINDEREN_ASC
  FICHEKINDEREN_DESC
  FICHETENLASTE_ASC
  FICHETENLASTE_DESC
  BTWOPKREDB_ASC
  BTWOPKREDB_DESC
  KRBPERC_ASC
  KRBPERC_DESC
  OVERH_ID_NR_ASC
  OVERH_ID_NR_DESC
}

"""
A condition to be used against `Crediteur` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CrediteurCondition {
  """Checks for equality with the object’s `cdrelatie` field."""
  cdrelatie: Int

  """Checks for equality with the object’s `cdcrediteur` field."""
  cdcrediteur: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `naam` field."""
  naam: String

  """Checks for equality with the object’s `naamstraat` field."""
  naamstraat: String

  """Checks for equality with the object’s `straat` field."""
  straat: String

  """Checks for equality with the object’s `woonplaats` field."""
  woonplaats: String

  """Checks for equality with the object’s `postcode` field."""
  postcode: String

  """Checks for equality with the object’s `cdland` field."""
  cdland: String

  """Checks for equality with the object’s `persoon` field."""
  persoon: String

  """Checks for equality with the object’s `telefoon` field."""
  telefoon: String

  """Checks for equality with the object’s `telefoonmobiel` field."""
  telefoonmobiel: String

  """Checks for equality with the object’s `telefax` field."""
  telefax: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `btwnummer` field."""
  btwnummer: String

  """Checks for equality with the object’s `datumverif` field."""
  datumverif: Date

  """Checks for equality with the object’s `debnrcred` field."""
  debnrcred: String

  """Checks for equality with the object’s `cdvaluta` field."""
  cdvaluta: String

  """Checks for equality with the object’s `cdbetcond` field."""
  cdbetcond: String

  """Checks for equality with the object’s `cdlevcond` field."""
  cdlevcond: String

  """Checks for equality with the object’s `cdtaal` field."""
  cdtaal: String

  """Checks for equality with the object’s `cdjournaal` field."""
  cdjournaal: Int

  """Checks for equality with the object’s `nummerkvk` field."""
  nummerkvk: String

  """Checks for equality with the object’s `plaatskvk` field."""
  plaatskvk: String

  """Checks for equality with the object’s `datumkvk` field."""
  datumkvk: Date

  """Checks for equality with the object’s `cdgrbrekening` field."""
  cdgrbrekening: String

  """Checks for equality with the object’s `btwscenario` field."""
  btwscenario: Int

  """Checks for equality with the object’s `homepage` field."""
  homepage: String

  """Checks for equality with the object’s `cdstroom` field."""
  cdstroom: Int

  """Checks for equality with the object’s `cdvervoer` field."""
  cdvervoer: Int

  """Checks for equality with the object’s `cdverkeer` field."""
  cdverkeer: Int

  """Checks for equality with the object’s `cdstelsel` field."""
  cdstelsel: Int

  """Checks for equality with the object’s `cdtype` field."""
  cdtype: String

  """Checks for equality with the object’s `cdgoedcode` field."""
  cdgoedcode: Int

  """Checks for equality with the object’s `telebankfact` field."""
  telebankfact: String

  """Checks for equality with the object’s `opslpercinkoop` field."""
  opslpercinkoop: BigFloat

  """Checks for equality with the object’s `aanmaakdatum` field."""
  aanmaakdatum: Date

  """Checks for equality with the object’s `datumltstewijz` field."""
  datumltstewijz: Date

  """Checks for equality with the object’s `cdonderaannemer` field."""
  cdonderaannemer: String

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `controleBetkenmerk` field."""
  controleBetkenmerk: String

  """Checks for equality with the object’s `ondernemersnr` field."""
  ondernemersnr: String

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `sysCreate` field."""
  sysCreate: String

  """Checks for equality with the object’s `sysUpdate` field."""
  sysUpdate: String

  """Checks for equality with the object’s `fichegeboortedatum` field."""
  fichegeboortedatum: Date

  """Checks for equality with the object’s `fichenationaalnr` field."""
  fichenationaalnr: BigFloat

  """Checks for equality with the object’s `ficheaard` field."""
  ficheaard: String

  """Checks for equality with the object’s `fichenaam` field."""
  fichenaam: String

  """Checks for equality with the object’s `fichevoornaam` field."""
  fichevoornaam: String

  """Checks for equality with the object’s `ficheberoep` field."""
  ficheberoep: String

  """Checks for equality with the object’s `fichenaamechtgenoot` field."""
  fichenaamechtgenoot: String

  """Checks for equality with the object’s `fichehandicap` field."""
  fichehandicap: String

  """Checks for equality with the object’s `ficheburgstand` field."""
  ficheburgstand: String

  """Checks for equality with the object’s `fichegezinstoestand` field."""
  fichegezinstoestand: String

  """Checks for equality with the object’s `fichekinderen` field."""
  fichekinderen: Int

  """Checks for equality with the object’s `fichetenlaste` field."""
  fichetenlaste: Int

  """Checks for equality with the object’s `btwopkredb` field."""
  btwopkredb: String

  """Checks for equality with the object’s `krbperc` field."""
  krbperc: BigFloat

  """Checks for equality with the object’s `overhIdNr` field."""
  overhIdNr: String
}

"""
A filter to be used against `Crediteur` object types. All fields are combined with a logical ‘and.’
"""
input CrediteurFilter {
  """Filter by the object’s `cdrelatie` field."""
  cdrelatie: IntFilter

  """Filter by the object’s `cdcrediteur` field."""
  cdcrediteur: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `naam` field."""
  naam: StringFilter

  """Filter by the object’s `naamstraat` field."""
  naamstraat: StringFilter

  """Filter by the object’s `straat` field."""
  straat: StringFilter

  """Filter by the object’s `woonplaats` field."""
  woonplaats: StringFilter

  """Filter by the object’s `postcode` field."""
  postcode: StringFilter

  """Filter by the object’s `cdland` field."""
  cdland: StringFilter

  """Filter by the object’s `persoon` field."""
  persoon: StringFilter

  """Filter by the object’s `telefoon` field."""
  telefoon: StringFilter

  """Filter by the object’s `telefoonmobiel` field."""
  telefoonmobiel: StringFilter

  """Filter by the object’s `telefax` field."""
  telefax: StringFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `btwnummer` field."""
  btwnummer: StringFilter

  """Filter by the object’s `datumverif` field."""
  datumverif: DateFilter

  """Filter by the object’s `debnrcred` field."""
  debnrcred: StringFilter

  """Filter by the object’s `cdvaluta` field."""
  cdvaluta: StringFilter

  """Filter by the object’s `cdbetcond` field."""
  cdbetcond: StringFilter

  """Filter by the object’s `cdlevcond` field."""
  cdlevcond: StringFilter

  """Filter by the object’s `cdtaal` field."""
  cdtaal: StringFilter

  """Filter by the object’s `cdjournaal` field."""
  cdjournaal: IntFilter

  """Filter by the object’s `nummerkvk` field."""
  nummerkvk: StringFilter

  """Filter by the object’s `plaatskvk` field."""
  plaatskvk: StringFilter

  """Filter by the object’s `datumkvk` field."""
  datumkvk: DateFilter

  """Filter by the object’s `cdgrbrekening` field."""
  cdgrbrekening: StringFilter

  """Filter by the object’s `btwscenario` field."""
  btwscenario: IntFilter

  """Filter by the object’s `homepage` field."""
  homepage: StringFilter

  """Filter by the object’s `cdstroom` field."""
  cdstroom: IntFilter

  """Filter by the object’s `cdvervoer` field."""
  cdvervoer: IntFilter

  """Filter by the object’s `cdverkeer` field."""
  cdverkeer: IntFilter

  """Filter by the object’s `cdstelsel` field."""
  cdstelsel: IntFilter

  """Filter by the object’s `cdtype` field."""
  cdtype: StringFilter

  """Filter by the object’s `cdgoedcode` field."""
  cdgoedcode: IntFilter

  """Filter by the object’s `telebankfact` field."""
  telebankfact: StringFilter

  """Filter by the object’s `opslpercinkoop` field."""
  opslpercinkoop: BigFloatFilter

  """Filter by the object’s `aanmaakdatum` field."""
  aanmaakdatum: DateFilter

  """Filter by the object’s `datumltstewijz` field."""
  datumltstewijz: DateFilter

  """Filter by the object’s `cdonderaannemer` field."""
  cdonderaannemer: StringFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `controleBetkenmerk` field."""
  controleBetkenmerk: StringFilter

  """Filter by the object’s `ondernemersnr` field."""
  ondernemersnr: StringFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `sysCreate` field."""
  sysCreate: StringFilter

  """Filter by the object’s `sysUpdate` field."""
  sysUpdate: StringFilter

  """Filter by the object’s `fichegeboortedatum` field."""
  fichegeboortedatum: DateFilter

  """Filter by the object’s `fichenationaalnr` field."""
  fichenationaalnr: BigFloatFilter

  """Filter by the object’s `ficheaard` field."""
  ficheaard: StringFilter

  """Filter by the object’s `fichenaam` field."""
  fichenaam: StringFilter

  """Filter by the object’s `fichevoornaam` field."""
  fichevoornaam: StringFilter

  """Filter by the object’s `ficheberoep` field."""
  ficheberoep: StringFilter

  """Filter by the object’s `fichenaamechtgenoot` field."""
  fichenaamechtgenoot: StringFilter

  """Filter by the object’s `fichehandicap` field."""
  fichehandicap: StringFilter

  """Filter by the object’s `ficheburgstand` field."""
  ficheburgstand: StringFilter

  """Filter by the object’s `fichegezinstoestand` field."""
  fichegezinstoestand: StringFilter

  """Filter by the object’s `fichekinderen` field."""
  fichekinderen: IntFilter

  """Filter by the object’s `fichetenlaste` field."""
  fichetenlaste: IntFilter

  """Filter by the object’s `btwopkredb` field."""
  btwopkredb: StringFilter

  """Filter by the object’s `krbperc` field."""
  krbperc: BigFloatFilter

  """Filter by the object’s `overhIdNr` field."""
  overhIdNr: StringFilter

  """Checks for all expressions in this list."""
  and: [CrediteurFilter!]

  """Checks for any expressions in this list."""
  or: [CrediteurFilter!]

  """Negates the expression."""
  not: CrediteurFilter
}

"""A connection to a list of `CrediteurMv` values."""
type CrediteurMvsConnection {
  """A list of `CrediteurMv` objects."""
  nodes: [CrediteurMv!]!

  """
  A list of edges which contains the `CrediteurMv` and cursor to aid in pagination.
  """
  edges: [CrediteurMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CrediteurMv` you could get from the connection."""
  totalCount: Int!
}

type CrediteurMv {
  cdrelatie: Int
  cdcrediteur: String
  zoeknaam: String
  naam: String
  naamstraat: String
  straat: String
  woonplaats: String
  postcode: String
  cdland: String
  persoon: String
  telefoon: String
  telefoonmobiel: String
  telefax: String
  email: String
  btwnummer: String
  datumverif: Date
  debnrcred: String
  cdvaluta: String
  cdbetcond: String
  cdlevcond: String
  cdtaal: String
  cdjournaal: Int
  nummerkvk: String
  plaatskvk: String
  datumkvk: Date
  cdgrbrekening: String
  btwscenario: Int
  homepage: String
  cdstroom: Int
  cdvervoer: Int
  cdverkeer: Int
  cdstelsel: Int
  cdtype: String
  cdgoedcode: Int
  telebankfact: String
  opslpercinkoop: BigFloat
  aanmaakdatum: Date
  datumltstewijz: Date
  cdonderaannemer: String
  status: String
  controleBetkenmerk: String
  ondernemersnr: String
  guidItem: String
  sysCreate: String
  sysUpdate: String
  fichegeboortedatum: Date
  fichenationaalnr: BigFloat
  ficheaard: String
  fichenaam: String
  fichevoornaam: String
  ficheberoep: String
  fichenaamechtgenoot: String
  fichehandicap: String
  ficheburgstand: String
  fichegezinstoestand: String
  fichekinderen: Int
  fichetenlaste: Int
  btwopkredb: String
  krbperc: BigFloat
  overhIdNr: String
}

"""A `CrediteurMv` edge in the connection."""
type CrediteurMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CrediteurMv` at the end of the edge."""
  node: CrediteurMv!
}

"""Methods to use when ordering `CrediteurMv`."""
enum CrediteurMvsOrderBy {
  NATURAL
  CDRELATIE_ASC
  CDRELATIE_DESC
  CDCREDITEUR_ASC
  CDCREDITEUR_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  NAAM_ASC
  NAAM_DESC
  NAAMSTRAAT_ASC
  NAAMSTRAAT_DESC
  STRAAT_ASC
  STRAAT_DESC
  WOONPLAATS_ASC
  WOONPLAATS_DESC
  POSTCODE_ASC
  POSTCODE_DESC
  CDLAND_ASC
  CDLAND_DESC
  PERSOON_ASC
  PERSOON_DESC
  TELEFOON_ASC
  TELEFOON_DESC
  TELEFOONMOBIEL_ASC
  TELEFOONMOBIEL_DESC
  TELEFAX_ASC
  TELEFAX_DESC
  EMAIL_ASC
  EMAIL_DESC
  BTWNUMMER_ASC
  BTWNUMMER_DESC
  DATUMVERIF_ASC
  DATUMVERIF_DESC
  DEBNRCRED_ASC
  DEBNRCRED_DESC
  CDVALUTA_ASC
  CDVALUTA_DESC
  CDBETCOND_ASC
  CDBETCOND_DESC
  CDLEVCOND_ASC
  CDLEVCOND_DESC
  CDTAAL_ASC
  CDTAAL_DESC
  CDJOURNAAL_ASC
  CDJOURNAAL_DESC
  NUMMERKVK_ASC
  NUMMERKVK_DESC
  PLAATSKVK_ASC
  PLAATSKVK_DESC
  DATUMKVK_ASC
  DATUMKVK_DESC
  CDGRBREKENING_ASC
  CDGRBREKENING_DESC
  BTWSCENARIO_ASC
  BTWSCENARIO_DESC
  HOMEPAGE_ASC
  HOMEPAGE_DESC
  CDSTROOM_ASC
  CDSTROOM_DESC
  CDVERVOER_ASC
  CDVERVOER_DESC
  CDVERKEER_ASC
  CDVERKEER_DESC
  CDSTELSEL_ASC
  CDSTELSEL_DESC
  CDTYPE_ASC
  CDTYPE_DESC
  CDGOEDCODE_ASC
  CDGOEDCODE_DESC
  TELEBANKFACT_ASC
  TELEBANKFACT_DESC
  OPSLPERCINKOOP_ASC
  OPSLPERCINKOOP_DESC
  AANMAAKDATUM_ASC
  AANMAAKDATUM_DESC
  DATUMLTSTEWIJZ_ASC
  DATUMLTSTEWIJZ_DESC
  CDONDERAANNEMER_ASC
  CDONDERAANNEMER_DESC
  STATUS_ASC
  STATUS_DESC
  CONTROLE_BETKENMERK_ASC
  CONTROLE_BETKENMERK_DESC
  ONDERNEMERSNR_ASC
  ONDERNEMERSNR_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  SYS_CREATE_ASC
  SYS_CREATE_DESC
  SYS_UPDATE_ASC
  SYS_UPDATE_DESC
  FICHEGEBOORTEDATUM_ASC
  FICHEGEBOORTEDATUM_DESC
  FICHENATIONAALNR_ASC
  FICHENATIONAALNR_DESC
  FICHEAARD_ASC
  FICHEAARD_DESC
  FICHENAAM_ASC
  FICHENAAM_DESC
  FICHEVOORNAAM_ASC
  FICHEVOORNAAM_DESC
  FICHEBEROEP_ASC
  FICHEBEROEP_DESC
  FICHENAAMECHTGENOOT_ASC
  FICHENAAMECHTGENOOT_DESC
  FICHEHANDICAP_ASC
  FICHEHANDICAP_DESC
  FICHEBURGSTAND_ASC
  FICHEBURGSTAND_DESC
  FICHEGEZINSTOESTAND_ASC
  FICHEGEZINSTOESTAND_DESC
  FICHEKINDEREN_ASC
  FICHEKINDEREN_DESC
  FICHETENLASTE_ASC
  FICHETENLASTE_DESC
  BTWOPKREDB_ASC
  BTWOPKREDB_DESC
  KRBPERC_ASC
  KRBPERC_DESC
  OVERH_ID_NR_ASC
  OVERH_ID_NR_DESC
}

"""
A condition to be used against `CrediteurMv` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CrediteurMvCondition {
  """Checks for equality with the object’s `cdrelatie` field."""
  cdrelatie: Int

  """Checks for equality with the object’s `cdcrediteur` field."""
  cdcrediteur: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `naam` field."""
  naam: String

  """Checks for equality with the object’s `naamstraat` field."""
  naamstraat: String

  """Checks for equality with the object’s `straat` field."""
  straat: String

  """Checks for equality with the object’s `woonplaats` field."""
  woonplaats: String

  """Checks for equality with the object’s `postcode` field."""
  postcode: String

  """Checks for equality with the object’s `cdland` field."""
  cdland: String

  """Checks for equality with the object’s `persoon` field."""
  persoon: String

  """Checks for equality with the object’s `telefoon` field."""
  telefoon: String

  """Checks for equality with the object’s `telefoonmobiel` field."""
  telefoonmobiel: String

  """Checks for equality with the object’s `telefax` field."""
  telefax: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `btwnummer` field."""
  btwnummer: String

  """Checks for equality with the object’s `datumverif` field."""
  datumverif: Date

  """Checks for equality with the object’s `debnrcred` field."""
  debnrcred: String

  """Checks for equality with the object’s `cdvaluta` field."""
  cdvaluta: String

  """Checks for equality with the object’s `cdbetcond` field."""
  cdbetcond: String

  """Checks for equality with the object’s `cdlevcond` field."""
  cdlevcond: String

  """Checks for equality with the object’s `cdtaal` field."""
  cdtaal: String

  """Checks for equality with the object’s `cdjournaal` field."""
  cdjournaal: Int

  """Checks for equality with the object’s `nummerkvk` field."""
  nummerkvk: String

  """Checks for equality with the object’s `plaatskvk` field."""
  plaatskvk: String

  """Checks for equality with the object’s `datumkvk` field."""
  datumkvk: Date

  """Checks for equality with the object’s `cdgrbrekening` field."""
  cdgrbrekening: String

  """Checks for equality with the object’s `btwscenario` field."""
  btwscenario: Int

  """Checks for equality with the object’s `homepage` field."""
  homepage: String

  """Checks for equality with the object’s `cdstroom` field."""
  cdstroom: Int

  """Checks for equality with the object’s `cdvervoer` field."""
  cdvervoer: Int

  """Checks for equality with the object’s `cdverkeer` field."""
  cdverkeer: Int

  """Checks for equality with the object’s `cdstelsel` field."""
  cdstelsel: Int

  """Checks for equality with the object’s `cdtype` field."""
  cdtype: String

  """Checks for equality with the object’s `cdgoedcode` field."""
  cdgoedcode: Int

  """Checks for equality with the object’s `telebankfact` field."""
  telebankfact: String

  """Checks for equality with the object’s `opslpercinkoop` field."""
  opslpercinkoop: BigFloat

  """Checks for equality with the object’s `aanmaakdatum` field."""
  aanmaakdatum: Date

  """Checks for equality with the object’s `datumltstewijz` field."""
  datumltstewijz: Date

  """Checks for equality with the object’s `cdonderaannemer` field."""
  cdonderaannemer: String

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `controleBetkenmerk` field."""
  controleBetkenmerk: String

  """Checks for equality with the object’s `ondernemersnr` field."""
  ondernemersnr: String

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `sysCreate` field."""
  sysCreate: String

  """Checks for equality with the object’s `sysUpdate` field."""
  sysUpdate: String

  """Checks for equality with the object’s `fichegeboortedatum` field."""
  fichegeboortedatum: Date

  """Checks for equality with the object’s `fichenationaalnr` field."""
  fichenationaalnr: BigFloat

  """Checks for equality with the object’s `ficheaard` field."""
  ficheaard: String

  """Checks for equality with the object’s `fichenaam` field."""
  fichenaam: String

  """Checks for equality with the object’s `fichevoornaam` field."""
  fichevoornaam: String

  """Checks for equality with the object’s `ficheberoep` field."""
  ficheberoep: String

  """Checks for equality with the object’s `fichenaamechtgenoot` field."""
  fichenaamechtgenoot: String

  """Checks for equality with the object’s `fichehandicap` field."""
  fichehandicap: String

  """Checks for equality with the object’s `ficheburgstand` field."""
  ficheburgstand: String

  """Checks for equality with the object’s `fichegezinstoestand` field."""
  fichegezinstoestand: String

  """Checks for equality with the object’s `fichekinderen` field."""
  fichekinderen: Int

  """Checks for equality with the object’s `fichetenlaste` field."""
  fichetenlaste: Int

  """Checks for equality with the object’s `btwopkredb` field."""
  btwopkredb: String

  """Checks for equality with the object’s `krbperc` field."""
  krbperc: BigFloat

  """Checks for equality with the object’s `overhIdNr` field."""
  overhIdNr: String
}

"""
A filter to be used against `CrediteurMv` object types. All fields are combined with a logical ‘and.’
"""
input CrediteurMvFilter {
  """Filter by the object’s `cdrelatie` field."""
  cdrelatie: IntFilter

  """Filter by the object’s `cdcrediteur` field."""
  cdcrediteur: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `naam` field."""
  naam: StringFilter

  """Filter by the object’s `naamstraat` field."""
  naamstraat: StringFilter

  """Filter by the object’s `straat` field."""
  straat: StringFilter

  """Filter by the object’s `woonplaats` field."""
  woonplaats: StringFilter

  """Filter by the object’s `postcode` field."""
  postcode: StringFilter

  """Filter by the object’s `cdland` field."""
  cdland: StringFilter

  """Filter by the object’s `persoon` field."""
  persoon: StringFilter

  """Filter by the object’s `telefoon` field."""
  telefoon: StringFilter

  """Filter by the object’s `telefoonmobiel` field."""
  telefoonmobiel: StringFilter

  """Filter by the object’s `telefax` field."""
  telefax: StringFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `btwnummer` field."""
  btwnummer: StringFilter

  """Filter by the object’s `datumverif` field."""
  datumverif: DateFilter

  """Filter by the object’s `debnrcred` field."""
  debnrcred: StringFilter

  """Filter by the object’s `cdvaluta` field."""
  cdvaluta: StringFilter

  """Filter by the object’s `cdbetcond` field."""
  cdbetcond: StringFilter

  """Filter by the object’s `cdlevcond` field."""
  cdlevcond: StringFilter

  """Filter by the object’s `cdtaal` field."""
  cdtaal: StringFilter

  """Filter by the object’s `cdjournaal` field."""
  cdjournaal: IntFilter

  """Filter by the object’s `nummerkvk` field."""
  nummerkvk: StringFilter

  """Filter by the object’s `plaatskvk` field."""
  plaatskvk: StringFilter

  """Filter by the object’s `datumkvk` field."""
  datumkvk: DateFilter

  """Filter by the object’s `cdgrbrekening` field."""
  cdgrbrekening: StringFilter

  """Filter by the object’s `btwscenario` field."""
  btwscenario: IntFilter

  """Filter by the object’s `homepage` field."""
  homepage: StringFilter

  """Filter by the object’s `cdstroom` field."""
  cdstroom: IntFilter

  """Filter by the object’s `cdvervoer` field."""
  cdvervoer: IntFilter

  """Filter by the object’s `cdverkeer` field."""
  cdverkeer: IntFilter

  """Filter by the object’s `cdstelsel` field."""
  cdstelsel: IntFilter

  """Filter by the object’s `cdtype` field."""
  cdtype: StringFilter

  """Filter by the object’s `cdgoedcode` field."""
  cdgoedcode: IntFilter

  """Filter by the object’s `telebankfact` field."""
  telebankfact: StringFilter

  """Filter by the object’s `opslpercinkoop` field."""
  opslpercinkoop: BigFloatFilter

  """Filter by the object’s `aanmaakdatum` field."""
  aanmaakdatum: DateFilter

  """Filter by the object’s `datumltstewijz` field."""
  datumltstewijz: DateFilter

  """Filter by the object’s `cdonderaannemer` field."""
  cdonderaannemer: StringFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `controleBetkenmerk` field."""
  controleBetkenmerk: StringFilter

  """Filter by the object’s `ondernemersnr` field."""
  ondernemersnr: StringFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `sysCreate` field."""
  sysCreate: StringFilter

  """Filter by the object’s `sysUpdate` field."""
  sysUpdate: StringFilter

  """Filter by the object’s `fichegeboortedatum` field."""
  fichegeboortedatum: DateFilter

  """Filter by the object’s `fichenationaalnr` field."""
  fichenationaalnr: BigFloatFilter

  """Filter by the object’s `ficheaard` field."""
  ficheaard: StringFilter

  """Filter by the object’s `fichenaam` field."""
  fichenaam: StringFilter

  """Filter by the object’s `fichevoornaam` field."""
  fichevoornaam: StringFilter

  """Filter by the object’s `ficheberoep` field."""
  ficheberoep: StringFilter

  """Filter by the object’s `fichenaamechtgenoot` field."""
  fichenaamechtgenoot: StringFilter

  """Filter by the object’s `fichehandicap` field."""
  fichehandicap: StringFilter

  """Filter by the object’s `ficheburgstand` field."""
  ficheburgstand: StringFilter

  """Filter by the object’s `fichegezinstoestand` field."""
  fichegezinstoestand: StringFilter

  """Filter by the object’s `fichekinderen` field."""
  fichekinderen: IntFilter

  """Filter by the object’s `fichetenlaste` field."""
  fichetenlaste: IntFilter

  """Filter by the object’s `btwopkredb` field."""
  btwopkredb: StringFilter

  """Filter by the object’s `krbperc` field."""
  krbperc: BigFloatFilter

  """Filter by the object’s `overhIdNr` field."""
  overhIdNr: StringFilter

  """Checks for all expressions in this list."""
  and: [CrediteurMvFilter!]

  """Checks for any expressions in this list."""
  or: [CrediteurMvFilter!]

  """Negates the expression."""
  not: CrediteurMvFilter
}

"""A connection to a list of `Debiteur` values."""
type DebiteursConnection {
  """A list of `Debiteur` objects."""
  nodes: [Debiteur!]!

  """
  A list of edges which contains the `Debiteur` and cursor to aid in pagination.
  """
  edges: [DebiteursEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Debiteur` you could get from the connection."""
  totalCount: Int!
}

"""A `Debiteur` edge in the connection."""
type DebiteursEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Debiteur` at the end of the edge."""
  node: Debiteur!
}

"""Methods to use when ordering `Debiteur`."""
enum DebiteursOrderBy {
  NATURAL
  CDRELATIE_ASC
  CDRELATIE_DESC
  CDDEBITEUR_ASC
  CDDEBITEUR_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  NAAM_ASC
  NAAM_DESC
  NAAMSTRAAT_ASC
  NAAMSTRAAT_DESC
  STRAAT_ASC
  STRAAT_DESC
  WOONPLAATS_ASC
  WOONPLAATS_DESC
  POSTCODE_ASC
  POSTCODE_DESC
  CDLAND_ASC
  CDLAND_DESC
  PERSOON_ASC
  PERSOON_DESC
  TELEFOON_ASC
  TELEFOON_DESC
  TELEFOONMOBIEL_ASC
  TELEFOONMOBIEL_DESC
  TELEFAX_ASC
  TELEFAX_DESC
  EMAIL_ASC
  EMAIL_DESC
  BTWNUMMER_ASC
  BTWNUMMER_DESC
  DATUMVERIF_ASC
  DATUMVERIF_DESC
  CDVALUTA_ASC
  CDVALUTA_DESC
  CDBETCOND_ASC
  CDBETCOND_DESC
  CDLEVCOND_ASC
  CDLEVCOND_DESC
  CDVERT_ASC
  CDVERT_DESC
  VERTEGENWOORDIGER_ASC
  VERTEGENWOORDIGER_DESC
  CDTAAL_ASC
  CDTAAL_DESC
  CDJOURNAAL_ASC
  CDJOURNAAL_DESC
  CDBTWBEREKENEN_ASC
  CDBTWBEREKENEN_DESC
  CDKREDBEP_ASC
  CDKREDBEP_DESC
  CDAANMANEN_ASC
  CDAANMANEN_DESC
  KREDIETLIMIET_ASC
  KREDIETLIMIET_DESC
  KORTPERC_ASC
  KORTPERC_DESC
  BTWSCENARIO_ASC
  BTWSCENARIO_DESC
  HOMEPAGE_ASC
  HOMEPAGE_DESC
  CDSTROOM_ASC
  CDSTROOM_DESC
  CDVERVOER_ASC
  CDVERVOER_DESC
  CDVERKEER_ASC
  CDVERKEER_DESC
  CDSTELSEL_ASC
  CDSTELSEL_DESC
  CDTYPE_ASC
  CDTYPE_DESC
  CDGOEDCODE_ASC
  CDGOEDCODE_DESC
  NUMMERKVK_ASC
  NUMMERKVK_DESC
  PLAATSKVK_ASC
  PLAATSKVK_DESC
  DATUMKVK_ASC
  DATUMKVK_DESC
  CDPRIJSLIJST_ASC
  CDPRIJSLIJST_DESC
  CDVERZAMEL_ASC
  CDVERZAMEL_DESC
  BEREKENORDKOST_ASC
  BEREKENORDKOST_DESC
  TELEBANKFACT_ASC
  TELEBANKFACT_DESC
  ISINKOOPORG_ASC
  ISINKOOPORG_DESC
  ONTV_FACT_IPV_LID_ASC
  ONTV_FACT_IPV_LID_DESC
  ONTV_BORDEREL_ASC
  ONTV_BORDEREL_DESC
  CDDEBITEUR_INKORG_ASC
  CDDEBITEUR_INKORG_DESC
  LIDNR_BIJ_INKORG_ASC
  LIDNR_BIJ_INKORG_DESC
  AANMAAKDATUM_ASC
  AANMAAKDATUM_DESC
  DATUMLTSTEWIJZ_ASC
  DATUMLTSTEWIJZ_DESC
  STATUS_ASC
  STATUS_DESC
  IN_FACTORING_ASC
  IN_FACTORING_DESC
  CONTROLE_BETKENMERK_ASC
  CONTROLE_BETKENMERK_DESC
  CDGRBREKENING_ASC
  CDGRBREKENING_DESC
  ONDERNEMERSNR_ASC
  ONDERNEMERSNR_DESC
  BTW_EX_INCL_ASC
  BTW_EX_INCL_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  SYS_CREATE_ASC
  SYS_CREATE_DESC
  SYS_UPDATE_ASC
  SYS_UPDATE_DESC
  OVERH_ID_NR_ASC
  OVERH_ID_NR_DESC
  FACTUREEROPDRACHTS_BY_CDDEBITEUR__COUNT_ASC
  FACTUREEROPDRACHTS_BY_CDDEBITEUR__COUNT_DESC
}

"""
A condition to be used against `Debiteur` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DebiteurCondition {
  """Checks for equality with the object’s `cdrelatie` field."""
  cdrelatie: Int

  """Checks for equality with the object’s `cddebiteur` field."""
  cddebiteur: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `naam` field."""
  naam: String

  """Checks for equality with the object’s `naamstraat` field."""
  naamstraat: String

  """Checks for equality with the object’s `straat` field."""
  straat: String

  """Checks for equality with the object’s `woonplaats` field."""
  woonplaats: String

  """Checks for equality with the object’s `postcode` field."""
  postcode: String

  """Checks for equality with the object’s `cdland` field."""
  cdland: String

  """Checks for equality with the object’s `persoon` field."""
  persoon: String

  """Checks for equality with the object’s `telefoon` field."""
  telefoon: String

  """Checks for equality with the object’s `telefoonmobiel` field."""
  telefoonmobiel: String

  """Checks for equality with the object’s `telefax` field."""
  telefax: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `btwnummer` field."""
  btwnummer: String

  """Checks for equality with the object’s `datumverif` field."""
  datumverif: Date

  """Checks for equality with the object’s `cdvaluta` field."""
  cdvaluta: String

  """Checks for equality with the object’s `cdbetcond` field."""
  cdbetcond: String

  """Checks for equality with the object’s `cdlevcond` field."""
  cdlevcond: String

  """Checks for equality with the object’s `cdvert` field."""
  cdvert: String

  """Checks for equality with the object’s `vertegenwoordiger` field."""
  vertegenwoordiger: String

  """Checks for equality with the object’s `cdtaal` field."""
  cdtaal: String

  """Checks for equality with the object’s `cdjournaal` field."""
  cdjournaal: Int

  """Checks for equality with the object’s `cdbtwberekenen` field."""
  cdbtwberekenen: String

  """Checks for equality with the object’s `cdkredbep` field."""
  cdkredbep: String

  """Checks for equality with the object’s `cdaanmanen` field."""
  cdaanmanen: String

  """Checks for equality with the object’s `kredietlimiet` field."""
  kredietlimiet: Int

  """Checks for equality with the object’s `kortperc` field."""
  kortperc: BigFloat

  """Checks for equality with the object’s `btwscenario` field."""
  btwscenario: Int

  """Checks for equality with the object’s `homepage` field."""
  homepage: String

  """Checks for equality with the object’s `cdstroom` field."""
  cdstroom: Int

  """Checks for equality with the object’s `cdvervoer` field."""
  cdvervoer: Int

  """Checks for equality with the object’s `cdverkeer` field."""
  cdverkeer: Int

  """Checks for equality with the object’s `cdstelsel` field."""
  cdstelsel: Int

  """Checks for equality with the object’s `cdtype` field."""
  cdtype: String

  """Checks for equality with the object’s `cdgoedcode` field."""
  cdgoedcode: Int

  """Checks for equality with the object’s `nummerkvk` field."""
  nummerkvk: String

  """Checks for equality with the object’s `plaatskvk` field."""
  plaatskvk: String

  """Checks for equality with the object’s `datumkvk` field."""
  datumkvk: Date

  """Checks for equality with the object’s `cdprijslijst` field."""
  cdprijslijst: String

  """Checks for equality with the object’s `cdverzamel` field."""
  cdverzamel: Int

  """Checks for equality with the object’s `berekenordkost` field."""
  berekenordkost: String

  """Checks for equality with the object’s `telebankfact` field."""
  telebankfact: String

  """Checks for equality with the object’s `isinkooporg` field."""
  isinkooporg: String

  """Checks for equality with the object’s `ontvFactIpvLid` field."""
  ontvFactIpvLid: String

  """Checks for equality with the object’s `ontvBorderel` field."""
  ontvBorderel: String

  """Checks for equality with the object’s `cddebiteurInkorg` field."""
  cddebiteurInkorg: String

  """Checks for equality with the object’s `lidnrBijInkorg` field."""
  lidnrBijInkorg: String

  """Checks for equality with the object’s `aanmaakdatum` field."""
  aanmaakdatum: Date

  """Checks for equality with the object’s `datumltstewijz` field."""
  datumltstewijz: Date

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `inFactoring` field."""
  inFactoring: String

  """Checks for equality with the object’s `controleBetkenmerk` field."""
  controleBetkenmerk: String

  """Checks for equality with the object’s `cdgrbrekening` field."""
  cdgrbrekening: String

  """Checks for equality with the object’s `ondernemersnr` field."""
  ondernemersnr: String

  """Checks for equality with the object’s `btwExIncl` field."""
  btwExIncl: String

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `sysCreate` field."""
  sysCreate: String

  """Checks for equality with the object’s `sysUpdate` field."""
  sysUpdate: String

  """Checks for equality with the object’s `overhIdNr` field."""
  overhIdNr: String
}

"""A connection to a list of `DebiteurMv` values."""
type DebiteurMvsConnection {
  """A list of `DebiteurMv` objects."""
  nodes: [DebiteurMv!]!

  """
  A list of edges which contains the `DebiteurMv` and cursor to aid in pagination.
  """
  edges: [DebiteurMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DebiteurMv` you could get from the connection."""
  totalCount: Int!
}

type DebiteurMv {
  cdrelatie: Int
  cddebiteur: String
  zoeknaam: String
  naam: String
  naamstraat: String
  straat: String
  woonplaats: String
  postcode: String
  cdland: String
  persoon: String
  telefoon: String
  telefoonmobiel: String
  telefax: String
  email: String
  btwnummer: String
  datumverif: Date
  cdvaluta: String
  cdbetcond: String
  cdlevcond: String
  cdvert: String
  vertegenwoordiger: String
  cdtaal: String
  cdjournaal: Int
  cdbtwberekenen: String
  cdkredbep: String
  cdaanmanen: String
  kredietlimiet: Int
  kortperc: BigFloat
  btwscenario: Int
  homepage: String
  cdstroom: Int
  cdvervoer: Int
  cdverkeer: Int
  cdstelsel: Int
  cdtype: String
  cdgoedcode: Int
  nummerkvk: String
  plaatskvk: String
  datumkvk: Date
  cdprijslijst: String
  cdverzamel: Int
  berekenordkost: String
  telebankfact: String
  isinkooporg: String
  ontvFactIpvLid: String
  ontvBorderel: String
  cddebiteurInkorg: String
  lidnrBijInkorg: String
  aanmaakdatum: Date
  datumltstewijz: Date
  status: String
  inFactoring: String
  controleBetkenmerk: String
  cdgrbrekening: String
  ondernemersnr: String
  btwExIncl: String
  guidItem: String
  sysCreate: String
  sysUpdate: String
  overhIdNr: String
}

"""A `DebiteurMv` edge in the connection."""
type DebiteurMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DebiteurMv` at the end of the edge."""
  node: DebiteurMv!
}

"""Methods to use when ordering `DebiteurMv`."""
enum DebiteurMvsOrderBy {
  NATURAL
  CDRELATIE_ASC
  CDRELATIE_DESC
  CDDEBITEUR_ASC
  CDDEBITEUR_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  NAAM_ASC
  NAAM_DESC
  NAAMSTRAAT_ASC
  NAAMSTRAAT_DESC
  STRAAT_ASC
  STRAAT_DESC
  WOONPLAATS_ASC
  WOONPLAATS_DESC
  POSTCODE_ASC
  POSTCODE_DESC
  CDLAND_ASC
  CDLAND_DESC
  PERSOON_ASC
  PERSOON_DESC
  TELEFOON_ASC
  TELEFOON_DESC
  TELEFOONMOBIEL_ASC
  TELEFOONMOBIEL_DESC
  TELEFAX_ASC
  TELEFAX_DESC
  EMAIL_ASC
  EMAIL_DESC
  BTWNUMMER_ASC
  BTWNUMMER_DESC
  DATUMVERIF_ASC
  DATUMVERIF_DESC
  CDVALUTA_ASC
  CDVALUTA_DESC
  CDBETCOND_ASC
  CDBETCOND_DESC
  CDLEVCOND_ASC
  CDLEVCOND_DESC
  CDVERT_ASC
  CDVERT_DESC
  VERTEGENWOORDIGER_ASC
  VERTEGENWOORDIGER_DESC
  CDTAAL_ASC
  CDTAAL_DESC
  CDJOURNAAL_ASC
  CDJOURNAAL_DESC
  CDBTWBEREKENEN_ASC
  CDBTWBEREKENEN_DESC
  CDKREDBEP_ASC
  CDKREDBEP_DESC
  CDAANMANEN_ASC
  CDAANMANEN_DESC
  KREDIETLIMIET_ASC
  KREDIETLIMIET_DESC
  KORTPERC_ASC
  KORTPERC_DESC
  BTWSCENARIO_ASC
  BTWSCENARIO_DESC
  HOMEPAGE_ASC
  HOMEPAGE_DESC
  CDSTROOM_ASC
  CDSTROOM_DESC
  CDVERVOER_ASC
  CDVERVOER_DESC
  CDVERKEER_ASC
  CDVERKEER_DESC
  CDSTELSEL_ASC
  CDSTELSEL_DESC
  CDTYPE_ASC
  CDTYPE_DESC
  CDGOEDCODE_ASC
  CDGOEDCODE_DESC
  NUMMERKVK_ASC
  NUMMERKVK_DESC
  PLAATSKVK_ASC
  PLAATSKVK_DESC
  DATUMKVK_ASC
  DATUMKVK_DESC
  CDPRIJSLIJST_ASC
  CDPRIJSLIJST_DESC
  CDVERZAMEL_ASC
  CDVERZAMEL_DESC
  BEREKENORDKOST_ASC
  BEREKENORDKOST_DESC
  TELEBANKFACT_ASC
  TELEBANKFACT_DESC
  ISINKOOPORG_ASC
  ISINKOOPORG_DESC
  ONTV_FACT_IPV_LID_ASC
  ONTV_FACT_IPV_LID_DESC
  ONTV_BORDEREL_ASC
  ONTV_BORDEREL_DESC
  CDDEBITEUR_INKORG_ASC
  CDDEBITEUR_INKORG_DESC
  LIDNR_BIJ_INKORG_ASC
  LIDNR_BIJ_INKORG_DESC
  AANMAAKDATUM_ASC
  AANMAAKDATUM_DESC
  DATUMLTSTEWIJZ_ASC
  DATUMLTSTEWIJZ_DESC
  STATUS_ASC
  STATUS_DESC
  IN_FACTORING_ASC
  IN_FACTORING_DESC
  CONTROLE_BETKENMERK_ASC
  CONTROLE_BETKENMERK_DESC
  CDGRBREKENING_ASC
  CDGRBREKENING_DESC
  ONDERNEMERSNR_ASC
  ONDERNEMERSNR_DESC
  BTW_EX_INCL_ASC
  BTW_EX_INCL_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  SYS_CREATE_ASC
  SYS_CREATE_DESC
  SYS_UPDATE_ASC
  SYS_UPDATE_DESC
  OVERH_ID_NR_ASC
  OVERH_ID_NR_DESC
}

"""
A condition to be used against `DebiteurMv` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DebiteurMvCondition {
  """Checks for equality with the object’s `cdrelatie` field."""
  cdrelatie: Int

  """Checks for equality with the object’s `cddebiteur` field."""
  cddebiteur: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `naam` field."""
  naam: String

  """Checks for equality with the object’s `naamstraat` field."""
  naamstraat: String

  """Checks for equality with the object’s `straat` field."""
  straat: String

  """Checks for equality with the object’s `woonplaats` field."""
  woonplaats: String

  """Checks for equality with the object’s `postcode` field."""
  postcode: String

  """Checks for equality with the object’s `cdland` field."""
  cdland: String

  """Checks for equality with the object’s `persoon` field."""
  persoon: String

  """Checks for equality with the object’s `telefoon` field."""
  telefoon: String

  """Checks for equality with the object’s `telefoonmobiel` field."""
  telefoonmobiel: String

  """Checks for equality with the object’s `telefax` field."""
  telefax: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `btwnummer` field."""
  btwnummer: String

  """Checks for equality with the object’s `datumverif` field."""
  datumverif: Date

  """Checks for equality with the object’s `cdvaluta` field."""
  cdvaluta: String

  """Checks for equality with the object’s `cdbetcond` field."""
  cdbetcond: String

  """Checks for equality with the object’s `cdlevcond` field."""
  cdlevcond: String

  """Checks for equality with the object’s `cdvert` field."""
  cdvert: String

  """Checks for equality with the object’s `vertegenwoordiger` field."""
  vertegenwoordiger: String

  """Checks for equality with the object’s `cdtaal` field."""
  cdtaal: String

  """Checks for equality with the object’s `cdjournaal` field."""
  cdjournaal: Int

  """Checks for equality with the object’s `cdbtwberekenen` field."""
  cdbtwberekenen: String

  """Checks for equality with the object’s `cdkredbep` field."""
  cdkredbep: String

  """Checks for equality with the object’s `cdaanmanen` field."""
  cdaanmanen: String

  """Checks for equality with the object’s `kredietlimiet` field."""
  kredietlimiet: Int

  """Checks for equality with the object’s `kortperc` field."""
  kortperc: BigFloat

  """Checks for equality with the object’s `btwscenario` field."""
  btwscenario: Int

  """Checks for equality with the object’s `homepage` field."""
  homepage: String

  """Checks for equality with the object’s `cdstroom` field."""
  cdstroom: Int

  """Checks for equality with the object’s `cdvervoer` field."""
  cdvervoer: Int

  """Checks for equality with the object’s `cdverkeer` field."""
  cdverkeer: Int

  """Checks for equality with the object’s `cdstelsel` field."""
  cdstelsel: Int

  """Checks for equality with the object’s `cdtype` field."""
  cdtype: String

  """Checks for equality with the object’s `cdgoedcode` field."""
  cdgoedcode: Int

  """Checks for equality with the object’s `nummerkvk` field."""
  nummerkvk: String

  """Checks for equality with the object’s `plaatskvk` field."""
  plaatskvk: String

  """Checks for equality with the object’s `datumkvk` field."""
  datumkvk: Date

  """Checks for equality with the object’s `cdprijslijst` field."""
  cdprijslijst: String

  """Checks for equality with the object’s `cdverzamel` field."""
  cdverzamel: Int

  """Checks for equality with the object’s `berekenordkost` field."""
  berekenordkost: String

  """Checks for equality with the object’s `telebankfact` field."""
  telebankfact: String

  """Checks for equality with the object’s `isinkooporg` field."""
  isinkooporg: String

  """Checks for equality with the object’s `ontvFactIpvLid` field."""
  ontvFactIpvLid: String

  """Checks for equality with the object’s `ontvBorderel` field."""
  ontvBorderel: String

  """Checks for equality with the object’s `cddebiteurInkorg` field."""
  cddebiteurInkorg: String

  """Checks for equality with the object’s `lidnrBijInkorg` field."""
  lidnrBijInkorg: String

  """Checks for equality with the object’s `aanmaakdatum` field."""
  aanmaakdatum: Date

  """Checks for equality with the object’s `datumltstewijz` field."""
  datumltstewijz: Date

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `inFactoring` field."""
  inFactoring: String

  """Checks for equality with the object’s `controleBetkenmerk` field."""
  controleBetkenmerk: String

  """Checks for equality with the object’s `cdgrbrekening` field."""
  cdgrbrekening: String

  """Checks for equality with the object’s `ondernemersnr` field."""
  ondernemersnr: String

  """Checks for equality with the object’s `btwExIncl` field."""
  btwExIncl: String

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `sysCreate` field."""
  sysCreate: String

  """Checks for equality with the object’s `sysUpdate` field."""
  sysUpdate: String

  """Checks for equality with the object’s `overhIdNr` field."""
  overhIdNr: String
}

"""
A filter to be used against `DebiteurMv` object types. All fields are combined with a logical ‘and.’
"""
input DebiteurMvFilter {
  """Filter by the object’s `cdrelatie` field."""
  cdrelatie: IntFilter

  """Filter by the object’s `cddebiteur` field."""
  cddebiteur: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `naam` field."""
  naam: StringFilter

  """Filter by the object’s `naamstraat` field."""
  naamstraat: StringFilter

  """Filter by the object’s `straat` field."""
  straat: StringFilter

  """Filter by the object’s `woonplaats` field."""
  woonplaats: StringFilter

  """Filter by the object’s `postcode` field."""
  postcode: StringFilter

  """Filter by the object’s `cdland` field."""
  cdland: StringFilter

  """Filter by the object’s `persoon` field."""
  persoon: StringFilter

  """Filter by the object’s `telefoon` field."""
  telefoon: StringFilter

  """Filter by the object’s `telefoonmobiel` field."""
  telefoonmobiel: StringFilter

  """Filter by the object’s `telefax` field."""
  telefax: StringFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `btwnummer` field."""
  btwnummer: StringFilter

  """Filter by the object’s `datumverif` field."""
  datumverif: DateFilter

  """Filter by the object’s `cdvaluta` field."""
  cdvaluta: StringFilter

  """Filter by the object’s `cdbetcond` field."""
  cdbetcond: StringFilter

  """Filter by the object’s `cdlevcond` field."""
  cdlevcond: StringFilter

  """Filter by the object’s `cdvert` field."""
  cdvert: StringFilter

  """Filter by the object’s `vertegenwoordiger` field."""
  vertegenwoordiger: StringFilter

  """Filter by the object’s `cdtaal` field."""
  cdtaal: StringFilter

  """Filter by the object’s `cdjournaal` field."""
  cdjournaal: IntFilter

  """Filter by the object’s `cdbtwberekenen` field."""
  cdbtwberekenen: StringFilter

  """Filter by the object’s `cdkredbep` field."""
  cdkredbep: StringFilter

  """Filter by the object’s `cdaanmanen` field."""
  cdaanmanen: StringFilter

  """Filter by the object’s `kredietlimiet` field."""
  kredietlimiet: IntFilter

  """Filter by the object’s `kortperc` field."""
  kortperc: BigFloatFilter

  """Filter by the object’s `btwscenario` field."""
  btwscenario: IntFilter

  """Filter by the object’s `homepage` field."""
  homepage: StringFilter

  """Filter by the object’s `cdstroom` field."""
  cdstroom: IntFilter

  """Filter by the object’s `cdvervoer` field."""
  cdvervoer: IntFilter

  """Filter by the object’s `cdverkeer` field."""
  cdverkeer: IntFilter

  """Filter by the object’s `cdstelsel` field."""
  cdstelsel: IntFilter

  """Filter by the object’s `cdtype` field."""
  cdtype: StringFilter

  """Filter by the object’s `cdgoedcode` field."""
  cdgoedcode: IntFilter

  """Filter by the object’s `nummerkvk` field."""
  nummerkvk: StringFilter

  """Filter by the object’s `plaatskvk` field."""
  plaatskvk: StringFilter

  """Filter by the object’s `datumkvk` field."""
  datumkvk: DateFilter

  """Filter by the object’s `cdprijslijst` field."""
  cdprijslijst: StringFilter

  """Filter by the object’s `cdverzamel` field."""
  cdverzamel: IntFilter

  """Filter by the object’s `berekenordkost` field."""
  berekenordkost: StringFilter

  """Filter by the object’s `telebankfact` field."""
  telebankfact: StringFilter

  """Filter by the object’s `isinkooporg` field."""
  isinkooporg: StringFilter

  """Filter by the object’s `ontvFactIpvLid` field."""
  ontvFactIpvLid: StringFilter

  """Filter by the object’s `ontvBorderel` field."""
  ontvBorderel: StringFilter

  """Filter by the object’s `cddebiteurInkorg` field."""
  cddebiteurInkorg: StringFilter

  """Filter by the object’s `lidnrBijInkorg` field."""
  lidnrBijInkorg: StringFilter

  """Filter by the object’s `aanmaakdatum` field."""
  aanmaakdatum: DateFilter

  """Filter by the object’s `datumltstewijz` field."""
  datumltstewijz: DateFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `inFactoring` field."""
  inFactoring: StringFilter

  """Filter by the object’s `controleBetkenmerk` field."""
  controleBetkenmerk: StringFilter

  """Filter by the object’s `cdgrbrekening` field."""
  cdgrbrekening: StringFilter

  """Filter by the object’s `ondernemersnr` field."""
  ondernemersnr: StringFilter

  """Filter by the object’s `btwExIncl` field."""
  btwExIncl: StringFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `sysCreate` field."""
  sysCreate: StringFilter

  """Filter by the object’s `sysUpdate` field."""
  sysUpdate: StringFilter

  """Filter by the object’s `overhIdNr` field."""
  overhIdNr: StringFilter

  """Checks for all expressions in this list."""
  and: [DebiteurMvFilter!]

  """Checks for any expressions in this list."""
  or: [DebiteurMvFilter!]

  """Negates the expression."""
  not: DebiteurMvFilter
}

"""A connection to a list of `DetectorEntity` values."""
type DetectorEntitiesConnection {
  """A list of `DetectorEntity` objects."""
  nodes: [DetectorEntity!]!

  """
  A list of edges which contains the `DetectorEntity` and cursor to aid in pagination.
  """
  edges: [DetectorEntitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DetectorEntity` you could get from the connection."""
  totalCount: Int!
}

type DetectorEntity {
  id: Int
  serialNumber: String
  labelDate: Date
  remarks: String
  prefix: String
  detectorTypeId: Int
  name: String
  code: String
  suffix: String
  created: Datetime
  ownerId: Int
  initials: String
}

"""A `DetectorEntity` edge in the connection."""
type DetectorEntitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DetectorEntity` at the end of the edge."""
  node: DetectorEntity!
}

"""Methods to use when ordering `DetectorEntity`."""
enum DetectorEntitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SERIAL_NUMBER_ASC
  SERIAL_NUMBER_DESC
  LABEL_DATE_ASC
  LABEL_DATE_DESC
  REMARKS_ASC
  REMARKS_DESC
  PREFIX_ASC
  PREFIX_DESC
  DETECTOR_TYPE_ID_ASC
  DETECTOR_TYPE_ID_DESC
  NAME_ASC
  NAME_DESC
  CODE_ASC
  CODE_DESC
  SUFFIX_ASC
  SUFFIX_DESC
  CREATED_ASC
  CREATED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  INITIALS_ASC
  INITIALS_DESC
}

"""
A condition to be used against `DetectorEntity` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DetectorEntityCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `serialNumber` field."""
  serialNumber: String

  """Checks for equality with the object’s `labelDate` field."""
  labelDate: Date

  """Checks for equality with the object’s `remarks` field."""
  remarks: String

  """Checks for equality with the object’s `prefix` field."""
  prefix: String

  """Checks for equality with the object’s `detectorTypeId` field."""
  detectorTypeId: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `suffix` field."""
  suffix: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `initials` field."""
  initials: String
}

"""
A filter to be used against `DetectorEntity` object types. All fields are combined with a logical ‘and.’
"""
input DetectorEntityFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `serialNumber` field."""
  serialNumber: StringFilter

  """Filter by the object’s `labelDate` field."""
  labelDate: DateFilter

  """Filter by the object’s `remarks` field."""
  remarks: StringFilter

  """Filter by the object’s `prefix` field."""
  prefix: StringFilter

  """Filter by the object’s `detectorTypeId` field."""
  detectorTypeId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `code` field."""
  code: StringFilter

  """Filter by the object’s `suffix` field."""
  suffix: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `initials` field."""
  initials: StringFilter

  """Checks for all expressions in this list."""
  and: [DetectorEntityFilter!]

  """Checks for any expressions in this list."""
  or: [DetectorEntityFilter!]

  """Negates the expression."""
  not: DetectorEntityFilter
}

"""A connection to a list of `DetectorIndex` values."""
type DetectorIndicesConnection {
  """A list of `DetectorIndex` objects."""
  nodes: [DetectorIndex!]!

  """
  A list of edges which contains the `DetectorIndex` and cursor to aid in pagination.
  """
  edges: [DetectorIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DetectorIndex` you could get from the connection."""
  totalCount: Int!
}

type DetectorIndex {
  id: Int
  serialNumber: String
  detectorType: String
  detectorTypeId: Int
  label: String
  detectorTypeSort: String
  formattedLabelDate: String
  createdDate: String
  detectorSensorId: Int
  detectorLocationId: Int
  factuuropdracht: String
  cddebiteur: String
  debiteurNaam: String
}

"""A `DetectorIndex` edge in the connection."""
type DetectorIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DetectorIndex` at the end of the edge."""
  node: DetectorIndex!
}

"""Methods to use when ordering `DetectorIndex`."""
enum DetectorIndicesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SERIAL_NUMBER_ASC
  SERIAL_NUMBER_DESC
  DETECTOR_TYPE_ASC
  DETECTOR_TYPE_DESC
  DETECTOR_TYPE_ID_ASC
  DETECTOR_TYPE_ID_DESC
  LABEL_ASC
  LABEL_DESC
  DETECTOR_TYPE_SORT_ASC
  DETECTOR_TYPE_SORT_DESC
  FORMATTED_LABEL_DATE_ASC
  FORMATTED_LABEL_DATE_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  DETECTOR_SENSOR_ID_ASC
  DETECTOR_SENSOR_ID_DESC
  DETECTOR_LOCATION_ID_ASC
  DETECTOR_LOCATION_ID_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  CDDEBITEUR_ASC
  CDDEBITEUR_DESC
  DEBITEUR_NAAM_ASC
  DEBITEUR_NAAM_DESC
}

"""
A condition to be used against `DetectorIndex` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DetectorIndexCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `serialNumber` field."""
  serialNumber: String

  """Checks for equality with the object’s `detectorType` field."""
  detectorType: String

  """Checks for equality with the object’s `detectorTypeId` field."""
  detectorTypeId: Int

  """Checks for equality with the object’s `label` field."""
  label: String

  """Checks for equality with the object’s `detectorTypeSort` field."""
  detectorTypeSort: String

  """Checks for equality with the object’s `formattedLabelDate` field."""
  formattedLabelDate: String

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: String

  """Checks for equality with the object’s `detectorSensorId` field."""
  detectorSensorId: Int

  """Checks for equality with the object’s `detectorLocationId` field."""
  detectorLocationId: Int

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `cddebiteur` field."""
  cddebiteur: String

  """Checks for equality with the object’s `debiteurNaam` field."""
  debiteurNaam: String
}

"""
A filter to be used against `DetectorIndex` object types. All fields are combined with a logical ‘and.’
"""
input DetectorIndexFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `serialNumber` field."""
  serialNumber: StringFilter

  """Filter by the object’s `detectorType` field."""
  detectorType: StringFilter

  """Filter by the object’s `detectorTypeId` field."""
  detectorTypeId: IntFilter

  """Filter by the object’s `label` field."""
  label: StringFilter

  """Filter by the object’s `detectorTypeSort` field."""
  detectorTypeSort: StringFilter

  """Filter by the object’s `formattedLabelDate` field."""
  formattedLabelDate: StringFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: StringFilter

  """Filter by the object’s `detectorSensorId` field."""
  detectorSensorId: IntFilter

  """Filter by the object’s `detectorLocationId` field."""
  detectorLocationId: IntFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `cddebiteur` field."""
  cddebiteur: StringFilter

  """Filter by the object’s `debiteurNaam` field."""
  debiteurNaam: StringFilter

  """Checks for all expressions in this list."""
  and: [DetectorIndexFilter!]

  """Checks for any expressions in this list."""
  or: [DetectorIndexFilter!]

  """Negates the expression."""
  not: DetectorIndexFilter
}

"""A connection to a list of `DetectorSensorIndex` values."""
type DetectorSensorIndicesConnection {
  """A list of `DetectorSensorIndex` objects."""
  nodes: [DetectorSensorIndex!]!

  """
  A list of edges which contains the `DetectorSensorIndex` and cursor to aid in pagination.
  """
  edges: [DetectorSensorIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DetectorSensorIndex` you could get from the connection.
  """
  totalCount: Int!
}

type DetectorSensorIndex {
  detectorId: Int
  detectorSensorLocationJson: JSON
  detectorSensorLocationLabel: String
  detectorTypeId: Int
  areaId: Int
  floorId: Int
  buildingId: Int
  endUserId: Int
  detectorType: String
  detectorPosition: Int
  detectorSensorId: Int
  sensorId: Int
  detectorSensorLocationId: Int
  factuuropdracht: String
  cddebiteur: String
  debiteurNaam: String
  endUserName: String
}

"""A `DetectorSensorIndex` edge in the connection."""
type DetectorSensorIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DetectorSensorIndex` at the end of the edge."""
  node: DetectorSensorIndex!
}

"""Methods to use when ordering `DetectorSensorIndex`."""
enum DetectorSensorIndicesOrderBy {
  NATURAL
  DETECTOR_ID_ASC
  DETECTOR_ID_DESC
  DETECTOR_SENSOR_LOCATION_JSON_ASC
  DETECTOR_SENSOR_LOCATION_JSON_DESC
  DETECTOR_SENSOR_LOCATION_LABEL_ASC
  DETECTOR_SENSOR_LOCATION_LABEL_DESC
  DETECTOR_TYPE_ID_ASC
  DETECTOR_TYPE_ID_DESC
  AREA_ID_ASC
  AREA_ID_DESC
  FLOOR_ID_ASC
  FLOOR_ID_DESC
  BUILDING_ID_ASC
  BUILDING_ID_DESC
  END_USER_ID_ASC
  END_USER_ID_DESC
  DETECTOR_TYPE_ASC
  DETECTOR_TYPE_DESC
  DETECTOR_POSITION_ASC
  DETECTOR_POSITION_DESC
  DETECTOR_SENSOR_ID_ASC
  DETECTOR_SENSOR_ID_DESC
  SENSOR_ID_ASC
  SENSOR_ID_DESC
  DETECTOR_SENSOR_LOCATION_ID_ASC
  DETECTOR_SENSOR_LOCATION_ID_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  CDDEBITEUR_ASC
  CDDEBITEUR_DESC
  DEBITEUR_NAAM_ASC
  DEBITEUR_NAAM_DESC
  END_USER_NAME_ASC
  END_USER_NAME_DESC
}

"""
A condition to be used against `DetectorSensorIndex` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input DetectorSensorIndexCondition {
  """Checks for equality with the object’s `detectorId` field."""
  detectorId: Int

  """
  Checks for equality with the object’s `detectorSensorLocationJson` field.
  """
  detectorSensorLocationJson: JSON

  """
  Checks for equality with the object’s `detectorSensorLocationLabel` field.
  """
  detectorSensorLocationLabel: String

  """Checks for equality with the object’s `detectorTypeId` field."""
  detectorTypeId: Int

  """Checks for equality with the object’s `areaId` field."""
  areaId: Int

  """Checks for equality with the object’s `floorId` field."""
  floorId: Int

  """Checks for equality with the object’s `buildingId` field."""
  buildingId: Int

  """Checks for equality with the object’s `endUserId` field."""
  endUserId: Int

  """Checks for equality with the object’s `detectorType` field."""
  detectorType: String

  """Checks for equality with the object’s `detectorPosition` field."""
  detectorPosition: Int

  """Checks for equality with the object’s `detectorSensorId` field."""
  detectorSensorId: Int

  """Checks for equality with the object’s `sensorId` field."""
  sensorId: Int

  """
  Checks for equality with the object’s `detectorSensorLocationId` field.
  """
  detectorSensorLocationId: Int

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `cddebiteur` field."""
  cddebiteur: String

  """Checks for equality with the object’s `debiteurNaam` field."""
  debiteurNaam: String

  """Checks for equality with the object’s `endUserName` field."""
  endUserName: String
}

"""
A filter to be used against `DetectorSensorIndex` object types. All fields are combined with a logical ‘and.’
"""
input DetectorSensorIndexFilter {
  """Filter by the object’s `detectorId` field."""
  detectorId: IntFilter

  """Filter by the object’s `detectorSensorLocationLabel` field."""
  detectorSensorLocationLabel: StringFilter

  """Filter by the object’s `detectorTypeId` field."""
  detectorTypeId: IntFilter

  """Filter by the object’s `areaId` field."""
  areaId: IntFilter

  """Filter by the object’s `floorId` field."""
  floorId: IntFilter

  """Filter by the object’s `buildingId` field."""
  buildingId: IntFilter

  """Filter by the object’s `endUserId` field."""
  endUserId: IntFilter

  """Filter by the object’s `detectorType` field."""
  detectorType: StringFilter

  """Filter by the object’s `detectorPosition` field."""
  detectorPosition: IntFilter

  """Filter by the object’s `detectorSensorId` field."""
  detectorSensorId: IntFilter

  """Filter by the object’s `sensorId` field."""
  sensorId: IntFilter

  """Filter by the object’s `detectorSensorLocationId` field."""
  detectorSensorLocationId: IntFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `cddebiteur` field."""
  cddebiteur: StringFilter

  """Filter by the object’s `debiteurNaam` field."""
  debiteurNaam: StringFilter

  """Filter by the object’s `endUserName` field."""
  endUserName: StringFilter

  """Checks for all expressions in this list."""
  and: [DetectorSensorIndexFilter!]

  """Checks for any expressions in this list."""
  or: [DetectorSensorIndexFilter!]

  """Negates the expression."""
  not: DetectorSensorIndexFilter
}

"""A connection to a list of `DetectorSensorLocationsEndUser` values."""
type DetectorSensorLocationsEndUsersConnection {
  """A list of `DetectorSensorLocationsEndUser` objects."""
  nodes: [DetectorSensorLocationsEndUser!]!

  """
  A list of edges which contains the `DetectorSensorLocationsEndUser` and cursor to aid in pagination.
  """
  edges: [DetectorSensorLocationsEndUsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DetectorSensorLocationsEndUser` you could get from the connection.
  """
  totalCount: Int!
}

type DetectorSensorLocationsEndUser {
  id: Int
  contactName: String
  contactEmail: String
  name: String
}

"""A `DetectorSensorLocationsEndUser` edge in the connection."""
type DetectorSensorLocationsEndUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DetectorSensorLocationsEndUser` at the end of the edge."""
  node: DetectorSensorLocationsEndUser!
}

"""Methods to use when ordering `DetectorSensorLocationsEndUser`."""
enum DetectorSensorLocationsEndUsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CONTACT_NAME_ASC
  CONTACT_NAME_DESC
  CONTACT_EMAIL_ASC
  CONTACT_EMAIL_DESC
  NAME_ASC
  NAME_DESC
}

"""
A condition to be used against `DetectorSensorLocationsEndUser` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input DetectorSensorLocationsEndUserCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `contactName` field."""
  contactName: String

  """Checks for equality with the object’s `contactEmail` field."""
  contactEmail: String

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
A filter to be used against `DetectorSensorLocationsEndUser` object types. All fields are combined with a logical ‘and.’
"""
input DetectorSensorLocationsEndUserFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `contactName` field."""
  contactName: StringFilter

  """Filter by the object’s `contactEmail` field."""
  contactEmail: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Checks for all expressions in this list."""
  and: [DetectorSensorLocationsEndUserFilter!]

  """Checks for any expressions in this list."""
  or: [DetectorSensorLocationsEndUserFilter!]

  """Negates the expression."""
  not: DetectorSensorLocationsEndUserFilter
}

"""A connection to a list of `DetectorSensorLocationsIndex` values."""
type DetectorSensorLocationsIndicesConnection {
  """A list of `DetectorSensorLocationsIndex` objects."""
  nodes: [DetectorSensorLocationsIndex!]!

  """
  A list of edges which contains the `DetectorSensorLocationsIndex` and cursor to aid in pagination.
  """
  edges: [DetectorSensorLocationsIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DetectorSensorLocationsIndex` you could get from the connection.
  """
  totalCount: Int!
}

type DetectorSensorLocationsIndex {
  detectorSensorLocationId: Int
  endUserId: Int
  endUserName: String
  buildingId: Int
  buildingName: String
  floorName: String
  areaId: Int
  areaName: String
  samplePointId: Int
  samplePointName: String
  applicationId: Int
  applicationName: String
  detectorPosition: Int
  simsTag: String
  simsChannel: Int
  detectorLocationBus: Int
  detectorLocationAddress: Int
  detectorId: Int
  detectorModel: String
  sensorId: Int
  sensorSerialNumber: String
  detectorSerialNumber: String
  detectorLabelDate: Date
  sensorModel: String
  sensorLabelDate: Date
  rangeLowEu: Float
  rangeHighEu: Float
  rangeEngineeringUnits: String
  gasName: String
  electrolyteName: String
  oRingName: String
  sensorTypeSiliconeSheet: Boolean
  sensorTypeMembraneSeal: Boolean
  flowRate: Float
  calFlowRate: Float
  calResponse: Float
  membraneName: String
  pyrolyserName: String
  filterName: String
  remarks: String
  calGasConcentration: Float
  calGasEngineeringUnits: String
  calGasGasName: String
  sensorInstallDueDate: Date
  sensorInstallDueDateLabel: String
  sensorInstallDueClass: String
  lastSensorMaintenanceDate: Date
  sensorMaintenanceDueDate: Date
  sensorMaintenanceDueDateLabel: String
  sensorMaintenanceDueClass: String
  lastFilterInstallDate: Date
  filterInstallDueDate: Date
  filterInstallDueDateLabel: String
  filterInstallDueClass: String
  lastPyrolyserInstallDate: Date
  pyrolyserInstallDueDate: Date
  pyrolyserInstallDueDateLabel: String
  pyrolyserInstallDueClass: String
  lastSensorInstallDate: Date
}

"""A `DetectorSensorLocationsIndex` edge in the connection."""
type DetectorSensorLocationsIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DetectorSensorLocationsIndex` at the end of the edge."""
  node: DetectorSensorLocationsIndex!
}

"""Methods to use when ordering `DetectorSensorLocationsIndex`."""
enum DetectorSensorLocationsIndicesOrderBy {
  NATURAL
  DETECTOR_SENSOR_LOCATION_ID_ASC
  DETECTOR_SENSOR_LOCATION_ID_DESC
  END_USER_ID_ASC
  END_USER_ID_DESC
  END_USER_NAME_ASC
  END_USER_NAME_DESC
  BUILDING_ID_ASC
  BUILDING_ID_DESC
  BUILDING_NAME_ASC
  BUILDING_NAME_DESC
  FLOOR_NAME_ASC
  FLOOR_NAME_DESC
  AREA_ID_ASC
  AREA_ID_DESC
  AREA_NAME_ASC
  AREA_NAME_DESC
  SAMPLE_POINT_ID_ASC
  SAMPLE_POINT_ID_DESC
  SAMPLE_POINT_NAME_ASC
  SAMPLE_POINT_NAME_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  APPLICATION_NAME_ASC
  APPLICATION_NAME_DESC
  DETECTOR_POSITION_ASC
  DETECTOR_POSITION_DESC
  SIMS_TAG_ASC
  SIMS_TAG_DESC
  SIMS_CHANNEL_ASC
  SIMS_CHANNEL_DESC
  DETECTOR_LOCATION_BUS_ASC
  DETECTOR_LOCATION_BUS_DESC
  DETECTOR_LOCATION_ADDRESS_ASC
  DETECTOR_LOCATION_ADDRESS_DESC
  DETECTOR_ID_ASC
  DETECTOR_ID_DESC
  DETECTOR_MODEL_ASC
  DETECTOR_MODEL_DESC
  SENSOR_ID_ASC
  SENSOR_ID_DESC
  SENSOR_SERIAL_NUMBER_ASC
  SENSOR_SERIAL_NUMBER_DESC
  DETECTOR_SERIAL_NUMBER_ASC
  DETECTOR_SERIAL_NUMBER_DESC
  DETECTOR_LABEL_DATE_ASC
  DETECTOR_LABEL_DATE_DESC
  SENSOR_MODEL_ASC
  SENSOR_MODEL_DESC
  SENSOR_LABEL_DATE_ASC
  SENSOR_LABEL_DATE_DESC
  RANGE_LOW_EU_ASC
  RANGE_LOW_EU_DESC
  RANGE_HIGH_EU_ASC
  RANGE_HIGH_EU_DESC
  RANGE_ENGINEERING_UNITS_ASC
  RANGE_ENGINEERING_UNITS_DESC
  GAS_NAME_ASC
  GAS_NAME_DESC
  ELECTROLYTE_NAME_ASC
  ELECTROLYTE_NAME_DESC
  O_RING_NAME_ASC
  O_RING_NAME_DESC
  SENSOR_TYPE_SILICONE_SHEET_ASC
  SENSOR_TYPE_SILICONE_SHEET_DESC
  SENSOR_TYPE_MEMBRANE_SEAL_ASC
  SENSOR_TYPE_MEMBRANE_SEAL_DESC
  FLOW_RATE_ASC
  FLOW_RATE_DESC
  CAL_FLOW_RATE_ASC
  CAL_FLOW_RATE_DESC
  CAL_RESPONSE_ASC
  CAL_RESPONSE_DESC
  MEMBRANE_NAME_ASC
  MEMBRANE_NAME_DESC
  PYROLYSER_NAME_ASC
  PYROLYSER_NAME_DESC
  FILTER_NAME_ASC
  FILTER_NAME_DESC
  REMARKS_ASC
  REMARKS_DESC
  CAL_GAS_CONCENTRATION_ASC
  CAL_GAS_CONCENTRATION_DESC
  CAL_GAS_ENGINEERING_UNITS_ASC
  CAL_GAS_ENGINEERING_UNITS_DESC
  CAL_GAS_GAS_NAME_ASC
  CAL_GAS_GAS_NAME_DESC
  SENSOR_INSTALL_DUE_DATE_ASC
  SENSOR_INSTALL_DUE_DATE_DESC
  SENSOR_INSTALL_DUE_DATE_LABEL_ASC
  SENSOR_INSTALL_DUE_DATE_LABEL_DESC
  SENSOR_INSTALL_DUE_CLASS_ASC
  SENSOR_INSTALL_DUE_CLASS_DESC
  LAST_SENSOR_MAINTENANCE_DATE_ASC
  LAST_SENSOR_MAINTENANCE_DATE_DESC
  SENSOR_MAINTENANCE_DUE_DATE_ASC
  SENSOR_MAINTENANCE_DUE_DATE_DESC
  SENSOR_MAINTENANCE_DUE_DATE_LABEL_ASC
  SENSOR_MAINTENANCE_DUE_DATE_LABEL_DESC
  SENSOR_MAINTENANCE_DUE_CLASS_ASC
  SENSOR_MAINTENANCE_DUE_CLASS_DESC
  LAST_FILTER_INSTALL_DATE_ASC
  LAST_FILTER_INSTALL_DATE_DESC
  FILTER_INSTALL_DUE_DATE_ASC
  FILTER_INSTALL_DUE_DATE_DESC
  FILTER_INSTALL_DUE_DATE_LABEL_ASC
  FILTER_INSTALL_DUE_DATE_LABEL_DESC
  FILTER_INSTALL_DUE_CLASS_ASC
  FILTER_INSTALL_DUE_CLASS_DESC
  LAST_PYROLYSER_INSTALL_DATE_ASC
  LAST_PYROLYSER_INSTALL_DATE_DESC
  PYROLYSER_INSTALL_DUE_DATE_ASC
  PYROLYSER_INSTALL_DUE_DATE_DESC
  PYROLYSER_INSTALL_DUE_DATE_LABEL_ASC
  PYROLYSER_INSTALL_DUE_DATE_LABEL_DESC
  PYROLYSER_INSTALL_DUE_CLASS_ASC
  PYROLYSER_INSTALL_DUE_CLASS_DESC
  LAST_SENSOR_INSTALL_DATE_ASC
  LAST_SENSOR_INSTALL_DATE_DESC
}

"""
A condition to be used against `DetectorSensorLocationsIndex` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input DetectorSensorLocationsIndexCondition {
  """
  Checks for equality with the object’s `detectorSensorLocationId` field.
  """
  detectorSensorLocationId: Int

  """Checks for equality with the object’s `endUserId` field."""
  endUserId: Int

  """Checks for equality with the object’s `endUserName` field."""
  endUserName: String

  """Checks for equality with the object’s `buildingId` field."""
  buildingId: Int

  """Checks for equality with the object’s `buildingName` field."""
  buildingName: String

  """Checks for equality with the object’s `floorName` field."""
  floorName: String

  """Checks for equality with the object’s `areaId` field."""
  areaId: Int

  """Checks for equality with the object’s `areaName` field."""
  areaName: String

  """Checks for equality with the object’s `samplePointId` field."""
  samplePointId: Int

  """Checks for equality with the object’s `samplePointName` field."""
  samplePointName: String

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `applicationName` field."""
  applicationName: String

  """Checks for equality with the object’s `detectorPosition` field."""
  detectorPosition: Int

  """Checks for equality with the object’s `simsTag` field."""
  simsTag: String

  """Checks for equality with the object’s `simsChannel` field."""
  simsChannel: Int

  """Checks for equality with the object’s `detectorLocationBus` field."""
  detectorLocationBus: Int

  """Checks for equality with the object’s `detectorLocationAddress` field."""
  detectorLocationAddress: Int

  """Checks for equality with the object’s `detectorId` field."""
  detectorId: Int

  """Checks for equality with the object’s `detectorModel` field."""
  detectorModel: String

  """Checks for equality with the object’s `sensorId` field."""
  sensorId: Int

  """Checks for equality with the object’s `sensorSerialNumber` field."""
  sensorSerialNumber: String

  """Checks for equality with the object’s `detectorSerialNumber` field."""
  detectorSerialNumber: String

  """Checks for equality with the object’s `detectorLabelDate` field."""
  detectorLabelDate: Date

  """Checks for equality with the object’s `sensorModel` field."""
  sensorModel: String

  """Checks for equality with the object’s `sensorLabelDate` field."""
  sensorLabelDate: Date

  """Checks for equality with the object’s `rangeLowEu` field."""
  rangeLowEu: Float

  """Checks for equality with the object’s `rangeHighEu` field."""
  rangeHighEu: Float

  """Checks for equality with the object’s `rangeEngineeringUnits` field."""
  rangeEngineeringUnits: String

  """Checks for equality with the object’s `gasName` field."""
  gasName: String

  """Checks for equality with the object’s `electrolyteName` field."""
  electrolyteName: String

  """Checks for equality with the object’s `oRingName` field."""
  oRingName: String

  """Checks for equality with the object’s `sensorTypeSiliconeSheet` field."""
  sensorTypeSiliconeSheet: Boolean

  """Checks for equality with the object’s `sensorTypeMembraneSeal` field."""
  sensorTypeMembraneSeal: Boolean

  """Checks for equality with the object’s `flowRate` field."""
  flowRate: Float

  """Checks for equality with the object’s `calFlowRate` field."""
  calFlowRate: Float

  """Checks for equality with the object’s `calResponse` field."""
  calResponse: Float

  """Checks for equality with the object’s `membraneName` field."""
  membraneName: String

  """Checks for equality with the object’s `pyrolyserName` field."""
  pyrolyserName: String

  """Checks for equality with the object’s `filterName` field."""
  filterName: String

  """Checks for equality with the object’s `remarks` field."""
  remarks: String

  """Checks for equality with the object’s `calGasConcentration` field."""
  calGasConcentration: Float

  """Checks for equality with the object’s `calGasEngineeringUnits` field."""
  calGasEngineeringUnits: String

  """Checks for equality with the object’s `calGasGasName` field."""
  calGasGasName: String

  """Checks for equality with the object’s `sensorInstallDueDate` field."""
  sensorInstallDueDate: Date

  """
  Checks for equality with the object’s `sensorInstallDueDateLabel` field.
  """
  sensorInstallDueDateLabel: String

  """Checks for equality with the object’s `sensorInstallDueClass` field."""
  sensorInstallDueClass: String

  """
  Checks for equality with the object’s `lastSensorMaintenanceDate` field.
  """
  lastSensorMaintenanceDate: Date

  """
  Checks for equality with the object’s `sensorMaintenanceDueDate` field.
  """
  sensorMaintenanceDueDate: Date

  """
  Checks for equality with the object’s `sensorMaintenanceDueDateLabel` field.
  """
  sensorMaintenanceDueDateLabel: String

  """
  Checks for equality with the object’s `sensorMaintenanceDueClass` field.
  """
  sensorMaintenanceDueClass: String

  """Checks for equality with the object’s `lastFilterInstallDate` field."""
  lastFilterInstallDate: Date

  """Checks for equality with the object’s `filterInstallDueDate` field."""
  filterInstallDueDate: Date

  """
  Checks for equality with the object’s `filterInstallDueDateLabel` field.
  """
  filterInstallDueDateLabel: String

  """Checks for equality with the object’s `filterInstallDueClass` field."""
  filterInstallDueClass: String

  """
  Checks for equality with the object’s `lastPyrolyserInstallDate` field.
  """
  lastPyrolyserInstallDate: Date

  """Checks for equality with the object’s `pyrolyserInstallDueDate` field."""
  pyrolyserInstallDueDate: Date

  """
  Checks for equality with the object’s `pyrolyserInstallDueDateLabel` field.
  """
  pyrolyserInstallDueDateLabel: String

  """
  Checks for equality with the object’s `pyrolyserInstallDueClass` field.
  """
  pyrolyserInstallDueClass: String

  """Checks for equality with the object’s `lastSensorInstallDate` field."""
  lastSensorInstallDate: Date
}

"""
A filter to be used against `DetectorSensorLocationsIndex` object types. All fields are combined with a logical ‘and.’
"""
input DetectorSensorLocationsIndexFilter {
  """Filter by the object’s `detectorSensorLocationId` field."""
  detectorSensorLocationId: IntFilter

  """Filter by the object’s `endUserId` field."""
  endUserId: IntFilter

  """Filter by the object’s `endUserName` field."""
  endUserName: StringFilter

  """Filter by the object’s `buildingId` field."""
  buildingId: IntFilter

  """Filter by the object’s `buildingName` field."""
  buildingName: StringFilter

  """Filter by the object’s `floorName` field."""
  floorName: StringFilter

  """Filter by the object’s `areaId` field."""
  areaId: IntFilter

  """Filter by the object’s `areaName` field."""
  areaName: StringFilter

  """Filter by the object’s `samplePointId` field."""
  samplePointId: IntFilter

  """Filter by the object’s `samplePointName` field."""
  samplePointName: StringFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `applicationName` field."""
  applicationName: StringFilter

  """Filter by the object’s `detectorPosition` field."""
  detectorPosition: IntFilter

  """Filter by the object’s `simsTag` field."""
  simsTag: StringFilter

  """Filter by the object’s `simsChannel` field."""
  simsChannel: IntFilter

  """Filter by the object’s `detectorLocationBus` field."""
  detectorLocationBus: IntFilter

  """Filter by the object’s `detectorLocationAddress` field."""
  detectorLocationAddress: IntFilter

  """Filter by the object’s `detectorId` field."""
  detectorId: IntFilter

  """Filter by the object’s `detectorModel` field."""
  detectorModel: StringFilter

  """Filter by the object’s `sensorId` field."""
  sensorId: IntFilter

  """Filter by the object’s `sensorSerialNumber` field."""
  sensorSerialNumber: StringFilter

  """Filter by the object’s `detectorSerialNumber` field."""
  detectorSerialNumber: StringFilter

  """Filter by the object’s `detectorLabelDate` field."""
  detectorLabelDate: DateFilter

  """Filter by the object’s `sensorModel` field."""
  sensorModel: StringFilter

  """Filter by the object’s `sensorLabelDate` field."""
  sensorLabelDate: DateFilter

  """Filter by the object’s `rangeLowEu` field."""
  rangeLowEu: FloatFilter

  """Filter by the object’s `rangeHighEu` field."""
  rangeHighEu: FloatFilter

  """Filter by the object’s `rangeEngineeringUnits` field."""
  rangeEngineeringUnits: StringFilter

  """Filter by the object’s `gasName` field."""
  gasName: StringFilter

  """Filter by the object’s `electrolyteName` field."""
  electrolyteName: StringFilter

  """Filter by the object’s `oRingName` field."""
  oRingName: StringFilter

  """Filter by the object’s `sensorTypeSiliconeSheet` field."""
  sensorTypeSiliconeSheet: BooleanFilter

  """Filter by the object’s `sensorTypeMembraneSeal` field."""
  sensorTypeMembraneSeal: BooleanFilter

  """Filter by the object’s `flowRate` field."""
  flowRate: FloatFilter

  """Filter by the object’s `calFlowRate` field."""
  calFlowRate: FloatFilter

  """Filter by the object’s `calResponse` field."""
  calResponse: FloatFilter

  """Filter by the object’s `membraneName` field."""
  membraneName: StringFilter

  """Filter by the object’s `pyrolyserName` field."""
  pyrolyserName: StringFilter

  """Filter by the object’s `filterName` field."""
  filterName: StringFilter

  """Filter by the object’s `remarks` field."""
  remarks: StringFilter

  """Filter by the object’s `calGasConcentration` field."""
  calGasConcentration: FloatFilter

  """Filter by the object’s `calGasEngineeringUnits` field."""
  calGasEngineeringUnits: StringFilter

  """Filter by the object’s `calGasGasName` field."""
  calGasGasName: StringFilter

  """Filter by the object’s `sensorInstallDueDate` field."""
  sensorInstallDueDate: DateFilter

  """Filter by the object’s `sensorInstallDueDateLabel` field."""
  sensorInstallDueDateLabel: StringFilter

  """Filter by the object’s `sensorInstallDueClass` field."""
  sensorInstallDueClass: StringFilter

  """Filter by the object’s `lastSensorMaintenanceDate` field."""
  lastSensorMaintenanceDate: DateFilter

  """Filter by the object’s `sensorMaintenanceDueDate` field."""
  sensorMaintenanceDueDate: DateFilter

  """Filter by the object’s `sensorMaintenanceDueDateLabel` field."""
  sensorMaintenanceDueDateLabel: StringFilter

  """Filter by the object’s `sensorMaintenanceDueClass` field."""
  sensorMaintenanceDueClass: StringFilter

  """Filter by the object’s `lastFilterInstallDate` field."""
  lastFilterInstallDate: DateFilter

  """Filter by the object’s `filterInstallDueDate` field."""
  filterInstallDueDate: DateFilter

  """Filter by the object’s `filterInstallDueDateLabel` field."""
  filterInstallDueDateLabel: StringFilter

  """Filter by the object’s `filterInstallDueClass` field."""
  filterInstallDueClass: StringFilter

  """Filter by the object’s `lastPyrolyserInstallDate` field."""
  lastPyrolyserInstallDate: DateFilter

  """Filter by the object’s `pyrolyserInstallDueDate` field."""
  pyrolyserInstallDueDate: DateFilter

  """Filter by the object’s `pyrolyserInstallDueDateLabel` field."""
  pyrolyserInstallDueDateLabel: StringFilter

  """Filter by the object’s `pyrolyserInstallDueClass` field."""
  pyrolyserInstallDueClass: StringFilter

  """Filter by the object’s `lastSensorInstallDate` field."""
  lastSensorInstallDate: DateFilter

  """Checks for all expressions in this list."""
  and: [DetectorSensorLocationsIndexFilter!]

  """Checks for any expressions in this list."""
  or: [DetectorSensorLocationsIndexFilter!]

  """Negates the expression."""
  not: DetectorSensorLocationsIndexFilter
}

"""A connection to a list of `DetectorTypesEntity` values."""
type DetectorTypesEntitiesConnection {
  """A list of `DetectorTypesEntity` objects."""
  nodes: [DetectorTypesEntity!]!

  """
  A list of edges which contains the `DetectorTypesEntity` and cursor to aid in pagination.
  """
  edges: [DetectorTypesEntitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DetectorTypesEntity` you could get from the connection.
  """
  totalCount: Int!
}

type DetectorTypesEntity {
  id: Int
  obsolete: Boolean
  prefix: String
  code: String
  suffix: String
  sensorCount: Int
  created: Datetime
  modified: Datetime
  ownerId: Int
  initials: String
  name: String
}

"""A `DetectorTypesEntity` edge in the connection."""
type DetectorTypesEntitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DetectorTypesEntity` at the end of the edge."""
  node: DetectorTypesEntity!
}

"""Methods to use when ordering `DetectorTypesEntity`."""
enum DetectorTypesEntitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  OBSOLETE_ASC
  OBSOLETE_DESC
  PREFIX_ASC
  PREFIX_DESC
  CODE_ASC
  CODE_DESC
  SUFFIX_ASC
  SUFFIX_DESC
  SENSOR_COUNT_ASC
  SENSOR_COUNT_DESC
  CREATED_ASC
  CREATED_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  INITIALS_ASC
  INITIALS_DESC
  NAME_ASC
  NAME_DESC
}

"""
A condition to be used against `DetectorTypesEntity` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input DetectorTypesEntityCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `obsolete` field."""
  obsolete: Boolean

  """Checks for equality with the object’s `prefix` field."""
  prefix: String

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `suffix` field."""
  suffix: String

  """Checks for equality with the object’s `sensorCount` field."""
  sensorCount: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `modified` field."""
  modified: Datetime

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `initials` field."""
  initials: String

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
A filter to be used against `DetectorTypesEntity` object types. All fields are combined with a logical ‘and.’
"""
input DetectorTypesEntityFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `obsolete` field."""
  obsolete: BooleanFilter

  """Filter by the object’s `prefix` field."""
  prefix: StringFilter

  """Filter by the object’s `code` field."""
  code: StringFilter

  """Filter by the object’s `suffix` field."""
  suffix: StringFilter

  """Filter by the object’s `sensorCount` field."""
  sensorCount: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `modified` field."""
  modified: DatetimeFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `initials` field."""
  initials: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Checks for all expressions in this list."""
  and: [DetectorTypesEntityFilter!]

  """Checks for any expressions in this list."""
  or: [DetectorTypesEntityFilter!]

  """Negates the expression."""
  not: DetectorTypesEntityFilter
}

"""A connection to a list of `DetectorsChecklist` values."""
type DetectorsChecklistsConnection {
  """A list of `DetectorsChecklist` objects."""
  nodes: [DetectorsChecklist!]!

  """
  A list of edges which contains the `DetectorsChecklist` and cursor to aid in pagination.
  """
  edges: [DetectorsChecklistsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DetectorsChecklist` you could get from the connection.
  """
  totalCount: Int!
}

type DetectorsChecklist {
  factuuropdracht: String
  detectorTypePrefix: String
  detectorTypeSuffix: String
  detectorSerialNumber: String
  sensorSerialNumber: String
  longDate: String
  shortDate: String
  sensorType: String
  target: String
  lowEu: String
  highEu: String
  engineeringUnits: String
  electrolyteName: String
  oRingName: String
  membraneName: String
  restrictor: String
  battery: String
  seal: String
  calFlowRate: String
  calGas: String
  pc5154BS1: String
  pc5154BS2: String
  pc5155BS3: String
  pc5155BS4: String
  pc5155BS5: String
  pc5155BS1: String
}

"""A `DetectorsChecklist` edge in the connection."""
type DetectorsChecklistsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DetectorsChecklist` at the end of the edge."""
  node: DetectorsChecklist!
}

"""Methods to use when ordering `DetectorsChecklist`."""
enum DetectorsChecklistsOrderBy {
  NATURAL
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  DETECTOR_TYPE_PREFIX_ASC
  DETECTOR_TYPE_PREFIX_DESC
  DETECTOR_TYPE_SUFFIX_ASC
  DETECTOR_TYPE_SUFFIX_DESC
  DETECTOR_SERIAL_NUMBER_ASC
  DETECTOR_SERIAL_NUMBER_DESC
  SENSOR_SERIAL_NUMBER_ASC
  SENSOR_SERIAL_NUMBER_DESC
  LONG_DATE_ASC
  LONG_DATE_DESC
  SHORT_DATE_ASC
  SHORT_DATE_DESC
  SENSOR_TYPE_ASC
  SENSOR_TYPE_DESC
  TARGET_ASC
  TARGET_DESC
  LOW_EU_ASC
  LOW_EU_DESC
  HIGH_EU_ASC
  HIGH_EU_DESC
  ENGINEERING_UNITS_ASC
  ENGINEERING_UNITS_DESC
  ELECTROLYTE_NAME_ASC
  ELECTROLYTE_NAME_DESC
  O_RING_NAME_ASC
  O_RING_NAME_DESC
  MEMBRANE_NAME_ASC
  MEMBRANE_NAME_DESC
  RESTRICTOR_ASC
  RESTRICTOR_DESC
  BATTERY_ASC
  BATTERY_DESC
  SEAL_ASC
  SEAL_DESC
  CAL_FLOW_RATE_ASC
  CAL_FLOW_RATE_DESC
  CAL_GAS_ASC
  CAL_GAS_DESC
  PC_5154B_S1_ASC
  PC_5154B_S1_DESC
  PC_5154B_S2_ASC
  PC_5154B_S2_DESC
  PC_5155B_S3_ASC
  PC_5155B_S3_DESC
  PC_5155B_S4_ASC
  PC_5155B_S4_DESC
  PC_5155B_S5_ASC
  PC_5155B_S5_DESC
  PC_5155B_S1_ASC
  PC_5155B_S1_DESC
}

"""
A condition to be used against `DetectorsChecklist` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DetectorsChecklistCondition {
  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `detectorTypePrefix` field."""
  detectorTypePrefix: String

  """Checks for equality with the object’s `detectorTypeSuffix` field."""
  detectorTypeSuffix: String

  """Checks for equality with the object’s `detectorSerialNumber` field."""
  detectorSerialNumber: String

  """Checks for equality with the object’s `sensorSerialNumber` field."""
  sensorSerialNumber: String

  """Checks for equality with the object’s `longDate` field."""
  longDate: String

  """Checks for equality with the object’s `shortDate` field."""
  shortDate: String

  """Checks for equality with the object’s `sensorType` field."""
  sensorType: String

  """Checks for equality with the object’s `target` field."""
  target: String

  """Checks for equality with the object’s `lowEu` field."""
  lowEu: String

  """Checks for equality with the object’s `highEu` field."""
  highEu: String

  """Checks for equality with the object’s `engineeringUnits` field."""
  engineeringUnits: String

  """Checks for equality with the object’s `electrolyteName` field."""
  electrolyteName: String

  """Checks for equality with the object’s `oRingName` field."""
  oRingName: String

  """Checks for equality with the object’s `membraneName` field."""
  membraneName: String

  """Checks for equality with the object’s `restrictor` field."""
  restrictor: String

  """Checks for equality with the object’s `battery` field."""
  battery: String

  """Checks for equality with the object’s `seal` field."""
  seal: String

  """Checks for equality with the object’s `calFlowRate` field."""
  calFlowRate: String

  """Checks for equality with the object’s `calGas` field."""
  calGas: String

  """Checks for equality with the object’s `pc5154BS1` field."""
  pc5154BS1: String

  """Checks for equality with the object’s `pc5154BS2` field."""
  pc5154BS2: String

  """Checks for equality with the object’s `pc5155BS3` field."""
  pc5155BS3: String

  """Checks for equality with the object’s `pc5155BS4` field."""
  pc5155BS4: String

  """Checks for equality with the object’s `pc5155BS5` field."""
  pc5155BS5: String

  """Checks for equality with the object’s `pc5155BS1` field."""
  pc5155BS1: String
}

"""
A filter to be used against `DetectorsChecklist` object types. All fields are combined with a logical ‘and.’
"""
input DetectorsChecklistFilter {
  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `detectorTypePrefix` field."""
  detectorTypePrefix: StringFilter

  """Filter by the object’s `detectorTypeSuffix` field."""
  detectorTypeSuffix: StringFilter

  """Filter by the object’s `detectorSerialNumber` field."""
  detectorSerialNumber: StringFilter

  """Filter by the object’s `sensorSerialNumber` field."""
  sensorSerialNumber: StringFilter

  """Filter by the object’s `longDate` field."""
  longDate: StringFilter

  """Filter by the object’s `shortDate` field."""
  shortDate: StringFilter

  """Filter by the object’s `sensorType` field."""
  sensorType: StringFilter

  """Filter by the object’s `target` field."""
  target: StringFilter

  """Filter by the object’s `lowEu` field."""
  lowEu: StringFilter

  """Filter by the object’s `highEu` field."""
  highEu: StringFilter

  """Filter by the object’s `engineeringUnits` field."""
  engineeringUnits: StringFilter

  """Filter by the object’s `electrolyteName` field."""
  electrolyteName: StringFilter

  """Filter by the object’s `oRingName` field."""
  oRingName: StringFilter

  """Filter by the object’s `membraneName` field."""
  membraneName: StringFilter

  """Filter by the object’s `restrictor` field."""
  restrictor: StringFilter

  """Filter by the object’s `battery` field."""
  battery: StringFilter

  """Filter by the object’s `seal` field."""
  seal: StringFilter

  """Filter by the object’s `calFlowRate` field."""
  calFlowRate: StringFilter

  """Filter by the object’s `calGas` field."""
  calGas: StringFilter

  """Filter by the object’s `pc5154BS1` field."""
  pc5154BS1: StringFilter

  """Filter by the object’s `pc5154BS2` field."""
  pc5154BS2: StringFilter

  """Filter by the object’s `pc5155BS3` field."""
  pc5155BS3: StringFilter

  """Filter by the object’s `pc5155BS4` field."""
  pc5155BS4: StringFilter

  """Filter by the object’s `pc5155BS5` field."""
  pc5155BS5: StringFilter

  """Filter by the object’s `pc5155BS1` field."""
  pc5155BS1: StringFilter

  """Checks for all expressions in this list."""
  and: [DetectorsChecklistFilter!]

  """Checks for any expressions in this list."""
  or: [DetectorsChecklistFilter!]

  """Negates the expression."""
  not: DetectorsChecklistFilter
}

"""A connection to a list of `ElectrolyteEntity` values."""
type ElectrolyteEntitiesConnection {
  """A list of `ElectrolyteEntity` objects."""
  nodes: [ElectrolyteEntity!]!

  """
  A list of edges which contains the `ElectrolyteEntity` and cursor to aid in pagination.
  """
  edges: [ElectrolyteEntitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ElectrolyteEntity` you could get from the connection.
  """
  totalCount: Int!
}

type ElectrolyteEntity {
  id: Int
  name: String
  created: Datetime
  omschr: String
  cdartikel: String
  volume: Int
  replacementIntervalMonths: Int
  ownerId: Int
  initials: String
}

"""A `ElectrolyteEntity` edge in the connection."""
type ElectrolyteEntitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ElectrolyteEntity` at the end of the edge."""
  node: ElectrolyteEntity!
}

"""Methods to use when ordering `ElectrolyteEntity`."""
enum ElectrolyteEntitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  VOLUME_ASC
  VOLUME_DESC
  REPLACEMENT_INTERVAL_MONTHS_ASC
  REPLACEMENT_INTERVAL_MONTHS_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  INITIALS_ASC
  INITIALS_DESC
}

"""
A condition to be used against `ElectrolyteEntity` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ElectrolyteEntityCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `volume` field."""
  volume: Int

  """
  Checks for equality with the object’s `replacementIntervalMonths` field.
  """
  replacementIntervalMonths: Int

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `initials` field."""
  initials: String
}

"""
A filter to be used against `ElectrolyteEntity` object types. All fields are combined with a logical ‘and.’
"""
input ElectrolyteEntityFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `volume` field."""
  volume: IntFilter

  """Filter by the object’s `replacementIntervalMonths` field."""
  replacementIntervalMonths: IntFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `initials` field."""
  initials: StringFilter

  """Checks for all expressions in this list."""
  and: [ElectrolyteEntityFilter!]

  """Checks for any expressions in this list."""
  or: [ElectrolyteEntityFilter!]

  """Negates the expression."""
  not: ElectrolyteEntityFilter
}

"""A connection to a list of `FactopdrachtArtikelExclusion` values."""
type FactopdrachtArtikelExclusionsConnection {
  """A list of `FactopdrachtArtikelExclusion` objects."""
  nodes: [FactopdrachtArtikelExclusion!]!

  """
  A list of edges which contains the `FactopdrachtArtikelExclusion` and cursor to aid in pagination.
  """
  edges: [FactopdrachtArtikelExclusionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FactopdrachtArtikelExclusion` you could get from the connection.
  """
  totalCount: Int!
}

type FactopdrachtArtikelExclusion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  factuuropdracht: String!
  cdartikel: String!
}

"""A `FactopdrachtArtikelExclusion` edge in the connection."""
type FactopdrachtArtikelExclusionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FactopdrachtArtikelExclusion` at the end of the edge."""
  node: FactopdrachtArtikelExclusion!
}

"""Methods to use when ordering `FactopdrachtArtikelExclusion`."""
enum FactopdrachtArtikelExclusionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FactopdrachtArtikelExclusion` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input FactopdrachtArtikelExclusionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String
}

"""
A filter to be used against `FactopdrachtArtikelExclusion` object types. All fields are combined with a logical ‘and.’
"""
input FactopdrachtArtikelExclusionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Checks for all expressions in this list."""
  and: [FactopdrachtArtikelExclusionFilter!]

  """Checks for any expressions in this list."""
  or: [FactopdrachtArtikelExclusionFilter!]

  """Negates the expression."""
  not: FactopdrachtArtikelExclusionFilter
}

"""A connection to a list of `FactopdrachtregelAmount` values."""
type FactopdrachtregelAmountsConnection {
  """A list of `FactopdrachtregelAmount` objects."""
  nodes: [FactopdrachtregelAmount!]!

  """
  A list of edges which contains the `FactopdrachtregelAmount` and cursor to aid in pagination.
  """
  edges: [FactopdrachtregelAmountsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FactopdrachtregelAmount` you could get from the connection.
  """
  totalCount: Int!
}

type FactopdrachtregelAmount {
  factuurnummer: String
  factuuropdracht: String
  cdartikel: String
  zoeknaam: String
  cdmagazijn: String
  amount: BigFloat
  amountScheduled: BigFloat
  amountBefore: BigFloat
  amountWk0: BigFloat
  amountWk1: BigFloat
  amountWk2: BigFloat
  amountWk3: BigFloat
  amountWk4: BigFloat
  amountWk5: BigFloat
  amountWk6: BigFloat
  amountWk7: BigFloat
  amountAfter: BigFloat
  amountDp: BigFloat
  amountHold: BigFloat
  amountOpen: BigFloat
  amountUnscheduled: BigFloat
  amountHoldDp: BigFloat
}

"""A `FactopdrachtregelAmount` edge in the connection."""
type FactopdrachtregelAmountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FactopdrachtregelAmount` at the end of the edge."""
  node: FactopdrachtregelAmount!
}

"""Methods to use when ordering `FactopdrachtregelAmount`."""
enum FactopdrachtregelAmountsOrderBy {
  NATURAL
  FACTUURNUMMER_ASC
  FACTUURNUMMER_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  AMOUNT_SCHEDULED_ASC
  AMOUNT_SCHEDULED_DESC
  AMOUNT_BEFORE_ASC
  AMOUNT_BEFORE_DESC
  AMOUNT_WK0_ASC
  AMOUNT_WK0_DESC
  AMOUNT_WK1_ASC
  AMOUNT_WK1_DESC
  AMOUNT_WK2_ASC
  AMOUNT_WK2_DESC
  AMOUNT_WK3_ASC
  AMOUNT_WK3_DESC
  AMOUNT_WK4_ASC
  AMOUNT_WK4_DESC
  AMOUNT_WK5_ASC
  AMOUNT_WK5_DESC
  AMOUNT_WK6_ASC
  AMOUNT_WK6_DESC
  AMOUNT_WK7_ASC
  AMOUNT_WK7_DESC
  AMOUNT_AFTER_ASC
  AMOUNT_AFTER_DESC
  AMOUNT_DP_ASC
  AMOUNT_DP_DESC
  AMOUNT_HOLD_ASC
  AMOUNT_HOLD_DESC
  AMOUNT_OPEN_ASC
  AMOUNT_OPEN_DESC
  AMOUNT_UNSCHEDULED_ASC
  AMOUNT_UNSCHEDULED_DESC
  AMOUNT_HOLD_DP_ASC
  AMOUNT_HOLD_DP_DESC
}

"""
A condition to be used against `FactopdrachtregelAmount` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input FactopdrachtregelAmountCondition {
  """Checks for equality with the object’s `factuurnummer` field."""
  factuurnummer: String

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `amount` field."""
  amount: BigFloat

  """Checks for equality with the object’s `amountScheduled` field."""
  amountScheduled: BigFloat

  """Checks for equality with the object’s `amountBefore` field."""
  amountBefore: BigFloat

  """Checks for equality with the object’s `amountWk0` field."""
  amountWk0: BigFloat

  """Checks for equality with the object’s `amountWk1` field."""
  amountWk1: BigFloat

  """Checks for equality with the object’s `amountWk2` field."""
  amountWk2: BigFloat

  """Checks for equality with the object’s `amountWk3` field."""
  amountWk3: BigFloat

  """Checks for equality with the object’s `amountWk4` field."""
  amountWk4: BigFloat

  """Checks for equality with the object’s `amountWk5` field."""
  amountWk5: BigFloat

  """Checks for equality with the object’s `amountWk6` field."""
  amountWk6: BigFloat

  """Checks for equality with the object’s `amountWk7` field."""
  amountWk7: BigFloat

  """Checks for equality with the object’s `amountAfter` field."""
  amountAfter: BigFloat

  """Checks for equality with the object’s `amountDp` field."""
  amountDp: BigFloat

  """Checks for equality with the object’s `amountHold` field."""
  amountHold: BigFloat

  """Checks for equality with the object’s `amountOpen` field."""
  amountOpen: BigFloat

  """Checks for equality with the object’s `amountUnscheduled` field."""
  amountUnscheduled: BigFloat

  """Checks for equality with the object’s `amountHoldDp` field."""
  amountHoldDp: BigFloat
}

"""
A filter to be used against `FactopdrachtregelAmount` object types. All fields are combined with a logical ‘and.’
"""
input FactopdrachtregelAmountFilter {
  """Filter by the object’s `factuurnummer` field."""
  factuurnummer: StringFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `amount` field."""
  amount: BigFloatFilter

  """Filter by the object’s `amountScheduled` field."""
  amountScheduled: BigFloatFilter

  """Filter by the object’s `amountBefore` field."""
  amountBefore: BigFloatFilter

  """Filter by the object’s `amountWk0` field."""
  amountWk0: BigFloatFilter

  """Filter by the object’s `amountWk1` field."""
  amountWk1: BigFloatFilter

  """Filter by the object’s `amountWk2` field."""
  amountWk2: BigFloatFilter

  """Filter by the object’s `amountWk3` field."""
  amountWk3: BigFloatFilter

  """Filter by the object’s `amountWk4` field."""
  amountWk4: BigFloatFilter

  """Filter by the object’s `amountWk5` field."""
  amountWk5: BigFloatFilter

  """Filter by the object’s `amountWk6` field."""
  amountWk6: BigFloatFilter

  """Filter by the object’s `amountWk7` field."""
  amountWk7: BigFloatFilter

  """Filter by the object’s `amountAfter` field."""
  amountAfter: BigFloatFilter

  """Filter by the object’s `amountDp` field."""
  amountDp: BigFloatFilter

  """Filter by the object’s `amountHold` field."""
  amountHold: BigFloatFilter

  """Filter by the object’s `amountOpen` field."""
  amountOpen: BigFloatFilter

  """Filter by the object’s `amountUnscheduled` field."""
  amountUnscheduled: BigFloatFilter

  """Filter by the object’s `amountHoldDp` field."""
  amountHoldDp: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [FactopdrachtregelAmountFilter!]

  """Checks for any expressions in this list."""
  or: [FactopdrachtregelAmountFilter!]

  """Negates the expression."""
  not: FactopdrachtregelAmountFilter
}

"""A connection to a list of `FactopdrachtregelAmounts2` values."""
type FactopdrachtregelAmounts2SConnection {
  """A list of `FactopdrachtregelAmounts2` objects."""
  nodes: [FactopdrachtregelAmounts2!]!

  """
  A list of edges which contains the `FactopdrachtregelAmounts2` and cursor to aid in pagination.
  """
  edges: [FactopdrachtregelAmounts2SEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FactopdrachtregelAmounts2` you could get from the connection.
  """
  totalCount: Int!
}

type FactopdrachtregelAmounts2 {
  factuurnummer: String
  factuuropdracht: String
  cdartikel: String
  zoeknaam: String
  cdmagazijn: String
  amount: BigFloat
  amountScheduled: BigFloat
  amountBefore: BigFloat
  amountWk0: BigFloat
  amountWk1: BigFloat
  amountWk2: BigFloat
  amountWk3: BigFloat
  amountWk4: BigFloat
  amountWk5: BigFloat
  amountWk6: BigFloat
  amountWk7: BigFloat
  amountAfter: BigFloat
  amountDp: BigFloat
  amountHold: BigFloat
  amountOpen: BigFloat
  amountUnscheduled: BigFloat
  amountHoldDp: BigFloat
}

"""A `FactopdrachtregelAmounts2` edge in the connection."""
type FactopdrachtregelAmounts2SEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FactopdrachtregelAmounts2` at the end of the edge."""
  node: FactopdrachtregelAmounts2!
}

"""Methods to use when ordering `FactopdrachtregelAmounts2`."""
enum FactopdrachtregelAmounts2SOrderBy {
  NATURAL
  FACTUURNUMMER_ASC
  FACTUURNUMMER_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  AMOUNT_SCHEDULED_ASC
  AMOUNT_SCHEDULED_DESC
  AMOUNT_BEFORE_ASC
  AMOUNT_BEFORE_DESC
  AMOUNT_WK0_ASC
  AMOUNT_WK0_DESC
  AMOUNT_WK1_ASC
  AMOUNT_WK1_DESC
  AMOUNT_WK2_ASC
  AMOUNT_WK2_DESC
  AMOUNT_WK3_ASC
  AMOUNT_WK3_DESC
  AMOUNT_WK4_ASC
  AMOUNT_WK4_DESC
  AMOUNT_WK5_ASC
  AMOUNT_WK5_DESC
  AMOUNT_WK6_ASC
  AMOUNT_WK6_DESC
  AMOUNT_WK7_ASC
  AMOUNT_WK7_DESC
  AMOUNT_AFTER_ASC
  AMOUNT_AFTER_DESC
  AMOUNT_DP_ASC
  AMOUNT_DP_DESC
  AMOUNT_HOLD_ASC
  AMOUNT_HOLD_DESC
  AMOUNT_OPEN_ASC
  AMOUNT_OPEN_DESC
  AMOUNT_UNSCHEDULED_ASC
  AMOUNT_UNSCHEDULED_DESC
  AMOUNT_HOLD_DP_ASC
  AMOUNT_HOLD_DP_DESC
}

"""
A condition to be used against `FactopdrachtregelAmounts2` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input FactopdrachtregelAmounts2Condition {
  """Checks for equality with the object’s `factuurnummer` field."""
  factuurnummer: String

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `amount` field."""
  amount: BigFloat

  """Checks for equality with the object’s `amountScheduled` field."""
  amountScheduled: BigFloat

  """Checks for equality with the object’s `amountBefore` field."""
  amountBefore: BigFloat

  """Checks for equality with the object’s `amountWk0` field."""
  amountWk0: BigFloat

  """Checks for equality with the object’s `amountWk1` field."""
  amountWk1: BigFloat

  """Checks for equality with the object’s `amountWk2` field."""
  amountWk2: BigFloat

  """Checks for equality with the object’s `amountWk3` field."""
  amountWk3: BigFloat

  """Checks for equality with the object’s `amountWk4` field."""
  amountWk4: BigFloat

  """Checks for equality with the object’s `amountWk5` field."""
  amountWk5: BigFloat

  """Checks for equality with the object’s `amountWk6` field."""
  amountWk6: BigFloat

  """Checks for equality with the object’s `amountWk7` field."""
  amountWk7: BigFloat

  """Checks for equality with the object’s `amountAfter` field."""
  amountAfter: BigFloat

  """Checks for equality with the object’s `amountDp` field."""
  amountDp: BigFloat

  """Checks for equality with the object’s `amountHold` field."""
  amountHold: BigFloat

  """Checks for equality with the object’s `amountOpen` field."""
  amountOpen: BigFloat

  """Checks for equality with the object’s `amountUnscheduled` field."""
  amountUnscheduled: BigFloat

  """Checks for equality with the object’s `amountHoldDp` field."""
  amountHoldDp: BigFloat
}

"""
A filter to be used against `FactopdrachtregelAmounts2` object types. All fields are combined with a logical ‘and.’
"""
input FactopdrachtregelAmounts2Filter {
  """Filter by the object’s `factuurnummer` field."""
  factuurnummer: StringFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `amount` field."""
  amount: BigFloatFilter

  """Filter by the object’s `amountScheduled` field."""
  amountScheduled: BigFloatFilter

  """Filter by the object’s `amountBefore` field."""
  amountBefore: BigFloatFilter

  """Filter by the object’s `amountWk0` field."""
  amountWk0: BigFloatFilter

  """Filter by the object’s `amountWk1` field."""
  amountWk1: BigFloatFilter

  """Filter by the object’s `amountWk2` field."""
  amountWk2: BigFloatFilter

  """Filter by the object’s `amountWk3` field."""
  amountWk3: BigFloatFilter

  """Filter by the object’s `amountWk4` field."""
  amountWk4: BigFloatFilter

  """Filter by the object’s `amountWk5` field."""
  amountWk5: BigFloatFilter

  """Filter by the object’s `amountWk6` field."""
  amountWk6: BigFloatFilter

  """Filter by the object’s `amountWk7` field."""
  amountWk7: BigFloatFilter

  """Filter by the object’s `amountAfter` field."""
  amountAfter: BigFloatFilter

  """Filter by the object’s `amountDp` field."""
  amountDp: BigFloatFilter

  """Filter by the object’s `amountHold` field."""
  amountHold: BigFloatFilter

  """Filter by the object’s `amountOpen` field."""
  amountOpen: BigFloatFilter

  """Filter by the object’s `amountUnscheduled` field."""
  amountUnscheduled: BigFloatFilter

  """Filter by the object’s `amountHoldDp` field."""
  amountHoldDp: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [FactopdrachtregelAmounts2Filter!]

  """Checks for any expressions in this list."""
  or: [FactopdrachtregelAmounts2Filter!]

  """Negates the expression."""
  not: FactopdrachtregelAmounts2Filter
}

"""A connection to a list of `FactopdrachtregelFilterView` values."""
type FactopdrachtregelFilterViewsConnection {
  """A list of `FactopdrachtregelFilterView` objects."""
  nodes: [FactopdrachtregelFilterView!]!

  """
  A list of edges which contains the `FactopdrachtregelFilterView` and cursor to aid in pagination.
  """
  edges: [FactopdrachtregelFilterViewsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FactopdrachtregelFilterView` you could get from the connection.
  """
  totalCount: Int!
}

type FactopdrachtregelFilterView {
  factuurnummer: String
  factuuropdracht: String
  cdmagazijn: String
  cdartikel: String
  type: String
  yearWeek: Int
  aantalbesteldDp: BigFloat
  aantalbesteldHold: BigFloat
  unsaved: Boolean
  open: Boolean
  overdue: Boolean
  attention: Boolean
  aantalbesteld: BigFloat
  totalAantalbesteld: BigFloat
}

"""A `FactopdrachtregelFilterView` edge in the connection."""
type FactopdrachtregelFilterViewsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FactopdrachtregelFilterView` at the end of the edge."""
  node: FactopdrachtregelFilterView!
}

"""Methods to use when ordering `FactopdrachtregelFilterView`."""
enum FactopdrachtregelFilterViewsOrderBy {
  NATURAL
  FACTUURNUMMER_ASC
  FACTUURNUMMER_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  TYPE_ASC
  TYPE_DESC
  YEAR_WEEK_ASC
  YEAR_WEEK_DESC
  AANTALBESTELD_DP_ASC
  AANTALBESTELD_DP_DESC
  AANTALBESTELD_HOLD_ASC
  AANTALBESTELD_HOLD_DESC
  UNSAVED_ASC
  UNSAVED_DESC
  OPEN_ASC
  OPEN_DESC
  OVERDUE_ASC
  OVERDUE_DESC
  ATTENTION_ASC
  ATTENTION_DESC
  AANTALBESTELD_ASC
  AANTALBESTELD_DESC
  TOTAL_AANTALBESTELD_ASC
  TOTAL_AANTALBESTELD_DESC
}

"""
A condition to be used against `FactopdrachtregelFilterView` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input FactopdrachtregelFilterViewCondition {
  """Checks for equality with the object’s `factuurnummer` field."""
  factuurnummer: String

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `yearWeek` field."""
  yearWeek: Int

  """Checks for equality with the object’s `aantalbesteldDp` field."""
  aantalbesteldDp: BigFloat

  """Checks for equality with the object’s `aantalbesteldHold` field."""
  aantalbesteldHold: BigFloat

  """Checks for equality with the object’s `unsaved` field."""
  unsaved: Boolean

  """Checks for equality with the object’s `open` field."""
  open: Boolean

  """Checks for equality with the object’s `overdue` field."""
  overdue: Boolean

  """Checks for equality with the object’s `attention` field."""
  attention: Boolean

  """Checks for equality with the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloat

  """Checks for equality with the object’s `totalAantalbesteld` field."""
  totalAantalbesteld: BigFloat
}

"""
A filter to be used against `FactopdrachtregelFilterView` object types. All fields are combined with a logical ‘and.’
"""
input FactopdrachtregelFilterViewFilter {
  """Filter by the object’s `factuurnummer` field."""
  factuurnummer: StringFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `yearWeek` field."""
  yearWeek: IntFilter

  """Filter by the object’s `aantalbesteldDp` field."""
  aantalbesteldDp: BigFloatFilter

  """Filter by the object’s `aantalbesteldHold` field."""
  aantalbesteldHold: BigFloatFilter

  """Filter by the object’s `unsaved` field."""
  unsaved: BooleanFilter

  """Filter by the object’s `open` field."""
  open: BooleanFilter

  """Filter by the object’s `overdue` field."""
  overdue: BooleanFilter

  """Filter by the object’s `attention` field."""
  attention: BooleanFilter

  """Filter by the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloatFilter

  """Filter by the object’s `totalAantalbesteld` field."""
  totalAantalbesteld: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [FactopdrachtregelFilterViewFilter!]

  """Checks for any expressions in this list."""
  or: [FactopdrachtregelFilterViewFilter!]

  """Negates the expression."""
  not: FactopdrachtregelFilterViewFilter
}

"""A connection to a list of `FactopdrachtregelIndex` values."""
type FactopdrachtregelIndicesConnection {
  """A list of `FactopdrachtregelIndex` objects."""
  nodes: [FactopdrachtregelIndex!]!

  """
  A list of edges which contains the `FactopdrachtregelIndex` and cursor to aid in pagination.
  """
  edges: [FactopdrachtregelIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FactopdrachtregelIndex` you could get from the connection.
  """
  totalCount: Int!
}

type FactopdrachtregelIndex {
  id: String
  factopdrRglGuid: String
  factuuropdracht: String
  factuurregel: Int
  cdartikel: String
  type: String
  omschr: String
  cdmagazijn: String
  aantalbesteld: BigFloat
  cddossier: String
  factopdrachtregelLineId: Int
  unsaved: Boolean
  status: String
  attention: Boolean
  poNumber: String
  poWeek: String
  targetYearWeek: Int
  calcTargetYearWeek: Int
  aantalbesteldHold: BigFloat
  aantalbesteldDp: BigFloat
  totaalAantalbesteld: BigFloat
  totaalAantalbesteldBefore: BigFloat
  totaalAantalbesteldWk0: BigFloat
  totaalAantalbesteldWk1: BigFloat
  totaalAantalbesteldWk2: BigFloat
  totaalAantalbesteldWk3: BigFloat
  totaalAantalbesteldWk4: BigFloat
  totaalAantalbesteldWk5: BigFloat
  totaalAantalbesteldWk6: BigFloat
  totaalAantalbesteldWk7: BigFloat
  totaalAantalbesteldAfter: BigFloat
  minYearWeek: Int
  factbedragexclInt: Int
  voorraadInt: Int
  gereserveerdInt: Int
  inkopenInt: Int
  ordernummer: String
  deliveryDate: String
  stockCdartikel: String
  overdue: Boolean
}

"""A `FactopdrachtregelIndex` edge in the connection."""
type FactopdrachtregelIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FactopdrachtregelIndex` at the end of the edge."""
  node: FactopdrachtregelIndex!
}

"""Methods to use when ordering `FactopdrachtregelIndex`."""
enum FactopdrachtregelIndicesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FACTOPDR_RGL_GUID_ASC
  FACTOPDR_RGL_GUID_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  FACTUURREGEL_ASC
  FACTUURREGEL_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  TYPE_ASC
  TYPE_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  AANTALBESTELD_ASC
  AANTALBESTELD_DESC
  CDDOSSIER_ASC
  CDDOSSIER_DESC
  FACTOPDRACHTREGEL_LINE_ID_ASC
  FACTOPDRACHTREGEL_LINE_ID_DESC
  UNSAVED_ASC
  UNSAVED_DESC
  STATUS_ASC
  STATUS_DESC
  ATTENTION_ASC
  ATTENTION_DESC
  PO_NUMBER_ASC
  PO_NUMBER_DESC
  PO_WEEK_ASC
  PO_WEEK_DESC
  TARGET_YEAR_WEEK_ASC
  TARGET_YEAR_WEEK_DESC
  CALC_TARGET_YEAR_WEEK_ASC
  CALC_TARGET_YEAR_WEEK_DESC
  AANTALBESTELD_HOLD_ASC
  AANTALBESTELD_HOLD_DESC
  AANTALBESTELD_DP_ASC
  AANTALBESTELD_DP_DESC
  TOTAAL_AANTALBESTELD_ASC
  TOTAAL_AANTALBESTELD_DESC
  TOTAAL_AANTALBESTELD_BEFORE_ASC
  TOTAAL_AANTALBESTELD_BEFORE_DESC
  TOTAAL_AANTALBESTELD_WK0_ASC
  TOTAAL_AANTALBESTELD_WK0_DESC
  TOTAAL_AANTALBESTELD_WK1_ASC
  TOTAAL_AANTALBESTELD_WK1_DESC
  TOTAAL_AANTALBESTELD_WK2_ASC
  TOTAAL_AANTALBESTELD_WK2_DESC
  TOTAAL_AANTALBESTELD_WK3_ASC
  TOTAAL_AANTALBESTELD_WK3_DESC
  TOTAAL_AANTALBESTELD_WK4_ASC
  TOTAAL_AANTALBESTELD_WK4_DESC
  TOTAAL_AANTALBESTELD_WK5_ASC
  TOTAAL_AANTALBESTELD_WK5_DESC
  TOTAAL_AANTALBESTELD_WK6_ASC
  TOTAAL_AANTALBESTELD_WK6_DESC
  TOTAAL_AANTALBESTELD_WK7_ASC
  TOTAAL_AANTALBESTELD_WK7_DESC
  TOTAAL_AANTALBESTELD_AFTER_ASC
  TOTAAL_AANTALBESTELD_AFTER_DESC
  MIN_YEAR_WEEK_ASC
  MIN_YEAR_WEEK_DESC
  FACTBEDRAGEXCL_INT_ASC
  FACTBEDRAGEXCL_INT_DESC
  VOORRAAD_INT_ASC
  VOORRAAD_INT_DESC
  GERESERVEERD_INT_ASC
  GERESERVEERD_INT_DESC
  INKOPEN_INT_ASC
  INKOPEN_INT_DESC
  ORDERNUMMER_ASC
  ORDERNUMMER_DESC
  DELIVERY_DATE_ASC
  DELIVERY_DATE_DESC
  STOCK_CDARTIKEL_ASC
  STOCK_CDARTIKEL_DESC
  OVERDUE_ASC
  OVERDUE_DESC
}

"""
A condition to be used against `FactopdrachtregelIndex` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input FactopdrachtregelIndexCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: String

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `factuurregel` field."""
  factuurregel: Int

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloat

  """Checks for equality with the object’s `cddossier` field."""
  cddossier: String

  """Checks for equality with the object’s `factopdrachtregelLineId` field."""
  factopdrachtregelLineId: Int

  """Checks for equality with the object’s `unsaved` field."""
  unsaved: Boolean

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `attention` field."""
  attention: Boolean

  """Checks for equality with the object’s `poNumber` field."""
  poNumber: String

  """Checks for equality with the object’s `poWeek` field."""
  poWeek: String

  """Checks for equality with the object’s `targetYearWeek` field."""
  targetYearWeek: Int

  """Checks for equality with the object’s `calcTargetYearWeek` field."""
  calcTargetYearWeek: Int

  """Checks for equality with the object’s `aantalbesteldHold` field."""
  aantalbesteldHold: BigFloat

  """Checks for equality with the object’s `aantalbesteldDp` field."""
  aantalbesteldDp: BigFloat

  """Checks for equality with the object’s `totaalAantalbesteld` field."""
  totaalAantalbesteld: BigFloat

  """
  Checks for equality with the object’s `totaalAantalbesteldBefore` field.
  """
  totaalAantalbesteldBefore: BigFloat

  """Checks for equality with the object’s `totaalAantalbesteldWk0` field."""
  totaalAantalbesteldWk0: BigFloat

  """Checks for equality with the object’s `totaalAantalbesteldWk1` field."""
  totaalAantalbesteldWk1: BigFloat

  """Checks for equality with the object’s `totaalAantalbesteldWk2` field."""
  totaalAantalbesteldWk2: BigFloat

  """Checks for equality with the object’s `totaalAantalbesteldWk3` field."""
  totaalAantalbesteldWk3: BigFloat

  """Checks for equality with the object’s `totaalAantalbesteldWk4` field."""
  totaalAantalbesteldWk4: BigFloat

  """Checks for equality with the object’s `totaalAantalbesteldWk5` field."""
  totaalAantalbesteldWk5: BigFloat

  """Checks for equality with the object’s `totaalAantalbesteldWk6` field."""
  totaalAantalbesteldWk6: BigFloat

  """Checks for equality with the object’s `totaalAantalbesteldWk7` field."""
  totaalAantalbesteldWk7: BigFloat

  """
  Checks for equality with the object’s `totaalAantalbesteldAfter` field.
  """
  totaalAantalbesteldAfter: BigFloat

  """Checks for equality with the object’s `minYearWeek` field."""
  minYearWeek: Int

  """Checks for equality with the object’s `factbedragexclInt` field."""
  factbedragexclInt: Int

  """Checks for equality with the object’s `voorraadInt` field."""
  voorraadInt: Int

  """Checks for equality with the object’s `gereserveerdInt` field."""
  gereserveerdInt: Int

  """Checks for equality with the object’s `inkopenInt` field."""
  inkopenInt: Int

  """Checks for equality with the object’s `ordernummer` field."""
  ordernummer: String

  """Checks for equality with the object’s `deliveryDate` field."""
  deliveryDate: String

  """Checks for equality with the object’s `stockCdartikel` field."""
  stockCdartikel: String

  """Checks for equality with the object’s `overdue` field."""
  overdue: Boolean
}

"""
A filter to be used against `FactopdrachtregelIndex` object types. All fields are combined with a logical ‘and.’
"""
input FactopdrachtregelIndexFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: StringFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `factuurregel` field."""
  factuurregel: IntFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloatFilter

  """Filter by the object’s `cddossier` field."""
  cddossier: StringFilter

  """Filter by the object’s `factopdrachtregelLineId` field."""
  factopdrachtregelLineId: IntFilter

  """Filter by the object’s `unsaved` field."""
  unsaved: BooleanFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `attention` field."""
  attention: BooleanFilter

  """Filter by the object’s `poNumber` field."""
  poNumber: StringFilter

  """Filter by the object’s `poWeek` field."""
  poWeek: StringFilter

  """Filter by the object’s `targetYearWeek` field."""
  targetYearWeek: IntFilter

  """Filter by the object’s `calcTargetYearWeek` field."""
  calcTargetYearWeek: IntFilter

  """Filter by the object’s `aantalbesteldHold` field."""
  aantalbesteldHold: BigFloatFilter

  """Filter by the object’s `aantalbesteldDp` field."""
  aantalbesteldDp: BigFloatFilter

  """Filter by the object’s `totaalAantalbesteld` field."""
  totaalAantalbesteld: BigFloatFilter

  """Filter by the object’s `totaalAantalbesteldBefore` field."""
  totaalAantalbesteldBefore: BigFloatFilter

  """Filter by the object’s `totaalAantalbesteldWk0` field."""
  totaalAantalbesteldWk0: BigFloatFilter

  """Filter by the object’s `totaalAantalbesteldWk1` field."""
  totaalAantalbesteldWk1: BigFloatFilter

  """Filter by the object’s `totaalAantalbesteldWk2` field."""
  totaalAantalbesteldWk2: BigFloatFilter

  """Filter by the object’s `totaalAantalbesteldWk3` field."""
  totaalAantalbesteldWk3: BigFloatFilter

  """Filter by the object’s `totaalAantalbesteldWk4` field."""
  totaalAantalbesteldWk4: BigFloatFilter

  """Filter by the object’s `totaalAantalbesteldWk5` field."""
  totaalAantalbesteldWk5: BigFloatFilter

  """Filter by the object’s `totaalAantalbesteldWk6` field."""
  totaalAantalbesteldWk6: BigFloatFilter

  """Filter by the object’s `totaalAantalbesteldWk7` field."""
  totaalAantalbesteldWk7: BigFloatFilter

  """Filter by the object’s `totaalAantalbesteldAfter` field."""
  totaalAantalbesteldAfter: BigFloatFilter

  """Filter by the object’s `minYearWeek` field."""
  minYearWeek: IntFilter

  """Filter by the object’s `factbedragexclInt` field."""
  factbedragexclInt: IntFilter

  """Filter by the object’s `voorraadInt` field."""
  voorraadInt: IntFilter

  """Filter by the object’s `gereserveerdInt` field."""
  gereserveerdInt: IntFilter

  """Filter by the object’s `inkopenInt` field."""
  inkopenInt: IntFilter

  """Filter by the object’s `ordernummer` field."""
  ordernummer: StringFilter

  """Filter by the object’s `deliveryDate` field."""
  deliveryDate: StringFilter

  """Filter by the object’s `stockCdartikel` field."""
  stockCdartikel: StringFilter

  """Filter by the object’s `overdue` field."""
  overdue: BooleanFilter

  """Checks for all expressions in this list."""
  and: [FactopdrachtregelIndexFilter!]

  """Checks for any expressions in this list."""
  or: [FactopdrachtregelIndexFilter!]

  """Negates the expression."""
  not: FactopdrachtregelIndexFilter
}

"""A connection to a list of `FactopdrachtregelLineDate` values."""
type FactopdrachtregelLineDatesConnection {
  """A list of `FactopdrachtregelLineDate` objects."""
  nodes: [FactopdrachtregelLineDate!]!

  """
  A list of edges which contains the `FactopdrachtregelLineDate` and cursor to aid in pagination.
  """
  edges: [FactopdrachtregelLineDatesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FactopdrachtregelLineDate` you could get from the connection.
  """
  totalCount: Int!
}

type FactopdrachtregelLineDate implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  aantalbesteld: BigFloat
  schedule: String!
  factopdrRglGuid: String!
}

"""A `FactopdrachtregelLineDate` edge in the connection."""
type FactopdrachtregelLineDatesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FactopdrachtregelLineDate` at the end of the edge."""
  node: FactopdrachtregelLineDate!
}

"""Methods to use when ordering `FactopdrachtregelLineDate`."""
enum FactopdrachtregelLineDatesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  AANTALBESTELD_ASC
  AANTALBESTELD_DESC
  SCHEDULE_ASC
  SCHEDULE_DESC
  FACTOPDR_RGL_GUID_ASC
  FACTOPDR_RGL_GUID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FactopdrachtregelLineDate` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input FactopdrachtregelLineDateCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloat

  """Checks for equality with the object’s `schedule` field."""
  schedule: String

  """Checks for equality with the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: String
}

"""
A filter to be used against `FactopdrachtregelLineDate` object types. All fields are combined with a logical ‘and.’
"""
input FactopdrachtregelLineDateFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloatFilter

  """Filter by the object’s `schedule` field."""
  schedule: StringFilter

  """Filter by the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: StringFilter

  """Checks for all expressions in this list."""
  and: [FactopdrachtregelLineDateFilter!]

  """Checks for any expressions in this list."""
  or: [FactopdrachtregelLineDateFilter!]

  """Negates the expression."""
  not: FactopdrachtregelLineDateFilter
}

"""A connection to a list of `FactopdrachtregelLineDatesIndex` values."""
type FactopdrachtregelLineDatesIndicesConnection {
  """A list of `FactopdrachtregelLineDatesIndex` objects."""
  nodes: [FactopdrachtregelLineDatesIndex!]!

  """
  A list of edges which contains the `FactopdrachtregelLineDatesIndex` and cursor to aid in pagination.
  """
  edges: [FactopdrachtregelLineDatesIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FactopdrachtregelLineDatesIndex` you could get from the connection.
  """
  totalCount: Int!
}

type FactopdrachtregelLineDatesIndex {
  id: Int
  factopdrRglGuid: String
  schedule: String
  aantalbesteld: BigFloat
  scheduleOverdue: String
  scheduleUnderdue: String
  factuuropdracht: String
}

"""A `FactopdrachtregelLineDatesIndex` edge in the connection."""
type FactopdrachtregelLineDatesIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FactopdrachtregelLineDatesIndex` at the end of the edge."""
  node: FactopdrachtregelLineDatesIndex!
}

"""Methods to use when ordering `FactopdrachtregelLineDatesIndex`."""
enum FactopdrachtregelLineDatesIndicesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FACTOPDR_RGL_GUID_ASC
  FACTOPDR_RGL_GUID_DESC
  SCHEDULE_ASC
  SCHEDULE_DESC
  AANTALBESTELD_ASC
  AANTALBESTELD_DESC
  SCHEDULE_OVERDUE_ASC
  SCHEDULE_OVERDUE_DESC
  SCHEDULE_UNDERDUE_ASC
  SCHEDULE_UNDERDUE_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
}

"""
A condition to be used against `FactopdrachtregelLineDatesIndex` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input FactopdrachtregelLineDatesIndexCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: String

  """Checks for equality with the object’s `schedule` field."""
  schedule: String

  """Checks for equality with the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloat

  """Checks for equality with the object’s `scheduleOverdue` field."""
  scheduleOverdue: String

  """Checks for equality with the object’s `scheduleUnderdue` field."""
  scheduleUnderdue: String

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String
}

"""
A filter to be used against `FactopdrachtregelLineDatesIndex` object types. All fields are combined with a logical ‘and.’
"""
input FactopdrachtregelLineDatesIndexFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: StringFilter

  """Filter by the object’s `schedule` field."""
  schedule: StringFilter

  """Filter by the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloatFilter

  """Filter by the object’s `scheduleOverdue` field."""
  scheduleOverdue: StringFilter

  """Filter by the object’s `scheduleUnderdue` field."""
  scheduleUnderdue: StringFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Checks for all expressions in this list."""
  and: [FactopdrachtregelLineDatesIndexFilter!]

  """Checks for any expressions in this list."""
  or: [FactopdrachtregelLineDatesIndexFilter!]

  """Negates the expression."""
  not: FactopdrachtregelLineDatesIndexFilter
}

"""A connection to a list of `FactopdrachtregelLineDatesTotal` values."""
type FactopdrachtregelLineDatesTotalsConnection {
  """A list of `FactopdrachtregelLineDatesTotal` objects."""
  nodes: [FactopdrachtregelLineDatesTotal!]!

  """
  A list of edges which contains the `FactopdrachtregelLineDatesTotal` and cursor to aid in pagination.
  """
  edges: [FactopdrachtregelLineDatesTotalsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FactopdrachtregelLineDatesTotal` you could get from the connection.
  """
  totalCount: Int!
}

type FactopdrachtregelLineDatesTotal {
  factuuropdracht: String
  totalTurnoverScheduled: Int
  totalTurnoverOverdue: Int
  totalTurnoverWeek1: Int
  totalTurnoverWeek2: Int
  totalTurnoverWeek3: Int
  totalTurnoverWeek4: Int
  totalTurnoverWeek5: Int
  totalTurnoverWeek6: Int
  totalTurnoverWeek7: Int
  totalTurnoverWeek8: Int
  totalTurnoverUnderdue: Int
  totalTurnoverUnscheduled: Int
  totalTurnoverPo: Int
  totalTurnoverDp: Int
  totalTurnoverSc: Int
  totalTurnoverHold: Int
}

"""A `FactopdrachtregelLineDatesTotal` edge in the connection."""
type FactopdrachtregelLineDatesTotalsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FactopdrachtregelLineDatesTotal` at the end of the edge."""
  node: FactopdrachtregelLineDatesTotal!
}

"""Methods to use when ordering `FactopdrachtregelLineDatesTotal`."""
enum FactopdrachtregelLineDatesTotalsOrderBy {
  NATURAL
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  TOTAL_TURNOVER_SCHEDULED_ASC
  TOTAL_TURNOVER_SCHEDULED_DESC
  TOTAL_TURNOVER_OVERDUE_ASC
  TOTAL_TURNOVER_OVERDUE_DESC
  TOTAL_TURNOVER_WEEK_1_ASC
  TOTAL_TURNOVER_WEEK_1_DESC
  TOTAL_TURNOVER_WEEK_2_ASC
  TOTAL_TURNOVER_WEEK_2_DESC
  TOTAL_TURNOVER_WEEK_3_ASC
  TOTAL_TURNOVER_WEEK_3_DESC
  TOTAL_TURNOVER_WEEK_4_ASC
  TOTAL_TURNOVER_WEEK_4_DESC
  TOTAL_TURNOVER_WEEK_5_ASC
  TOTAL_TURNOVER_WEEK_5_DESC
  TOTAL_TURNOVER_WEEK_6_ASC
  TOTAL_TURNOVER_WEEK_6_DESC
  TOTAL_TURNOVER_WEEK_7_ASC
  TOTAL_TURNOVER_WEEK_7_DESC
  TOTAL_TURNOVER_WEEK_8_ASC
  TOTAL_TURNOVER_WEEK_8_DESC
  TOTAL_TURNOVER_UNDERDUE_ASC
  TOTAL_TURNOVER_UNDERDUE_DESC
  TOTAL_TURNOVER_UNSCHEDULED_ASC
  TOTAL_TURNOVER_UNSCHEDULED_DESC
  TOTAL_TURNOVER_PO_ASC
  TOTAL_TURNOVER_PO_DESC
  TOTAL_TURNOVER_DP_ASC
  TOTAL_TURNOVER_DP_DESC
  TOTAL_TURNOVER_SC_ASC
  TOTAL_TURNOVER_SC_DESC
  TOTAL_TURNOVER_HOLD_ASC
  TOTAL_TURNOVER_HOLD_DESC
}

"""
A condition to be used against `FactopdrachtregelLineDatesTotal` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input FactopdrachtregelLineDatesTotalCondition {
  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `totalTurnoverScheduled` field."""
  totalTurnoverScheduled: Int

  """Checks for equality with the object’s `totalTurnoverOverdue` field."""
  totalTurnoverOverdue: Int

  """Checks for equality with the object’s `totalTurnoverWeek1` field."""
  totalTurnoverWeek1: Int

  """Checks for equality with the object’s `totalTurnoverWeek2` field."""
  totalTurnoverWeek2: Int

  """Checks for equality with the object’s `totalTurnoverWeek3` field."""
  totalTurnoverWeek3: Int

  """Checks for equality with the object’s `totalTurnoverWeek4` field."""
  totalTurnoverWeek4: Int

  """Checks for equality with the object’s `totalTurnoverWeek5` field."""
  totalTurnoverWeek5: Int

  """Checks for equality with the object’s `totalTurnoverWeek6` field."""
  totalTurnoverWeek6: Int

  """Checks for equality with the object’s `totalTurnoverWeek7` field."""
  totalTurnoverWeek7: Int

  """Checks for equality with the object’s `totalTurnoverWeek8` field."""
  totalTurnoverWeek8: Int

  """Checks for equality with the object’s `totalTurnoverUnderdue` field."""
  totalTurnoverUnderdue: Int

  """
  Checks for equality with the object’s `totalTurnoverUnscheduled` field.
  """
  totalTurnoverUnscheduled: Int

  """Checks for equality with the object’s `totalTurnoverPo` field."""
  totalTurnoverPo: Int

  """Checks for equality with the object’s `totalTurnoverDp` field."""
  totalTurnoverDp: Int

  """Checks for equality with the object’s `totalTurnoverSc` field."""
  totalTurnoverSc: Int

  """Checks for equality with the object’s `totalTurnoverHold` field."""
  totalTurnoverHold: Int
}

"""
A filter to be used against `FactopdrachtregelLineDatesTotal` object types. All fields are combined with a logical ‘and.’
"""
input FactopdrachtregelLineDatesTotalFilter {
  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `totalTurnoverScheduled` field."""
  totalTurnoverScheduled: IntFilter

  """Filter by the object’s `totalTurnoverOverdue` field."""
  totalTurnoverOverdue: IntFilter

  """Filter by the object’s `totalTurnoverWeek1` field."""
  totalTurnoverWeek1: IntFilter

  """Filter by the object’s `totalTurnoverWeek2` field."""
  totalTurnoverWeek2: IntFilter

  """Filter by the object’s `totalTurnoverWeek3` field."""
  totalTurnoverWeek3: IntFilter

  """Filter by the object’s `totalTurnoverWeek4` field."""
  totalTurnoverWeek4: IntFilter

  """Filter by the object’s `totalTurnoverWeek5` field."""
  totalTurnoverWeek5: IntFilter

  """Filter by the object’s `totalTurnoverWeek6` field."""
  totalTurnoverWeek6: IntFilter

  """Filter by the object’s `totalTurnoverWeek7` field."""
  totalTurnoverWeek7: IntFilter

  """Filter by the object’s `totalTurnoverWeek8` field."""
  totalTurnoverWeek8: IntFilter

  """Filter by the object’s `totalTurnoverUnderdue` field."""
  totalTurnoverUnderdue: IntFilter

  """Filter by the object’s `totalTurnoverUnscheduled` field."""
  totalTurnoverUnscheduled: IntFilter

  """Filter by the object’s `totalTurnoverPo` field."""
  totalTurnoverPo: IntFilter

  """Filter by the object’s `totalTurnoverDp` field."""
  totalTurnoverDp: IntFilter

  """Filter by the object’s `totalTurnoverSc` field."""
  totalTurnoverSc: IntFilter

  """Filter by the object’s `totalTurnoverHold` field."""
  totalTurnoverHold: IntFilter

  """Checks for all expressions in this list."""
  and: [FactopdrachtregelLineDatesTotalFilter!]

  """Checks for any expressions in this list."""
  or: [FactopdrachtregelLineDatesTotalFilter!]

  """Negates the expression."""
  not: FactopdrachtregelLineDatesTotalFilter
}

"""A connection to a list of `FactopdrachtregelLineDatesTotals2` values."""
type FactopdrachtregelLineDatesTotals2SConnection {
  """A list of `FactopdrachtregelLineDatesTotals2` objects."""
  nodes: [FactopdrachtregelLineDatesTotals2!]!

  """
  A list of edges which contains the `FactopdrachtregelLineDatesTotals2` and cursor to aid in pagination.
  """
  edges: [FactopdrachtregelLineDatesTotals2SEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FactopdrachtregelLineDatesTotals2` you could get from the connection.
  """
  totalCount: Int!
}

type FactopdrachtregelLineDatesTotals2 {
  factopdrRglGuid: String
  totalAantalbesteld: BigFloat
}

"""A `FactopdrachtregelLineDatesTotals2` edge in the connection."""
type FactopdrachtregelLineDatesTotals2SEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FactopdrachtregelLineDatesTotals2` at the end of the edge."""
  node: FactopdrachtregelLineDatesTotals2!
}

"""Methods to use when ordering `FactopdrachtregelLineDatesTotals2`."""
enum FactopdrachtregelLineDatesTotals2SOrderBy {
  NATURAL
  FACTOPDR_RGL_GUID_ASC
  FACTOPDR_RGL_GUID_DESC
  TOTAL_AANTALBESTELD_ASC
  TOTAL_AANTALBESTELD_DESC
}

"""
A condition to be used against `FactopdrachtregelLineDatesTotals2` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input FactopdrachtregelLineDatesTotals2Condition {
  """Checks for equality with the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: String

  """Checks for equality with the object’s `totalAantalbesteld` field."""
  totalAantalbesteld: BigFloat
}

"""
A filter to be used against `FactopdrachtregelLineDatesTotals2` object types. All fields are combined with a logical ‘and.’
"""
input FactopdrachtregelLineDatesTotals2Filter {
  """Filter by the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: StringFilter

  """Filter by the object’s `totalAantalbesteld` field."""
  totalAantalbesteld: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [FactopdrachtregelLineDatesTotals2Filter!]

  """Checks for any expressions in this list."""
  or: [FactopdrachtregelLineDatesTotals2Filter!]

  """Negates the expression."""
  not: FactopdrachtregelLineDatesTotals2Filter
}

"""A connection to a list of `FactopdrachtregelLineRemarksIndex` values."""
type FactopdrachtregelLineRemarksIndicesConnection {
  """A list of `FactopdrachtregelLineRemarksIndex` objects."""
  nodes: [FactopdrachtregelLineRemarksIndex!]!

  """
  A list of edges which contains the `FactopdrachtregelLineRemarksIndex` and cursor to aid in pagination.
  """
  edges: [FactopdrachtregelLineRemarksIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FactopdrachtregelLineRemarksIndex` you could get from the connection.
  """
  totalCount: Int!
}

type FactopdrachtregelLineRemarksIndex {
  factopdrachtregelLineRemarkId: Int
  remark: String
  attention: Boolean
  factopdrachtregelId: String
  factuuropdracht: String
  userId: Int
  initials: String
}

"""A `FactopdrachtregelLineRemarksIndex` edge in the connection."""
type FactopdrachtregelLineRemarksIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FactopdrachtregelLineRemarksIndex` at the end of the edge."""
  node: FactopdrachtregelLineRemarksIndex!
}

"""Methods to use when ordering `FactopdrachtregelLineRemarksIndex`."""
enum FactopdrachtregelLineRemarksIndicesOrderBy {
  NATURAL
  FACTOPDRACHTREGEL_LINE_REMARK_ID_ASC
  FACTOPDRACHTREGEL_LINE_REMARK_ID_DESC
  REMARK_ASC
  REMARK_DESC
  ATTENTION_ASC
  ATTENTION_DESC
  FACTOPDRACHTREGEL_ID_ASC
  FACTOPDRACHTREGEL_ID_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  USER_ID_ASC
  USER_ID_DESC
  INITIALS_ASC
  INITIALS_DESC
}

"""
A condition to be used against `FactopdrachtregelLineRemarksIndex` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input FactopdrachtregelLineRemarksIndexCondition {
  """
  Checks for equality with the object’s `factopdrachtregelLineRemarkId` field.
  """
  factopdrachtregelLineRemarkId: Int

  """Checks for equality with the object’s `remark` field."""
  remark: String

  """Checks for equality with the object’s `attention` field."""
  attention: Boolean

  """Checks for equality with the object’s `factopdrachtregelId` field."""
  factopdrachtregelId: String

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `initials` field."""
  initials: String
}

"""
A filter to be used against `FactopdrachtregelLineRemarksIndex` object types. All fields are combined with a logical ‘and.’
"""
input FactopdrachtregelLineRemarksIndexFilter {
  """Filter by the object’s `factopdrachtregelLineRemarkId` field."""
  factopdrachtregelLineRemarkId: IntFilter

  """Filter by the object’s `remark` field."""
  remark: StringFilter

  """Filter by the object’s `attention` field."""
  attention: BooleanFilter

  """Filter by the object’s `factopdrachtregelId` field."""
  factopdrachtregelId: StringFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `initials` field."""
  initials: StringFilter

  """Checks for all expressions in this list."""
  and: [FactopdrachtregelLineRemarksIndexFilter!]

  """Checks for any expressions in this list."""
  or: [FactopdrachtregelLineRemarksIndexFilter!]

  """Negates the expression."""
  not: FactopdrachtregelLineRemarksIndexFilter
}

"""A connection to a list of `FactopdrachtregelLineWeek` values."""
type FactopdrachtregelLineWeeksConnection {
  """A list of `FactopdrachtregelLineWeek` objects."""
  nodes: [FactopdrachtregelLineWeek!]!

  """
  A list of edges which contains the `FactopdrachtregelLineWeek` and cursor to aid in pagination.
  """
  edges: [FactopdrachtregelLineWeeksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FactopdrachtregelLineWeek` you could get from the connection.
  """
  totalCount: Int!
}

type FactopdrachtregelLineWeek {
  id: Int!
  aantalbesteld: BigFloat
  factopdrachtregelLineId: Int!
  yearWeek: Int!
}

"""A `FactopdrachtregelLineWeek` edge in the connection."""
type FactopdrachtregelLineWeeksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FactopdrachtregelLineWeek` at the end of the edge."""
  node: FactopdrachtregelLineWeek!
}

"""Methods to use when ordering `FactopdrachtregelLineWeek`."""
enum FactopdrachtregelLineWeeksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  AANTALBESTELD_ASC
  AANTALBESTELD_DESC
  FACTOPDRACHTREGEL_LINE_ID_ASC
  FACTOPDRACHTREGEL_LINE_ID_DESC
  YEAR_WEEK_ASC
  YEAR_WEEK_DESC
}

"""
A condition to be used against `FactopdrachtregelLineWeek` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input FactopdrachtregelLineWeekCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloat

  """Checks for equality with the object’s `factopdrachtregelLineId` field."""
  factopdrachtregelLineId: Int

  """Checks for equality with the object’s `yearWeek` field."""
  yearWeek: Int
}

"""
A filter to be used against `FactopdrachtregelLineWeek` object types. All fields are combined with a logical ‘and.’
"""
input FactopdrachtregelLineWeekFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloatFilter

  """Filter by the object’s `factopdrachtregelLineId` field."""
  factopdrachtregelLineId: IntFilter

  """Filter by the object’s `yearWeek` field."""
  yearWeek: IntFilter

  """Checks for all expressions in this list."""
  and: [FactopdrachtregelLineWeekFilter!]

  """Checks for any expressions in this list."""
  or: [FactopdrachtregelLineWeekFilter!]

  """Negates the expression."""
  not: FactopdrachtregelLineWeekFilter
}

"""A connection to a list of `FactopdrachtregelLineWeeksIndex` values."""
type FactopdrachtregelLineWeeksIndicesConnection {
  """A list of `FactopdrachtregelLineWeeksIndex` objects."""
  nodes: [FactopdrachtregelLineWeeksIndex!]!

  """
  A list of edges which contains the `FactopdrachtregelLineWeeksIndex` and cursor to aid in pagination.
  """
  edges: [FactopdrachtregelLineWeeksIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FactopdrachtregelLineWeeksIndex` you could get from the connection.
  """
  totalCount: Int!
}

type FactopdrachtregelLineWeeksIndex {
  factopdrachtregelLineWeekId: Int
  aantalbesteld: BigFloat
  yearWeek: Int
  factopdrachtregelId: String
  factuuropdracht: String
}

"""A `FactopdrachtregelLineWeeksIndex` edge in the connection."""
type FactopdrachtregelLineWeeksIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FactopdrachtregelLineWeeksIndex` at the end of the edge."""
  node: FactopdrachtregelLineWeeksIndex!
}

"""Methods to use when ordering `FactopdrachtregelLineWeeksIndex`."""
enum FactopdrachtregelLineWeeksIndicesOrderBy {
  NATURAL
  FACTOPDRACHTREGEL_LINE_WEEK_ID_ASC
  FACTOPDRACHTREGEL_LINE_WEEK_ID_DESC
  AANTALBESTELD_ASC
  AANTALBESTELD_DESC
  YEAR_WEEK_ASC
  YEAR_WEEK_DESC
  FACTOPDRACHTREGEL_ID_ASC
  FACTOPDRACHTREGEL_ID_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
}

"""
A condition to be used against `FactopdrachtregelLineWeeksIndex` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input FactopdrachtregelLineWeeksIndexCondition {
  """
  Checks for equality with the object’s `factopdrachtregelLineWeekId` field.
  """
  factopdrachtregelLineWeekId: Int

  """Checks for equality with the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloat

  """Checks for equality with the object’s `yearWeek` field."""
  yearWeek: Int

  """Checks for equality with the object’s `factopdrachtregelId` field."""
  factopdrachtregelId: String

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String
}

"""
A filter to be used against `FactopdrachtregelLineWeeksIndex` object types. All fields are combined with a logical ‘and.’
"""
input FactopdrachtregelLineWeeksIndexFilter {
  """Filter by the object’s `factopdrachtregelLineWeekId` field."""
  factopdrachtregelLineWeekId: IntFilter

  """Filter by the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloatFilter

  """Filter by the object’s `yearWeek` field."""
  yearWeek: IntFilter

  """Filter by the object’s `factopdrachtregelId` field."""
  factopdrachtregelId: StringFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Checks for all expressions in this list."""
  and: [FactopdrachtregelLineWeeksIndexFilter!]

  """Checks for any expressions in this list."""
  or: [FactopdrachtregelLineWeeksIndexFilter!]

  """Negates the expression."""
  not: FactopdrachtregelLineWeeksIndexFilter
}

"""A connection to a list of `FactopdrachtregelLine` values."""
type FactopdrachtregelLinesConnection {
  """A list of `FactopdrachtregelLine` objects."""
  nodes: [FactopdrachtregelLine!]!

  """
  A list of edges which contains the `FactopdrachtregelLine` and cursor to aid in pagination.
  """
  edges: [FactopdrachtregelLinesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FactopdrachtregelLine` you could get from the connection.
  """
  totalCount: Int!
}

type FactopdrachtregelLine implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  status: String
  factopdrRglGuid: String!
  id: Int!
  poNumber: String
  poWeek: String
  targetDateOld: Date
  attention: Boolean
  aantalbesteldDp: BigFloat
  aantalbesteldHold: BigFloat
  targetYearWeek: Int
}

"""A `FactopdrachtregelLine` edge in the connection."""
type FactopdrachtregelLinesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FactopdrachtregelLine` at the end of the edge."""
  node: FactopdrachtregelLine!
}

"""Methods to use when ordering `FactopdrachtregelLine`."""
enum FactopdrachtregelLinesOrderBy {
  NATURAL
  STATUS_ASC
  STATUS_DESC
  FACTOPDR_RGL_GUID_ASC
  FACTOPDR_RGL_GUID_DESC
  ID_ASC
  ID_DESC
  PO_NUMBER_ASC
  PO_NUMBER_DESC
  PO_WEEK_ASC
  PO_WEEK_DESC
  TARGET_DATE_OLD_ASC
  TARGET_DATE_OLD_DESC
  ATTENTION_ASC
  ATTENTION_DESC
  AANTALBESTELD_DP_ASC
  AANTALBESTELD_DP_DESC
  AANTALBESTELD_HOLD_ASC
  AANTALBESTELD_HOLD_DESC
  TARGET_YEAR_WEEK_ASC
  TARGET_YEAR_WEEK_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FactopdrachtregelLine` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input FactopdrachtregelLineCondition {
  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `poNumber` field."""
  poNumber: String

  """Checks for equality with the object’s `poWeek` field."""
  poWeek: String

  """Checks for equality with the object’s `targetDateOld` field."""
  targetDateOld: Date

  """Checks for equality with the object’s `attention` field."""
  attention: Boolean

  """Checks for equality with the object’s `aantalbesteldDp` field."""
  aantalbesteldDp: BigFloat

  """Checks for equality with the object’s `aantalbesteldHold` field."""
  aantalbesteldHold: BigFloat

  """Checks for equality with the object’s `targetYearWeek` field."""
  targetYearWeek: Int
}

"""
A filter to be used against `FactopdrachtregelLine` object types. All fields are combined with a logical ‘and.’
"""
input FactopdrachtregelLineFilter {
  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: StringFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `poNumber` field."""
  poNumber: StringFilter

  """Filter by the object’s `poWeek` field."""
  poWeek: StringFilter

  """Filter by the object’s `targetDateOld` field."""
  targetDateOld: DateFilter

  """Filter by the object’s `attention` field."""
  attention: BooleanFilter

  """Filter by the object’s `aantalbesteldDp` field."""
  aantalbesteldDp: BigFloatFilter

  """Filter by the object’s `aantalbesteldHold` field."""
  aantalbesteldHold: BigFloatFilter

  """Filter by the object’s `targetYearWeek` field."""
  targetYearWeek: IntFilter

  """Checks for all expressions in this list."""
  and: [FactopdrachtregelLineFilter!]

  """Checks for any expressions in this list."""
  or: [FactopdrachtregelLineFilter!]

  """Negates the expression."""
  not: FactopdrachtregelLineFilter
}

"""A connection to a list of `FactopdrachtregelMv` values."""
type FactopdrachtregelMvsConnection {
  """A list of `FactopdrachtregelMv` objects."""
  nodes: [FactopdrachtregelMv!]!

  """
  A list of edges which contains the `FactopdrachtregelMv` and cursor to aid in pagination.
  """
  edges: [FactopdrachtregelMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FactopdrachtregelMv` you could get from the connection.
  """
  totalCount: Int!
}

type FactopdrachtregelMv {
  factuuropdracht: String
  factuurregel: Int
  hoofdregel: Int
  soort: String
  cdartikel: String
  cdmagazijn: String
  omschr: String
  eenheid: String
  aantaldec: Int
  aantalgeleverd: BigFloat
  prijs: BigFloat
  prijsper: BigFloat
  kortingperc: BigFloat
  factbedragincl: BigFloat
  factbedragexcl: BigFloat
  btwcode: Int
  btwperc: BigFloat
  cdgrbrekening: String
  nettoomzet: BigFloat
  kostprijs: BigFloat
  statcode: String
  aantalbesteld: BigFloat
  aantalleveren: BigFloat
  datum: Date
  cdstatus: String
  aantalnaleveren: BigFloat
  tekstmagb: String
  cdgrbrekomzvj: String
  factbedragexclvj: BigFloat
  aantalgereserv: BigFloat
  kvc: String
  cdkostenplaats: String
  cddossier: String
  cdgrbrekkort: String
  cdwerknemer: String
  weeknummer: Int
  factopdrRglGuid: String
  koppelMetInkoop: String
  cddeelproject: String
  cdtermijn: Int
  bonnummer: String
  projMutsoort: String
  voorschot: Int
  cdgrbkostprijs: String
  cdgrbdekking: String
  samVersie: String
  declarabel: String
  vvbestand: String
  cduursoort: String
  projRegelFactureren: String
  projKostprijs: BigFloat
  projKosten: BigFloat
}

"""A `FactopdrachtregelMv` edge in the connection."""
type FactopdrachtregelMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FactopdrachtregelMv` at the end of the edge."""
  node: FactopdrachtregelMv!
}

"""Methods to use when ordering `FactopdrachtregelMv`."""
enum FactopdrachtregelMvsOrderBy {
  NATURAL
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  FACTUURREGEL_ASC
  FACTUURREGEL_DESC
  HOOFDREGEL_ASC
  HOOFDREGEL_DESC
  SOORT_ASC
  SOORT_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  EENHEID_ASC
  EENHEID_DESC
  AANTALDEC_ASC
  AANTALDEC_DESC
  AANTALGELEVERD_ASC
  AANTALGELEVERD_DESC
  PRIJS_ASC
  PRIJS_DESC
  PRIJSPER_ASC
  PRIJSPER_DESC
  KORTINGPERC_ASC
  KORTINGPERC_DESC
  FACTBEDRAGINCL_ASC
  FACTBEDRAGINCL_DESC
  FACTBEDRAGEXCL_ASC
  FACTBEDRAGEXCL_DESC
  BTWCODE_ASC
  BTWCODE_DESC
  BTWPERC_ASC
  BTWPERC_DESC
  CDGRBREKENING_ASC
  CDGRBREKENING_DESC
  NETTOOMZET_ASC
  NETTOOMZET_DESC
  KOSTPRIJS_ASC
  KOSTPRIJS_DESC
  STATCODE_ASC
  STATCODE_DESC
  AANTALBESTELD_ASC
  AANTALBESTELD_DESC
  AANTALLEVEREN_ASC
  AANTALLEVEREN_DESC
  DATUM_ASC
  DATUM_DESC
  CDSTATUS_ASC
  CDSTATUS_DESC
  AANTALNALEVEREN_ASC
  AANTALNALEVEREN_DESC
  TEKSTMAGB_ASC
  TEKSTMAGB_DESC
  CDGRBREKOMZVJ_ASC
  CDGRBREKOMZVJ_DESC
  FACTBEDRAGEXCLVJ_ASC
  FACTBEDRAGEXCLVJ_DESC
  AANTALGERESERV_ASC
  AANTALGERESERV_DESC
  KVC_ASC
  KVC_DESC
  CDKOSTENPLAATS_ASC
  CDKOSTENPLAATS_DESC
  CDDOSSIER_ASC
  CDDOSSIER_DESC
  CDGRBREKKORT_ASC
  CDGRBREKKORT_DESC
  CDWERKNEMER_ASC
  CDWERKNEMER_DESC
  WEEKNUMMER_ASC
  WEEKNUMMER_DESC
  FACTOPDR_RGL_GUID_ASC
  FACTOPDR_RGL_GUID_DESC
  KOPPEL_MET_INKOOP_ASC
  KOPPEL_MET_INKOOP_DESC
  CDDEELPROJECT_ASC
  CDDEELPROJECT_DESC
  CDTERMIJN_ASC
  CDTERMIJN_DESC
  BONNUMMER_ASC
  BONNUMMER_DESC
  PROJ_MUTSOORT_ASC
  PROJ_MUTSOORT_DESC
  VOORSCHOT_ASC
  VOORSCHOT_DESC
  CDGRBKOSTPRIJS_ASC
  CDGRBKOSTPRIJS_DESC
  CDGRBDEKKING_ASC
  CDGRBDEKKING_DESC
  SAM_VERSIE_ASC
  SAM_VERSIE_DESC
  DECLARABEL_ASC
  DECLARABEL_DESC
  VVBESTAND_ASC
  VVBESTAND_DESC
  CDUURSOORT_ASC
  CDUURSOORT_DESC
  PROJ_REGEL_FACTUREREN_ASC
  PROJ_REGEL_FACTUREREN_DESC
  PROJ_KOSTPRIJS_ASC
  PROJ_KOSTPRIJS_DESC
  PROJ_KOSTEN_ASC
  PROJ_KOSTEN_DESC
}

"""
A condition to be used against `FactopdrachtregelMv` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input FactopdrachtregelMvCondition {
  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `factuurregel` field."""
  factuurregel: Int

  """Checks for equality with the object’s `hoofdregel` field."""
  hoofdregel: Int

  """Checks for equality with the object’s `soort` field."""
  soort: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `eenheid` field."""
  eenheid: String

  """Checks for equality with the object’s `aantaldec` field."""
  aantaldec: Int

  """Checks for equality with the object’s `aantalgeleverd` field."""
  aantalgeleverd: BigFloat

  """Checks for equality with the object’s `prijs` field."""
  prijs: BigFloat

  """Checks for equality with the object’s `prijsper` field."""
  prijsper: BigFloat

  """Checks for equality with the object’s `kortingperc` field."""
  kortingperc: BigFloat

  """Checks for equality with the object’s `factbedragincl` field."""
  factbedragincl: BigFloat

  """Checks for equality with the object’s `factbedragexcl` field."""
  factbedragexcl: BigFloat

  """Checks for equality with the object’s `btwcode` field."""
  btwcode: Int

  """Checks for equality with the object’s `btwperc` field."""
  btwperc: BigFloat

  """Checks for equality with the object’s `cdgrbrekening` field."""
  cdgrbrekening: String

  """Checks for equality with the object’s `nettoomzet` field."""
  nettoomzet: BigFloat

  """Checks for equality with the object’s `kostprijs` field."""
  kostprijs: BigFloat

  """Checks for equality with the object’s `statcode` field."""
  statcode: String

  """Checks for equality with the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloat

  """Checks for equality with the object’s `aantalleveren` field."""
  aantalleveren: BigFloat

  """Checks for equality with the object’s `datum` field."""
  datum: Date

  """Checks for equality with the object’s `cdstatus` field."""
  cdstatus: String

  """Checks for equality with the object’s `aantalnaleveren` field."""
  aantalnaleveren: BigFloat

  """Checks for equality with the object’s `tekstmagb` field."""
  tekstmagb: String

  """Checks for equality with the object’s `cdgrbrekomzvj` field."""
  cdgrbrekomzvj: String

  """Checks for equality with the object’s `factbedragexclvj` field."""
  factbedragexclvj: BigFloat

  """Checks for equality with the object’s `aantalgereserv` field."""
  aantalgereserv: BigFloat

  """Checks for equality with the object’s `kvc` field."""
  kvc: String

  """Checks for equality with the object’s `cdkostenplaats` field."""
  cdkostenplaats: String

  """Checks for equality with the object’s `cddossier` field."""
  cddossier: String

  """Checks for equality with the object’s `cdgrbrekkort` field."""
  cdgrbrekkort: String

  """Checks for equality with the object’s `cdwerknemer` field."""
  cdwerknemer: String

  """Checks for equality with the object’s `weeknummer` field."""
  weeknummer: Int

  """Checks for equality with the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: String

  """Checks for equality with the object’s `koppelMetInkoop` field."""
  koppelMetInkoop: String

  """Checks for equality with the object’s `cddeelproject` field."""
  cddeelproject: String

  """Checks for equality with the object’s `cdtermijn` field."""
  cdtermijn: Int

  """Checks for equality with the object’s `bonnummer` field."""
  bonnummer: String

  """Checks for equality with the object’s `projMutsoort` field."""
  projMutsoort: String

  """Checks for equality with the object’s `voorschot` field."""
  voorschot: Int

  """Checks for equality with the object’s `cdgrbkostprijs` field."""
  cdgrbkostprijs: String

  """Checks for equality with the object’s `cdgrbdekking` field."""
  cdgrbdekking: String

  """Checks for equality with the object’s `samVersie` field."""
  samVersie: String

  """Checks for equality with the object’s `declarabel` field."""
  declarabel: String

  """Checks for equality with the object’s `vvbestand` field."""
  vvbestand: String

  """Checks for equality with the object’s `cduursoort` field."""
  cduursoort: String

  """Checks for equality with the object’s `projRegelFactureren` field."""
  projRegelFactureren: String

  """Checks for equality with the object’s `projKostprijs` field."""
  projKostprijs: BigFloat

  """Checks for equality with the object’s `projKosten` field."""
  projKosten: BigFloat
}

"""
A filter to be used against `FactopdrachtregelMv` object types. All fields are combined with a logical ‘and.’
"""
input FactopdrachtregelMvFilter {
  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `factuurregel` field."""
  factuurregel: IntFilter

  """Filter by the object’s `hoofdregel` field."""
  hoofdregel: IntFilter

  """Filter by the object’s `soort` field."""
  soort: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `eenheid` field."""
  eenheid: StringFilter

  """Filter by the object’s `aantaldec` field."""
  aantaldec: IntFilter

  """Filter by the object’s `aantalgeleverd` field."""
  aantalgeleverd: BigFloatFilter

  """Filter by the object’s `prijs` field."""
  prijs: BigFloatFilter

  """Filter by the object’s `prijsper` field."""
  prijsper: BigFloatFilter

  """Filter by the object’s `kortingperc` field."""
  kortingperc: BigFloatFilter

  """Filter by the object’s `factbedragincl` field."""
  factbedragincl: BigFloatFilter

  """Filter by the object’s `factbedragexcl` field."""
  factbedragexcl: BigFloatFilter

  """Filter by the object’s `btwcode` field."""
  btwcode: IntFilter

  """Filter by the object’s `btwperc` field."""
  btwperc: BigFloatFilter

  """Filter by the object’s `cdgrbrekening` field."""
  cdgrbrekening: StringFilter

  """Filter by the object’s `nettoomzet` field."""
  nettoomzet: BigFloatFilter

  """Filter by the object’s `kostprijs` field."""
  kostprijs: BigFloatFilter

  """Filter by the object’s `statcode` field."""
  statcode: StringFilter

  """Filter by the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloatFilter

  """Filter by the object’s `aantalleveren` field."""
  aantalleveren: BigFloatFilter

  """Filter by the object’s `datum` field."""
  datum: DateFilter

  """Filter by the object’s `cdstatus` field."""
  cdstatus: StringFilter

  """Filter by the object’s `aantalnaleveren` field."""
  aantalnaleveren: BigFloatFilter

  """Filter by the object’s `tekstmagb` field."""
  tekstmagb: StringFilter

  """Filter by the object’s `cdgrbrekomzvj` field."""
  cdgrbrekomzvj: StringFilter

  """Filter by the object’s `factbedragexclvj` field."""
  factbedragexclvj: BigFloatFilter

  """Filter by the object’s `aantalgereserv` field."""
  aantalgereserv: BigFloatFilter

  """Filter by the object’s `kvc` field."""
  kvc: StringFilter

  """Filter by the object’s `cdkostenplaats` field."""
  cdkostenplaats: StringFilter

  """Filter by the object’s `cddossier` field."""
  cddossier: StringFilter

  """Filter by the object’s `cdgrbrekkort` field."""
  cdgrbrekkort: StringFilter

  """Filter by the object’s `cdwerknemer` field."""
  cdwerknemer: StringFilter

  """Filter by the object’s `weeknummer` field."""
  weeknummer: IntFilter

  """Filter by the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: StringFilter

  """Filter by the object’s `koppelMetInkoop` field."""
  koppelMetInkoop: StringFilter

  """Filter by the object’s `cddeelproject` field."""
  cddeelproject: StringFilter

  """Filter by the object’s `cdtermijn` field."""
  cdtermijn: IntFilter

  """Filter by the object’s `bonnummer` field."""
  bonnummer: StringFilter

  """Filter by the object’s `projMutsoort` field."""
  projMutsoort: StringFilter

  """Filter by the object’s `voorschot` field."""
  voorschot: IntFilter

  """Filter by the object’s `cdgrbkostprijs` field."""
  cdgrbkostprijs: StringFilter

  """Filter by the object’s `cdgrbdekking` field."""
  cdgrbdekking: StringFilter

  """Filter by the object’s `samVersie` field."""
  samVersie: StringFilter

  """Filter by the object’s `declarabel` field."""
  declarabel: StringFilter

  """Filter by the object’s `vvbestand` field."""
  vvbestand: StringFilter

  """Filter by the object’s `cduursoort` field."""
  cduursoort: StringFilter

  """Filter by the object’s `projRegelFactureren` field."""
  projRegelFactureren: StringFilter

  """Filter by the object’s `projKostprijs` field."""
  projKostprijs: BigFloatFilter

  """Filter by the object’s `projKosten` field."""
  projKosten: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [FactopdrachtregelMvFilter!]

  """Checks for any expressions in this list."""
  or: [FactopdrachtregelMvFilter!]

  """Negates the expression."""
  not: FactopdrachtregelMvFilter
}

"""A connection to a list of `FactopdrachtregelTotalAmount` values."""
type FactopdrachtregelTotalAmountsConnection {
  """A list of `FactopdrachtregelTotalAmount` objects."""
  nodes: [FactopdrachtregelTotalAmount!]!

  """
  A list of edges which contains the `FactopdrachtregelTotalAmount` and cursor to aid in pagination.
  """
  edges: [FactopdrachtregelTotalAmountsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FactopdrachtregelTotalAmount` you could get from the connection.
  """
  totalCount: Int!
}

type FactopdrachtregelTotalAmount {
  totalAmount: BigFloat
  totalAmountScheduled: BigFloat
  totalAmountBefore: BigFloat
  totalAmountWk0: BigFloat
  totalAmountWk1: BigFloat
  totalAmountWk2: BigFloat
  totalAmountWk3: BigFloat
  totalAmountWk4: BigFloat
  totalAmountWk5: BigFloat
  totalAmountWk6: BigFloat
  totalAmountWk7: BigFloat
  totalAmountAfter: BigFloat
  totalAmountDp: BigFloat
  totalAmountHold: BigFloat
  totalAmountOpen: BigFloat
  totalAmountHoldDp: BigFloat
}

"""A `FactopdrachtregelTotalAmount` edge in the connection."""
type FactopdrachtregelTotalAmountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FactopdrachtregelTotalAmount` at the end of the edge."""
  node: FactopdrachtregelTotalAmount!
}

"""Methods to use when ordering `FactopdrachtregelTotalAmount`."""
enum FactopdrachtregelTotalAmountsOrderBy {
  NATURAL
  TOTAL_AMOUNT_ASC
  TOTAL_AMOUNT_DESC
  TOTAL_AMOUNT_SCHEDULED_ASC
  TOTAL_AMOUNT_SCHEDULED_DESC
  TOTAL_AMOUNT_BEFORE_ASC
  TOTAL_AMOUNT_BEFORE_DESC
  TOTAL_AMOUNT_WK0_ASC
  TOTAL_AMOUNT_WK0_DESC
  TOTAL_AMOUNT_WK1_ASC
  TOTAL_AMOUNT_WK1_DESC
  TOTAL_AMOUNT_WK2_ASC
  TOTAL_AMOUNT_WK2_DESC
  TOTAL_AMOUNT_WK3_ASC
  TOTAL_AMOUNT_WK3_DESC
  TOTAL_AMOUNT_WK4_ASC
  TOTAL_AMOUNT_WK4_DESC
  TOTAL_AMOUNT_WK5_ASC
  TOTAL_AMOUNT_WK5_DESC
  TOTAL_AMOUNT_WK6_ASC
  TOTAL_AMOUNT_WK6_DESC
  TOTAL_AMOUNT_WK7_ASC
  TOTAL_AMOUNT_WK7_DESC
  TOTAL_AMOUNT_AFTER_ASC
  TOTAL_AMOUNT_AFTER_DESC
  TOTAL_AMOUNT_DP_ASC
  TOTAL_AMOUNT_DP_DESC
  TOTAL_AMOUNT_HOLD_ASC
  TOTAL_AMOUNT_HOLD_DESC
  TOTAL_AMOUNT_OPEN_ASC
  TOTAL_AMOUNT_OPEN_DESC
  TOTAL_AMOUNT_HOLD_DP_ASC
  TOTAL_AMOUNT_HOLD_DP_DESC
}

"""
A condition to be used against `FactopdrachtregelTotalAmount` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input FactopdrachtregelTotalAmountCondition {
  """Checks for equality with the object’s `totalAmount` field."""
  totalAmount: BigFloat

  """Checks for equality with the object’s `totalAmountScheduled` field."""
  totalAmountScheduled: BigFloat

  """Checks for equality with the object’s `totalAmountBefore` field."""
  totalAmountBefore: BigFloat

  """Checks for equality with the object’s `totalAmountWk0` field."""
  totalAmountWk0: BigFloat

  """Checks for equality with the object’s `totalAmountWk1` field."""
  totalAmountWk1: BigFloat

  """Checks for equality with the object’s `totalAmountWk2` field."""
  totalAmountWk2: BigFloat

  """Checks for equality with the object’s `totalAmountWk3` field."""
  totalAmountWk3: BigFloat

  """Checks for equality with the object’s `totalAmountWk4` field."""
  totalAmountWk4: BigFloat

  """Checks for equality with the object’s `totalAmountWk5` field."""
  totalAmountWk5: BigFloat

  """Checks for equality with the object’s `totalAmountWk6` field."""
  totalAmountWk6: BigFloat

  """Checks for equality with the object’s `totalAmountWk7` field."""
  totalAmountWk7: BigFloat

  """Checks for equality with the object’s `totalAmountAfter` field."""
  totalAmountAfter: BigFloat

  """Checks for equality with the object’s `totalAmountDp` field."""
  totalAmountDp: BigFloat

  """Checks for equality with the object’s `totalAmountHold` field."""
  totalAmountHold: BigFloat

  """Checks for equality with the object’s `totalAmountOpen` field."""
  totalAmountOpen: BigFloat

  """Checks for equality with the object’s `totalAmountHoldDp` field."""
  totalAmountHoldDp: BigFloat
}

"""
A filter to be used against `FactopdrachtregelTotalAmount` object types. All fields are combined with a logical ‘and.’
"""
input FactopdrachtregelTotalAmountFilter {
  """Filter by the object’s `totalAmount` field."""
  totalAmount: BigFloatFilter

  """Filter by the object’s `totalAmountScheduled` field."""
  totalAmountScheduled: BigFloatFilter

  """Filter by the object’s `totalAmountBefore` field."""
  totalAmountBefore: BigFloatFilter

  """Filter by the object’s `totalAmountWk0` field."""
  totalAmountWk0: BigFloatFilter

  """Filter by the object’s `totalAmountWk1` field."""
  totalAmountWk1: BigFloatFilter

  """Filter by the object’s `totalAmountWk2` field."""
  totalAmountWk2: BigFloatFilter

  """Filter by the object’s `totalAmountWk3` field."""
  totalAmountWk3: BigFloatFilter

  """Filter by the object’s `totalAmountWk4` field."""
  totalAmountWk4: BigFloatFilter

  """Filter by the object’s `totalAmountWk5` field."""
  totalAmountWk5: BigFloatFilter

  """Filter by the object’s `totalAmountWk6` field."""
  totalAmountWk6: BigFloatFilter

  """Filter by the object’s `totalAmountWk7` field."""
  totalAmountWk7: BigFloatFilter

  """Filter by the object’s `totalAmountAfter` field."""
  totalAmountAfter: BigFloatFilter

  """Filter by the object’s `totalAmountDp` field."""
  totalAmountDp: BigFloatFilter

  """Filter by the object’s `totalAmountHold` field."""
  totalAmountHold: BigFloatFilter

  """Filter by the object’s `totalAmountOpen` field."""
  totalAmountOpen: BigFloatFilter

  """Filter by the object’s `totalAmountHoldDp` field."""
  totalAmountHoldDp: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [FactopdrachtregelTotalAmountFilter!]

  """Checks for any expressions in this list."""
  or: [FactopdrachtregelTotalAmountFilter!]

  """Negates the expression."""
  not: FactopdrachtregelTotalAmountFilter
}

"""A connection to a list of `FactureeropdrachtIndex` values."""
type FactureeropdrachtIndicesConnection {
  """A list of `FactureeropdrachtIndex` objects."""
  nodes: [FactureeropdrachtIndex!]!

  """
  A list of edges which contains the `FactureeropdrachtIndex` and cursor to aid in pagination.
  """
  edges: [FactureeropdrachtIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FactureeropdrachtIndex` you could get from the connection.
  """
  totalCount: Int!
}

type FactureeropdrachtIndex {
  factuuropdracht: String
  factuurnummer: String
  referentie: String
  cdbetcond: String
  opdrachtdatum: Date
  zoeknaam: String
}

"""A `FactureeropdrachtIndex` edge in the connection."""
type FactureeropdrachtIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FactureeropdrachtIndex` at the end of the edge."""
  node: FactureeropdrachtIndex!
}

"""Methods to use when ordering `FactureeropdrachtIndex`."""
enum FactureeropdrachtIndicesOrderBy {
  NATURAL
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  FACTUURNUMMER_ASC
  FACTUURNUMMER_DESC
  REFERENTIE_ASC
  REFERENTIE_DESC
  CDBETCOND_ASC
  CDBETCOND_DESC
  OPDRACHTDATUM_ASC
  OPDRACHTDATUM_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
}

"""
A condition to be used against `FactureeropdrachtIndex` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input FactureeropdrachtIndexCondition {
  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `factuurnummer` field."""
  factuurnummer: String

  """Checks for equality with the object’s `referentie` field."""
  referentie: String

  """Checks for equality with the object’s `cdbetcond` field."""
  cdbetcond: String

  """Checks for equality with the object’s `opdrachtdatum` field."""
  opdrachtdatum: Date

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String
}

"""
A filter to be used against `FactureeropdrachtIndex` object types. All fields are combined with a logical ‘and.’
"""
input FactureeropdrachtIndexFilter {
  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `factuurnummer` field."""
  factuurnummer: StringFilter

  """Filter by the object’s `referentie` field."""
  referentie: StringFilter

  """Filter by the object’s `cdbetcond` field."""
  cdbetcond: StringFilter

  """Filter by the object’s `opdrachtdatum` field."""
  opdrachtdatum: DateFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Checks for all expressions in this list."""
  and: [FactureeropdrachtIndexFilter!]

  """Checks for any expressions in this list."""
  or: [FactureeropdrachtIndexFilter!]

  """Negates the expression."""
  not: FactureeropdrachtIndexFilter
}

"""A connection to a list of `FactureeropdrachtMv` values."""
type FactureeropdrachtMvsConnection {
  """A list of `FactureeropdrachtMv` objects."""
  nodes: [FactureeropdrachtMv!]!

  """
  A list of edges which contains the `FactureeropdrachtMv` and cursor to aid in pagination.
  """
  edges: [FactureeropdrachtMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FactureeropdrachtMv` you could get from the connection.
  """
  totalCount: Int!
}

type FactureeropdrachtMv {
  factuuropdracht: String
  cddebiteur: String
  cdfactuur: String
  opdrachtdatum: Date
  cdbetcond: String
  cdlevcond: String
  cdvaluta: String
  cdbtw: String
  btwscenario: Int
  cddossier: String
  referentie: String
  kortingperc: BigFloat
  percgrek: BigFloat
  cdloonwerk: String
  status: String
  adres: String
  afdrukteller: Int
  boekjaar: Int
  periode: Int
  transactie: Int
  factuurnummer: String
  factuurdatum: Date
  cddagboek: String
  kredbepperc: BigFloat
  cdsoort: String
  subadres: String
  magazijnbon: String
  pakbon: String
  factureren: String
  vervolgopdrachtvan: String
  blokkeren: String
  cdbestland: String
  cdkostenplaats: String
  cdstroom: Int
  cdvervoer: Int
  cdverkeer: Int
  cdstelsel: Int
  cdtype: String
  cdverzamel: Int
  ordbevteller: Int
  btwopkredb: String
  bron: String
  abonnement: String
  cdadres: Int
  cdbetwijze1: String
  cdbetwijze2: String
  betaaldbedrag1: BigFloat
  betaaldbedrag2: BigFloat
  kvc: String
  betkortperc: BigFloat
  cdvert: String
  verwerktbo: String
  verwerktvrd: String
  cddebiteurFact: String
  lidnrBijInkorg: String
  cdproject: String
  cdexpediteur: String
  aantalcolli: Int
  aantalpallets: Int
  vrachtgewicht: BigFloat
  cdpersoon: String
  persoon: String
  cdbehandelddoor: String
  behandelddoor: String
  vertegenwoordiger: String
  betkenmerk: String
  gefiatteerd: String
  cdfiatteur: String
  gebruiker: String
  guidItem: String
  sysCreate: String
  sysUpdate: String
  margeblokkade: String
  projFactureren: String
  offertenummer: String
  offertevolgnr: Int
}

"""A `FactureeropdrachtMv` edge in the connection."""
type FactureeropdrachtMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FactureeropdrachtMv` at the end of the edge."""
  node: FactureeropdrachtMv!
}

"""Methods to use when ordering `FactureeropdrachtMv`."""
enum FactureeropdrachtMvsOrderBy {
  NATURAL
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  CDDEBITEUR_ASC
  CDDEBITEUR_DESC
  CDFACTUUR_ASC
  CDFACTUUR_DESC
  OPDRACHTDATUM_ASC
  OPDRACHTDATUM_DESC
  CDBETCOND_ASC
  CDBETCOND_DESC
  CDLEVCOND_ASC
  CDLEVCOND_DESC
  CDVALUTA_ASC
  CDVALUTA_DESC
  CDBTW_ASC
  CDBTW_DESC
  BTWSCENARIO_ASC
  BTWSCENARIO_DESC
  CDDOSSIER_ASC
  CDDOSSIER_DESC
  REFERENTIE_ASC
  REFERENTIE_DESC
  KORTINGPERC_ASC
  KORTINGPERC_DESC
  PERCGREK_ASC
  PERCGREK_DESC
  CDLOONWERK_ASC
  CDLOONWERK_DESC
  STATUS_ASC
  STATUS_DESC
  ADRES_ASC
  ADRES_DESC
  AFDRUKTELLER_ASC
  AFDRUKTELLER_DESC
  BOEKJAAR_ASC
  BOEKJAAR_DESC
  PERIODE_ASC
  PERIODE_DESC
  TRANSACTIE_ASC
  TRANSACTIE_DESC
  FACTUURNUMMER_ASC
  FACTUURNUMMER_DESC
  FACTUURDATUM_ASC
  FACTUURDATUM_DESC
  CDDAGBOEK_ASC
  CDDAGBOEK_DESC
  KREDBEPPERC_ASC
  KREDBEPPERC_DESC
  CDSOORT_ASC
  CDSOORT_DESC
  SUBADRES_ASC
  SUBADRES_DESC
  MAGAZIJNBON_ASC
  MAGAZIJNBON_DESC
  PAKBON_ASC
  PAKBON_DESC
  FACTUREREN_ASC
  FACTUREREN_DESC
  VERVOLGOPDRACHTVAN_ASC
  VERVOLGOPDRACHTVAN_DESC
  BLOKKEREN_ASC
  BLOKKEREN_DESC
  CDBESTLAND_ASC
  CDBESTLAND_DESC
  CDKOSTENPLAATS_ASC
  CDKOSTENPLAATS_DESC
  CDSTROOM_ASC
  CDSTROOM_DESC
  CDVERVOER_ASC
  CDVERVOER_DESC
  CDVERKEER_ASC
  CDVERKEER_DESC
  CDSTELSEL_ASC
  CDSTELSEL_DESC
  CDTYPE_ASC
  CDTYPE_DESC
  CDVERZAMEL_ASC
  CDVERZAMEL_DESC
  ORDBEVTELLER_ASC
  ORDBEVTELLER_DESC
  BTWOPKREDB_ASC
  BTWOPKREDB_DESC
  BRON_ASC
  BRON_DESC
  ABONNEMENT_ASC
  ABONNEMENT_DESC
  CDADRES_ASC
  CDADRES_DESC
  CDBETWIJZE1_ASC
  CDBETWIJZE1_DESC
  CDBETWIJZE2_ASC
  CDBETWIJZE2_DESC
  BETAALDBEDRAG1_ASC
  BETAALDBEDRAG1_DESC
  BETAALDBEDRAG2_ASC
  BETAALDBEDRAG2_DESC
  KVC_ASC
  KVC_DESC
  BETKORTPERC_ASC
  BETKORTPERC_DESC
  CDVERT_ASC
  CDVERT_DESC
  VERWERKTBO_ASC
  VERWERKTBO_DESC
  VERWERKTVRD_ASC
  VERWERKTVRD_DESC
  CDDEBITEUR_FACT_ASC
  CDDEBITEUR_FACT_DESC
  LIDNR_BIJ_INKORG_ASC
  LIDNR_BIJ_INKORG_DESC
  CDPROJECT_ASC
  CDPROJECT_DESC
  CDEXPEDITEUR_ASC
  CDEXPEDITEUR_DESC
  AANTALCOLLI_ASC
  AANTALCOLLI_DESC
  AANTALPALLETS_ASC
  AANTALPALLETS_DESC
  VRACHTGEWICHT_ASC
  VRACHTGEWICHT_DESC
  CDPERSOON_ASC
  CDPERSOON_DESC
  PERSOON_ASC
  PERSOON_DESC
  CDBEHANDELDDOOR_ASC
  CDBEHANDELDDOOR_DESC
  BEHANDELDDOOR_ASC
  BEHANDELDDOOR_DESC
  VERTEGENWOORDIGER_ASC
  VERTEGENWOORDIGER_DESC
  BETKENMERK_ASC
  BETKENMERK_DESC
  GEFIATTEERD_ASC
  GEFIATTEERD_DESC
  CDFIATTEUR_ASC
  CDFIATTEUR_DESC
  GEBRUIKER_ASC
  GEBRUIKER_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  SYS_CREATE_ASC
  SYS_CREATE_DESC
  SYS_UPDATE_ASC
  SYS_UPDATE_DESC
  MARGEBLOKKADE_ASC
  MARGEBLOKKADE_DESC
  PROJ_FACTUREREN_ASC
  PROJ_FACTUREREN_DESC
  OFFERTENUMMER_ASC
  OFFERTENUMMER_DESC
  OFFERTEVOLGNR_ASC
  OFFERTEVOLGNR_DESC
}

"""
A condition to be used against `FactureeropdrachtMv` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input FactureeropdrachtMvCondition {
  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `cddebiteur` field."""
  cddebiteur: String

  """Checks for equality with the object’s `cdfactuur` field."""
  cdfactuur: String

  """Checks for equality with the object’s `opdrachtdatum` field."""
  opdrachtdatum: Date

  """Checks for equality with the object’s `cdbetcond` field."""
  cdbetcond: String

  """Checks for equality with the object’s `cdlevcond` field."""
  cdlevcond: String

  """Checks for equality with the object’s `cdvaluta` field."""
  cdvaluta: String

  """Checks for equality with the object’s `cdbtw` field."""
  cdbtw: String

  """Checks for equality with the object’s `btwscenario` field."""
  btwscenario: Int

  """Checks for equality with the object’s `cddossier` field."""
  cddossier: String

  """Checks for equality with the object’s `referentie` field."""
  referentie: String

  """Checks for equality with the object’s `kortingperc` field."""
  kortingperc: BigFloat

  """Checks for equality with the object’s `percgrek` field."""
  percgrek: BigFloat

  """Checks for equality with the object’s `cdloonwerk` field."""
  cdloonwerk: String

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `adres` field."""
  adres: String

  """Checks for equality with the object’s `afdrukteller` field."""
  afdrukteller: Int

  """Checks for equality with the object’s `boekjaar` field."""
  boekjaar: Int

  """Checks for equality with the object’s `periode` field."""
  periode: Int

  """Checks for equality with the object’s `transactie` field."""
  transactie: Int

  """Checks for equality with the object’s `factuurnummer` field."""
  factuurnummer: String

  """Checks for equality with the object’s `factuurdatum` field."""
  factuurdatum: Date

  """Checks for equality with the object’s `cddagboek` field."""
  cddagboek: String

  """Checks for equality with the object’s `kredbepperc` field."""
  kredbepperc: BigFloat

  """Checks for equality with the object’s `cdsoort` field."""
  cdsoort: String

  """Checks for equality with the object’s `subadres` field."""
  subadres: String

  """Checks for equality with the object’s `magazijnbon` field."""
  magazijnbon: String

  """Checks for equality with the object’s `pakbon` field."""
  pakbon: String

  """Checks for equality with the object’s `factureren` field."""
  factureren: String

  """Checks for equality with the object’s `vervolgopdrachtvan` field."""
  vervolgopdrachtvan: String

  """Checks for equality with the object’s `blokkeren` field."""
  blokkeren: String

  """Checks for equality with the object’s `cdbestland` field."""
  cdbestland: String

  """Checks for equality with the object’s `cdkostenplaats` field."""
  cdkostenplaats: String

  """Checks for equality with the object’s `cdstroom` field."""
  cdstroom: Int

  """Checks for equality with the object’s `cdvervoer` field."""
  cdvervoer: Int

  """Checks for equality with the object’s `cdverkeer` field."""
  cdverkeer: Int

  """Checks for equality with the object’s `cdstelsel` field."""
  cdstelsel: Int

  """Checks for equality with the object’s `cdtype` field."""
  cdtype: String

  """Checks for equality with the object’s `cdverzamel` field."""
  cdverzamel: Int

  """Checks for equality with the object’s `ordbevteller` field."""
  ordbevteller: Int

  """Checks for equality with the object’s `btwopkredb` field."""
  btwopkredb: String

  """Checks for equality with the object’s `bron` field."""
  bron: String

  """Checks for equality with the object’s `abonnement` field."""
  abonnement: String

  """Checks for equality with the object’s `cdadres` field."""
  cdadres: Int

  """Checks for equality with the object’s `cdbetwijze1` field."""
  cdbetwijze1: String

  """Checks for equality with the object’s `cdbetwijze2` field."""
  cdbetwijze2: String

  """Checks for equality with the object’s `betaaldbedrag1` field."""
  betaaldbedrag1: BigFloat

  """Checks for equality with the object’s `betaaldbedrag2` field."""
  betaaldbedrag2: BigFloat

  """Checks for equality with the object’s `kvc` field."""
  kvc: String

  """Checks for equality with the object’s `betkortperc` field."""
  betkortperc: BigFloat

  """Checks for equality with the object’s `cdvert` field."""
  cdvert: String

  """Checks for equality with the object’s `verwerktbo` field."""
  verwerktbo: String

  """Checks for equality with the object’s `verwerktvrd` field."""
  verwerktvrd: String

  """Checks for equality with the object’s `cddebiteurFact` field."""
  cddebiteurFact: String

  """Checks for equality with the object’s `lidnrBijInkorg` field."""
  lidnrBijInkorg: String

  """Checks for equality with the object’s `cdproject` field."""
  cdproject: String

  """Checks for equality with the object’s `cdexpediteur` field."""
  cdexpediteur: String

  """Checks for equality with the object’s `aantalcolli` field."""
  aantalcolli: Int

  """Checks for equality with the object’s `aantalpallets` field."""
  aantalpallets: Int

  """Checks for equality with the object’s `vrachtgewicht` field."""
  vrachtgewicht: BigFloat

  """Checks for equality with the object’s `cdpersoon` field."""
  cdpersoon: String

  """Checks for equality with the object’s `persoon` field."""
  persoon: String

  """Checks for equality with the object’s `cdbehandelddoor` field."""
  cdbehandelddoor: String

  """Checks for equality with the object’s `behandelddoor` field."""
  behandelddoor: String

  """Checks for equality with the object’s `vertegenwoordiger` field."""
  vertegenwoordiger: String

  """Checks for equality with the object’s `betkenmerk` field."""
  betkenmerk: String

  """Checks for equality with the object’s `gefiatteerd` field."""
  gefiatteerd: String

  """Checks for equality with the object’s `cdfiatteur` field."""
  cdfiatteur: String

  """Checks for equality with the object’s `gebruiker` field."""
  gebruiker: String

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `sysCreate` field."""
  sysCreate: String

  """Checks for equality with the object’s `sysUpdate` field."""
  sysUpdate: String

  """Checks for equality with the object’s `margeblokkade` field."""
  margeblokkade: String

  """Checks for equality with the object’s `projFactureren` field."""
  projFactureren: String

  """Checks for equality with the object’s `offertenummer` field."""
  offertenummer: String

  """Checks for equality with the object’s `offertevolgnr` field."""
  offertevolgnr: Int
}

"""
A filter to be used against `FactureeropdrachtMv` object types. All fields are combined with a logical ‘and.’
"""
input FactureeropdrachtMvFilter {
  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `cddebiteur` field."""
  cddebiteur: StringFilter

  """Filter by the object’s `cdfactuur` field."""
  cdfactuur: StringFilter

  """Filter by the object’s `opdrachtdatum` field."""
  opdrachtdatum: DateFilter

  """Filter by the object’s `cdbetcond` field."""
  cdbetcond: StringFilter

  """Filter by the object’s `cdlevcond` field."""
  cdlevcond: StringFilter

  """Filter by the object’s `cdvaluta` field."""
  cdvaluta: StringFilter

  """Filter by the object’s `cdbtw` field."""
  cdbtw: StringFilter

  """Filter by the object’s `btwscenario` field."""
  btwscenario: IntFilter

  """Filter by the object’s `cddossier` field."""
  cddossier: StringFilter

  """Filter by the object’s `referentie` field."""
  referentie: StringFilter

  """Filter by the object’s `kortingperc` field."""
  kortingperc: BigFloatFilter

  """Filter by the object’s `percgrek` field."""
  percgrek: BigFloatFilter

  """Filter by the object’s `cdloonwerk` field."""
  cdloonwerk: StringFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `adres` field."""
  adres: StringFilter

  """Filter by the object’s `afdrukteller` field."""
  afdrukteller: IntFilter

  """Filter by the object’s `boekjaar` field."""
  boekjaar: IntFilter

  """Filter by the object’s `periode` field."""
  periode: IntFilter

  """Filter by the object’s `transactie` field."""
  transactie: IntFilter

  """Filter by the object’s `factuurnummer` field."""
  factuurnummer: StringFilter

  """Filter by the object’s `factuurdatum` field."""
  factuurdatum: DateFilter

  """Filter by the object’s `cddagboek` field."""
  cddagboek: StringFilter

  """Filter by the object’s `kredbepperc` field."""
  kredbepperc: BigFloatFilter

  """Filter by the object’s `cdsoort` field."""
  cdsoort: StringFilter

  """Filter by the object’s `subadres` field."""
  subadres: StringFilter

  """Filter by the object’s `magazijnbon` field."""
  magazijnbon: StringFilter

  """Filter by the object’s `pakbon` field."""
  pakbon: StringFilter

  """Filter by the object’s `factureren` field."""
  factureren: StringFilter

  """Filter by the object’s `vervolgopdrachtvan` field."""
  vervolgopdrachtvan: StringFilter

  """Filter by the object’s `blokkeren` field."""
  blokkeren: StringFilter

  """Filter by the object’s `cdbestland` field."""
  cdbestland: StringFilter

  """Filter by the object’s `cdkostenplaats` field."""
  cdkostenplaats: StringFilter

  """Filter by the object’s `cdstroom` field."""
  cdstroom: IntFilter

  """Filter by the object’s `cdvervoer` field."""
  cdvervoer: IntFilter

  """Filter by the object’s `cdverkeer` field."""
  cdverkeer: IntFilter

  """Filter by the object’s `cdstelsel` field."""
  cdstelsel: IntFilter

  """Filter by the object’s `cdtype` field."""
  cdtype: StringFilter

  """Filter by the object’s `cdverzamel` field."""
  cdverzamel: IntFilter

  """Filter by the object’s `ordbevteller` field."""
  ordbevteller: IntFilter

  """Filter by the object’s `btwopkredb` field."""
  btwopkredb: StringFilter

  """Filter by the object’s `bron` field."""
  bron: StringFilter

  """Filter by the object’s `abonnement` field."""
  abonnement: StringFilter

  """Filter by the object’s `cdadres` field."""
  cdadres: IntFilter

  """Filter by the object’s `cdbetwijze1` field."""
  cdbetwijze1: StringFilter

  """Filter by the object’s `cdbetwijze2` field."""
  cdbetwijze2: StringFilter

  """Filter by the object’s `betaaldbedrag1` field."""
  betaaldbedrag1: BigFloatFilter

  """Filter by the object’s `betaaldbedrag2` field."""
  betaaldbedrag2: BigFloatFilter

  """Filter by the object’s `kvc` field."""
  kvc: StringFilter

  """Filter by the object’s `betkortperc` field."""
  betkortperc: BigFloatFilter

  """Filter by the object’s `cdvert` field."""
  cdvert: StringFilter

  """Filter by the object’s `verwerktbo` field."""
  verwerktbo: StringFilter

  """Filter by the object’s `verwerktvrd` field."""
  verwerktvrd: StringFilter

  """Filter by the object’s `cddebiteurFact` field."""
  cddebiteurFact: StringFilter

  """Filter by the object’s `lidnrBijInkorg` field."""
  lidnrBijInkorg: StringFilter

  """Filter by the object’s `cdproject` field."""
  cdproject: StringFilter

  """Filter by the object’s `cdexpediteur` field."""
  cdexpediteur: StringFilter

  """Filter by the object’s `aantalcolli` field."""
  aantalcolli: IntFilter

  """Filter by the object’s `aantalpallets` field."""
  aantalpallets: IntFilter

  """Filter by the object’s `vrachtgewicht` field."""
  vrachtgewicht: BigFloatFilter

  """Filter by the object’s `cdpersoon` field."""
  cdpersoon: StringFilter

  """Filter by the object’s `persoon` field."""
  persoon: StringFilter

  """Filter by the object’s `cdbehandelddoor` field."""
  cdbehandelddoor: StringFilter

  """Filter by the object’s `behandelddoor` field."""
  behandelddoor: StringFilter

  """Filter by the object’s `vertegenwoordiger` field."""
  vertegenwoordiger: StringFilter

  """Filter by the object’s `betkenmerk` field."""
  betkenmerk: StringFilter

  """Filter by the object’s `gefiatteerd` field."""
  gefiatteerd: StringFilter

  """Filter by the object’s `cdfiatteur` field."""
  cdfiatteur: StringFilter

  """Filter by the object’s `gebruiker` field."""
  gebruiker: StringFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `sysCreate` field."""
  sysCreate: StringFilter

  """Filter by the object’s `sysUpdate` field."""
  sysUpdate: StringFilter

  """Filter by the object’s `margeblokkade` field."""
  margeblokkade: StringFilter

  """Filter by the object’s `projFactureren` field."""
  projFactureren: StringFilter

  """Filter by the object’s `offertenummer` field."""
  offertenummer: StringFilter

  """Filter by the object’s `offertevolgnr` field."""
  offertevolgnr: IntFilter

  """Checks for all expressions in this list."""
  and: [FactureeropdrachtMvFilter!]

  """Checks for any expressions in this list."""
  or: [FactureeropdrachtMvFilter!]

  """Negates the expression."""
  not: FactureeropdrachtMvFilter
}

"""A connection to a list of `FilterEntity` values."""
type FilterEntitiesConnection {
  """A list of `FilterEntity` objects."""
  nodes: [FilterEntity!]!

  """
  A list of edges which contains the `FilterEntity` and cursor to aid in pagination.
  """
  edges: [FilterEntitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FilterEntity` you could get from the connection."""
  totalCount: Int!
}

type FilterEntity {
  id: Int
  name: String
  created: Datetime
  omschr: String
  cdartikel: String
  replacementIntervalMonths: Int
  consumable: Boolean
  ownerId: Int
  initials: String
}

"""A `FilterEntity` edge in the connection."""
type FilterEntitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FilterEntity` at the end of the edge."""
  node: FilterEntity!
}

"""Methods to use when ordering `FilterEntity`."""
enum FilterEntitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  REPLACEMENT_INTERVAL_MONTHS_ASC
  REPLACEMENT_INTERVAL_MONTHS_DESC
  CONSUMABLE_ASC
  CONSUMABLE_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  INITIALS_ASC
  INITIALS_DESC
}

"""
A condition to be used against `FilterEntity` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FilterEntityCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """
  Checks for equality with the object’s `replacementIntervalMonths` field.
  """
  replacementIntervalMonths: Int

  """Checks for equality with the object’s `consumable` field."""
  consumable: Boolean

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `initials` field."""
  initials: String
}

"""
A filter to be used against `FilterEntity` object types. All fields are combined with a logical ‘and.’
"""
input FilterEntityFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `replacementIntervalMonths` field."""
  replacementIntervalMonths: IntFilter

  """Filter by the object’s `consumable` field."""
  consumable: BooleanFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `initials` field."""
  initials: StringFilter

  """Checks for all expressions in this list."""
  and: [FilterEntityFilter!]

  """Checks for any expressions in this list."""
  or: [FilterEntityFilter!]

  """Negates the expression."""
  not: FilterEntityFilter
}

"""A connection to a list of `FloorEntity` values."""
type FloorEntitiesConnection {
  """A list of `FloorEntity` objects."""
  nodes: [FloorEntity!]!

  """
  A list of edges which contains the `FloorEntity` and cursor to aid in pagination.
  """
  edges: [FloorEntitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FloorEntity` you could get from the connection."""
  totalCount: Int!
}

type FloorEntity {
  id: Int
  name: String
  created: Datetime
  buildingId: Int
  buildingName: String
  endUserId: Int
  endUserName: String
  ownerId: Int
  initials: String
}

"""A `FloorEntity` edge in the connection."""
type FloorEntitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FloorEntity` at the end of the edge."""
  node: FloorEntity!
}

"""Methods to use when ordering `FloorEntity`."""
enum FloorEntitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  BUILDING_ID_ASC
  BUILDING_ID_DESC
  BUILDING_NAME_ASC
  BUILDING_NAME_DESC
  END_USER_ID_ASC
  END_USER_ID_DESC
  END_USER_NAME_ASC
  END_USER_NAME_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  INITIALS_ASC
  INITIALS_DESC
}

"""
A condition to be used against `FloorEntity` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FloorEntityCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `buildingId` field."""
  buildingId: Int

  """Checks for equality with the object’s `buildingName` field."""
  buildingName: String

  """Checks for equality with the object’s `endUserId` field."""
  endUserId: Int

  """Checks for equality with the object’s `endUserName` field."""
  endUserName: String

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `initials` field."""
  initials: String
}

"""
A filter to be used against `FloorEntity` object types. All fields are combined with a logical ‘and.’
"""
input FloorEntityFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `buildingId` field."""
  buildingId: IntFilter

  """Filter by the object’s `buildingName` field."""
  buildingName: StringFilter

  """Filter by the object’s `endUserId` field."""
  endUserId: IntFilter

  """Filter by the object’s `endUserName` field."""
  endUserName: StringFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `initials` field."""
  initials: StringFilter

  """Checks for all expressions in this list."""
  and: [FloorEntityFilter!]

  """Checks for any expressions in this list."""
  or: [FloorEntityFilter!]

  """Negates the expression."""
  not: FloorEntityFilter
}

"""A connection to a list of `Inkoopgegeven` values."""
type InkoopgegevensConnection {
  """A list of `Inkoopgegeven` objects."""
  nodes: [Inkoopgegeven!]!

  """
  A list of edges which contains the `Inkoopgegeven` and cursor to aid in pagination.
  """
  edges: [InkoopgegevensEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Inkoopgegeven` you could get from the connection."""
  totalCount: Int!
}

type Inkoopgegeven implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  cdartikel: String!
  inkvolgnr: Int!
  cdcrediteur: String!
  voorkeur: String!
  bestcode: String
  cdvaluta: String
  inkoopprijs: BigFloat
  kortingperc: BigFloat
  besthoeveelheid: BigFloat
  opslpercinkoop: BigFloat
}

"""A `Inkoopgegeven` edge in the connection."""
type InkoopgegevensEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Inkoopgegeven` at the end of the edge."""
  node: Inkoopgegeven!
}

"""Methods to use when ordering `Inkoopgegeven`."""
enum InkoopgegevensOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  INKVOLGNR_ASC
  INKVOLGNR_DESC
  CDCREDITEUR_ASC
  CDCREDITEUR_DESC
  VOORKEUR_ASC
  VOORKEUR_DESC
  BESTCODE_ASC
  BESTCODE_DESC
  CDVALUTA_ASC
  CDVALUTA_DESC
  INKOOPPRIJS_ASC
  INKOOPPRIJS_DESC
  KORTINGPERC_ASC
  KORTINGPERC_DESC
  BESTHOEVEELHEID_ASC
  BESTHOEVEELHEID_DESC
  OPSLPERCINKOOP_ASC
  OPSLPERCINKOOP_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Inkoopgegeven` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input InkoopgegevenCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `inkvolgnr` field."""
  inkvolgnr: Int

  """Checks for equality with the object’s `cdcrediteur` field."""
  cdcrediteur: String

  """Checks for equality with the object’s `voorkeur` field."""
  voorkeur: String

  """Checks for equality with the object’s `bestcode` field."""
  bestcode: String

  """Checks for equality with the object’s `cdvaluta` field."""
  cdvaluta: String

  """Checks for equality with the object’s `inkoopprijs` field."""
  inkoopprijs: BigFloat

  """Checks for equality with the object’s `kortingperc` field."""
  kortingperc: BigFloat

  """Checks for equality with the object’s `besthoeveelheid` field."""
  besthoeveelheid: BigFloat

  """Checks for equality with the object’s `opslpercinkoop` field."""
  opslpercinkoop: BigFloat
}

"""
A filter to be used against `Inkoopgegeven` object types. All fields are combined with a logical ‘and.’
"""
input InkoopgegevenFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `inkvolgnr` field."""
  inkvolgnr: IntFilter

  """Filter by the object’s `cdcrediteur` field."""
  cdcrediteur: StringFilter

  """Filter by the object’s `voorkeur` field."""
  voorkeur: StringFilter

  """Filter by the object’s `bestcode` field."""
  bestcode: StringFilter

  """Filter by the object’s `cdvaluta` field."""
  cdvaluta: StringFilter

  """Filter by the object’s `inkoopprijs` field."""
  inkoopprijs: BigFloatFilter

  """Filter by the object’s `kortingperc` field."""
  kortingperc: BigFloatFilter

  """Filter by the object’s `besthoeveelheid` field."""
  besthoeveelheid: BigFloatFilter

  """Filter by the object’s `opslpercinkoop` field."""
  opslpercinkoop: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [InkoopgegevenFilter!]

  """Checks for any expressions in this list."""
  or: [InkoopgegevenFilter!]

  """Negates the expression."""
  not: InkoopgegevenFilter
}

"""A connection to a list of `InkoopgegevensFactopdrachtregel` values."""
type InkoopgegevensFactopdrachtregelsConnection {
  """A list of `InkoopgegevensFactopdrachtregel` objects."""
  nodes: [InkoopgegevensFactopdrachtregel!]!

  """
  A list of edges which contains the `InkoopgegevensFactopdrachtregel` and cursor to aid in pagination.
  """
  edges: [InkoopgegevensFactopdrachtregelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `InkoopgegevensFactopdrachtregel` you could get from the connection.
  """
  totalCount: Int!
}

type InkoopgegevensFactopdrachtregel {
  factuuropdracht: String
  cdcrediteur: String
  cdartikel: String
  bestcode: String
  voorkeur: String
  omschr: String
  aantalbesteld: BigFloat
}

"""A `InkoopgegevensFactopdrachtregel` edge in the connection."""
type InkoopgegevensFactopdrachtregelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `InkoopgegevensFactopdrachtregel` at the end of the edge."""
  node: InkoopgegevensFactopdrachtregel!
}

"""Methods to use when ordering `InkoopgegevensFactopdrachtregel`."""
enum InkoopgegevensFactopdrachtregelsOrderBy {
  NATURAL
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  CDCREDITEUR_ASC
  CDCREDITEUR_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  BESTCODE_ASC
  BESTCODE_DESC
  VOORKEUR_ASC
  VOORKEUR_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  AANTALBESTELD_ASC
  AANTALBESTELD_DESC
}

"""
A condition to be used against `InkoopgegevensFactopdrachtregel` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input InkoopgegevensFactopdrachtregelCondition {
  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `cdcrediteur` field."""
  cdcrediteur: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `bestcode` field."""
  bestcode: String

  """Checks for equality with the object’s `voorkeur` field."""
  voorkeur: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloat
}

"""
A filter to be used against `InkoopgegevensFactopdrachtregel` object types. All fields are combined with a logical ‘and.’
"""
input InkoopgegevensFactopdrachtregelFilter {
  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `cdcrediteur` field."""
  cdcrediteur: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `bestcode` field."""
  bestcode: StringFilter

  """Filter by the object’s `voorkeur` field."""
  voorkeur: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [InkoopgegevensFactopdrachtregelFilter!]

  """Checks for any expressions in this list."""
  or: [InkoopgegevensFactopdrachtregelFilter!]

  """Negates the expression."""
  not: InkoopgegevensFactopdrachtregelFilter
}

"""A connection to a list of `InkoopgegevensIndex` values."""
type InkoopgegevensIndicesConnection {
  """A list of `InkoopgegevensIndex` objects."""
  nodes: [InkoopgegevensIndex!]!

  """
  A list of edges which contains the `InkoopgegevensIndex` and cursor to aid in pagination.
  """
  edges: [InkoopgegevensIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `InkoopgegevensIndex` you could get from the connection.
  """
  totalCount: Int!
}

type InkoopgegevensIndex {
  cdartikel: String
  bestcode: String
  inkoopprijs: BigFloat
  besthoeveelheid: BigFloat
  cdcrediteur: String
  voorkeur: String
  zoeknaam: String
  isovaluta: String
  omschr: String
  voorraad: BigFloat
  gereserveerd: BigFloat
  assemblaf: BigFloat
  vrij: BigFloat
  inkopen: BigFloat
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  advice: BigFloat
}

"""A `InkoopgegevensIndex` edge in the connection."""
type InkoopgegevensIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `InkoopgegevensIndex` at the end of the edge."""
  node: InkoopgegevensIndex!
}

"""Methods to use when ordering `InkoopgegevensIndex`."""
enum InkoopgegevensIndicesOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  BESTCODE_ASC
  BESTCODE_DESC
  INKOOPPRIJS_ASC
  INKOOPPRIJS_DESC
  BESTHOEVEELHEID_ASC
  BESTHOEVEELHEID_DESC
  CDCREDITEUR_ASC
  CDCREDITEUR_DESC
  VOORKEUR_ASC
  VOORKEUR_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  ISOVALUTA_ASC
  ISOVALUTA_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  VOORRAAD_ASC
  VOORRAAD_DESC
  GERESERVEERD_ASC
  GERESERVEERD_DESC
  ASSEMBLAF_ASC
  ASSEMBLAF_DESC
  VRIJ_ASC
  VRIJ_DESC
  INKOPEN_ASC
  INKOPEN_DESC
  MINVOORRAAD_ASC
  MINVOORRAAD_DESC
  MAXVOORRAAD_ASC
  MAXVOORRAAD_DESC
  ADVICE_ASC
  ADVICE_DESC
}

"""
A condition to be used against `InkoopgegevensIndex` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input InkoopgegevensIndexCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `bestcode` field."""
  bestcode: String

  """Checks for equality with the object’s `inkoopprijs` field."""
  inkoopprijs: BigFloat

  """Checks for equality with the object’s `besthoeveelheid` field."""
  besthoeveelheid: BigFloat

  """Checks for equality with the object’s `cdcrediteur` field."""
  cdcrediteur: String

  """Checks for equality with the object’s `voorkeur` field."""
  voorkeur: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `isovaluta` field."""
  isovaluta: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `voorraad` field."""
  voorraad: BigFloat

  """Checks for equality with the object’s `gereserveerd` field."""
  gereserveerd: BigFloat

  """Checks for equality with the object’s `assemblaf` field."""
  assemblaf: BigFloat

  """Checks for equality with the object’s `vrij` field."""
  vrij: BigFloat

  """Checks for equality with the object’s `inkopen` field."""
  inkopen: BigFloat

  """Checks for equality with the object’s `minvoorraad` field."""
  minvoorraad: BigFloat

  """Checks for equality with the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloat

  """Checks for equality with the object’s `advice` field."""
  advice: BigFloat
}

"""
A filter to be used against `InkoopgegevensIndex` object types. All fields are combined with a logical ‘and.’
"""
input InkoopgegevensIndexFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `bestcode` field."""
  bestcode: StringFilter

  """Filter by the object’s `inkoopprijs` field."""
  inkoopprijs: BigFloatFilter

  """Filter by the object’s `besthoeveelheid` field."""
  besthoeveelheid: BigFloatFilter

  """Filter by the object’s `cdcrediteur` field."""
  cdcrediteur: StringFilter

  """Filter by the object’s `voorkeur` field."""
  voorkeur: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `isovaluta` field."""
  isovaluta: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `voorraad` field."""
  voorraad: BigFloatFilter

  """Filter by the object’s `gereserveerd` field."""
  gereserveerd: BigFloatFilter

  """Filter by the object’s `assemblaf` field."""
  assemblaf: BigFloatFilter

  """Filter by the object’s `vrij` field."""
  vrij: BigFloatFilter

  """Filter by the object’s `inkopen` field."""
  inkopen: BigFloatFilter

  """Filter by the object’s `minvoorraad` field."""
  minvoorraad: BigFloatFilter

  """Filter by the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloatFilter

  """Filter by the object’s `advice` field."""
  advice: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [InkoopgegevensIndexFilter!]

  """Checks for any expressions in this list."""
  or: [InkoopgegevensIndexFilter!]

  """Negates the expression."""
  not: InkoopgegevensIndexFilter
}

"""A connection to a list of `InkoopgegevensLog` values."""
type InkoopgegevensLogsConnection {
  """A list of `InkoopgegevensLog` objects."""
  nodes: [InkoopgegevensLog!]!

  """
  A list of edges which contains the `InkoopgegevensLog` and cursor to aid in pagination.
  """
  edges: [InkoopgegevensLogsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `InkoopgegevensLog` you could get from the connection.
  """
  totalCount: Int!
}

type InkoopgegevensLog implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  created: Datetime
  operation: String
  new: JSON
  old: JSON
}

"""A `InkoopgegevensLog` edge in the connection."""
type InkoopgegevensLogsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `InkoopgegevensLog` at the end of the edge."""
  node: InkoopgegevensLog!
}

"""Methods to use when ordering `InkoopgegevensLog`."""
enum InkoopgegevensLogsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_ASC
  CREATED_DESC
  OPERATION_ASC
  OPERATION_DESC
  NEW_ASC
  NEW_DESC
  OLD_ASC
  OLD_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `InkoopgegevensLog` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input InkoopgegevensLogCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `operation` field."""
  operation: String

  """Checks for equality with the object’s `new` field."""
  new: JSON

  """Checks for equality with the object’s `old` field."""
  old: JSON
}

"""
A filter to be used against `InkoopgegevensLog` object types. All fields are combined with a logical ‘and.’
"""
input InkoopgegevensLogFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `operation` field."""
  operation: StringFilter

  """Filter by the object’s `new` field."""
  new: JSONFilter

  """Filter by the object’s `old` field."""
  old: JSONFilter

  """Checks for all expressions in this list."""
  and: [InkoopgegevensLogFilter!]

  """Checks for any expressions in this list."""
  or: [InkoopgegevensLogFilter!]

  """Negates the expression."""
  not: InkoopgegevensLogFilter
}

"""A connection to a list of `InkoopgegevensLogsIndex` values."""
type InkoopgegevensLogsIndicesConnection {
  """A list of `InkoopgegevensLogsIndex` objects."""
  nodes: [InkoopgegevensLogsIndex!]!

  """
  A list of edges which contains the `InkoopgegevensLogsIndex` and cursor to aid in pagination.
  """
  edges: [InkoopgegevensLogsIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `InkoopgegevensLogsIndex` you could get from the connection.
  """
  totalCount: Int!
}

type InkoopgegevensLogsIndex {
  id: Int
  created: Date
  cdartikel: String
  zoeknaam: String
  omschr: String
  verrekenprijs: BigFloat
  calculatedVerrekenprijs: BigFloat
  deltaVerrekenprijs: BigFloat
  margin: BigFloat
  key: String
  old: String
  new: String
}

"""A `InkoopgegevensLogsIndex` edge in the connection."""
type InkoopgegevensLogsIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `InkoopgegevensLogsIndex` at the end of the edge."""
  node: InkoopgegevensLogsIndex!
}

"""Methods to use when ordering `InkoopgegevensLogsIndex`."""
enum InkoopgegevensLogsIndicesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_ASC
  CREATED_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  VERREKENPRIJS_ASC
  VERREKENPRIJS_DESC
  CALCULATED_VERREKENPRIJS_ASC
  CALCULATED_VERREKENPRIJS_DESC
  DELTA_VERREKENPRIJS_ASC
  DELTA_VERREKENPRIJS_DESC
  MARGIN_ASC
  MARGIN_DESC
  KEY_ASC
  KEY_DESC
  OLD_ASC
  OLD_DESC
  NEW_ASC
  NEW_DESC
}

"""
A condition to be used against `InkoopgegevensLogsIndex` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input InkoopgegevensLogsIndexCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `created` field."""
  created: Date

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `verrekenprijs` field."""
  verrekenprijs: BigFloat

  """Checks for equality with the object’s `calculatedVerrekenprijs` field."""
  calculatedVerrekenprijs: BigFloat

  """Checks for equality with the object’s `deltaVerrekenprijs` field."""
  deltaVerrekenprijs: BigFloat

  """Checks for equality with the object’s `margin` field."""
  margin: BigFloat

  """Checks for equality with the object’s `key` field."""
  key: String

  """Checks for equality with the object’s `old` field."""
  old: String

  """Checks for equality with the object’s `new` field."""
  new: String
}

"""
A filter to be used against `InkoopgegevensLogsIndex` object types. All fields are combined with a logical ‘and.’
"""
input InkoopgegevensLogsIndexFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `created` field."""
  created: DateFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `verrekenprijs` field."""
  verrekenprijs: BigFloatFilter

  """Filter by the object’s `calculatedVerrekenprijs` field."""
  calculatedVerrekenprijs: BigFloatFilter

  """Filter by the object’s `deltaVerrekenprijs` field."""
  deltaVerrekenprijs: BigFloatFilter

  """Filter by the object’s `margin` field."""
  margin: BigFloatFilter

  """Filter by the object’s `key` field."""
  key: StringFilter

  """Filter by the object’s `old` field."""
  old: StringFilter

  """Filter by the object’s `new` field."""
  new: StringFilter

  """Checks for all expressions in this list."""
  and: [InkoopgegevensLogsIndexFilter!]

  """Checks for any expressions in this list."""
  or: [InkoopgegevensLogsIndexFilter!]

  """Negates the expression."""
  not: InkoopgegevensLogsIndexFilter
}

"""A connection to a list of `InkoopgegevensMv` values."""
type InkoopgegevensMvsConnection {
  """A list of `InkoopgegevensMv` objects."""
  nodes: [InkoopgegevensMv!]!

  """
  A list of edges which contains the `InkoopgegevensMv` and cursor to aid in pagination.
  """
  edges: [InkoopgegevensMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `InkoopgegevensMv` you could get from the connection.
  """
  totalCount: Int!
}

type InkoopgegevensMv {
  cdartikel: String
  inkvolgnr: Int
  cdcrediteur: String
  voorkeur: String
  bestcode: String
  cdvaluta: String
  inkoopprijs: BigFloat
  kortingperc: BigFloat
  besthoeveelheid: BigFloat
  opslpercinkoop: BigFloat
}

"""A `InkoopgegevensMv` edge in the connection."""
type InkoopgegevensMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `InkoopgegevensMv` at the end of the edge."""
  node: InkoopgegevensMv!
}

"""Methods to use when ordering `InkoopgegevensMv`."""
enum InkoopgegevensMvsOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  INKVOLGNR_ASC
  INKVOLGNR_DESC
  CDCREDITEUR_ASC
  CDCREDITEUR_DESC
  VOORKEUR_ASC
  VOORKEUR_DESC
  BESTCODE_ASC
  BESTCODE_DESC
  CDVALUTA_ASC
  CDVALUTA_DESC
  INKOOPPRIJS_ASC
  INKOOPPRIJS_DESC
  KORTINGPERC_ASC
  KORTINGPERC_DESC
  BESTHOEVEELHEID_ASC
  BESTHOEVEELHEID_DESC
  OPSLPERCINKOOP_ASC
  OPSLPERCINKOOP_DESC
}

"""
A condition to be used against `InkoopgegevensMv` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input InkoopgegevensMvCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `inkvolgnr` field."""
  inkvolgnr: Int

  """Checks for equality with the object’s `cdcrediteur` field."""
  cdcrediteur: String

  """Checks for equality with the object’s `voorkeur` field."""
  voorkeur: String

  """Checks for equality with the object’s `bestcode` field."""
  bestcode: String

  """Checks for equality with the object’s `cdvaluta` field."""
  cdvaluta: String

  """Checks for equality with the object’s `inkoopprijs` field."""
  inkoopprijs: BigFloat

  """Checks for equality with the object’s `kortingperc` field."""
  kortingperc: BigFloat

  """Checks for equality with the object’s `besthoeveelheid` field."""
  besthoeveelheid: BigFloat

  """Checks for equality with the object’s `opslpercinkoop` field."""
  opslpercinkoop: BigFloat
}

"""
A filter to be used against `InkoopgegevensMv` object types. All fields are combined with a logical ‘and.’
"""
input InkoopgegevensMvFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `inkvolgnr` field."""
  inkvolgnr: IntFilter

  """Filter by the object’s `cdcrediteur` field."""
  cdcrediteur: StringFilter

  """Filter by the object’s `voorkeur` field."""
  voorkeur: StringFilter

  """Filter by the object’s `bestcode` field."""
  bestcode: StringFilter

  """Filter by the object’s `cdvaluta` field."""
  cdvaluta: StringFilter

  """Filter by the object’s `inkoopprijs` field."""
  inkoopprijs: BigFloatFilter

  """Filter by the object’s `kortingperc` field."""
  kortingperc: BigFloatFilter

  """Filter by the object’s `besthoeveelheid` field."""
  besthoeveelheid: BigFloatFilter

  """Filter by the object’s `opslpercinkoop` field."""
  opslpercinkoop: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [InkoopgegevensMvFilter!]

  """Checks for any expressions in this list."""
  or: [InkoopgegevensMvFilter!]

  """Negates the expression."""
  not: InkoopgegevensMvFilter
}

"""A connection to a list of `Inkooporder` values."""
type InkoopordersConnection {
  """A list of `Inkooporder` objects."""
  nodes: [Inkooporder!]!

  """
  A list of edges which contains the `Inkooporder` and cursor to aid in pagination.
  """
  edges: [InkoopordersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Inkooporder` you could get from the connection."""
  totalCount: Int!
}

type Inkooporder {
  ordernummer: String
  cdcrediteur: String
  gefiatteerd: String
  cdfiatteur: String
  guidItem: String
  sysCreate: String
  sysUpdate: String
  orderdatum: Date
  cdbetcond: String
  cdlevcond: String
  cdvaluta: String
  orderkortperc: BigFloat
  orderkortbedrag: BigFloat
  openstaand: String
  afdrukteller: Int
  toelichting: String
  referentie: String
  cdproject: String
  cdpersoon: String
  persoon: String
  cdbehandelddoor: String
  behandelddoor: String
  adres: String
}

"""A `Inkooporder` edge in the connection."""
type InkoopordersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Inkooporder` at the end of the edge."""
  node: Inkooporder!
}

"""Methods to use when ordering `Inkooporder`."""
enum InkoopordersOrderBy {
  NATURAL
  ORDERNUMMER_ASC
  ORDERNUMMER_DESC
  CDCREDITEUR_ASC
  CDCREDITEUR_DESC
  GEFIATTEERD_ASC
  GEFIATTEERD_DESC
  CDFIATTEUR_ASC
  CDFIATTEUR_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  SYS_CREATE_ASC
  SYS_CREATE_DESC
  SYS_UPDATE_ASC
  SYS_UPDATE_DESC
  ORDERDATUM_ASC
  ORDERDATUM_DESC
  CDBETCOND_ASC
  CDBETCOND_DESC
  CDLEVCOND_ASC
  CDLEVCOND_DESC
  CDVALUTA_ASC
  CDVALUTA_DESC
  ORDERKORTPERC_ASC
  ORDERKORTPERC_DESC
  ORDERKORTBEDRAG_ASC
  ORDERKORTBEDRAG_DESC
  OPENSTAAND_ASC
  OPENSTAAND_DESC
  AFDRUKTELLER_ASC
  AFDRUKTELLER_DESC
  TOELICHTING_ASC
  TOELICHTING_DESC
  REFERENTIE_ASC
  REFERENTIE_DESC
  CDPROJECT_ASC
  CDPROJECT_DESC
  CDPERSOON_ASC
  CDPERSOON_DESC
  PERSOON_ASC
  PERSOON_DESC
  CDBEHANDELDDOOR_ASC
  CDBEHANDELDDOOR_DESC
  BEHANDELDDOOR_ASC
  BEHANDELDDOOR_DESC
  ADRES_ASC
  ADRES_DESC
}

"""
A condition to be used against `Inkooporder` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input InkooporderCondition {
  """Checks for equality with the object’s `ordernummer` field."""
  ordernummer: String

  """Checks for equality with the object’s `cdcrediteur` field."""
  cdcrediteur: String

  """Checks for equality with the object’s `gefiatteerd` field."""
  gefiatteerd: String

  """Checks for equality with the object’s `cdfiatteur` field."""
  cdfiatteur: String

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `sysCreate` field."""
  sysCreate: String

  """Checks for equality with the object’s `sysUpdate` field."""
  sysUpdate: String

  """Checks for equality with the object’s `orderdatum` field."""
  orderdatum: Date

  """Checks for equality with the object’s `cdbetcond` field."""
  cdbetcond: String

  """Checks for equality with the object’s `cdlevcond` field."""
  cdlevcond: String

  """Checks for equality with the object’s `cdvaluta` field."""
  cdvaluta: String

  """Checks for equality with the object’s `orderkortperc` field."""
  orderkortperc: BigFloat

  """Checks for equality with the object’s `orderkortbedrag` field."""
  orderkortbedrag: BigFloat

  """Checks for equality with the object’s `openstaand` field."""
  openstaand: String

  """Checks for equality with the object’s `afdrukteller` field."""
  afdrukteller: Int

  """Checks for equality with the object’s `toelichting` field."""
  toelichting: String

  """Checks for equality with the object’s `referentie` field."""
  referentie: String

  """Checks for equality with the object’s `cdproject` field."""
  cdproject: String

  """Checks for equality with the object’s `cdpersoon` field."""
  cdpersoon: String

  """Checks for equality with the object’s `persoon` field."""
  persoon: String

  """Checks for equality with the object’s `cdbehandelddoor` field."""
  cdbehandelddoor: String

  """Checks for equality with the object’s `behandelddoor` field."""
  behandelddoor: String

  """Checks for equality with the object’s `adres` field."""
  adres: String
}

"""
A filter to be used against `Inkooporder` object types. All fields are combined with a logical ‘and.’
"""
input InkooporderFilter {
  """Filter by the object’s `ordernummer` field."""
  ordernummer: StringFilter

  """Filter by the object’s `cdcrediteur` field."""
  cdcrediteur: StringFilter

  """Filter by the object’s `gefiatteerd` field."""
  gefiatteerd: StringFilter

  """Filter by the object’s `cdfiatteur` field."""
  cdfiatteur: StringFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `sysCreate` field."""
  sysCreate: StringFilter

  """Filter by the object’s `sysUpdate` field."""
  sysUpdate: StringFilter

  """Filter by the object’s `orderdatum` field."""
  orderdatum: DateFilter

  """Filter by the object’s `cdbetcond` field."""
  cdbetcond: StringFilter

  """Filter by the object’s `cdlevcond` field."""
  cdlevcond: StringFilter

  """Filter by the object’s `cdvaluta` field."""
  cdvaluta: StringFilter

  """Filter by the object’s `orderkortperc` field."""
  orderkortperc: BigFloatFilter

  """Filter by the object’s `orderkortbedrag` field."""
  orderkortbedrag: BigFloatFilter

  """Filter by the object’s `openstaand` field."""
  openstaand: StringFilter

  """Filter by the object’s `afdrukteller` field."""
  afdrukteller: IntFilter

  """Filter by the object’s `toelichting` field."""
  toelichting: StringFilter

  """Filter by the object’s `referentie` field."""
  referentie: StringFilter

  """Filter by the object’s `cdproject` field."""
  cdproject: StringFilter

  """Filter by the object’s `cdpersoon` field."""
  cdpersoon: StringFilter

  """Filter by the object’s `persoon` field."""
  persoon: StringFilter

  """Filter by the object’s `cdbehandelddoor` field."""
  cdbehandelddoor: StringFilter

  """Filter by the object’s `behandelddoor` field."""
  behandelddoor: StringFilter

  """Filter by the object’s `adres` field."""
  adres: StringFilter

  """Checks for all expressions in this list."""
  and: [InkooporderFilter!]

  """Checks for any expressions in this list."""
  or: [InkooporderFilter!]

  """Negates the expression."""
  not: InkooporderFilter
}

"""A connection to a list of `InkooporderIndex` values."""
type InkooporderIndicesConnection {
  """A list of `InkooporderIndex` objects."""
  nodes: [InkooporderIndex!]!

  """
  A list of edges which contains the `InkooporderIndex` and cursor to aid in pagination.
  """
  edges: [InkooporderIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `InkooporderIndex` you could get from the connection.
  """
  totalCount: Int!
}

type InkooporderIndex {
  ordernummer: String
  orderdatum: Date
  referentie: String
  naam: String
  cdvaluta: String
  email: String
  persoonnaam: String
  shipmentDays: Int
  shipmentDay: Int
}

"""A `InkooporderIndex` edge in the connection."""
type InkooporderIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `InkooporderIndex` at the end of the edge."""
  node: InkooporderIndex!
}

"""Methods to use when ordering `InkooporderIndex`."""
enum InkooporderIndicesOrderBy {
  NATURAL
  ORDERNUMMER_ASC
  ORDERNUMMER_DESC
  ORDERDATUM_ASC
  ORDERDATUM_DESC
  REFERENTIE_ASC
  REFERENTIE_DESC
  NAAM_ASC
  NAAM_DESC
  CDVALUTA_ASC
  CDVALUTA_DESC
  EMAIL_ASC
  EMAIL_DESC
  PERSOONNAAM_ASC
  PERSOONNAAM_DESC
  SHIPMENT_DAYS_ASC
  SHIPMENT_DAYS_DESC
  SHIPMENT_DAY_ASC
  SHIPMENT_DAY_DESC
}

"""
A condition to be used against `InkooporderIndex` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input InkooporderIndexCondition {
  """Checks for equality with the object’s `ordernummer` field."""
  ordernummer: String

  """Checks for equality with the object’s `orderdatum` field."""
  orderdatum: Date

  """Checks for equality with the object’s `referentie` field."""
  referentie: String

  """Checks for equality with the object’s `naam` field."""
  naam: String

  """Checks for equality with the object’s `cdvaluta` field."""
  cdvaluta: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `persoonnaam` field."""
  persoonnaam: String

  """Checks for equality with the object’s `shipmentDays` field."""
  shipmentDays: Int

  """Checks for equality with the object’s `shipmentDay` field."""
  shipmentDay: Int
}

"""
A filter to be used against `InkooporderIndex` object types. All fields are combined with a logical ‘and.’
"""
input InkooporderIndexFilter {
  """Filter by the object’s `ordernummer` field."""
  ordernummer: StringFilter

  """Filter by the object’s `orderdatum` field."""
  orderdatum: DateFilter

  """Filter by the object’s `referentie` field."""
  referentie: StringFilter

  """Filter by the object’s `naam` field."""
  naam: StringFilter

  """Filter by the object’s `cdvaluta` field."""
  cdvaluta: StringFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `persoonnaam` field."""
  persoonnaam: StringFilter

  """Filter by the object’s `shipmentDays` field."""
  shipmentDays: IntFilter

  """Filter by the object’s `shipmentDay` field."""
  shipmentDay: IntFilter

  """Checks for all expressions in this list."""
  and: [InkooporderIndexFilter!]

  """Checks for any expressions in this list."""
  or: [InkooporderIndexFilter!]

  """Negates the expression."""
  not: InkooporderIndexFilter
}

"""A connection to a list of `InkooporderMv` values."""
type InkooporderMvsConnection {
  """A list of `InkooporderMv` objects."""
  nodes: [InkooporderMv!]!

  """
  A list of edges which contains the `InkooporderMv` and cursor to aid in pagination.
  """
  edges: [InkooporderMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `InkooporderMv` you could get from the connection."""
  totalCount: Int!
}

type InkooporderMv {
  ordernummer: String
  cdcrediteur: String
  gefiatteerd: String
  cdfiatteur: String
  guidItem: String
  sysCreate: String
  sysUpdate: String
  orderdatum: Date
  cdbetcond: String
  cdlevcond: String
  cdvaluta: String
  orderkortperc: BigFloat
  orderkortbedrag: BigFloat
  openstaand: String
  afdrukteller: Int
  toelichting: String
  referentie: String
  cdproject: String
  cdpersoon: String
  persoon: String
  cdbehandelddoor: String
  behandelddoor: String
  adres: String
}

"""A `InkooporderMv` edge in the connection."""
type InkooporderMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `InkooporderMv` at the end of the edge."""
  node: InkooporderMv!
}

"""Methods to use when ordering `InkooporderMv`."""
enum InkooporderMvsOrderBy {
  NATURAL
  ORDERNUMMER_ASC
  ORDERNUMMER_DESC
  CDCREDITEUR_ASC
  CDCREDITEUR_DESC
  GEFIATTEERD_ASC
  GEFIATTEERD_DESC
  CDFIATTEUR_ASC
  CDFIATTEUR_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  SYS_CREATE_ASC
  SYS_CREATE_DESC
  SYS_UPDATE_ASC
  SYS_UPDATE_DESC
  ORDERDATUM_ASC
  ORDERDATUM_DESC
  CDBETCOND_ASC
  CDBETCOND_DESC
  CDLEVCOND_ASC
  CDLEVCOND_DESC
  CDVALUTA_ASC
  CDVALUTA_DESC
  ORDERKORTPERC_ASC
  ORDERKORTPERC_DESC
  ORDERKORTBEDRAG_ASC
  ORDERKORTBEDRAG_DESC
  OPENSTAAND_ASC
  OPENSTAAND_DESC
  AFDRUKTELLER_ASC
  AFDRUKTELLER_DESC
  TOELICHTING_ASC
  TOELICHTING_DESC
  REFERENTIE_ASC
  REFERENTIE_DESC
  CDPROJECT_ASC
  CDPROJECT_DESC
  CDPERSOON_ASC
  CDPERSOON_DESC
  PERSOON_ASC
  PERSOON_DESC
  CDBEHANDELDDOOR_ASC
  CDBEHANDELDDOOR_DESC
  BEHANDELDDOOR_ASC
  BEHANDELDDOOR_DESC
  ADRES_ASC
  ADRES_DESC
}

"""
A condition to be used against `InkooporderMv` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input InkooporderMvCondition {
  """Checks for equality with the object’s `ordernummer` field."""
  ordernummer: String

  """Checks for equality with the object’s `cdcrediteur` field."""
  cdcrediteur: String

  """Checks for equality with the object’s `gefiatteerd` field."""
  gefiatteerd: String

  """Checks for equality with the object’s `cdfiatteur` field."""
  cdfiatteur: String

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `sysCreate` field."""
  sysCreate: String

  """Checks for equality with the object’s `sysUpdate` field."""
  sysUpdate: String

  """Checks for equality with the object’s `orderdatum` field."""
  orderdatum: Date

  """Checks for equality with the object’s `cdbetcond` field."""
  cdbetcond: String

  """Checks for equality with the object’s `cdlevcond` field."""
  cdlevcond: String

  """Checks for equality with the object’s `cdvaluta` field."""
  cdvaluta: String

  """Checks for equality with the object’s `orderkortperc` field."""
  orderkortperc: BigFloat

  """Checks for equality with the object’s `orderkortbedrag` field."""
  orderkortbedrag: BigFloat

  """Checks for equality with the object’s `openstaand` field."""
  openstaand: String

  """Checks for equality with the object’s `afdrukteller` field."""
  afdrukteller: Int

  """Checks for equality with the object’s `toelichting` field."""
  toelichting: String

  """Checks for equality with the object’s `referentie` field."""
  referentie: String

  """Checks for equality with the object’s `cdproject` field."""
  cdproject: String

  """Checks for equality with the object’s `cdpersoon` field."""
  cdpersoon: String

  """Checks for equality with the object’s `persoon` field."""
  persoon: String

  """Checks for equality with the object’s `cdbehandelddoor` field."""
  cdbehandelddoor: String

  """Checks for equality with the object’s `behandelddoor` field."""
  behandelddoor: String

  """Checks for equality with the object’s `adres` field."""
  adres: String
}

"""
A filter to be used against `InkooporderMv` object types. All fields are combined with a logical ‘and.’
"""
input InkooporderMvFilter {
  """Filter by the object’s `ordernummer` field."""
  ordernummer: StringFilter

  """Filter by the object’s `cdcrediteur` field."""
  cdcrediteur: StringFilter

  """Filter by the object’s `gefiatteerd` field."""
  gefiatteerd: StringFilter

  """Filter by the object’s `cdfiatteur` field."""
  cdfiatteur: StringFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `sysCreate` field."""
  sysCreate: StringFilter

  """Filter by the object’s `sysUpdate` field."""
  sysUpdate: StringFilter

  """Filter by the object’s `orderdatum` field."""
  orderdatum: DateFilter

  """Filter by the object’s `cdbetcond` field."""
  cdbetcond: StringFilter

  """Filter by the object’s `cdlevcond` field."""
  cdlevcond: StringFilter

  """Filter by the object’s `cdvaluta` field."""
  cdvaluta: StringFilter

  """Filter by the object’s `orderkortperc` field."""
  orderkortperc: BigFloatFilter

  """Filter by the object’s `orderkortbedrag` field."""
  orderkortbedrag: BigFloatFilter

  """Filter by the object’s `openstaand` field."""
  openstaand: StringFilter

  """Filter by the object’s `afdrukteller` field."""
  afdrukteller: IntFilter

  """Filter by the object’s `toelichting` field."""
  toelichting: StringFilter

  """Filter by the object’s `referentie` field."""
  referentie: StringFilter

  """Filter by the object’s `cdproject` field."""
  cdproject: StringFilter

  """Filter by the object’s `cdpersoon` field."""
  cdpersoon: StringFilter

  """Filter by the object’s `persoon` field."""
  persoon: StringFilter

  """Filter by the object’s `cdbehandelddoor` field."""
  cdbehandelddoor: StringFilter

  """Filter by the object’s `behandelddoor` field."""
  behandelddoor: StringFilter

  """Filter by the object’s `adres` field."""
  adres: StringFilter

  """Checks for all expressions in this list."""
  and: [InkooporderMvFilter!]

  """Checks for any expressions in this list."""
  or: [InkooporderMvFilter!]

  """Negates the expression."""
  not: InkooporderMvFilter
}

"""A connection to a list of `Inkooporderregel` values."""
type InkooporderregelsConnection {
  """A list of `Inkooporderregel` objects."""
  nodes: [Inkooporderregel!]!

  """
  A list of edges which contains the `Inkooporderregel` and cursor to aid in pagination.
  """
  edges: [InkooporderregelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `Inkooporderregel` you could get from the connection.
  """
  totalCount: Int!
}

type Inkooporderregel {
  id: String
  ordernummer: String
  orderregel: Int
  cdartikel: String
  omschr: String
  aantalbesteld: BigFloat
  regelkortingperc: BigFloat
  prijs: BigFloat
  aantalopenstaand: BigFloat
  leverdatum: Date
  bestcode: String
  soort: String
  cdmagazijn: String
  inkvolgnr: Int
  inkopdrRglGuid: String
  cddeelproject: String
  aantalgereserv: BigFloat
  factuuropdracht: String
}

"""A `Inkooporderregel` edge in the connection."""
type InkooporderregelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Inkooporderregel` at the end of the edge."""
  node: Inkooporderregel!
}

"""Methods to use when ordering `Inkooporderregel`."""
enum InkooporderregelsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ORDERNUMMER_ASC
  ORDERNUMMER_DESC
  ORDERREGEL_ASC
  ORDERREGEL_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  AANTALBESTELD_ASC
  AANTALBESTELD_DESC
  REGELKORTINGPERC_ASC
  REGELKORTINGPERC_DESC
  PRIJS_ASC
  PRIJS_DESC
  AANTALOPENSTAAND_ASC
  AANTALOPENSTAAND_DESC
  LEVERDATUM_ASC
  LEVERDATUM_DESC
  BESTCODE_ASC
  BESTCODE_DESC
  SOORT_ASC
  SOORT_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  INKVOLGNR_ASC
  INKVOLGNR_DESC
  INKOPDR_RGL_GUID_ASC
  INKOPDR_RGL_GUID_DESC
  CDDEELPROJECT_ASC
  CDDEELPROJECT_DESC
  AANTALGERESERV_ASC
  AANTALGERESERV_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
}

"""
A condition to be used against `Inkooporderregel` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input InkooporderregelCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `ordernummer` field."""
  ordernummer: String

  """Checks for equality with the object’s `orderregel` field."""
  orderregel: Int

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloat

  """Checks for equality with the object’s `regelkortingperc` field."""
  regelkortingperc: BigFloat

  """Checks for equality with the object’s `prijs` field."""
  prijs: BigFloat

  """Checks for equality with the object’s `aantalopenstaand` field."""
  aantalopenstaand: BigFloat

  """Checks for equality with the object’s `leverdatum` field."""
  leverdatum: Date

  """Checks for equality with the object’s `bestcode` field."""
  bestcode: String

  """Checks for equality with the object’s `soort` field."""
  soort: String

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `inkvolgnr` field."""
  inkvolgnr: Int

  """Checks for equality with the object’s `inkopdrRglGuid` field."""
  inkopdrRglGuid: String

  """Checks for equality with the object’s `cddeelproject` field."""
  cddeelproject: String

  """Checks for equality with the object’s `aantalgereserv` field."""
  aantalgereserv: BigFloat

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String
}

"""
A filter to be used against `Inkooporderregel` object types. All fields are combined with a logical ‘and.’
"""
input InkooporderregelFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `ordernummer` field."""
  ordernummer: StringFilter

  """Filter by the object’s `orderregel` field."""
  orderregel: IntFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloatFilter

  """Filter by the object’s `regelkortingperc` field."""
  regelkortingperc: BigFloatFilter

  """Filter by the object’s `prijs` field."""
  prijs: BigFloatFilter

  """Filter by the object’s `aantalopenstaand` field."""
  aantalopenstaand: BigFloatFilter

  """Filter by the object’s `leverdatum` field."""
  leverdatum: DateFilter

  """Filter by the object’s `bestcode` field."""
  bestcode: StringFilter

  """Filter by the object’s `soort` field."""
  soort: StringFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `inkvolgnr` field."""
  inkvolgnr: IntFilter

  """Filter by the object’s `inkopdrRglGuid` field."""
  inkopdrRglGuid: StringFilter

  """Filter by the object’s `cddeelproject` field."""
  cddeelproject: StringFilter

  """Filter by the object’s `aantalgereserv` field."""
  aantalgereserv: BigFloatFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Checks for all expressions in this list."""
  and: [InkooporderregelFilter!]

  """Checks for any expressions in this list."""
  or: [InkooporderregelFilter!]

  """Negates the expression."""
  not: InkooporderregelFilter
}

"""A connection to a list of `InkooporderregelFilterView` values."""
type InkooporderregelFilterViewsConnection {
  """A list of `InkooporderregelFilterView` objects."""
  nodes: [InkooporderregelFilterView!]!

  """
  A list of edges which contains the `InkooporderregelFilterView` and cursor to aid in pagination.
  """
  edges: [InkooporderregelFilterViewsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `InkooporderregelFilterView` you could get from the connection.
  """
  totalCount: Int!
}

type InkooporderregelFilterView {
  ordernummer: String
}

"""A `InkooporderregelFilterView` edge in the connection."""
type InkooporderregelFilterViewsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `InkooporderregelFilterView` at the end of the edge."""
  node: InkooporderregelFilterView!
}

"""Methods to use when ordering `InkooporderregelFilterView`."""
enum InkooporderregelFilterViewsOrderBy {
  NATURAL
  ORDERNUMMER_ASC
  ORDERNUMMER_DESC
}

"""
A condition to be used against `InkooporderregelFilterView` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input InkooporderregelFilterViewCondition {
  """Checks for equality with the object’s `ordernummer` field."""
  ordernummer: String
}

"""
A filter to be used against `InkooporderregelFilterView` object types. All fields are combined with a logical ‘and.’
"""
input InkooporderregelFilterViewFilter {
  """Filter by the object’s `ordernummer` field."""
  ordernummer: StringFilter

  """Checks for all expressions in this list."""
  and: [InkooporderregelFilterViewFilter!]

  """Checks for any expressions in this list."""
  or: [InkooporderregelFilterViewFilter!]

  """Negates the expression."""
  not: InkooporderregelFilterViewFilter
}

"""A connection to a list of `InkooporderregelLevertijden` values."""
type InkooporderregelLevertijdensConnection {
  """A list of `InkooporderregelLevertijden` objects."""
  nodes: [InkooporderregelLevertijden!]!

  """
  A list of edges which contains the `InkooporderregelLevertijden` and cursor to aid in pagination.
  """
  edges: [InkooporderregelLevertijdensEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `InkooporderregelLevertijden` you could get from the connection.
  """
  totalCount: Int!
}

type InkooporderregelLevertijden {
  cdcrediteur: String
  naam: String
  ordernummer: String
  orderdatum: Date
  orderregel: Int
  deliveryDate: Date
  levertijd: Int
}

"""A `InkooporderregelLevertijden` edge in the connection."""
type InkooporderregelLevertijdensEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `InkooporderregelLevertijden` at the end of the edge."""
  node: InkooporderregelLevertijden!
}

"""Methods to use when ordering `InkooporderregelLevertijden`."""
enum InkooporderregelLevertijdensOrderBy {
  NATURAL
  CDCREDITEUR_ASC
  CDCREDITEUR_DESC
  NAAM_ASC
  NAAM_DESC
  ORDERNUMMER_ASC
  ORDERNUMMER_DESC
  ORDERDATUM_ASC
  ORDERDATUM_DESC
  ORDERREGEL_ASC
  ORDERREGEL_DESC
  DELIVERY_DATE_ASC
  DELIVERY_DATE_DESC
  LEVERTIJD_ASC
  LEVERTIJD_DESC
}

"""
A condition to be used against `InkooporderregelLevertijden` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input InkooporderregelLevertijdenCondition {
  """Checks for equality with the object’s `cdcrediteur` field."""
  cdcrediteur: String

  """Checks for equality with the object’s `naam` field."""
  naam: String

  """Checks for equality with the object’s `ordernummer` field."""
  ordernummer: String

  """Checks for equality with the object’s `orderdatum` field."""
  orderdatum: Date

  """Checks for equality with the object’s `orderregel` field."""
  orderregel: Int

  """Checks for equality with the object’s `deliveryDate` field."""
  deliveryDate: Date

  """Checks for equality with the object’s `levertijd` field."""
  levertijd: Int
}

"""
A filter to be used against `InkooporderregelLevertijden` object types. All fields are combined with a logical ‘and.’
"""
input InkooporderregelLevertijdenFilter {
  """Filter by the object’s `cdcrediteur` field."""
  cdcrediteur: StringFilter

  """Filter by the object’s `naam` field."""
  naam: StringFilter

  """Filter by the object’s `ordernummer` field."""
  ordernummer: StringFilter

  """Filter by the object’s `orderdatum` field."""
  orderdatum: DateFilter

  """Filter by the object’s `orderregel` field."""
  orderregel: IntFilter

  """Filter by the object’s `deliveryDate` field."""
  deliveryDate: DateFilter

  """Filter by the object’s `levertijd` field."""
  levertijd: IntFilter

  """Checks for all expressions in this list."""
  and: [InkooporderregelLevertijdenFilter!]

  """Checks for any expressions in this list."""
  or: [InkooporderregelLevertijdenFilter!]

  """Negates the expression."""
  not: InkooporderregelLevertijdenFilter
}

"""A connection to a list of `InkooporderregelLine` values."""
type InkooporderregelLinesConnection {
  """A list of `InkooporderregelLine` objects."""
  nodes: [InkooporderregelLine!]!

  """
  A list of edges which contains the `InkooporderregelLine` and cursor to aid in pagination.
  """
  edges: [InkooporderregelLinesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `InkooporderregelLine` you could get from the connection.
  """
  totalCount: Int!
}

type InkooporderregelLine implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  _cdartikel: String
  _aantalbesteld: BigFloat
  _aantalopenstaand: BigFloat
  deliveryDate: Date
  remarks: String
  deliveryDateConfirmed: Boolean
  status: String
  inkopdrRglGuid: String
  factopdrRglGuid: String
  id: Int!
  shipmentDate: Date
}

"""A `InkooporderregelLine` edge in the connection."""
type InkooporderregelLinesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `InkooporderregelLine` at the end of the edge."""
  node: InkooporderregelLine!
}

"""Methods to use when ordering `InkooporderregelLine`."""
enum InkooporderregelLinesOrderBy {
  NATURAL
  _CDARTIKEL_ASC
  _CDARTIKEL_DESC
  _AANTALBESTELD_ASC
  _AANTALBESTELD_DESC
  _AANTALOPENSTAAND_ASC
  _AANTALOPENSTAAND_DESC
  DELIVERY_DATE_ASC
  DELIVERY_DATE_DESC
  REMARKS_ASC
  REMARKS_DESC
  DELIVERY_DATE_CONFIRMED_ASC
  DELIVERY_DATE_CONFIRMED_DESC
  STATUS_ASC
  STATUS_DESC
  INKOPDR_RGL_GUID_ASC
  INKOPDR_RGL_GUID_DESC
  FACTOPDR_RGL_GUID_ASC
  FACTOPDR_RGL_GUID_DESC
  ID_ASC
  ID_DESC
  SHIPMENT_DATE_ASC
  SHIPMENT_DATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `InkooporderregelLine` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input InkooporderregelLineCondition {
  """Checks for equality with the object’s `_cdartikel` field."""
  _cdartikel: String

  """Checks for equality with the object’s `_aantalbesteld` field."""
  _aantalbesteld: BigFloat

  """Checks for equality with the object’s `_aantalopenstaand` field."""
  _aantalopenstaand: BigFloat

  """Checks for equality with the object’s `deliveryDate` field."""
  deliveryDate: Date

  """Checks for equality with the object’s `remarks` field."""
  remarks: String

  """Checks for equality with the object’s `deliveryDateConfirmed` field."""
  deliveryDateConfirmed: Boolean

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `inkopdrRglGuid` field."""
  inkopdrRglGuid: String

  """Checks for equality with the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `shipmentDate` field."""
  shipmentDate: Date
}

"""
A filter to be used against `InkooporderregelLine` object types. All fields are combined with a logical ‘and.’
"""
input InkooporderregelLineFilter {
  """Filter by the object’s `_cdartikel` field."""
  _cdartikel: StringFilter

  """Filter by the object’s `_aantalbesteld` field."""
  _aantalbesteld: BigFloatFilter

  """Filter by the object’s `_aantalopenstaand` field."""
  _aantalopenstaand: BigFloatFilter

  """Filter by the object’s `deliveryDate` field."""
  deliveryDate: DateFilter

  """Filter by the object’s `remarks` field."""
  remarks: StringFilter

  """Filter by the object’s `deliveryDateConfirmed` field."""
  deliveryDateConfirmed: BooleanFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `inkopdrRglGuid` field."""
  inkopdrRglGuid: StringFilter

  """Filter by the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: StringFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `shipmentDate` field."""
  shipmentDate: DateFilter

  """Checks for all expressions in this list."""
  and: [InkooporderregelLineFilter!]

  """Checks for any expressions in this list."""
  or: [InkooporderregelLineFilter!]

  """Negates the expression."""
  not: InkooporderregelLineFilter
}

"""A connection to a list of `InkooporderregelMv` values."""
type InkooporderregelMvsConnection {
  """A list of `InkooporderregelMv` objects."""
  nodes: [InkooporderregelMv!]!

  """
  A list of edges which contains the `InkooporderregelMv` and cursor to aid in pagination.
  """
  edges: [InkooporderregelMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `InkooporderregelMv` you could get from the connection.
  """
  totalCount: Int!
}

type InkooporderregelMv {
  id: String
  ordernummer: String
  orderregel: Int
  cdartikel: String
  omschr: String
  aantalbesteld: BigFloat
  regelkortingperc: BigFloat
  prijs: BigFloat
  aantalopenstaand: BigFloat
  leverdatum: Date
  bestcode: String
  soort: String
  cdmagazijn: String
  inkvolgnr: Int
  inkopdrRglGuid: String
  cddeelproject: String
  aantalgereserv: BigFloat
  factuuropdracht: String
  endUser: String
}

"""A `InkooporderregelMv` edge in the connection."""
type InkooporderregelMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `InkooporderregelMv` at the end of the edge."""
  node: InkooporderregelMv!
}

"""Methods to use when ordering `InkooporderregelMv`."""
enum InkooporderregelMvsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ORDERNUMMER_ASC
  ORDERNUMMER_DESC
  ORDERREGEL_ASC
  ORDERREGEL_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  AANTALBESTELD_ASC
  AANTALBESTELD_DESC
  REGELKORTINGPERC_ASC
  REGELKORTINGPERC_DESC
  PRIJS_ASC
  PRIJS_DESC
  AANTALOPENSTAAND_ASC
  AANTALOPENSTAAND_DESC
  LEVERDATUM_ASC
  LEVERDATUM_DESC
  BESTCODE_ASC
  BESTCODE_DESC
  SOORT_ASC
  SOORT_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  INKVOLGNR_ASC
  INKVOLGNR_DESC
  INKOPDR_RGL_GUID_ASC
  INKOPDR_RGL_GUID_DESC
  CDDEELPROJECT_ASC
  CDDEELPROJECT_DESC
  AANTALGERESERV_ASC
  AANTALGERESERV_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  END_USER_ASC
  END_USER_DESC
}

"""
A condition to be used against `InkooporderregelMv` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input InkooporderregelMvCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `ordernummer` field."""
  ordernummer: String

  """Checks for equality with the object’s `orderregel` field."""
  orderregel: Int

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloat

  """Checks for equality with the object’s `regelkortingperc` field."""
  regelkortingperc: BigFloat

  """Checks for equality with the object’s `prijs` field."""
  prijs: BigFloat

  """Checks for equality with the object’s `aantalopenstaand` field."""
  aantalopenstaand: BigFloat

  """Checks for equality with the object’s `leverdatum` field."""
  leverdatum: Date

  """Checks for equality with the object’s `bestcode` field."""
  bestcode: String

  """Checks for equality with the object’s `soort` field."""
  soort: String

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `inkvolgnr` field."""
  inkvolgnr: Int

  """Checks for equality with the object’s `inkopdrRglGuid` field."""
  inkopdrRglGuid: String

  """Checks for equality with the object’s `cddeelproject` field."""
  cddeelproject: String

  """Checks for equality with the object’s `aantalgereserv` field."""
  aantalgereserv: BigFloat

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `endUser` field."""
  endUser: String
}

"""
A filter to be used against `InkooporderregelMv` object types. All fields are combined with a logical ‘and.’
"""
input InkooporderregelMvFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `ordernummer` field."""
  ordernummer: StringFilter

  """Filter by the object’s `orderregel` field."""
  orderregel: IntFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloatFilter

  """Filter by the object’s `regelkortingperc` field."""
  regelkortingperc: BigFloatFilter

  """Filter by the object’s `prijs` field."""
  prijs: BigFloatFilter

  """Filter by the object’s `aantalopenstaand` field."""
  aantalopenstaand: BigFloatFilter

  """Filter by the object’s `leverdatum` field."""
  leverdatum: DateFilter

  """Filter by the object’s `bestcode` field."""
  bestcode: StringFilter

  """Filter by the object’s `soort` field."""
  soort: StringFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `inkvolgnr` field."""
  inkvolgnr: IntFilter

  """Filter by the object’s `inkopdrRglGuid` field."""
  inkopdrRglGuid: StringFilter

  """Filter by the object’s `cddeelproject` field."""
  cddeelproject: StringFilter

  """Filter by the object’s `aantalgereserv` field."""
  aantalgereserv: BigFloatFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `endUser` field."""
  endUser: StringFilter

  """Checks for all expressions in this list."""
  and: [InkooporderregelMvFilter!]

  """Checks for any expressions in this list."""
  or: [InkooporderregelMvFilter!]

  """Negates the expression."""
  not: InkooporderregelMvFilter
}

"""A connection to a list of `InkooporderregelsFactopdrachtregel` values."""
type InkooporderregelsFactopdrachtregelsConnection {
  """A list of `InkooporderregelsFactopdrachtregel` objects."""
  nodes: [InkooporderregelsFactopdrachtregel!]!

  """
  A list of edges which contains the `InkooporderregelsFactopdrachtregel` and cursor to aid in pagination.
  """
  edges: [InkooporderregelsFactopdrachtregelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `InkooporderregelsFactopdrachtregel` you could get from the connection.
  """
  totalCount: Int!
}

type InkooporderregelsFactopdrachtregel {
  inkooporderregelId: String
  ordernummer: String
  orderregel: Int
  factopdrRglGuid: String
  label: String
}

"""A `InkooporderregelsFactopdrachtregel` edge in the connection."""
type InkooporderregelsFactopdrachtregelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `InkooporderregelsFactopdrachtregel` at the end of the edge."""
  node: InkooporderregelsFactopdrachtregel!
}

"""Methods to use when ordering `InkooporderregelsFactopdrachtregel`."""
enum InkooporderregelsFactopdrachtregelsOrderBy {
  NATURAL
  INKOOPORDERREGEL_ID_ASC
  INKOOPORDERREGEL_ID_DESC
  ORDERNUMMER_ASC
  ORDERNUMMER_DESC
  ORDERREGEL_ASC
  ORDERREGEL_DESC
  FACTOPDR_RGL_GUID_ASC
  FACTOPDR_RGL_GUID_DESC
  LABEL_ASC
  LABEL_DESC
}

"""
A condition to be used against `InkooporderregelsFactopdrachtregel` object
types. All fields are tested for equality and combined with a logical ‘and.’
"""
input InkooporderregelsFactopdrachtregelCondition {
  """Checks for equality with the object’s `inkooporderregelId` field."""
  inkooporderregelId: String

  """Checks for equality with the object’s `ordernummer` field."""
  ordernummer: String

  """Checks for equality with the object’s `orderregel` field."""
  orderregel: Int

  """Checks for equality with the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: String

  """Checks for equality with the object’s `label` field."""
  label: String
}

"""
A filter to be used against `InkooporderregelsFactopdrachtregel` object types. All fields are combined with a logical ‘and.’
"""
input InkooporderregelsFactopdrachtregelFilter {
  """Filter by the object’s `inkooporderregelId` field."""
  inkooporderregelId: StringFilter

  """Filter by the object’s `ordernummer` field."""
  ordernummer: StringFilter

  """Filter by the object’s `orderregel` field."""
  orderregel: IntFilter

  """Filter by the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: StringFilter

  """Filter by the object’s `label` field."""
  label: StringFilter

  """Checks for all expressions in this list."""
  and: [InkooporderregelsFactopdrachtregelFilter!]

  """Checks for any expressions in this list."""
  or: [InkooporderregelsFactopdrachtregelFilter!]

  """Negates the expression."""
  not: InkooporderregelsFactopdrachtregelFilter
}

"""A connection to a list of `InkooporderregelsIndex` values."""
type InkooporderregelsIndicesConnection {
  """A list of `InkooporderregelsIndex` objects."""
  nodes: [InkooporderregelsIndex!]!

  """
  A list of edges which contains the `InkooporderregelsIndex` and cursor to aid in pagination.
  """
  edges: [InkooporderregelsIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `InkooporderregelsIndex` you could get from the connection.
  """
  totalCount: Int!
}

type InkooporderregelsIndex {
  id: String
  ordernummer: String
  orderregel: Int
  cdartikel: String
  omschr: String
  inkopdrRglGuid: String
  bestcode: String
  prijs: BigFloat
  cdmagazijn: String
  aantalbesteld: BigFloat
  aantalopenstaand: BigFloat
  inkooporderregelLineId: Int
  status: String
  shipmentDate: Date
  deliveryDate: Date
  deliveryWeek: String
  deliveryYearWeek: Int
  deliveryDateConfirmed: Boolean
  remarks: String
  factopdrRglGuid: String
  factuuropdracht: String
}

"""A `InkooporderregelsIndex` edge in the connection."""
type InkooporderregelsIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `InkooporderregelsIndex` at the end of the edge."""
  node: InkooporderregelsIndex!
}

"""Methods to use when ordering `InkooporderregelsIndex`."""
enum InkooporderregelsIndicesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ORDERNUMMER_ASC
  ORDERNUMMER_DESC
  ORDERREGEL_ASC
  ORDERREGEL_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  INKOPDR_RGL_GUID_ASC
  INKOPDR_RGL_GUID_DESC
  BESTCODE_ASC
  BESTCODE_DESC
  PRIJS_ASC
  PRIJS_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  AANTALBESTELD_ASC
  AANTALBESTELD_DESC
  AANTALOPENSTAAND_ASC
  AANTALOPENSTAAND_DESC
  INKOOPORDERREGEL_LINE_ID_ASC
  INKOOPORDERREGEL_LINE_ID_DESC
  STATUS_ASC
  STATUS_DESC
  SHIPMENT_DATE_ASC
  SHIPMENT_DATE_DESC
  DELIVERY_DATE_ASC
  DELIVERY_DATE_DESC
  DELIVERY_WEEK_ASC
  DELIVERY_WEEK_DESC
  DELIVERY_YEAR_WEEK_ASC
  DELIVERY_YEAR_WEEK_DESC
  DELIVERY_DATE_CONFIRMED_ASC
  DELIVERY_DATE_CONFIRMED_DESC
  REMARKS_ASC
  REMARKS_DESC
  FACTOPDR_RGL_GUID_ASC
  FACTOPDR_RGL_GUID_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
}

"""
A condition to be used against `InkooporderregelsIndex` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input InkooporderregelsIndexCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `ordernummer` field."""
  ordernummer: String

  """Checks for equality with the object’s `orderregel` field."""
  orderregel: Int

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `inkopdrRglGuid` field."""
  inkopdrRglGuid: String

  """Checks for equality with the object’s `bestcode` field."""
  bestcode: String

  """Checks for equality with the object’s `prijs` field."""
  prijs: BigFloat

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloat

  """Checks for equality with the object’s `aantalopenstaand` field."""
  aantalopenstaand: BigFloat

  """Checks for equality with the object’s `inkooporderregelLineId` field."""
  inkooporderregelLineId: Int

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `shipmentDate` field."""
  shipmentDate: Date

  """Checks for equality with the object’s `deliveryDate` field."""
  deliveryDate: Date

  """Checks for equality with the object’s `deliveryWeek` field."""
  deliveryWeek: String

  """Checks for equality with the object’s `deliveryYearWeek` field."""
  deliveryYearWeek: Int

  """Checks for equality with the object’s `deliveryDateConfirmed` field."""
  deliveryDateConfirmed: Boolean

  """Checks for equality with the object’s `remarks` field."""
  remarks: String

  """Checks for equality with the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: String

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String
}

"""
A filter to be used against `InkooporderregelsIndex` object types. All fields are combined with a logical ‘and.’
"""
input InkooporderregelsIndexFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `ordernummer` field."""
  ordernummer: StringFilter

  """Filter by the object’s `orderregel` field."""
  orderregel: IntFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `inkopdrRglGuid` field."""
  inkopdrRglGuid: StringFilter

  """Filter by the object’s `bestcode` field."""
  bestcode: StringFilter

  """Filter by the object’s `prijs` field."""
  prijs: BigFloatFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloatFilter

  """Filter by the object’s `aantalopenstaand` field."""
  aantalopenstaand: BigFloatFilter

  """Filter by the object’s `inkooporderregelLineId` field."""
  inkooporderregelLineId: IntFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `shipmentDate` field."""
  shipmentDate: DateFilter

  """Filter by the object’s `deliveryDate` field."""
  deliveryDate: DateFilter

  """Filter by the object’s `deliveryWeek` field."""
  deliveryWeek: StringFilter

  """Filter by the object’s `deliveryYearWeek` field."""
  deliveryYearWeek: IntFilter

  """Filter by the object’s `deliveryDateConfirmed` field."""
  deliveryDateConfirmed: BooleanFilter

  """Filter by the object’s `remarks` field."""
  remarks: StringFilter

  """Filter by the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: StringFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Checks for all expressions in this list."""
  and: [InkooporderregelsIndexFilter!]

  """Checks for any expressions in this list."""
  or: [InkooporderregelsIndexFilter!]

  """Negates the expression."""
  not: InkooporderregelsIndexFilter
}

"""A connection to a list of `InkoopprijsChangesIndex` values."""
type InkoopprijsChangesIndicesConnection {
  """A list of `InkoopprijsChangesIndex` objects."""
  nodes: [InkoopprijsChangesIndex!]!

  """
  A list of edges which contains the `InkoopprijsChangesIndex` and cursor to aid in pagination.
  """
  edges: [InkoopprijsChangesIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `InkoopprijsChangesIndex` you could get from the connection.
  """
  totalCount: Int!
}

type InkoopprijsChangesIndex {
  id: Int
  created: Datetime
  cdartikel: String
  inkoopprijsOld: BigFloat
  inkoopprijsNew: BigFloat
  zoeknaam: String
  omschr: String
  uitloop: String
  verrekenprijsCurrent: BigFloat
  crediteurZoeknaam: String
  marginCurrent: BigFloat
  verrekenprijsCalculated: BigFloat
  marginCalculated: BigFloat
  marginDiff: BigFloat
}

"""A `InkoopprijsChangesIndex` edge in the connection."""
type InkoopprijsChangesIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `InkoopprijsChangesIndex` at the end of the edge."""
  node: InkoopprijsChangesIndex!
}

"""Methods to use when ordering `InkoopprijsChangesIndex`."""
enum InkoopprijsChangesIndicesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_ASC
  CREATED_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  INKOOPPRIJS_OLD_ASC
  INKOOPPRIJS_OLD_DESC
  INKOOPPRIJS_NEW_ASC
  INKOOPPRIJS_NEW_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  UITLOOP_ASC
  UITLOOP_DESC
  VERREKENPRIJS_CURRENT_ASC
  VERREKENPRIJS_CURRENT_DESC
  CREDITEUR_ZOEKNAAM_ASC
  CREDITEUR_ZOEKNAAM_DESC
  MARGIN_CURRENT_ASC
  MARGIN_CURRENT_DESC
  VERREKENPRIJS_CALCULATED_ASC
  VERREKENPRIJS_CALCULATED_DESC
  MARGIN_CALCULATED_ASC
  MARGIN_CALCULATED_DESC
  MARGIN_DIFF_ASC
  MARGIN_DIFF_DESC
}

"""
A condition to be used against `InkoopprijsChangesIndex` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input InkoopprijsChangesIndexCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `inkoopprijsOld` field."""
  inkoopprijsOld: BigFloat

  """Checks for equality with the object’s `inkoopprijsNew` field."""
  inkoopprijsNew: BigFloat

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `uitloop` field."""
  uitloop: String

  """Checks for equality with the object’s `verrekenprijsCurrent` field."""
  verrekenprijsCurrent: BigFloat

  """Checks for equality with the object’s `crediteurZoeknaam` field."""
  crediteurZoeknaam: String

  """Checks for equality with the object’s `marginCurrent` field."""
  marginCurrent: BigFloat

  """Checks for equality with the object’s `verrekenprijsCalculated` field."""
  verrekenprijsCalculated: BigFloat

  """Checks for equality with the object’s `marginCalculated` field."""
  marginCalculated: BigFloat

  """Checks for equality with the object’s `marginDiff` field."""
  marginDiff: BigFloat
}

"""
A filter to be used against `InkoopprijsChangesIndex` object types. All fields are combined with a logical ‘and.’
"""
input InkoopprijsChangesIndexFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `inkoopprijsOld` field."""
  inkoopprijsOld: BigFloatFilter

  """Filter by the object’s `inkoopprijsNew` field."""
  inkoopprijsNew: BigFloatFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `uitloop` field."""
  uitloop: StringFilter

  """Filter by the object’s `verrekenprijsCurrent` field."""
  verrekenprijsCurrent: BigFloatFilter

  """Filter by the object’s `crediteurZoeknaam` field."""
  crediteurZoeknaam: StringFilter

  """Filter by the object’s `marginCurrent` field."""
  marginCurrent: BigFloatFilter

  """Filter by the object’s `verrekenprijsCalculated` field."""
  verrekenprijsCalculated: BigFloatFilter

  """Filter by the object’s `marginCalculated` field."""
  marginCalculated: BigFloatFilter

  """Filter by the object’s `marginDiff` field."""
  marginDiff: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [InkoopprijsChangesIndexFilter!]

  """Checks for any expressions in this list."""
  or: [InkoopprijsChangesIndexFilter!]

  """Negates the expression."""
  not: InkoopprijsChangesIndexFilter
}

"""A connection to a list of `LandMv` values."""
type LandMvsConnection {
  """A list of `LandMv` objects."""
  nodes: [LandMv!]!

  """
  A list of edges which contains the `LandMv` and cursor to aid in pagination.
  """
  edges: [LandMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LandMv` you could get from the connection."""
  totalCount: Int!
}

type LandMv {
  cdland: String
  omschr: String
  cbsland: String
  cdeglid: String
  isoland: String
  rszland: Int
  sepa: String
}

"""A `LandMv` edge in the connection."""
type LandMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LandMv` at the end of the edge."""
  node: LandMv!
}

"""Methods to use when ordering `LandMv`."""
enum LandMvsOrderBy {
  NATURAL
  CDLAND_ASC
  CDLAND_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  CBSLAND_ASC
  CBSLAND_DESC
  CDEGLID_ASC
  CDEGLID_DESC
  ISOLAND_ASC
  ISOLAND_DESC
  RSZLAND_ASC
  RSZLAND_DESC
  SEPA_ASC
  SEPA_DESC
}

"""
A condition to be used against `LandMv` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input LandMvCondition {
  """Checks for equality with the object’s `cdland` field."""
  cdland: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `cbsland` field."""
  cbsland: String

  """Checks for equality with the object’s `cdeglid` field."""
  cdeglid: String

  """Checks for equality with the object’s `isoland` field."""
  isoland: String

  """Checks for equality with the object’s `rszland` field."""
  rszland: Int

  """Checks for equality with the object’s `sepa` field."""
  sepa: String
}

"""
A filter to be used against `LandMv` object types. All fields are combined with a logical ‘and.’
"""
input LandMvFilter {
  """Filter by the object’s `cdland` field."""
  cdland: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `cbsland` field."""
  cbsland: StringFilter

  """Filter by the object’s `cdeglid` field."""
  cdeglid: StringFilter

  """Filter by the object’s `isoland` field."""
  isoland: StringFilter

  """Filter by the object’s `rszland` field."""
  rszland: IntFilter

  """Filter by the object’s `sepa` field."""
  sepa: StringFilter

  """Checks for all expressions in this list."""
  and: [LandMvFilter!]

  """Checks for any expressions in this list."""
  or: [LandMvFilter!]

  """Negates the expression."""
  not: LandMvFilter
}

"""A connection to a list of `Levertijden` values."""
type LevertijdensConnection {
  """A list of `Levertijden` objects."""
  nodes: [Levertijden!]!

  """
  A list of edges which contains the `Levertijden` and cursor to aid in pagination.
  """
  edges: [LevertijdensEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Levertijden` you could get from the connection."""
  totalCount: Int!
}

type Levertijden {
  factuuropdracht: String
  referentie: String
  opdrachtdatum: Date
  factuurdatum: Date
  isoland: String
  targetDate: Date
  invoiceTargetDays: Int
  invoiceOrderDays: Int
  invoiceTargetWeeks: BigFloat
  invoiceOrderWeeks: BigFloat
  cdartikel: String
  aantalgeleverd: BigFloat
  nettoomzet: BigFloat
  soort: String
  zoeknaam: String
  omschr: String
  cdartgroep: String
  materials: Boolean
  kfpQty: BigFloat
  kfpWgt: BigFloat
  wad1Qty: BigFloat
  wad1Wgt: BigFloat
  wad2Qty: BigFloat
  wad2Wgt: BigFloat
  wad4Qty: BigFloat
  wad4Wgt: BigFloat
  wadBoxQty: BigFloat
  wadBoxWgt: BigFloat
  cwaQty: BigFloat
  cwaWgt: BigFloat
}

"""A `Levertijden` edge in the connection."""
type LevertijdensEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Levertijden` at the end of the edge."""
  node: Levertijden!
}

"""Methods to use when ordering `Levertijden`."""
enum LevertijdensOrderBy {
  NATURAL
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  REFERENTIE_ASC
  REFERENTIE_DESC
  OPDRACHTDATUM_ASC
  OPDRACHTDATUM_DESC
  FACTUURDATUM_ASC
  FACTUURDATUM_DESC
  ISOLAND_ASC
  ISOLAND_DESC
  TARGET_DATE_ASC
  TARGET_DATE_DESC
  INVOICE_TARGET_DAYS_ASC
  INVOICE_TARGET_DAYS_DESC
  INVOICE_ORDER_DAYS_ASC
  INVOICE_ORDER_DAYS_DESC
  INVOICE_TARGET_WEEKS_ASC
  INVOICE_TARGET_WEEKS_DESC
  INVOICE_ORDER_WEEKS_ASC
  INVOICE_ORDER_WEEKS_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  AANTALGELEVERD_ASC
  AANTALGELEVERD_DESC
  NETTOOMZET_ASC
  NETTOOMZET_DESC
  SOORT_ASC
  SOORT_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  CDARTGROEP_ASC
  CDARTGROEP_DESC
  MATERIALS_ASC
  MATERIALS_DESC
  KFP_QTY_ASC
  KFP_QTY_DESC
  KFP_WGT_ASC
  KFP_WGT_DESC
  WAD_1_QTY_ASC
  WAD_1_QTY_DESC
  WAD_1_WGT_ASC
  WAD_1_WGT_DESC
  WAD_2_QTY_ASC
  WAD_2_QTY_DESC
  WAD_2_WGT_ASC
  WAD_2_WGT_DESC
  WAD_4_QTY_ASC
  WAD_4_QTY_DESC
  WAD_4_WGT_ASC
  WAD_4_WGT_DESC
  WAD_BOX_QTY_ASC
  WAD_BOX_QTY_DESC
  WAD_BOX_WGT_ASC
  WAD_BOX_WGT_DESC
  CWA_QTY_ASC
  CWA_QTY_DESC
  CWA_WGT_ASC
  CWA_WGT_DESC
}

"""
A condition to be used against `Levertijden` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input LevertijdenCondition {
  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `referentie` field."""
  referentie: String

  """Checks for equality with the object’s `opdrachtdatum` field."""
  opdrachtdatum: Date

  """Checks for equality with the object’s `factuurdatum` field."""
  factuurdatum: Date

  """Checks for equality with the object’s `isoland` field."""
  isoland: String

  """Checks for equality with the object’s `targetDate` field."""
  targetDate: Date

  """Checks for equality with the object’s `invoiceTargetDays` field."""
  invoiceTargetDays: Int

  """Checks for equality with the object’s `invoiceOrderDays` field."""
  invoiceOrderDays: Int

  """Checks for equality with the object’s `invoiceTargetWeeks` field."""
  invoiceTargetWeeks: BigFloat

  """Checks for equality with the object’s `invoiceOrderWeeks` field."""
  invoiceOrderWeeks: BigFloat

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `aantalgeleverd` field."""
  aantalgeleverd: BigFloat

  """Checks for equality with the object’s `nettoomzet` field."""
  nettoomzet: BigFloat

  """Checks for equality with the object’s `soort` field."""
  soort: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `cdartgroep` field."""
  cdartgroep: String

  """Checks for equality with the object’s `materials` field."""
  materials: Boolean

  """Checks for equality with the object’s `kfpQty` field."""
  kfpQty: BigFloat

  """Checks for equality with the object’s `kfpWgt` field."""
  kfpWgt: BigFloat

  """Checks for equality with the object’s `wad1Qty` field."""
  wad1Qty: BigFloat

  """Checks for equality with the object’s `wad1Wgt` field."""
  wad1Wgt: BigFloat

  """Checks for equality with the object’s `wad2Qty` field."""
  wad2Qty: BigFloat

  """Checks for equality with the object’s `wad2Wgt` field."""
  wad2Wgt: BigFloat

  """Checks for equality with the object’s `wad4Qty` field."""
  wad4Qty: BigFloat

  """Checks for equality with the object’s `wad4Wgt` field."""
  wad4Wgt: BigFloat

  """Checks for equality with the object’s `wadBoxQty` field."""
  wadBoxQty: BigFloat

  """Checks for equality with the object’s `wadBoxWgt` field."""
  wadBoxWgt: BigFloat

  """Checks for equality with the object’s `cwaQty` field."""
  cwaQty: BigFloat

  """Checks for equality with the object’s `cwaWgt` field."""
  cwaWgt: BigFloat
}

"""
A filter to be used against `Levertijden` object types. All fields are combined with a logical ‘and.’
"""
input LevertijdenFilter {
  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `referentie` field."""
  referentie: StringFilter

  """Filter by the object’s `opdrachtdatum` field."""
  opdrachtdatum: DateFilter

  """Filter by the object’s `factuurdatum` field."""
  factuurdatum: DateFilter

  """Filter by the object’s `isoland` field."""
  isoland: StringFilter

  """Filter by the object’s `targetDate` field."""
  targetDate: DateFilter

  """Filter by the object’s `invoiceTargetDays` field."""
  invoiceTargetDays: IntFilter

  """Filter by the object’s `invoiceOrderDays` field."""
  invoiceOrderDays: IntFilter

  """Filter by the object’s `invoiceTargetWeeks` field."""
  invoiceTargetWeeks: BigFloatFilter

  """Filter by the object’s `invoiceOrderWeeks` field."""
  invoiceOrderWeeks: BigFloatFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `aantalgeleverd` field."""
  aantalgeleverd: BigFloatFilter

  """Filter by the object’s `nettoomzet` field."""
  nettoomzet: BigFloatFilter

  """Filter by the object’s `soort` field."""
  soort: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `cdartgroep` field."""
  cdartgroep: StringFilter

  """Filter by the object’s `materials` field."""
  materials: BooleanFilter

  """Filter by the object’s `kfpQty` field."""
  kfpQty: BigFloatFilter

  """Filter by the object’s `kfpWgt` field."""
  kfpWgt: BigFloatFilter

  """Filter by the object’s `wad1Qty` field."""
  wad1Qty: BigFloatFilter

  """Filter by the object’s `wad1Wgt` field."""
  wad1Wgt: BigFloatFilter

  """Filter by the object’s `wad2Qty` field."""
  wad2Qty: BigFloatFilter

  """Filter by the object’s `wad2Wgt` field."""
  wad2Wgt: BigFloatFilter

  """Filter by the object’s `wad4Qty` field."""
  wad4Qty: BigFloatFilter

  """Filter by the object’s `wad4Wgt` field."""
  wad4Wgt: BigFloatFilter

  """Filter by the object’s `wadBoxQty` field."""
  wadBoxQty: BigFloatFilter

  """Filter by the object’s `wadBoxWgt` field."""
  wadBoxWgt: BigFloatFilter

  """Filter by the object’s `cwaQty` field."""
  cwaQty: BigFloatFilter

  """Filter by the object’s `cwaWgt` field."""
  cwaWgt: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [LevertijdenFilter!]

  """Checks for any expressions in this list."""
  or: [LevertijdenFilter!]

  """Negates the expression."""
  not: LevertijdenFilter
}

"""A connection to a list of `LevertijdenExcel` values."""
type LevertijdenExcelsConnection {
  """A list of `LevertijdenExcel` objects."""
  nodes: [LevertijdenExcel!]!

  """
  A list of edges which contains the `LevertijdenExcel` and cursor to aid in pagination.
  """
  edges: [LevertijdenExcelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `LevertijdenExcel` you could get from the connection.
  """
  totalCount: Int!
}

type LevertijdenExcel {
  ncbiePo: String
  ncbiePoDate: Date
  ncbieSo: String
  ncbieEndUser: String
  originalShipmentDate: Date
  shipmentDate: Date
  ncbiePart: String
  ncbieDescription: String
  ncPart: String
  qty: BigFloat
  open: BigFloat
  price: BigFloat
  total: BigFloat
  originalRemarks: String
  remarks: String
  orderregel: Int
  inkopdrRglGuid: String
}

"""A `LevertijdenExcel` edge in the connection."""
type LevertijdenExcelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LevertijdenExcel` at the end of the edge."""
  node: LevertijdenExcel!
}

"""Methods to use when ordering `LevertijdenExcel`."""
enum LevertijdenExcelsOrderBy {
  NATURAL
  NCBIE_PO_ASC
  NCBIE_PO_DESC
  NCBIE_PO_DATE_ASC
  NCBIE_PO_DATE_DESC
  NCBIE_SO_ASC
  NCBIE_SO_DESC
  NCBIE_END_USER_ASC
  NCBIE_END_USER_DESC
  ORIGINAL_SHIPMENT_DATE_ASC
  ORIGINAL_SHIPMENT_DATE_DESC
  SHIPMENT_DATE_ASC
  SHIPMENT_DATE_DESC
  NCBIE_PART_ASC
  NCBIE_PART_DESC
  NCBIE_DESCRIPTION_ASC
  NCBIE_DESCRIPTION_DESC
  NC_PART_ASC
  NC_PART_DESC
  QTY_ASC
  QTY_DESC
  OPEN_ASC
  OPEN_DESC
  PRICE_ASC
  PRICE_DESC
  TOTAL_ASC
  TOTAL_DESC
  ORIGINAL_REMARKS_ASC
  ORIGINAL_REMARKS_DESC
  REMARKS_ASC
  REMARKS_DESC
  ORDERREGEL_ASC
  ORDERREGEL_DESC
  INKOPDR_RGL_GUID_ASC
  INKOPDR_RGL_GUID_DESC
}

"""
A condition to be used against `LevertijdenExcel` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LevertijdenExcelCondition {
  """Checks for equality with the object’s `ncbiePo` field."""
  ncbiePo: String

  """Checks for equality with the object’s `ncbiePoDate` field."""
  ncbiePoDate: Date

  """Checks for equality with the object’s `ncbieSo` field."""
  ncbieSo: String

  """Checks for equality with the object’s `ncbieEndUser` field."""
  ncbieEndUser: String

  """Checks for equality with the object’s `originalShipmentDate` field."""
  originalShipmentDate: Date

  """Checks for equality with the object’s `shipmentDate` field."""
  shipmentDate: Date

  """Checks for equality with the object’s `ncbiePart` field."""
  ncbiePart: String

  """Checks for equality with the object’s `ncbieDescription` field."""
  ncbieDescription: String

  """Checks for equality with the object’s `ncPart` field."""
  ncPart: String

  """Checks for equality with the object’s `qty` field."""
  qty: BigFloat

  """Checks for equality with the object’s `open` field."""
  open: BigFloat

  """Checks for equality with the object’s `price` field."""
  price: BigFloat

  """Checks for equality with the object’s `total` field."""
  total: BigFloat

  """Checks for equality with the object’s `originalRemarks` field."""
  originalRemarks: String

  """Checks for equality with the object’s `remarks` field."""
  remarks: String

  """Checks for equality with the object’s `orderregel` field."""
  orderregel: Int

  """Checks for equality with the object’s `inkopdrRglGuid` field."""
  inkopdrRglGuid: String
}

"""
A filter to be used against `LevertijdenExcel` object types. All fields are combined with a logical ‘and.’
"""
input LevertijdenExcelFilter {
  """Filter by the object’s `ncbiePo` field."""
  ncbiePo: StringFilter

  """Filter by the object’s `ncbiePoDate` field."""
  ncbiePoDate: DateFilter

  """Filter by the object’s `ncbieSo` field."""
  ncbieSo: StringFilter

  """Filter by the object’s `ncbieEndUser` field."""
  ncbieEndUser: StringFilter

  """Filter by the object’s `originalShipmentDate` field."""
  originalShipmentDate: DateFilter

  """Filter by the object’s `shipmentDate` field."""
  shipmentDate: DateFilter

  """Filter by the object’s `ncbiePart` field."""
  ncbiePart: StringFilter

  """Filter by the object’s `ncbieDescription` field."""
  ncbieDescription: StringFilter

  """Filter by the object’s `ncPart` field."""
  ncPart: StringFilter

  """Filter by the object’s `qty` field."""
  qty: BigFloatFilter

  """Filter by the object’s `open` field."""
  open: BigFloatFilter

  """Filter by the object’s `price` field."""
  price: BigFloatFilter

  """Filter by the object’s `total` field."""
  total: BigFloatFilter

  """Filter by the object’s `originalRemarks` field."""
  originalRemarks: StringFilter

  """Filter by the object’s `remarks` field."""
  remarks: StringFilter

  """Filter by the object’s `orderregel` field."""
  orderregel: IntFilter

  """Filter by the object’s `inkopdrRglGuid` field."""
  inkopdrRglGuid: StringFilter

  """Checks for all expressions in this list."""
  and: [LevertijdenExcelFilter!]

  """Checks for any expressions in this list."""
  or: [LevertijdenExcelFilter!]

  """Negates the expression."""
  not: LevertijdenExcelFilter
}

"""A connection to a list of `Magazijn` values."""
type MagazijnsConnection {
  """A list of `Magazijn` objects."""
  nodes: [Magazijn!]!

  """
  A list of edges which contains the `Magazijn` and cursor to aid in pagination.
  """
  edges: [MagazijnsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Magazijn` you could get from the connection."""
  totalCount: Int!
}

type Magazijn {
  cdmagazijn: String
  voorkeur: String
  omschr: String
}

"""A `Magazijn` edge in the connection."""
type MagazijnsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Magazijn` at the end of the edge."""
  node: Magazijn!
}

"""Methods to use when ordering `Magazijn`."""
enum MagazijnsOrderBy {
  NATURAL
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  VOORKEUR_ASC
  VOORKEUR_DESC
  OMSCHR_ASC
  OMSCHR_DESC
}

"""
A condition to be used against `Magazijn` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MagazijnCondition {
  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `voorkeur` field."""
  voorkeur: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String
}

"""
A filter to be used against `Magazijn` object types. All fields are combined with a logical ‘and.’
"""
input MagazijnFilter {
  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `voorkeur` field."""
  voorkeur: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Checks for all expressions in this list."""
  and: [MagazijnFilter!]

  """Checks for any expressions in this list."""
  or: [MagazijnFilter!]

  """Negates the expression."""
  not: MagazijnFilter
}

"""A connection to a list of `MagazijnMv` values."""
type MagazijnMvsConnection {
  """A list of `MagazijnMv` objects."""
  nodes: [MagazijnMv!]!

  """
  A list of edges which contains the `MagazijnMv` and cursor to aid in pagination.
  """
  edges: [MagazijnMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MagazijnMv` you could get from the connection."""
  totalCount: Int!
}

type MagazijnMv {
  cdmagazijn: String
  voorkeur: String
  omschr: String
}

"""A `MagazijnMv` edge in the connection."""
type MagazijnMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MagazijnMv` at the end of the edge."""
  node: MagazijnMv!
}

"""Methods to use when ordering `MagazijnMv`."""
enum MagazijnMvsOrderBy {
  NATURAL
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  VOORKEUR_ASC
  VOORKEUR_DESC
  OMSCHR_ASC
  OMSCHR_DESC
}

"""
A condition to be used against `MagazijnMv` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MagazijnMvCondition {
  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `voorkeur` field."""
  voorkeur: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String
}

"""
A filter to be used against `MagazijnMv` object types. All fields are combined with a logical ‘and.’
"""
input MagazijnMvFilter {
  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `voorkeur` field."""
  voorkeur: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Checks for all expressions in this list."""
  and: [MagazijnMvFilter!]

  """Checks for any expressions in this list."""
  or: [MagazijnMvFilter!]

  """Negates the expression."""
  not: MagazijnMvFilter
}

"""A connection to a list of `MaintenanceVisitArea` values."""
type MaintenanceVisitAreasConnection {
  """A list of `MaintenanceVisitArea` objects."""
  nodes: [MaintenanceVisitArea!]!

  """
  A list of edges which contains the `MaintenanceVisitArea` and cursor to aid in pagination.
  """
  edges: [MaintenanceVisitAreasEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MaintenanceVisitArea` you could get from the connection.
  """
  totalCount: Int!
}

type MaintenanceVisitArea {
  id: Int
  buildingId: Int
  buildingName: String
  floorName: String
  areaName: String
  areaRemarks: String
  name: String
  maintenanceVisitId: Int
}

"""A `MaintenanceVisitArea` edge in the connection."""
type MaintenanceVisitAreasEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MaintenanceVisitArea` at the end of the edge."""
  node: MaintenanceVisitArea!
}

"""Methods to use when ordering `MaintenanceVisitArea`."""
enum MaintenanceVisitAreasOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  BUILDING_ID_ASC
  BUILDING_ID_DESC
  BUILDING_NAME_ASC
  BUILDING_NAME_DESC
  FLOOR_NAME_ASC
  FLOOR_NAME_DESC
  AREA_NAME_ASC
  AREA_NAME_DESC
  AREA_REMARKS_ASC
  AREA_REMARKS_DESC
  NAME_ASC
  NAME_DESC
  MAINTENANCE_VISIT_ID_ASC
  MAINTENANCE_VISIT_ID_DESC
}

"""
A condition to be used against `MaintenanceVisitArea` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input MaintenanceVisitAreaCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `buildingId` field."""
  buildingId: Int

  """Checks for equality with the object’s `buildingName` field."""
  buildingName: String

  """Checks for equality with the object’s `floorName` field."""
  floorName: String

  """Checks for equality with the object’s `areaName` field."""
  areaName: String

  """Checks for equality with the object’s `areaRemarks` field."""
  areaRemarks: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `maintenanceVisitId` field."""
  maintenanceVisitId: Int
}

"""
A filter to be used against `MaintenanceVisitArea` object types. All fields are combined with a logical ‘and.’
"""
input MaintenanceVisitAreaFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `buildingId` field."""
  buildingId: IntFilter

  """Filter by the object’s `buildingName` field."""
  buildingName: StringFilter

  """Filter by the object’s `floorName` field."""
  floorName: StringFilter

  """Filter by the object’s `areaName` field."""
  areaName: StringFilter

  """Filter by the object’s `areaRemarks` field."""
  areaRemarks: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `maintenanceVisitId` field."""
  maintenanceVisitId: IntFilter

  """Checks for all expressions in this list."""
  and: [MaintenanceVisitAreaFilter!]

  """Checks for any expressions in this list."""
  or: [MaintenanceVisitAreaFilter!]

  """Negates the expression."""
  not: MaintenanceVisitAreaFilter
}

"""A connection to a list of `MaintenanceVisitLinesMaintain` values."""
type MaintenanceVisitLinesMaintainsConnection {
  """A list of `MaintenanceVisitLinesMaintain` objects."""
  nodes: [MaintenanceVisitLinesMaintain!]!

  """
  A list of edges which contains the `MaintenanceVisitLinesMaintain` and cursor to aid in pagination.
  """
  edges: [MaintenanceVisitLinesMaintainsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MaintenanceVisitLinesMaintain` you could get from the connection.
  """
  totalCount: Int!
}

type MaintenanceVisitLinesMaintain {
  id: Int
  maintenanceVisitId: Int
  day: Int
  remarkLine: Int
  detectorSensorId: Int
  installedFilterId: Int
  filterName: String
  installedPyrolyserId: Int
  pyrolyserName: String
  detectorSensorSensorId: Int
  rangeId: Int
  sensorTypeId: Int
  highEu: Float
  engineeringUnits: String
  range: String
  electrolyteName: String
  membraneName: String
  oRingName: String
  target: String
  detectorSensorLocationId: Int
  simsChannel: Int
  simsTag: String
  applicationName: String
  samplePointName: String
  areaId: Int
  detectorSensorLocationRemarks: String
  detectorId: Int
  detectorModel: String
  detectorSerialNumber: String
  detectorTypeId: Int
  sensorCount: BigInt
  detectorLabelDate: String
  detectorPosition: Int
  detectorFirstSensorSn: Int
  sensorModel: String
  sensorSerialNumber: String
  siliconeSheet: Boolean
  sensorLabelDate: Date
  preResponse: Float
  response: Float
  concentration: Float
  zeroSuccess: Boolean
  spanSuccess: Boolean
  calDeviation: Float
  success: Boolean
  filterId: Int
  pyrolyserId: Int
  sensorMaintenanceDueDate: Date
  sensorMaintenanceDueClass: String
  nextSensorMaintenanceDueDateLabel: String
  sensorInstallDueDate: Date
  sensorInstallDueClass: String
  filterInstallDueDate: Date
  filterInstallDueClass: String
  pyrolyserInstallDueDate: Date
  pyrolyserInstallDueClass: String
  originalSensorId: Int
  sensorId: Int
  calGasId: Int
  calGasConcentration: Float
  calGasEngineeringUnits: String
  calGasGasName: String
  calResponse: Float
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""A `MaintenanceVisitLinesMaintain` edge in the connection."""
type MaintenanceVisitLinesMaintainsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MaintenanceVisitLinesMaintain` at the end of the edge."""
  node: MaintenanceVisitLinesMaintain!
}

"""Methods to use when ordering `MaintenanceVisitLinesMaintain`."""
enum MaintenanceVisitLinesMaintainsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MAINTENANCE_VISIT_ID_ASC
  MAINTENANCE_VISIT_ID_DESC
  DAY_ASC
  DAY_DESC
  REMARK_LINE_ASC
  REMARK_LINE_DESC
  DETECTOR_SENSOR_ID_ASC
  DETECTOR_SENSOR_ID_DESC
  INSTALLED_FILTER_ID_ASC
  INSTALLED_FILTER_ID_DESC
  FILTER_NAME_ASC
  FILTER_NAME_DESC
  INSTALLED_PYROLYSER_ID_ASC
  INSTALLED_PYROLYSER_ID_DESC
  PYROLYSER_NAME_ASC
  PYROLYSER_NAME_DESC
  DETECTOR_SENSOR_SENSOR_ID_ASC
  DETECTOR_SENSOR_SENSOR_ID_DESC
  RANGE_ID_ASC
  RANGE_ID_DESC
  SENSOR_TYPE_ID_ASC
  SENSOR_TYPE_ID_DESC
  HIGH_EU_ASC
  HIGH_EU_DESC
  ENGINEERING_UNITS_ASC
  ENGINEERING_UNITS_DESC
  RANGE_ASC
  RANGE_DESC
  ELECTROLYTE_NAME_ASC
  ELECTROLYTE_NAME_DESC
  MEMBRANE_NAME_ASC
  MEMBRANE_NAME_DESC
  O_RING_NAME_ASC
  O_RING_NAME_DESC
  TARGET_ASC
  TARGET_DESC
  DETECTOR_SENSOR_LOCATION_ID_ASC
  DETECTOR_SENSOR_LOCATION_ID_DESC
  SIMS_CHANNEL_ASC
  SIMS_CHANNEL_DESC
  SIMS_TAG_ASC
  SIMS_TAG_DESC
  APPLICATION_NAME_ASC
  APPLICATION_NAME_DESC
  SAMPLE_POINT_NAME_ASC
  SAMPLE_POINT_NAME_DESC
  AREA_ID_ASC
  AREA_ID_DESC
  DETECTOR_SENSOR_LOCATION_REMARKS_ASC
  DETECTOR_SENSOR_LOCATION_REMARKS_DESC
  DETECTOR_ID_ASC
  DETECTOR_ID_DESC
  DETECTOR_MODEL_ASC
  DETECTOR_MODEL_DESC
  DETECTOR_SERIAL_NUMBER_ASC
  DETECTOR_SERIAL_NUMBER_DESC
  DETECTOR_TYPE_ID_ASC
  DETECTOR_TYPE_ID_DESC
  SENSOR_COUNT_ASC
  SENSOR_COUNT_DESC
  DETECTOR_LABEL_DATE_ASC
  DETECTOR_LABEL_DATE_DESC
  DETECTOR_POSITION_ASC
  DETECTOR_POSITION_DESC
  DETECTOR_FIRST_SENSOR_SN_ASC
  DETECTOR_FIRST_SENSOR_SN_DESC
  SENSOR_MODEL_ASC
  SENSOR_MODEL_DESC
  SENSOR_SERIAL_NUMBER_ASC
  SENSOR_SERIAL_NUMBER_DESC
  SILICONE_SHEET_ASC
  SILICONE_SHEET_DESC
  SENSOR_LABEL_DATE_ASC
  SENSOR_LABEL_DATE_DESC
  PRE_RESPONSE_ASC
  PRE_RESPONSE_DESC
  RESPONSE_ASC
  RESPONSE_DESC
  CONCENTRATION_ASC
  CONCENTRATION_DESC
  ZERO_SUCCESS_ASC
  ZERO_SUCCESS_DESC
  SPAN_SUCCESS_ASC
  SPAN_SUCCESS_DESC
  CAL_DEVIATION_ASC
  CAL_DEVIATION_DESC
  SUCCESS_ASC
  SUCCESS_DESC
  FILTER_ID_ASC
  FILTER_ID_DESC
  PYROLYSER_ID_ASC
  PYROLYSER_ID_DESC
  SENSOR_MAINTENANCE_DUE_DATE_ASC
  SENSOR_MAINTENANCE_DUE_DATE_DESC
  SENSOR_MAINTENANCE_DUE_CLASS_ASC
  SENSOR_MAINTENANCE_DUE_CLASS_DESC
  NEXT_SENSOR_MAINTENANCE_DUE_DATE_LABEL_ASC
  NEXT_SENSOR_MAINTENANCE_DUE_DATE_LABEL_DESC
  SENSOR_INSTALL_DUE_DATE_ASC
  SENSOR_INSTALL_DUE_DATE_DESC
  SENSOR_INSTALL_DUE_CLASS_ASC
  SENSOR_INSTALL_DUE_CLASS_DESC
  FILTER_INSTALL_DUE_DATE_ASC
  FILTER_INSTALL_DUE_DATE_DESC
  FILTER_INSTALL_DUE_CLASS_ASC
  FILTER_INSTALL_DUE_CLASS_DESC
  PYROLYSER_INSTALL_DUE_DATE_ASC
  PYROLYSER_INSTALL_DUE_DATE_DESC
  PYROLYSER_INSTALL_DUE_CLASS_ASC
  PYROLYSER_INSTALL_DUE_CLASS_DESC
  ORIGINAL_SENSOR_ID_ASC
  ORIGINAL_SENSOR_ID_DESC
  SENSOR_ID_ASC
  SENSOR_ID_DESC
  CAL_GAS_ID_ASC
  CAL_GAS_ID_DESC
  CAL_GAS_CONCENTRATION_ASC
  CAL_GAS_CONCENTRATION_DESC
  CAL_GAS_ENGINEERING_UNITS_ASC
  CAL_GAS_ENGINEERING_UNITS_DESC
  CAL_GAS_GAS_NAME_ASC
  CAL_GAS_GAS_NAME_DESC
  CAL_RESPONSE_ASC
  CAL_RESPONSE_DESC
}

"""
A condition to be used against `MaintenanceVisitLinesMaintain` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input MaintenanceVisitLinesMaintainCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `maintenanceVisitId` field."""
  maintenanceVisitId: Int

  """Checks for equality with the object’s `day` field."""
  day: Int

  """Checks for equality with the object’s `remarkLine` field."""
  remarkLine: Int

  """Checks for equality with the object’s `detectorSensorId` field."""
  detectorSensorId: Int

  """Checks for equality with the object’s `installedFilterId` field."""
  installedFilterId: Int

  """Checks for equality with the object’s `filterName` field."""
  filterName: String

  """Checks for equality with the object’s `installedPyrolyserId` field."""
  installedPyrolyserId: Int

  """Checks for equality with the object’s `pyrolyserName` field."""
  pyrolyserName: String

  """Checks for equality with the object’s `detectorSensorSensorId` field."""
  detectorSensorSensorId: Int

  """Checks for equality with the object’s `rangeId` field."""
  rangeId: Int

  """Checks for equality with the object’s `sensorTypeId` field."""
  sensorTypeId: Int

  """Checks for equality with the object’s `highEu` field."""
  highEu: Float

  """Checks for equality with the object’s `engineeringUnits` field."""
  engineeringUnits: String

  """Checks for equality with the object’s `range` field."""
  range: String

  """Checks for equality with the object’s `electrolyteName` field."""
  electrolyteName: String

  """Checks for equality with the object’s `membraneName` field."""
  membraneName: String

  """Checks for equality with the object’s `oRingName` field."""
  oRingName: String

  """Checks for equality with the object’s `target` field."""
  target: String

  """
  Checks for equality with the object’s `detectorSensorLocationId` field.
  """
  detectorSensorLocationId: Int

  """Checks for equality with the object’s `simsChannel` field."""
  simsChannel: Int

  """Checks for equality with the object’s `simsTag` field."""
  simsTag: String

  """Checks for equality with the object’s `applicationName` field."""
  applicationName: String

  """Checks for equality with the object’s `samplePointName` field."""
  samplePointName: String

  """Checks for equality with the object’s `areaId` field."""
  areaId: Int

  """
  Checks for equality with the object’s `detectorSensorLocationRemarks` field.
  """
  detectorSensorLocationRemarks: String

  """Checks for equality with the object’s `detectorId` field."""
  detectorId: Int

  """Checks for equality with the object’s `detectorModel` field."""
  detectorModel: String

  """Checks for equality with the object’s `detectorSerialNumber` field."""
  detectorSerialNumber: String

  """Checks for equality with the object’s `detectorTypeId` field."""
  detectorTypeId: Int

  """Checks for equality with the object’s `sensorCount` field."""
  sensorCount: BigInt

  """Checks for equality with the object’s `detectorLabelDate` field."""
  detectorLabelDate: String

  """Checks for equality with the object’s `detectorPosition` field."""
  detectorPosition: Int

  """Checks for equality with the object’s `detectorFirstSensorSn` field."""
  detectorFirstSensorSn: Int

  """Checks for equality with the object’s `sensorModel` field."""
  sensorModel: String

  """Checks for equality with the object’s `sensorSerialNumber` field."""
  sensorSerialNumber: String

  """Checks for equality with the object’s `siliconeSheet` field."""
  siliconeSheet: Boolean

  """Checks for equality with the object’s `sensorLabelDate` field."""
  sensorLabelDate: Date

  """Checks for equality with the object’s `preResponse` field."""
  preResponse: Float

  """Checks for equality with the object’s `response` field."""
  response: Float

  """Checks for equality with the object’s `concentration` field."""
  concentration: Float

  """Checks for equality with the object’s `zeroSuccess` field."""
  zeroSuccess: Boolean

  """Checks for equality with the object’s `spanSuccess` field."""
  spanSuccess: Boolean

  """Checks for equality with the object’s `calDeviation` field."""
  calDeviation: Float

  """Checks for equality with the object’s `success` field."""
  success: Boolean

  """Checks for equality with the object’s `filterId` field."""
  filterId: Int

  """Checks for equality with the object’s `pyrolyserId` field."""
  pyrolyserId: Int

  """
  Checks for equality with the object’s `sensorMaintenanceDueDate` field.
  """
  sensorMaintenanceDueDate: Date

  """
  Checks for equality with the object’s `sensorMaintenanceDueClass` field.
  """
  sensorMaintenanceDueClass: String

  """
  Checks for equality with the object’s `nextSensorMaintenanceDueDateLabel` field.
  """
  nextSensorMaintenanceDueDateLabel: String

  """Checks for equality with the object’s `sensorInstallDueDate` field."""
  sensorInstallDueDate: Date

  """Checks for equality with the object’s `sensorInstallDueClass` field."""
  sensorInstallDueClass: String

  """Checks for equality with the object’s `filterInstallDueDate` field."""
  filterInstallDueDate: Date

  """Checks for equality with the object’s `filterInstallDueClass` field."""
  filterInstallDueClass: String

  """Checks for equality with the object’s `pyrolyserInstallDueDate` field."""
  pyrolyserInstallDueDate: Date

  """
  Checks for equality with the object’s `pyrolyserInstallDueClass` field.
  """
  pyrolyserInstallDueClass: String

  """Checks for equality with the object’s `originalSensorId` field."""
  originalSensorId: Int

  """Checks for equality with the object’s `sensorId` field."""
  sensorId: Int

  """Checks for equality with the object’s `calGasId` field."""
  calGasId: Int

  """Checks for equality with the object’s `calGasConcentration` field."""
  calGasConcentration: Float

  """Checks for equality with the object’s `calGasEngineeringUnits` field."""
  calGasEngineeringUnits: String

  """Checks for equality with the object’s `calGasGasName` field."""
  calGasGasName: String

  """Checks for equality with the object’s `calResponse` field."""
  calResponse: Float
}

"""
A filter to be used against `MaintenanceVisitLinesMaintain` object types. All fields are combined with a logical ‘and.’
"""
input MaintenanceVisitLinesMaintainFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `maintenanceVisitId` field."""
  maintenanceVisitId: IntFilter

  """Filter by the object’s `day` field."""
  day: IntFilter

  """Filter by the object’s `remarkLine` field."""
  remarkLine: IntFilter

  """Filter by the object’s `detectorSensorId` field."""
  detectorSensorId: IntFilter

  """Filter by the object’s `installedFilterId` field."""
  installedFilterId: IntFilter

  """Filter by the object’s `filterName` field."""
  filterName: StringFilter

  """Filter by the object’s `installedPyrolyserId` field."""
  installedPyrolyserId: IntFilter

  """Filter by the object’s `pyrolyserName` field."""
  pyrolyserName: StringFilter

  """Filter by the object’s `detectorSensorSensorId` field."""
  detectorSensorSensorId: IntFilter

  """Filter by the object’s `rangeId` field."""
  rangeId: IntFilter

  """Filter by the object’s `sensorTypeId` field."""
  sensorTypeId: IntFilter

  """Filter by the object’s `highEu` field."""
  highEu: FloatFilter

  """Filter by the object’s `engineeringUnits` field."""
  engineeringUnits: StringFilter

  """Filter by the object’s `range` field."""
  range: StringFilter

  """Filter by the object’s `electrolyteName` field."""
  electrolyteName: StringFilter

  """Filter by the object’s `membraneName` field."""
  membraneName: StringFilter

  """Filter by the object’s `oRingName` field."""
  oRingName: StringFilter

  """Filter by the object’s `target` field."""
  target: StringFilter

  """Filter by the object’s `detectorSensorLocationId` field."""
  detectorSensorLocationId: IntFilter

  """Filter by the object’s `simsChannel` field."""
  simsChannel: IntFilter

  """Filter by the object’s `simsTag` field."""
  simsTag: StringFilter

  """Filter by the object’s `applicationName` field."""
  applicationName: StringFilter

  """Filter by the object’s `samplePointName` field."""
  samplePointName: StringFilter

  """Filter by the object’s `areaId` field."""
  areaId: IntFilter

  """Filter by the object’s `detectorSensorLocationRemarks` field."""
  detectorSensorLocationRemarks: StringFilter

  """Filter by the object’s `detectorId` field."""
  detectorId: IntFilter

  """Filter by the object’s `detectorModel` field."""
  detectorModel: StringFilter

  """Filter by the object’s `detectorSerialNumber` field."""
  detectorSerialNumber: StringFilter

  """Filter by the object’s `detectorTypeId` field."""
  detectorTypeId: IntFilter

  """Filter by the object’s `sensorCount` field."""
  sensorCount: BigIntFilter

  """Filter by the object’s `detectorLabelDate` field."""
  detectorLabelDate: StringFilter

  """Filter by the object’s `detectorPosition` field."""
  detectorPosition: IntFilter

  """Filter by the object’s `detectorFirstSensorSn` field."""
  detectorFirstSensorSn: IntFilter

  """Filter by the object’s `sensorModel` field."""
  sensorModel: StringFilter

  """Filter by the object’s `sensorSerialNumber` field."""
  sensorSerialNumber: StringFilter

  """Filter by the object’s `siliconeSheet` field."""
  siliconeSheet: BooleanFilter

  """Filter by the object’s `sensorLabelDate` field."""
  sensorLabelDate: DateFilter

  """Filter by the object’s `preResponse` field."""
  preResponse: FloatFilter

  """Filter by the object’s `response` field."""
  response: FloatFilter

  """Filter by the object’s `concentration` field."""
  concentration: FloatFilter

  """Filter by the object’s `zeroSuccess` field."""
  zeroSuccess: BooleanFilter

  """Filter by the object’s `spanSuccess` field."""
  spanSuccess: BooleanFilter

  """Filter by the object’s `calDeviation` field."""
  calDeviation: FloatFilter

  """Filter by the object’s `success` field."""
  success: BooleanFilter

  """Filter by the object’s `filterId` field."""
  filterId: IntFilter

  """Filter by the object’s `pyrolyserId` field."""
  pyrolyserId: IntFilter

  """Filter by the object’s `sensorMaintenanceDueDate` field."""
  sensorMaintenanceDueDate: DateFilter

  """Filter by the object’s `sensorMaintenanceDueClass` field."""
  sensorMaintenanceDueClass: StringFilter

  """Filter by the object’s `nextSensorMaintenanceDueDateLabel` field."""
  nextSensorMaintenanceDueDateLabel: StringFilter

  """Filter by the object’s `sensorInstallDueDate` field."""
  sensorInstallDueDate: DateFilter

  """Filter by the object’s `sensorInstallDueClass` field."""
  sensorInstallDueClass: StringFilter

  """Filter by the object’s `filterInstallDueDate` field."""
  filterInstallDueDate: DateFilter

  """Filter by the object’s `filterInstallDueClass` field."""
  filterInstallDueClass: StringFilter

  """Filter by the object’s `pyrolyserInstallDueDate` field."""
  pyrolyserInstallDueDate: DateFilter

  """Filter by the object’s `pyrolyserInstallDueClass` field."""
  pyrolyserInstallDueClass: StringFilter

  """Filter by the object’s `originalSensorId` field."""
  originalSensorId: IntFilter

  """Filter by the object’s `sensorId` field."""
  sensorId: IntFilter

  """Filter by the object’s `calGasId` field."""
  calGasId: IntFilter

  """Filter by the object’s `calGasConcentration` field."""
  calGasConcentration: FloatFilter

  """Filter by the object’s `calGasEngineeringUnits` field."""
  calGasEngineeringUnits: StringFilter

  """Filter by the object’s `calGasGasName` field."""
  calGasGasName: StringFilter

  """Filter by the object’s `calResponse` field."""
  calResponse: FloatFilter

  """Checks for all expressions in this list."""
  and: [MaintenanceVisitLinesMaintainFilter!]

  """Checks for any expressions in this list."""
  or: [MaintenanceVisitLinesMaintainFilter!]

  """Negates the expression."""
  not: MaintenanceVisitLinesMaintainFilter
}

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigInt

  """Included in the specified list."""
  in: [BigInt!]

  """Not included in the specified list."""
  notIn: [BigInt!]

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt

  """
  Included in the specified list -unless list is empty in which case this operator is not applied.
  """
  inExpansive: [BigInt!]
}

"""A connection to a list of `MaintenanceVisitRemarksIndex` values."""
type MaintenanceVisitRemarksIndicesConnection {
  """A list of `MaintenanceVisitRemarksIndex` objects."""
  nodes: [MaintenanceVisitRemarksIndex!]!

  """
  A list of edges which contains the `MaintenanceVisitRemarksIndex` and cursor to aid in pagination.
  """
  edges: [MaintenanceVisitRemarksIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MaintenanceVisitRemarksIndex` you could get from the connection.
  """
  totalCount: Int!
}

type MaintenanceVisitRemarksIndex {
  id: Int
  maintenanceVisitId: Int
  line: Int
  remarks: String
  cdartikel: String
  aantal: BigFloat
  cdmagazijn: String
  followUp: String
  omschr: String
}

"""A `MaintenanceVisitRemarksIndex` edge in the connection."""
type MaintenanceVisitRemarksIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MaintenanceVisitRemarksIndex` at the end of the edge."""
  node: MaintenanceVisitRemarksIndex!
}

"""Methods to use when ordering `MaintenanceVisitRemarksIndex`."""
enum MaintenanceVisitRemarksIndicesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MAINTENANCE_VISIT_ID_ASC
  MAINTENANCE_VISIT_ID_DESC
  LINE_ASC
  LINE_DESC
  REMARKS_ASC
  REMARKS_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  AANTAL_ASC
  AANTAL_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  FOLLOW_UP_ASC
  FOLLOW_UP_DESC
  OMSCHR_ASC
  OMSCHR_DESC
}

"""
A condition to be used against `MaintenanceVisitRemarksIndex` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input MaintenanceVisitRemarksIndexCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `maintenanceVisitId` field."""
  maintenanceVisitId: Int

  """Checks for equality with the object’s `line` field."""
  line: Int

  """Checks for equality with the object’s `remarks` field."""
  remarks: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `aantal` field."""
  aantal: BigFloat

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `followUp` field."""
  followUp: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String
}

"""
A filter to be used against `MaintenanceVisitRemarksIndex` object types. All fields are combined with a logical ‘and.’
"""
input MaintenanceVisitRemarksIndexFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `maintenanceVisitId` field."""
  maintenanceVisitId: IntFilter

  """Filter by the object’s `line` field."""
  line: IntFilter

  """Filter by the object’s `remarks` field."""
  remarks: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `aantal` field."""
  aantal: BigFloatFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `followUp` field."""
  followUp: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Checks for all expressions in this list."""
  and: [MaintenanceVisitRemarksIndexFilter!]

  """Checks for any expressions in this list."""
  or: [MaintenanceVisitRemarksIndexFilter!]

  """Negates the expression."""
  not: MaintenanceVisitRemarksIndexFilter
}

"""A connection to a list of `MaintenanceVisitsCalGasMaterial` values."""
type MaintenanceVisitsCalGasMaterialsConnection {
  """A list of `MaintenanceVisitsCalGasMaterial` objects."""
  nodes: [MaintenanceVisitsCalGasMaterial!]!

  """
  A list of edges which contains the `MaintenanceVisitsCalGasMaterial` and cursor to aid in pagination.
  """
  edges: [MaintenanceVisitsCalGasMaterialsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MaintenanceVisitsCalGasMaterial` you could get from the connection.
  """
  totalCount: Int!
}

type MaintenanceVisitsCalGasMaterial {
  cdartikel: String
  omschr: String
  id: Int
  points: BigInt
  quantity: String
}

"""A `MaintenanceVisitsCalGasMaterial` edge in the connection."""
type MaintenanceVisitsCalGasMaterialsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MaintenanceVisitsCalGasMaterial` at the end of the edge."""
  node: MaintenanceVisitsCalGasMaterial!
}

"""Methods to use when ordering `MaintenanceVisitsCalGasMaterial`."""
enum MaintenanceVisitsCalGasMaterialsOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  ID_ASC
  ID_DESC
  POINTS_ASC
  POINTS_DESC
  QUANTITY_ASC
  QUANTITY_DESC
}

"""
A condition to be used against `MaintenanceVisitsCalGasMaterial` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input MaintenanceVisitsCalGasMaterialCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `points` field."""
  points: BigInt

  """Checks for equality with the object’s `quantity` field."""
  quantity: String
}

"""
A filter to be used against `MaintenanceVisitsCalGasMaterial` object types. All fields are combined with a logical ‘and.’
"""
input MaintenanceVisitsCalGasMaterialFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `points` field."""
  points: BigIntFilter

  """Filter by the object’s `quantity` field."""
  quantity: StringFilter

  """Checks for all expressions in this list."""
  and: [MaintenanceVisitsCalGasMaterialFilter!]

  """Checks for any expressions in this list."""
  or: [MaintenanceVisitsCalGasMaterialFilter!]

  """Negates the expression."""
  not: MaintenanceVisitsCalGasMaterialFilter
}

"""A connection to a list of `MaintenanceVisitsEdit` values."""
type MaintenanceVisitsEditsConnection {
  """A list of `MaintenanceVisitsEdit` objects."""
  nodes: [MaintenanceVisitsEdit!]!

  """
  A list of edges which contains the `MaintenanceVisitsEdit` and cursor to aid in pagination.
  """
  edges: [MaintenanceVisitsEditsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MaintenanceVisitsEdit` you could get from the connection.
  """
  totalCount: Int!
}

type MaintenanceVisitsEdit {
  id: Int
  maintenanceVisitLineId: Int
  detectorSensorLocationId: Int
  buildingId: Int
  buildingName: String
  floorName: String
  areaName: String
  samplePointName: String
  applicationName: String
  simsTag: String
  simsChannel: Int
  detectorModel: String
  detectorSerialNumber: String
  detectorPosition: Int
  sensorModel: String
  range: String
  sensorSerialNumber: String
  lastSensorMaintenanceDate: String
  sensorMaintenanceDueDate: Date
  sensorMaintenanceDueDateLabel: String
  sensorMaintenanceDueClass: String
  sensorInstallDueDate: Date
  sensorInstallDueDateLabel: String
  sensorInstallDueClass: String
  filterInstallDueDate: Date
  filterInstallDueDateLabel: String
  filterInstallDueClass: String
  pyrolyserInstallDueDate: Date
  pyrolyserInstallDueDateLabel: String
  pyrolyserInstallDueClass: String
}

"""A `MaintenanceVisitsEdit` edge in the connection."""
type MaintenanceVisitsEditsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MaintenanceVisitsEdit` at the end of the edge."""
  node: MaintenanceVisitsEdit!
}

"""Methods to use when ordering `MaintenanceVisitsEdit`."""
enum MaintenanceVisitsEditsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MAINTENANCE_VISIT_LINE_ID_ASC
  MAINTENANCE_VISIT_LINE_ID_DESC
  DETECTOR_SENSOR_LOCATION_ID_ASC
  DETECTOR_SENSOR_LOCATION_ID_DESC
  BUILDING_ID_ASC
  BUILDING_ID_DESC
  BUILDING_NAME_ASC
  BUILDING_NAME_DESC
  FLOOR_NAME_ASC
  FLOOR_NAME_DESC
  AREA_NAME_ASC
  AREA_NAME_DESC
  SAMPLE_POINT_NAME_ASC
  SAMPLE_POINT_NAME_DESC
  APPLICATION_NAME_ASC
  APPLICATION_NAME_DESC
  SIMS_TAG_ASC
  SIMS_TAG_DESC
  SIMS_CHANNEL_ASC
  SIMS_CHANNEL_DESC
  DETECTOR_MODEL_ASC
  DETECTOR_MODEL_DESC
  DETECTOR_SERIAL_NUMBER_ASC
  DETECTOR_SERIAL_NUMBER_DESC
  DETECTOR_POSITION_ASC
  DETECTOR_POSITION_DESC
  SENSOR_MODEL_ASC
  SENSOR_MODEL_DESC
  RANGE_ASC
  RANGE_DESC
  SENSOR_SERIAL_NUMBER_ASC
  SENSOR_SERIAL_NUMBER_DESC
  LAST_SENSOR_MAINTENANCE_DATE_ASC
  LAST_SENSOR_MAINTENANCE_DATE_DESC
  SENSOR_MAINTENANCE_DUE_DATE_ASC
  SENSOR_MAINTENANCE_DUE_DATE_DESC
  SENSOR_MAINTENANCE_DUE_DATE_LABEL_ASC
  SENSOR_MAINTENANCE_DUE_DATE_LABEL_DESC
  SENSOR_MAINTENANCE_DUE_CLASS_ASC
  SENSOR_MAINTENANCE_DUE_CLASS_DESC
  SENSOR_INSTALL_DUE_DATE_ASC
  SENSOR_INSTALL_DUE_DATE_DESC
  SENSOR_INSTALL_DUE_DATE_LABEL_ASC
  SENSOR_INSTALL_DUE_DATE_LABEL_DESC
  SENSOR_INSTALL_DUE_CLASS_ASC
  SENSOR_INSTALL_DUE_CLASS_DESC
  FILTER_INSTALL_DUE_DATE_ASC
  FILTER_INSTALL_DUE_DATE_DESC
  FILTER_INSTALL_DUE_DATE_LABEL_ASC
  FILTER_INSTALL_DUE_DATE_LABEL_DESC
  FILTER_INSTALL_DUE_CLASS_ASC
  FILTER_INSTALL_DUE_CLASS_DESC
  PYROLYSER_INSTALL_DUE_DATE_ASC
  PYROLYSER_INSTALL_DUE_DATE_DESC
  PYROLYSER_INSTALL_DUE_DATE_LABEL_ASC
  PYROLYSER_INSTALL_DUE_DATE_LABEL_DESC
  PYROLYSER_INSTALL_DUE_CLASS_ASC
  PYROLYSER_INSTALL_DUE_CLASS_DESC
}

"""
A condition to be used against `MaintenanceVisitsEdit` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input MaintenanceVisitsEditCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `maintenanceVisitLineId` field."""
  maintenanceVisitLineId: Int

  """
  Checks for equality with the object’s `detectorSensorLocationId` field.
  """
  detectorSensorLocationId: Int

  """Checks for equality with the object’s `buildingId` field."""
  buildingId: Int

  """Checks for equality with the object’s `buildingName` field."""
  buildingName: String

  """Checks for equality with the object’s `floorName` field."""
  floorName: String

  """Checks for equality with the object’s `areaName` field."""
  areaName: String

  """Checks for equality with the object’s `samplePointName` field."""
  samplePointName: String

  """Checks for equality with the object’s `applicationName` field."""
  applicationName: String

  """Checks for equality with the object’s `simsTag` field."""
  simsTag: String

  """Checks for equality with the object’s `simsChannel` field."""
  simsChannel: Int

  """Checks for equality with the object’s `detectorModel` field."""
  detectorModel: String

  """Checks for equality with the object’s `detectorSerialNumber` field."""
  detectorSerialNumber: String

  """Checks for equality with the object’s `detectorPosition` field."""
  detectorPosition: Int

  """Checks for equality with the object’s `sensorModel` field."""
  sensorModel: String

  """Checks for equality with the object’s `range` field."""
  range: String

  """Checks for equality with the object’s `sensorSerialNumber` field."""
  sensorSerialNumber: String

  """
  Checks for equality with the object’s `lastSensorMaintenanceDate` field.
  """
  lastSensorMaintenanceDate: String

  """
  Checks for equality with the object’s `sensorMaintenanceDueDate` field.
  """
  sensorMaintenanceDueDate: Date

  """
  Checks for equality with the object’s `sensorMaintenanceDueDateLabel` field.
  """
  sensorMaintenanceDueDateLabel: String

  """
  Checks for equality with the object’s `sensorMaintenanceDueClass` field.
  """
  sensorMaintenanceDueClass: String

  """Checks for equality with the object’s `sensorInstallDueDate` field."""
  sensorInstallDueDate: Date

  """
  Checks for equality with the object’s `sensorInstallDueDateLabel` field.
  """
  sensorInstallDueDateLabel: String

  """Checks for equality with the object’s `sensorInstallDueClass` field."""
  sensorInstallDueClass: String

  """Checks for equality with the object’s `filterInstallDueDate` field."""
  filterInstallDueDate: Date

  """
  Checks for equality with the object’s `filterInstallDueDateLabel` field.
  """
  filterInstallDueDateLabel: String

  """Checks for equality with the object’s `filterInstallDueClass` field."""
  filterInstallDueClass: String

  """Checks for equality with the object’s `pyrolyserInstallDueDate` field."""
  pyrolyserInstallDueDate: Date

  """
  Checks for equality with the object’s `pyrolyserInstallDueDateLabel` field.
  """
  pyrolyserInstallDueDateLabel: String

  """
  Checks for equality with the object’s `pyrolyserInstallDueClass` field.
  """
  pyrolyserInstallDueClass: String
}

"""
A filter to be used against `MaintenanceVisitsEdit` object types. All fields are combined with a logical ‘and.’
"""
input MaintenanceVisitsEditFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `maintenanceVisitLineId` field."""
  maintenanceVisitLineId: IntFilter

  """Filter by the object’s `detectorSensorLocationId` field."""
  detectorSensorLocationId: IntFilter

  """Filter by the object’s `buildingId` field."""
  buildingId: IntFilter

  """Filter by the object’s `buildingName` field."""
  buildingName: StringFilter

  """Filter by the object’s `floorName` field."""
  floorName: StringFilter

  """Filter by the object’s `areaName` field."""
  areaName: StringFilter

  """Filter by the object’s `samplePointName` field."""
  samplePointName: StringFilter

  """Filter by the object’s `applicationName` field."""
  applicationName: StringFilter

  """Filter by the object’s `simsTag` field."""
  simsTag: StringFilter

  """Filter by the object’s `simsChannel` field."""
  simsChannel: IntFilter

  """Filter by the object’s `detectorModel` field."""
  detectorModel: StringFilter

  """Filter by the object’s `detectorSerialNumber` field."""
  detectorSerialNumber: StringFilter

  """Filter by the object’s `detectorPosition` field."""
  detectorPosition: IntFilter

  """Filter by the object’s `sensorModel` field."""
  sensorModel: StringFilter

  """Filter by the object’s `range` field."""
  range: StringFilter

  """Filter by the object’s `sensorSerialNumber` field."""
  sensorSerialNumber: StringFilter

  """Filter by the object’s `lastSensorMaintenanceDate` field."""
  lastSensorMaintenanceDate: StringFilter

  """Filter by the object’s `sensorMaintenanceDueDate` field."""
  sensorMaintenanceDueDate: DateFilter

  """Filter by the object’s `sensorMaintenanceDueDateLabel` field."""
  sensorMaintenanceDueDateLabel: StringFilter

  """Filter by the object’s `sensorMaintenanceDueClass` field."""
  sensorMaintenanceDueClass: StringFilter

  """Filter by the object’s `sensorInstallDueDate` field."""
  sensorInstallDueDate: DateFilter

  """Filter by the object’s `sensorInstallDueDateLabel` field."""
  sensorInstallDueDateLabel: StringFilter

  """Filter by the object’s `sensorInstallDueClass` field."""
  sensorInstallDueClass: StringFilter

  """Filter by the object’s `filterInstallDueDate` field."""
  filterInstallDueDate: DateFilter

  """Filter by the object’s `filterInstallDueDateLabel` field."""
  filterInstallDueDateLabel: StringFilter

  """Filter by the object’s `filterInstallDueClass` field."""
  filterInstallDueClass: StringFilter

  """Filter by the object’s `pyrolyserInstallDueDate` field."""
  pyrolyserInstallDueDate: DateFilter

  """Filter by the object’s `pyrolyserInstallDueDateLabel` field."""
  pyrolyserInstallDueDateLabel: StringFilter

  """Filter by the object’s `pyrolyserInstallDueClass` field."""
  pyrolyserInstallDueClass: StringFilter

  """Checks for all expressions in this list."""
  and: [MaintenanceVisitsEditFilter!]

  """Checks for any expressions in this list."""
  or: [MaintenanceVisitsEditFilter!]

  """Negates the expression."""
  not: MaintenanceVisitsEditFilter
}

"""
A connection to a list of `MaintenanceVisitsElectrolyteMaterial` values.
"""
type MaintenanceVisitsElectrolyteMaterialsConnection {
  """A list of `MaintenanceVisitsElectrolyteMaterial` objects."""
  nodes: [MaintenanceVisitsElectrolyteMaterial!]!

  """
  A list of edges which contains the `MaintenanceVisitsElectrolyteMaterial` and cursor to aid in pagination.
  """
  edges: [MaintenanceVisitsElectrolyteMaterialsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MaintenanceVisitsElectrolyteMaterial` you could get from the connection.
  """
  totalCount: Int!
}

type MaintenanceVisitsElectrolyteMaterial {
  cdartikel: String
  omschr: String
  id: Int
  points: BigInt
  quantity: Float
}

"""A `MaintenanceVisitsElectrolyteMaterial` edge in the connection."""
type MaintenanceVisitsElectrolyteMaterialsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MaintenanceVisitsElectrolyteMaterial` at the end of the edge."""
  node: MaintenanceVisitsElectrolyteMaterial!
}

"""Methods to use when ordering `MaintenanceVisitsElectrolyteMaterial`."""
enum MaintenanceVisitsElectrolyteMaterialsOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  ID_ASC
  ID_DESC
  POINTS_ASC
  POINTS_DESC
  QUANTITY_ASC
  QUANTITY_DESC
}

"""
A condition to be used against `MaintenanceVisitsElectrolyteMaterial` object
types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MaintenanceVisitsElectrolyteMaterialCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `points` field."""
  points: BigInt

  """Checks for equality with the object’s `quantity` field."""
  quantity: Float
}

"""
A filter to be used against `MaintenanceVisitsElectrolyteMaterial` object types. All fields are combined with a logical ‘and.’
"""
input MaintenanceVisitsElectrolyteMaterialFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `points` field."""
  points: BigIntFilter

  """Filter by the object’s `quantity` field."""
  quantity: FloatFilter

  """Checks for all expressions in this list."""
  and: [MaintenanceVisitsElectrolyteMaterialFilter!]

  """Checks for any expressions in this list."""
  or: [MaintenanceVisitsElectrolyteMaterialFilter!]

  """Negates the expression."""
  not: MaintenanceVisitsElectrolyteMaterialFilter
}

"""A connection to a list of `MaintenanceVisitsFilterMaterial` values."""
type MaintenanceVisitsFilterMaterialsConnection {
  """A list of `MaintenanceVisitsFilterMaterial` objects."""
  nodes: [MaintenanceVisitsFilterMaterial!]!

  """
  A list of edges which contains the `MaintenanceVisitsFilterMaterial` and cursor to aid in pagination.
  """
  edges: [MaintenanceVisitsFilterMaterialsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MaintenanceVisitsFilterMaterial` you could get from the connection.
  """
  totalCount: Int!
}

type MaintenanceVisitsFilterMaterial {
  cdartikel: String
  omschr: String
  id: Int
  points: BigInt
  quantity: BigInt
}

"""A `MaintenanceVisitsFilterMaterial` edge in the connection."""
type MaintenanceVisitsFilterMaterialsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MaintenanceVisitsFilterMaterial` at the end of the edge."""
  node: MaintenanceVisitsFilterMaterial!
}

"""Methods to use when ordering `MaintenanceVisitsFilterMaterial`."""
enum MaintenanceVisitsFilterMaterialsOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  ID_ASC
  ID_DESC
  POINTS_ASC
  POINTS_DESC
  QUANTITY_ASC
  QUANTITY_DESC
}

"""
A condition to be used against `MaintenanceVisitsFilterMaterial` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input MaintenanceVisitsFilterMaterialCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `points` field."""
  points: BigInt

  """Checks for equality with the object’s `quantity` field."""
  quantity: BigInt
}

"""
A filter to be used against `MaintenanceVisitsFilterMaterial` object types. All fields are combined with a logical ‘and.’
"""
input MaintenanceVisitsFilterMaterialFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `points` field."""
  points: BigIntFilter

  """Filter by the object’s `quantity` field."""
  quantity: BigIntFilter

  """Checks for all expressions in this list."""
  and: [MaintenanceVisitsFilterMaterialFilter!]

  """Checks for any expressions in this list."""
  or: [MaintenanceVisitsFilterMaterialFilter!]

  """Negates the expression."""
  not: MaintenanceVisitsFilterMaterialFilter
}

"""A connection to a list of `MaintenanceVisitsIndex` values."""
type MaintenanceVisitsIndicesConnection {
  """A list of `MaintenanceVisitsIndex` objects."""
  nodes: [MaintenanceVisitsIndex!]!

  """
  A list of edges which contains the `MaintenanceVisitsIndex` and cursor to aid in pagination.
  """
  edges: [MaintenanceVisitsIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MaintenanceVisitsIndex` you could get from the connection.
  """
  totalCount: Int!
}

type MaintenanceVisitsIndex {
  id: Int
  date: Date
  contactName: String
  contactEmail: String
  duration: Int
  labourHours: BigFloat
  locked: Boolean
  checked: Boolean
  cdmagazijn: String
  name: String
  endUserId: Int
  endUserName: String
  cddebiteur: String
  debiteurNaam: String
  location: String
  address: String
  fullname: String
  factuuropdracht: String
  referentie: String
  cddossier: String
  factuurnummer: String
  userInitials: String
  userFullname: String
  lineCount: BigInt
  linesPerDay: BigInt
  sensorMaintenanceDueCount: BigInt
  sensorMaintenanceCount: BigInt
  sensorInstallDueCount: BigInt
  sensorInstallCount: BigInt
  pyrolyserInstallDueCount: BigInt
  pyrolyserInstallCount: BigInt
  filterInstallDueCount: BigInt
  filterInstallCount: BigInt
  remarkCount: BigInt
}

"""A `MaintenanceVisitsIndex` edge in the connection."""
type MaintenanceVisitsIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MaintenanceVisitsIndex` at the end of the edge."""
  node: MaintenanceVisitsIndex!
}

"""Methods to use when ordering `MaintenanceVisitsIndex`."""
enum MaintenanceVisitsIndicesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DATE_ASC
  DATE_DESC
  CONTACT_NAME_ASC
  CONTACT_NAME_DESC
  CONTACT_EMAIL_ASC
  CONTACT_EMAIL_DESC
  DURATION_ASC
  DURATION_DESC
  LABOUR_HOURS_ASC
  LABOUR_HOURS_DESC
  LOCKED_ASC
  LOCKED_DESC
  CHECKED_ASC
  CHECKED_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  NAME_ASC
  NAME_DESC
  END_USER_ID_ASC
  END_USER_ID_DESC
  END_USER_NAME_ASC
  END_USER_NAME_DESC
  CDDEBITEUR_ASC
  CDDEBITEUR_DESC
  DEBITEUR_NAAM_ASC
  DEBITEUR_NAAM_DESC
  LOCATION_ASC
  LOCATION_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  FULLNAME_ASC
  FULLNAME_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  REFERENTIE_ASC
  REFERENTIE_DESC
  CDDOSSIER_ASC
  CDDOSSIER_DESC
  FACTUURNUMMER_ASC
  FACTUURNUMMER_DESC
  USER_INITIALS_ASC
  USER_INITIALS_DESC
  USER_FULLNAME_ASC
  USER_FULLNAME_DESC
  LINE_COUNT_ASC
  LINE_COUNT_DESC
  LINES_PER_DAY_ASC
  LINES_PER_DAY_DESC
  SENSOR_MAINTENANCE_DUE_COUNT_ASC
  SENSOR_MAINTENANCE_DUE_COUNT_DESC
  SENSOR_MAINTENANCE_COUNT_ASC
  SENSOR_MAINTENANCE_COUNT_DESC
  SENSOR_INSTALL_DUE_COUNT_ASC
  SENSOR_INSTALL_DUE_COUNT_DESC
  SENSOR_INSTALL_COUNT_ASC
  SENSOR_INSTALL_COUNT_DESC
  PYROLYSER_INSTALL_DUE_COUNT_ASC
  PYROLYSER_INSTALL_DUE_COUNT_DESC
  PYROLYSER_INSTALL_COUNT_ASC
  PYROLYSER_INSTALL_COUNT_DESC
  FILTER_INSTALL_DUE_COUNT_ASC
  FILTER_INSTALL_DUE_COUNT_DESC
  FILTER_INSTALL_COUNT_ASC
  FILTER_INSTALL_COUNT_DESC
  REMARK_COUNT_ASC
  REMARK_COUNT_DESC
}

"""
A condition to be used against `MaintenanceVisitsIndex` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input MaintenanceVisitsIndexCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `contactName` field."""
  contactName: String

  """Checks for equality with the object’s `contactEmail` field."""
  contactEmail: String

  """Checks for equality with the object’s `duration` field."""
  duration: Int

  """Checks for equality with the object’s `labourHours` field."""
  labourHours: BigFloat

  """Checks for equality with the object’s `locked` field."""
  locked: Boolean

  """Checks for equality with the object’s `checked` field."""
  checked: Boolean

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `endUserId` field."""
  endUserId: Int

  """Checks for equality with the object’s `endUserName` field."""
  endUserName: String

  """Checks for equality with the object’s `cddebiteur` field."""
  cddebiteur: String

  """Checks for equality with the object’s `debiteurNaam` field."""
  debiteurNaam: String

  """Checks for equality with the object’s `location` field."""
  location: String

  """Checks for equality with the object’s `address` field."""
  address: String

  """Checks for equality with the object’s `fullname` field."""
  fullname: String

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `referentie` field."""
  referentie: String

  """Checks for equality with the object’s `cddossier` field."""
  cddossier: String

  """Checks for equality with the object’s `factuurnummer` field."""
  factuurnummer: String

  """Checks for equality with the object’s `userInitials` field."""
  userInitials: String

  """Checks for equality with the object’s `userFullname` field."""
  userFullname: String

  """Checks for equality with the object’s `lineCount` field."""
  lineCount: BigInt

  """Checks for equality with the object’s `linesPerDay` field."""
  linesPerDay: BigInt

  """
  Checks for equality with the object’s `sensorMaintenanceDueCount` field.
  """
  sensorMaintenanceDueCount: BigInt

  """Checks for equality with the object’s `sensorMaintenanceCount` field."""
  sensorMaintenanceCount: BigInt

  """Checks for equality with the object’s `sensorInstallDueCount` field."""
  sensorInstallDueCount: BigInt

  """Checks for equality with the object’s `sensorInstallCount` field."""
  sensorInstallCount: BigInt

  """
  Checks for equality with the object’s `pyrolyserInstallDueCount` field.
  """
  pyrolyserInstallDueCount: BigInt

  """Checks for equality with the object’s `pyrolyserInstallCount` field."""
  pyrolyserInstallCount: BigInt

  """Checks for equality with the object’s `filterInstallDueCount` field."""
  filterInstallDueCount: BigInt

  """Checks for equality with the object’s `filterInstallCount` field."""
  filterInstallCount: BigInt

  """Checks for equality with the object’s `remarkCount` field."""
  remarkCount: BigInt
}

"""
A filter to be used against `MaintenanceVisitsIndex` object types. All fields are combined with a logical ‘and.’
"""
input MaintenanceVisitsIndexFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `date` field."""
  date: DateFilter

  """Filter by the object’s `contactName` field."""
  contactName: StringFilter

  """Filter by the object’s `contactEmail` field."""
  contactEmail: StringFilter

  """Filter by the object’s `duration` field."""
  duration: IntFilter

  """Filter by the object’s `labourHours` field."""
  labourHours: BigFloatFilter

  """Filter by the object’s `locked` field."""
  locked: BooleanFilter

  """Filter by the object’s `checked` field."""
  checked: BooleanFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `endUserId` field."""
  endUserId: IntFilter

  """Filter by the object’s `endUserName` field."""
  endUserName: StringFilter

  """Filter by the object’s `cddebiteur` field."""
  cddebiteur: StringFilter

  """Filter by the object’s `debiteurNaam` field."""
  debiteurNaam: StringFilter

  """Filter by the object’s `location` field."""
  location: StringFilter

  """Filter by the object’s `address` field."""
  address: StringFilter

  """Filter by the object’s `fullname` field."""
  fullname: StringFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `referentie` field."""
  referentie: StringFilter

  """Filter by the object’s `cddossier` field."""
  cddossier: StringFilter

  """Filter by the object’s `factuurnummer` field."""
  factuurnummer: StringFilter

  """Filter by the object’s `userInitials` field."""
  userInitials: StringFilter

  """Filter by the object’s `userFullname` field."""
  userFullname: StringFilter

  """Filter by the object’s `lineCount` field."""
  lineCount: BigIntFilter

  """Filter by the object’s `linesPerDay` field."""
  linesPerDay: BigIntFilter

  """Filter by the object’s `sensorMaintenanceDueCount` field."""
  sensorMaintenanceDueCount: BigIntFilter

  """Filter by the object’s `sensorMaintenanceCount` field."""
  sensorMaintenanceCount: BigIntFilter

  """Filter by the object’s `sensorInstallDueCount` field."""
  sensorInstallDueCount: BigIntFilter

  """Filter by the object’s `sensorInstallCount` field."""
  sensorInstallCount: BigIntFilter

  """Filter by the object’s `pyrolyserInstallDueCount` field."""
  pyrolyserInstallDueCount: BigIntFilter

  """Filter by the object’s `pyrolyserInstallCount` field."""
  pyrolyserInstallCount: BigIntFilter

  """Filter by the object’s `filterInstallDueCount` field."""
  filterInstallDueCount: BigIntFilter

  """Filter by the object’s `filterInstallCount` field."""
  filterInstallCount: BigIntFilter

  """Filter by the object’s `remarkCount` field."""
  remarkCount: BigIntFilter

  """Checks for all expressions in this list."""
  and: [MaintenanceVisitsIndexFilter!]

  """Checks for any expressions in this list."""
  or: [MaintenanceVisitsIndexFilter!]

  """Negates the expression."""
  not: MaintenanceVisitsIndexFilter
}

"""A connection to a list of `MaintenanceVisitsMaterialError` values."""
type MaintenanceVisitsMaterialErrorsConnection {
  """A list of `MaintenanceVisitsMaterialError` objects."""
  nodes: [MaintenanceVisitsMaterialError!]!

  """
  A list of edges which contains the `MaintenanceVisitsMaterialError` and cursor to aid in pagination.
  """
  edges: [MaintenanceVisitsMaterialErrorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MaintenanceVisitsMaterialError` you could get from the connection.
  """
  totalCount: Int!
}

type MaintenanceVisitsMaterialError {
  id: Int
  label: String
  controllerId: Int
  controller: String
  message: String
}

"""A `MaintenanceVisitsMaterialError` edge in the connection."""
type MaintenanceVisitsMaterialErrorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MaintenanceVisitsMaterialError` at the end of the edge."""
  node: MaintenanceVisitsMaterialError!
}

"""Methods to use when ordering `MaintenanceVisitsMaterialError`."""
enum MaintenanceVisitsMaterialErrorsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  LABEL_ASC
  LABEL_DESC
  CONTROLLER_ID_ASC
  CONTROLLER_ID_DESC
  CONTROLLER_ASC
  CONTROLLER_DESC
  MESSAGE_ASC
  MESSAGE_DESC
}

"""
A condition to be used against `MaintenanceVisitsMaterialError` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input MaintenanceVisitsMaterialErrorCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `label` field."""
  label: String

  """Checks for equality with the object’s `controllerId` field."""
  controllerId: Int

  """Checks for equality with the object’s `controller` field."""
  controller: String

  """Checks for equality with the object’s `message` field."""
  message: String
}

"""
A filter to be used against `MaintenanceVisitsMaterialError` object types. All fields are combined with a logical ‘and.’
"""
input MaintenanceVisitsMaterialErrorFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `label` field."""
  label: StringFilter

  """Filter by the object’s `controllerId` field."""
  controllerId: IntFilter

  """Filter by the object’s `controller` field."""
  controller: StringFilter

  """Filter by the object’s `message` field."""
  message: StringFilter

  """Checks for all expressions in this list."""
  and: [MaintenanceVisitsMaterialErrorFilter!]

  """Checks for any expressions in this list."""
  or: [MaintenanceVisitsMaterialErrorFilter!]

  """Negates the expression."""
  not: MaintenanceVisitsMaterialErrorFilter
}

"""A connection to a list of `MaintenanceVisitsMaterial` values."""
type MaintenanceVisitsMaterialsConnection {
  """A list of `MaintenanceVisitsMaterial` objects."""
  nodes: [MaintenanceVisitsMaterial!]!

  """
  A list of edges which contains the `MaintenanceVisitsMaterial` and cursor to aid in pagination.
  """
  edges: [MaintenanceVisitsMaterialsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MaintenanceVisitsMaterial` you could get from the connection.
  """
  totalCount: Int!
}

type MaintenanceVisitsMaterial {
  maintenanceVisitId: Int
  cdartikel: String
  omschr: String
  zoeknaam: String
  bestcode: String
  locatie: String
  voorraad: BigFloat
  inkopen: BigFloat
  quantity: BigFloat
  points: BigInt
  aantalbesteld: BigInt
}

"""A `MaintenanceVisitsMaterial` edge in the connection."""
type MaintenanceVisitsMaterialsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MaintenanceVisitsMaterial` at the end of the edge."""
  node: MaintenanceVisitsMaterial!
}

"""Methods to use when ordering `MaintenanceVisitsMaterial`."""
enum MaintenanceVisitsMaterialsOrderBy {
  NATURAL
  MAINTENANCE_VISIT_ID_ASC
  MAINTENANCE_VISIT_ID_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  BESTCODE_ASC
  BESTCODE_DESC
  LOCATIE_ASC
  LOCATIE_DESC
  VOORRAAD_ASC
  VOORRAAD_DESC
  INKOPEN_ASC
  INKOPEN_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  POINTS_ASC
  POINTS_DESC
  AANTALBESTELD_ASC
  AANTALBESTELD_DESC
}

"""
A condition to be used against `MaintenanceVisitsMaterial` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input MaintenanceVisitsMaterialCondition {
  """Checks for equality with the object’s `maintenanceVisitId` field."""
  maintenanceVisitId: Int

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `bestcode` field."""
  bestcode: String

  """Checks for equality with the object’s `locatie` field."""
  locatie: String

  """Checks for equality with the object’s `voorraad` field."""
  voorraad: BigFloat

  """Checks for equality with the object’s `inkopen` field."""
  inkopen: BigFloat

  """Checks for equality with the object’s `quantity` field."""
  quantity: BigFloat

  """Checks for equality with the object’s `points` field."""
  points: BigInt

  """Checks for equality with the object’s `aantalbesteld` field."""
  aantalbesteld: BigInt
}

"""
A filter to be used against `MaintenanceVisitsMaterial` object types. All fields are combined with a logical ‘and.’
"""
input MaintenanceVisitsMaterialFilter {
  """Filter by the object’s `maintenanceVisitId` field."""
  maintenanceVisitId: IntFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `bestcode` field."""
  bestcode: StringFilter

  """Filter by the object’s `locatie` field."""
  locatie: StringFilter

  """Filter by the object’s `voorraad` field."""
  voorraad: BigFloatFilter

  """Filter by the object’s `inkopen` field."""
  inkopen: BigFloatFilter

  """Filter by the object’s `quantity` field."""
  quantity: BigFloatFilter

  """Filter by the object’s `points` field."""
  points: BigIntFilter

  """Filter by the object’s `aantalbesteld` field."""
  aantalbesteld: BigIntFilter

  """Checks for all expressions in this list."""
  and: [MaintenanceVisitsMaterialFilter!]

  """Checks for any expressions in this list."""
  or: [MaintenanceVisitsMaterialFilter!]

  """Negates the expression."""
  not: MaintenanceVisitsMaterialFilter
}

"""A connection to a list of `MaintenanceVisitsMembraneMaterial` values."""
type MaintenanceVisitsMembraneMaterialsConnection {
  """A list of `MaintenanceVisitsMembraneMaterial` objects."""
  nodes: [MaintenanceVisitsMembraneMaterial!]!

  """
  A list of edges which contains the `MaintenanceVisitsMembraneMaterial` and cursor to aid in pagination.
  """
  edges: [MaintenanceVisitsMembraneMaterialsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MaintenanceVisitsMembraneMaterial` you could get from the connection.
  """
  totalCount: Int!
}

type MaintenanceVisitsMembraneMaterial {
  cdartikel: String
  omschr: String
  id: Int
  points: BigInt
  quantity: Float
}

"""A `MaintenanceVisitsMembraneMaterial` edge in the connection."""
type MaintenanceVisitsMembraneMaterialsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MaintenanceVisitsMembraneMaterial` at the end of the edge."""
  node: MaintenanceVisitsMembraneMaterial!
}

"""Methods to use when ordering `MaintenanceVisitsMembraneMaterial`."""
enum MaintenanceVisitsMembraneMaterialsOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  ID_ASC
  ID_DESC
  POINTS_ASC
  POINTS_DESC
  QUANTITY_ASC
  QUANTITY_DESC
}

"""
A condition to be used against `MaintenanceVisitsMembraneMaterial` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input MaintenanceVisitsMembraneMaterialCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `points` field."""
  points: BigInt

  """Checks for equality with the object’s `quantity` field."""
  quantity: Float
}

"""
A filter to be used against `MaintenanceVisitsMembraneMaterial` object types. All fields are combined with a logical ‘and.’
"""
input MaintenanceVisitsMembraneMaterialFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `points` field."""
  points: BigIntFilter

  """Filter by the object’s `quantity` field."""
  quantity: FloatFilter

  """Checks for all expressions in this list."""
  and: [MaintenanceVisitsMembraneMaterialFilter!]

  """Checks for any expressions in this list."""
  or: [MaintenanceVisitsMembraneMaterialFilter!]

  """Negates the expression."""
  not: MaintenanceVisitsMembraneMaterialFilter
}

"""A connection to a list of `MaintenanceVisitsORingMaterial` values."""
type MaintenanceVisitsORingMaterialsConnection {
  """A list of `MaintenanceVisitsORingMaterial` objects."""
  nodes: [MaintenanceVisitsORingMaterial!]!

  """
  A list of edges which contains the `MaintenanceVisitsORingMaterial` and cursor to aid in pagination.
  """
  edges: [MaintenanceVisitsORingMaterialsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MaintenanceVisitsORingMaterial` you could get from the connection.
  """
  totalCount: Int!
}

type MaintenanceVisitsORingMaterial {
  cdartikel: String
  omschr: String
  id: Int
  points: BigInt
  quantity: BigFloat
}

"""A `MaintenanceVisitsORingMaterial` edge in the connection."""
type MaintenanceVisitsORingMaterialsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MaintenanceVisitsORingMaterial` at the end of the edge."""
  node: MaintenanceVisitsORingMaterial!
}

"""Methods to use when ordering `MaintenanceVisitsORingMaterial`."""
enum MaintenanceVisitsORingMaterialsOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  ID_ASC
  ID_DESC
  POINTS_ASC
  POINTS_DESC
  QUANTITY_ASC
  QUANTITY_DESC
}

"""
A condition to be used against `MaintenanceVisitsORingMaterial` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input MaintenanceVisitsORingMaterialCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `points` field."""
  points: BigInt

  """Checks for equality with the object’s `quantity` field."""
  quantity: BigFloat
}

"""
A filter to be used against `MaintenanceVisitsORingMaterial` object types. All fields are combined with a logical ‘and.’
"""
input MaintenanceVisitsORingMaterialFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `points` field."""
  points: BigIntFilter

  """Filter by the object’s `quantity` field."""
  quantity: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [MaintenanceVisitsORingMaterialFilter!]

  """Checks for any expressions in this list."""
  or: [MaintenanceVisitsORingMaterialFilter!]

  """Negates the expression."""
  not: MaintenanceVisitsORingMaterialFilter
}

"""A connection to a list of `MaintenanceVisitsPyrolyserMaterial` values."""
type MaintenanceVisitsPyrolyserMaterialsConnection {
  """A list of `MaintenanceVisitsPyrolyserMaterial` objects."""
  nodes: [MaintenanceVisitsPyrolyserMaterial!]!

  """
  A list of edges which contains the `MaintenanceVisitsPyrolyserMaterial` and cursor to aid in pagination.
  """
  edges: [MaintenanceVisitsPyrolyserMaterialsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MaintenanceVisitsPyrolyserMaterial` you could get from the connection.
  """
  totalCount: Int!
}

type MaintenanceVisitsPyrolyserMaterial {
  cdartikel: String
  omschr: String
  id: Int
  points: BigInt
  quantity: BigInt
}

"""A `MaintenanceVisitsPyrolyserMaterial` edge in the connection."""
type MaintenanceVisitsPyrolyserMaterialsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MaintenanceVisitsPyrolyserMaterial` at the end of the edge."""
  node: MaintenanceVisitsPyrolyserMaterial!
}

"""Methods to use when ordering `MaintenanceVisitsPyrolyserMaterial`."""
enum MaintenanceVisitsPyrolyserMaterialsOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  ID_ASC
  ID_DESC
  POINTS_ASC
  POINTS_DESC
  QUANTITY_ASC
  QUANTITY_DESC
}

"""
A condition to be used against `MaintenanceVisitsPyrolyserMaterial` object
types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MaintenanceVisitsPyrolyserMaterialCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `points` field."""
  points: BigInt

  """Checks for equality with the object’s `quantity` field."""
  quantity: BigInt
}

"""
A filter to be used against `MaintenanceVisitsPyrolyserMaterial` object types. All fields are combined with a logical ‘and.’
"""
input MaintenanceVisitsPyrolyserMaterialFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `points` field."""
  points: BigIntFilter

  """Filter by the object’s `quantity` field."""
  quantity: BigIntFilter

  """Checks for all expressions in this list."""
  and: [MaintenanceVisitsPyrolyserMaterialFilter!]

  """Checks for any expressions in this list."""
  or: [MaintenanceVisitsPyrolyserMaterialFilter!]

  """Negates the expression."""
  not: MaintenanceVisitsPyrolyserMaterialFilter
}

"""A connection to a list of `MaintenanceVisitsSensorMaterial` values."""
type MaintenanceVisitsSensorMaterialsConnection {
  """A list of `MaintenanceVisitsSensorMaterial` objects."""
  nodes: [MaintenanceVisitsSensorMaterial!]!

  """
  A list of edges which contains the `MaintenanceVisitsSensorMaterial` and cursor to aid in pagination.
  """
  edges: [MaintenanceVisitsSensorMaterialsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MaintenanceVisitsSensorMaterial` you could get from the connection.
  """
  totalCount: Int!
}

type MaintenanceVisitsSensorMaterial {
  cdartikel: String
  omschr: String
  id: Int
  points: BigInt
  quantity: BigInt
}

"""A `MaintenanceVisitsSensorMaterial` edge in the connection."""
type MaintenanceVisitsSensorMaterialsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MaintenanceVisitsSensorMaterial` at the end of the edge."""
  node: MaintenanceVisitsSensorMaterial!
}

"""Methods to use when ordering `MaintenanceVisitsSensorMaterial`."""
enum MaintenanceVisitsSensorMaterialsOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  ID_ASC
  ID_DESC
  POINTS_ASC
  POINTS_DESC
  QUANTITY_ASC
  QUANTITY_DESC
}

"""
A condition to be used against `MaintenanceVisitsSensorMaterial` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input MaintenanceVisitsSensorMaterialCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `points` field."""
  points: BigInt

  """Checks for equality with the object’s `quantity` field."""
  quantity: BigInt
}

"""
A filter to be used against `MaintenanceVisitsSensorMaterial` object types. All fields are combined with a logical ‘and.’
"""
input MaintenanceVisitsSensorMaterialFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `points` field."""
  points: BigIntFilter

  """Filter by the object’s `quantity` field."""
  quantity: BigIntFilter

  """Checks for all expressions in this list."""
  and: [MaintenanceVisitsSensorMaterialFilter!]

  """Checks for any expressions in this list."""
  or: [MaintenanceVisitsSensorMaterialFilter!]

  """Negates the expression."""
  not: MaintenanceVisitsSensorMaterialFilter
}

"""A connection to a list of `MembraneEntity` values."""
type MembraneEntitiesConnection {
  """A list of `MembraneEntity` objects."""
  nodes: [MembraneEntity!]!

  """
  A list of edges which contains the `MembraneEntity` and cursor to aid in pagination.
  """
  edges: [MembraneEntitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MembraneEntity` you could get from the connection."""
  totalCount: Int!
}

type MembraneEntity {
  id: Int
  name: String
  created: Datetime
  omschr: String
  cdartikel: String
  quantity: Int
  replacementIntervalMonths: Int
  ownerId: Int
  initials: String
}

"""A `MembraneEntity` edge in the connection."""
type MembraneEntitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MembraneEntity` at the end of the edge."""
  node: MembraneEntity!
}

"""Methods to use when ordering `MembraneEntity`."""
enum MembraneEntitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  REPLACEMENT_INTERVAL_MONTHS_ASC
  REPLACEMENT_INTERVAL_MONTHS_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  INITIALS_ASC
  INITIALS_DESC
}

"""
A condition to be used against `MembraneEntity` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MembraneEntityCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `quantity` field."""
  quantity: Int

  """
  Checks for equality with the object’s `replacementIntervalMonths` field.
  """
  replacementIntervalMonths: Int

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `initials` field."""
  initials: String
}

"""
A filter to be used against `MembraneEntity` object types. All fields are combined with a logical ‘and.’
"""
input MembraneEntityFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `quantity` field."""
  quantity: IntFilter

  """Filter by the object’s `replacementIntervalMonths` field."""
  replacementIntervalMonths: IntFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `initials` field."""
  initials: StringFilter

  """Checks for all expressions in this list."""
  and: [MembraneEntityFilter!]

  """Checks for any expressions in this list."""
  or: [MembraneEntityFilter!]

  """Negates the expression."""
  not: MembraneEntityFilter
}

"""A connection to a list of `Notity` values."""
type NotitiesConnection {
  """A list of `Notity` objects."""
  nodes: [Notity!]!

  """
  A list of edges which contains the `Notity` and cursor to aid in pagination.
  """
  edges: [NotitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Notity` you could get from the connection."""
  totalCount: Int!
}

type Notity {
  cdnotitie: Int
  cdsoort: String
  datum: Date
  aktiedatum: Date
  afgehandeld: String
  document: String
  cdrelatie: Int
  tekst: String
  onderwerp: String
  gebruiker: String
  herkomst: String
  sellijstid: Int
  cddebiteur: String
  cdcrediteur: String
  guidWfWorkflow: String
  guidItemHerkomst: String
  wfTabelnaamHerkomst: String
  guidWfProces: String
  guidItem: String
  wfTabelnaam: String
  docVolgnummer: Int
}

"""A `Notity` edge in the connection."""
type NotitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Notity` at the end of the edge."""
  node: Notity!
}

"""Methods to use when ordering `Notity`."""
enum NotitiesOrderBy {
  NATURAL
  CDNOTITIE_ASC
  CDNOTITIE_DESC
  CDSOORT_ASC
  CDSOORT_DESC
  DATUM_ASC
  DATUM_DESC
  AKTIEDATUM_ASC
  AKTIEDATUM_DESC
  AFGEHANDELD_ASC
  AFGEHANDELD_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  CDRELATIE_ASC
  CDRELATIE_DESC
  TEKST_ASC
  TEKST_DESC
  ONDERWERP_ASC
  ONDERWERP_DESC
  GEBRUIKER_ASC
  GEBRUIKER_DESC
  HERKOMST_ASC
  HERKOMST_DESC
  SELLIJSTID_ASC
  SELLIJSTID_DESC
  CDDEBITEUR_ASC
  CDDEBITEUR_DESC
  CDCREDITEUR_ASC
  CDCREDITEUR_DESC
  GUID_WF_WORKFLOW_ASC
  GUID_WF_WORKFLOW_DESC
  GUID_ITEM_HERKOMST_ASC
  GUID_ITEM_HERKOMST_DESC
  WF_TABELNAAM_HERKOMST_ASC
  WF_TABELNAAM_HERKOMST_DESC
  GUID_WF_PROCES_ASC
  GUID_WF_PROCES_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  WF_TABELNAAM_ASC
  WF_TABELNAAM_DESC
  DOC_VOLGNUMMER_ASC
  DOC_VOLGNUMMER_DESC
}

"""
A condition to be used against `Notity` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input NotityCondition {
  """Checks for equality with the object’s `cdnotitie` field."""
  cdnotitie: Int

  """Checks for equality with the object’s `cdsoort` field."""
  cdsoort: String

  """Checks for equality with the object’s `datum` field."""
  datum: Date

  """Checks for equality with the object’s `aktiedatum` field."""
  aktiedatum: Date

  """Checks for equality with the object’s `afgehandeld` field."""
  afgehandeld: String

  """Checks for equality with the object’s `document` field."""
  document: String

  """Checks for equality with the object’s `cdrelatie` field."""
  cdrelatie: Int

  """Checks for equality with the object’s `tekst` field."""
  tekst: String

  """Checks for equality with the object’s `onderwerp` field."""
  onderwerp: String

  """Checks for equality with the object’s `gebruiker` field."""
  gebruiker: String

  """Checks for equality with the object’s `herkomst` field."""
  herkomst: String

  """Checks for equality with the object’s `sellijstid` field."""
  sellijstid: Int

  """Checks for equality with the object’s `cddebiteur` field."""
  cddebiteur: String

  """Checks for equality with the object’s `cdcrediteur` field."""
  cdcrediteur: String

  """Checks for equality with the object’s `guidWfWorkflow` field."""
  guidWfWorkflow: String

  """Checks for equality with the object’s `guidItemHerkomst` field."""
  guidItemHerkomst: String

  """Checks for equality with the object’s `wfTabelnaamHerkomst` field."""
  wfTabelnaamHerkomst: String

  """Checks for equality with the object’s `guidWfProces` field."""
  guidWfProces: String

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `wfTabelnaam` field."""
  wfTabelnaam: String

  """Checks for equality with the object’s `docVolgnummer` field."""
  docVolgnummer: Int
}

"""
A filter to be used against `Notity` object types. All fields are combined with a logical ‘and.’
"""
input NotityFilter {
  """Filter by the object’s `cdnotitie` field."""
  cdnotitie: IntFilter

  """Filter by the object’s `cdsoort` field."""
  cdsoort: StringFilter

  """Filter by the object’s `datum` field."""
  datum: DateFilter

  """Filter by the object’s `aktiedatum` field."""
  aktiedatum: DateFilter

  """Filter by the object’s `afgehandeld` field."""
  afgehandeld: StringFilter

  """Filter by the object’s `document` field."""
  document: StringFilter

  """Filter by the object’s `cdrelatie` field."""
  cdrelatie: IntFilter

  """Filter by the object’s `tekst` field."""
  tekst: StringFilter

  """Filter by the object’s `onderwerp` field."""
  onderwerp: StringFilter

  """Filter by the object’s `gebruiker` field."""
  gebruiker: StringFilter

  """Filter by the object’s `herkomst` field."""
  herkomst: StringFilter

  """Filter by the object’s `sellijstid` field."""
  sellijstid: IntFilter

  """Filter by the object’s `cddebiteur` field."""
  cddebiteur: StringFilter

  """Filter by the object’s `cdcrediteur` field."""
  cdcrediteur: StringFilter

  """Filter by the object’s `guidWfWorkflow` field."""
  guidWfWorkflow: StringFilter

  """Filter by the object’s `guidItemHerkomst` field."""
  guidItemHerkomst: StringFilter

  """Filter by the object’s `wfTabelnaamHerkomst` field."""
  wfTabelnaamHerkomst: StringFilter

  """Filter by the object’s `guidWfProces` field."""
  guidWfProces: StringFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `wfTabelnaam` field."""
  wfTabelnaam: StringFilter

  """Filter by the object’s `docVolgnummer` field."""
  docVolgnummer: IntFilter

  """Checks for all expressions in this list."""
  and: [NotityFilter!]

  """Checks for any expressions in this list."""
  or: [NotityFilter!]

  """Negates the expression."""
  not: NotityFilter
}

"""A connection to a list of `NotitiesMv` values."""
type NotitiesMvsConnection {
  """A list of `NotitiesMv` objects."""
  nodes: [NotitiesMv!]!

  """
  A list of edges which contains the `NotitiesMv` and cursor to aid in pagination.
  """
  edges: [NotitiesMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `NotitiesMv` you could get from the connection."""
  totalCount: Int!
}

type NotitiesMv {
  cdnotitie: Int
  cdsoort: String
  datum: Date
  aktiedatum: Date
  afgehandeld: String
  document: String
  cdrelatie: Int
  tekst: String
  onderwerp: String
  gebruiker: String
  herkomst: String
  sellijstid: Int
  cddebiteur: String
  cdcrediteur: String
  guidWfWorkflow: String
  guidItemHerkomst: String
  wfTabelnaamHerkomst: String
  guidWfProces: String
  guidItem: String
  wfTabelnaam: String
  docVolgnummer: Int
}

"""A `NotitiesMv` edge in the connection."""
type NotitiesMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NotitiesMv` at the end of the edge."""
  node: NotitiesMv!
}

"""Methods to use when ordering `NotitiesMv`."""
enum NotitiesMvsOrderBy {
  NATURAL
  CDNOTITIE_ASC
  CDNOTITIE_DESC
  CDSOORT_ASC
  CDSOORT_DESC
  DATUM_ASC
  DATUM_DESC
  AKTIEDATUM_ASC
  AKTIEDATUM_DESC
  AFGEHANDELD_ASC
  AFGEHANDELD_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  CDRELATIE_ASC
  CDRELATIE_DESC
  TEKST_ASC
  TEKST_DESC
  ONDERWERP_ASC
  ONDERWERP_DESC
  GEBRUIKER_ASC
  GEBRUIKER_DESC
  HERKOMST_ASC
  HERKOMST_DESC
  SELLIJSTID_ASC
  SELLIJSTID_DESC
  CDDEBITEUR_ASC
  CDDEBITEUR_DESC
  CDCREDITEUR_ASC
  CDCREDITEUR_DESC
  GUID_WF_WORKFLOW_ASC
  GUID_WF_WORKFLOW_DESC
  GUID_ITEM_HERKOMST_ASC
  GUID_ITEM_HERKOMST_DESC
  WF_TABELNAAM_HERKOMST_ASC
  WF_TABELNAAM_HERKOMST_DESC
  GUID_WF_PROCES_ASC
  GUID_WF_PROCES_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  WF_TABELNAAM_ASC
  WF_TABELNAAM_DESC
  DOC_VOLGNUMMER_ASC
  DOC_VOLGNUMMER_DESC
}

"""
A condition to be used against `NotitiesMv` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input NotitiesMvCondition {
  """Checks for equality with the object’s `cdnotitie` field."""
  cdnotitie: Int

  """Checks for equality with the object’s `cdsoort` field."""
  cdsoort: String

  """Checks for equality with the object’s `datum` field."""
  datum: Date

  """Checks for equality with the object’s `aktiedatum` field."""
  aktiedatum: Date

  """Checks for equality with the object’s `afgehandeld` field."""
  afgehandeld: String

  """Checks for equality with the object’s `document` field."""
  document: String

  """Checks for equality with the object’s `cdrelatie` field."""
  cdrelatie: Int

  """Checks for equality with the object’s `tekst` field."""
  tekst: String

  """Checks for equality with the object’s `onderwerp` field."""
  onderwerp: String

  """Checks for equality with the object’s `gebruiker` field."""
  gebruiker: String

  """Checks for equality with the object’s `herkomst` field."""
  herkomst: String

  """Checks for equality with the object’s `sellijstid` field."""
  sellijstid: Int

  """Checks for equality with the object’s `cddebiteur` field."""
  cddebiteur: String

  """Checks for equality with the object’s `cdcrediteur` field."""
  cdcrediteur: String

  """Checks for equality with the object’s `guidWfWorkflow` field."""
  guidWfWorkflow: String

  """Checks for equality with the object’s `guidItemHerkomst` field."""
  guidItemHerkomst: String

  """Checks for equality with the object’s `wfTabelnaamHerkomst` field."""
  wfTabelnaamHerkomst: String

  """Checks for equality with the object’s `guidWfProces` field."""
  guidWfProces: String

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `wfTabelnaam` field."""
  wfTabelnaam: String

  """Checks for equality with the object’s `docVolgnummer` field."""
  docVolgnummer: Int
}

"""
A filter to be used against `NotitiesMv` object types. All fields are combined with a logical ‘and.’
"""
input NotitiesMvFilter {
  """Filter by the object’s `cdnotitie` field."""
  cdnotitie: IntFilter

  """Filter by the object’s `cdsoort` field."""
  cdsoort: StringFilter

  """Filter by the object’s `datum` field."""
  datum: DateFilter

  """Filter by the object’s `aktiedatum` field."""
  aktiedatum: DateFilter

  """Filter by the object’s `afgehandeld` field."""
  afgehandeld: StringFilter

  """Filter by the object’s `document` field."""
  document: StringFilter

  """Filter by the object’s `cdrelatie` field."""
  cdrelatie: IntFilter

  """Filter by the object’s `tekst` field."""
  tekst: StringFilter

  """Filter by the object’s `onderwerp` field."""
  onderwerp: StringFilter

  """Filter by the object’s `gebruiker` field."""
  gebruiker: StringFilter

  """Filter by the object’s `herkomst` field."""
  herkomst: StringFilter

  """Filter by the object’s `sellijstid` field."""
  sellijstid: IntFilter

  """Filter by the object’s `cddebiteur` field."""
  cddebiteur: StringFilter

  """Filter by the object’s `cdcrediteur` field."""
  cdcrediteur: StringFilter

  """Filter by the object’s `guidWfWorkflow` field."""
  guidWfWorkflow: StringFilter

  """Filter by the object’s `guidItemHerkomst` field."""
  guidItemHerkomst: StringFilter

  """Filter by the object’s `wfTabelnaamHerkomst` field."""
  wfTabelnaamHerkomst: StringFilter

  """Filter by the object’s `guidWfProces` field."""
  guidWfProces: StringFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `wfTabelnaam` field."""
  wfTabelnaam: StringFilter

  """Filter by the object’s `docVolgnummer` field."""
  docVolgnummer: IntFilter

  """Checks for all expressions in this list."""
  and: [NotitiesMvFilter!]

  """Checks for any expressions in this list."""
  or: [NotitiesMvFilter!]

  """Negates the expression."""
  not: NotitiesMvFilter
}

"""A connection to a list of `ORingEntity` values."""
type ORingEntitiesConnection {
  """A list of `ORingEntity` objects."""
  nodes: [ORingEntity!]!

  """
  A list of edges which contains the `ORingEntity` and cursor to aid in pagination.
  """
  edges: [ORingEntitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ORingEntity` you could get from the connection."""
  totalCount: Int!
}

type ORingEntity {
  id: Int
  name: String
  created: Datetime
  omschr: String
  quantity: Int
  cdartikel: String
  replacementIntervalMonths: Int
  ownerId: Int
  initials: String
}

"""A `ORingEntity` edge in the connection."""
type ORingEntitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ORingEntity` at the end of the edge."""
  node: ORingEntity!
}

"""Methods to use when ordering `ORingEntity`."""
enum ORingEntitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  REPLACEMENT_INTERVAL_MONTHS_ASC
  REPLACEMENT_INTERVAL_MONTHS_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  INITIALS_ASC
  INITIALS_DESC
}

"""
A condition to be used against `ORingEntity` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ORingEntityCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `quantity` field."""
  quantity: Int

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """
  Checks for equality with the object’s `replacementIntervalMonths` field.
  """
  replacementIntervalMonths: Int

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `initials` field."""
  initials: String
}

"""
A filter to be used against `ORingEntity` object types. All fields are combined with a logical ‘and.’
"""
input ORingEntityFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `quantity` field."""
  quantity: IntFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `replacementIntervalMonths` field."""
  replacementIntervalMonths: IntFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `initials` field."""
  initials: StringFilter

  """Checks for all expressions in this list."""
  and: [ORingEntityFilter!]

  """Checks for any expressions in this list."""
  or: [ORingEntityFilter!]

  """Negates the expression."""
  not: ORingEntityFilter
}

"""A connection to a list of `Offerte` values."""
type OffertesConnection {
  """A list of `Offerte` objects."""
  nodes: [Offerte!]!

  """
  A list of edges which contains the `Offerte` and cursor to aid in pagination.
  """
  edges: [OffertesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Offerte` you could get from the connection."""
  totalCount: Int!
}

type Offerte {
  id: String
  offertenummer: String
  offertevolgnr: Int
  cdrelatie: Int
  cddebiteur: String
  offertedatum: Date
  cdbetcond: String
  cdlevcond: String
  cdvaluta: String
  cdbtw: String
  btwscenario: Int
  referentie: String
  kortingperc: BigFloat
  status: String
  adres: String
  afdrukteller: Int
  kredbepperc: BigFloat
  cdsoort: String
  geldigtm: Date
  kans: BigFloat
  koptekst: String
  voettekst: String
  cdreden: String
  kvc: String
  betkortperc: BigFloat
  cdvert: String
  notitieafwijzing: String
  datumafwijzing: Date
  verlorenaan: String
  cdadres: Int
  subadres: String
  cdpersoon: String
  persoon: String
  cdbehandelddoor: String
  behandelddoor: String
  vertegenwoordiger: String
  gefiatteerd: String
  cdfiatteur: String
  guidItem: String
  sysCreate: String
  sysUpdate: String
  margeblokkade: String
  projOfferte: String
  projOmschr: String
}

"""A `Offerte` edge in the connection."""
type OffertesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Offerte` at the end of the edge."""
  node: Offerte!
}

"""Methods to use when ordering `Offerte`."""
enum OffertesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  OFFERTENUMMER_ASC
  OFFERTENUMMER_DESC
  OFFERTEVOLGNR_ASC
  OFFERTEVOLGNR_DESC
  CDRELATIE_ASC
  CDRELATIE_DESC
  CDDEBITEUR_ASC
  CDDEBITEUR_DESC
  OFFERTEDATUM_ASC
  OFFERTEDATUM_DESC
  CDBETCOND_ASC
  CDBETCOND_DESC
  CDLEVCOND_ASC
  CDLEVCOND_DESC
  CDVALUTA_ASC
  CDVALUTA_DESC
  CDBTW_ASC
  CDBTW_DESC
  BTWSCENARIO_ASC
  BTWSCENARIO_DESC
  REFERENTIE_ASC
  REFERENTIE_DESC
  KORTINGPERC_ASC
  KORTINGPERC_DESC
  STATUS_ASC
  STATUS_DESC
  ADRES_ASC
  ADRES_DESC
  AFDRUKTELLER_ASC
  AFDRUKTELLER_DESC
  KREDBEPPERC_ASC
  KREDBEPPERC_DESC
  CDSOORT_ASC
  CDSOORT_DESC
  GELDIGTM_ASC
  GELDIGTM_DESC
  KANS_ASC
  KANS_DESC
  KOPTEKST_ASC
  KOPTEKST_DESC
  VOETTEKST_ASC
  VOETTEKST_DESC
  CDREDEN_ASC
  CDREDEN_DESC
  KVC_ASC
  KVC_DESC
  BETKORTPERC_ASC
  BETKORTPERC_DESC
  CDVERT_ASC
  CDVERT_DESC
  NOTITIEAFWIJZING_ASC
  NOTITIEAFWIJZING_DESC
  DATUMAFWIJZING_ASC
  DATUMAFWIJZING_DESC
  VERLORENAAN_ASC
  VERLORENAAN_DESC
  CDADRES_ASC
  CDADRES_DESC
  SUBADRES_ASC
  SUBADRES_DESC
  CDPERSOON_ASC
  CDPERSOON_DESC
  PERSOON_ASC
  PERSOON_DESC
  CDBEHANDELDDOOR_ASC
  CDBEHANDELDDOOR_DESC
  BEHANDELDDOOR_ASC
  BEHANDELDDOOR_DESC
  VERTEGENWOORDIGER_ASC
  VERTEGENWOORDIGER_DESC
  GEFIATTEERD_ASC
  GEFIATTEERD_DESC
  CDFIATTEUR_ASC
  CDFIATTEUR_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  SYS_CREATE_ASC
  SYS_CREATE_DESC
  SYS_UPDATE_ASC
  SYS_UPDATE_DESC
  MARGEBLOKKADE_ASC
  MARGEBLOKKADE_DESC
  PROJ_OFFERTE_ASC
  PROJ_OFFERTE_DESC
  PROJ_OMSCHR_ASC
  PROJ_OMSCHR_DESC
}

"""
A condition to be used against `Offerte` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input OfferteCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `offertenummer` field."""
  offertenummer: String

  """Checks for equality with the object’s `offertevolgnr` field."""
  offertevolgnr: Int

  """Checks for equality with the object’s `cdrelatie` field."""
  cdrelatie: Int

  """Checks for equality with the object’s `cddebiteur` field."""
  cddebiteur: String

  """Checks for equality with the object’s `offertedatum` field."""
  offertedatum: Date

  """Checks for equality with the object’s `cdbetcond` field."""
  cdbetcond: String

  """Checks for equality with the object’s `cdlevcond` field."""
  cdlevcond: String

  """Checks for equality with the object’s `cdvaluta` field."""
  cdvaluta: String

  """Checks for equality with the object’s `cdbtw` field."""
  cdbtw: String

  """Checks for equality with the object’s `btwscenario` field."""
  btwscenario: Int

  """Checks for equality with the object’s `referentie` field."""
  referentie: String

  """Checks for equality with the object’s `kortingperc` field."""
  kortingperc: BigFloat

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `adres` field."""
  adres: String

  """Checks for equality with the object’s `afdrukteller` field."""
  afdrukteller: Int

  """Checks for equality with the object’s `kredbepperc` field."""
  kredbepperc: BigFloat

  """Checks for equality with the object’s `cdsoort` field."""
  cdsoort: String

  """Checks for equality with the object’s `geldigtm` field."""
  geldigtm: Date

  """Checks for equality with the object’s `kans` field."""
  kans: BigFloat

  """Checks for equality with the object’s `koptekst` field."""
  koptekst: String

  """Checks for equality with the object’s `voettekst` field."""
  voettekst: String

  """Checks for equality with the object’s `cdreden` field."""
  cdreden: String

  """Checks for equality with the object’s `kvc` field."""
  kvc: String

  """Checks for equality with the object’s `betkortperc` field."""
  betkortperc: BigFloat

  """Checks for equality with the object’s `cdvert` field."""
  cdvert: String

  """Checks for equality with the object’s `notitieafwijzing` field."""
  notitieafwijzing: String

  """Checks for equality with the object’s `datumafwijzing` field."""
  datumafwijzing: Date

  """Checks for equality with the object’s `verlorenaan` field."""
  verlorenaan: String

  """Checks for equality with the object’s `cdadres` field."""
  cdadres: Int

  """Checks for equality with the object’s `subadres` field."""
  subadres: String

  """Checks for equality with the object’s `cdpersoon` field."""
  cdpersoon: String

  """Checks for equality with the object’s `persoon` field."""
  persoon: String

  """Checks for equality with the object’s `cdbehandelddoor` field."""
  cdbehandelddoor: String

  """Checks for equality with the object’s `behandelddoor` field."""
  behandelddoor: String

  """Checks for equality with the object’s `vertegenwoordiger` field."""
  vertegenwoordiger: String

  """Checks for equality with the object’s `gefiatteerd` field."""
  gefiatteerd: String

  """Checks for equality with the object’s `cdfiatteur` field."""
  cdfiatteur: String

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `sysCreate` field."""
  sysCreate: String

  """Checks for equality with the object’s `sysUpdate` field."""
  sysUpdate: String

  """Checks for equality with the object’s `margeblokkade` field."""
  margeblokkade: String

  """Checks for equality with the object’s `projOfferte` field."""
  projOfferte: String

  """Checks for equality with the object’s `projOmschr` field."""
  projOmschr: String
}

"""
A filter to be used against `Offerte` object types. All fields are combined with a logical ‘and.’
"""
input OfferteFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `offertenummer` field."""
  offertenummer: StringFilter

  """Filter by the object’s `offertevolgnr` field."""
  offertevolgnr: IntFilter

  """Filter by the object’s `cdrelatie` field."""
  cdrelatie: IntFilter

  """Filter by the object’s `cddebiteur` field."""
  cddebiteur: StringFilter

  """Filter by the object’s `offertedatum` field."""
  offertedatum: DateFilter

  """Filter by the object’s `cdbetcond` field."""
  cdbetcond: StringFilter

  """Filter by the object’s `cdlevcond` field."""
  cdlevcond: StringFilter

  """Filter by the object’s `cdvaluta` field."""
  cdvaluta: StringFilter

  """Filter by the object’s `cdbtw` field."""
  cdbtw: StringFilter

  """Filter by the object’s `btwscenario` field."""
  btwscenario: IntFilter

  """Filter by the object’s `referentie` field."""
  referentie: StringFilter

  """Filter by the object’s `kortingperc` field."""
  kortingperc: BigFloatFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `adres` field."""
  adres: StringFilter

  """Filter by the object’s `afdrukteller` field."""
  afdrukteller: IntFilter

  """Filter by the object’s `kredbepperc` field."""
  kredbepperc: BigFloatFilter

  """Filter by the object’s `cdsoort` field."""
  cdsoort: StringFilter

  """Filter by the object’s `geldigtm` field."""
  geldigtm: DateFilter

  """Filter by the object’s `kans` field."""
  kans: BigFloatFilter

  """Filter by the object’s `koptekst` field."""
  koptekst: StringFilter

  """Filter by the object’s `voettekst` field."""
  voettekst: StringFilter

  """Filter by the object’s `cdreden` field."""
  cdreden: StringFilter

  """Filter by the object’s `kvc` field."""
  kvc: StringFilter

  """Filter by the object’s `betkortperc` field."""
  betkortperc: BigFloatFilter

  """Filter by the object’s `cdvert` field."""
  cdvert: StringFilter

  """Filter by the object’s `notitieafwijzing` field."""
  notitieafwijzing: StringFilter

  """Filter by the object’s `datumafwijzing` field."""
  datumafwijzing: DateFilter

  """Filter by the object’s `verlorenaan` field."""
  verlorenaan: StringFilter

  """Filter by the object’s `cdadres` field."""
  cdadres: IntFilter

  """Filter by the object’s `subadres` field."""
  subadres: StringFilter

  """Filter by the object’s `cdpersoon` field."""
  cdpersoon: StringFilter

  """Filter by the object’s `persoon` field."""
  persoon: StringFilter

  """Filter by the object’s `cdbehandelddoor` field."""
  cdbehandelddoor: StringFilter

  """Filter by the object’s `behandelddoor` field."""
  behandelddoor: StringFilter

  """Filter by the object’s `vertegenwoordiger` field."""
  vertegenwoordiger: StringFilter

  """Filter by the object’s `gefiatteerd` field."""
  gefiatteerd: StringFilter

  """Filter by the object’s `cdfiatteur` field."""
  cdfiatteur: StringFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `sysCreate` field."""
  sysCreate: StringFilter

  """Filter by the object’s `sysUpdate` field."""
  sysUpdate: StringFilter

  """Filter by the object’s `margeblokkade` field."""
  margeblokkade: StringFilter

  """Filter by the object’s `projOfferte` field."""
  projOfferte: StringFilter

  """Filter by the object’s `projOmschr` field."""
  projOmschr: StringFilter

  """Checks for all expressions in this list."""
  and: [OfferteFilter!]

  """Checks for any expressions in this list."""
  or: [OfferteFilter!]

  """Negates the expression."""
  not: OfferteFilter
}

"""A connection to a list of `OfferteCsv` values."""
type OfferteCsvsConnection {
  """A list of `OfferteCsv` objects."""
  nodes: [OfferteCsv!]!

  """
  A list of edges which contains the `OfferteCsv` and cursor to aid in pagination.
  """
  edges: [OfferteCsvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `OfferteCsv` you could get from the connection."""
  totalCount: Int!
}

type OfferteCsv {
  quote: String
  date: Date
  status: String
  representativeCode: String
  companyCode: Int
  representative: String
  company: String
  industry: String
  countryCode: String
  country: String
  reference: String
  chance: Int
  amount: Int
  competitors: String
  actions: String
  actionDate: Date
  decisionDate: Date
  rejectedDate: Date
  detectorsSensors: String
}

"""A `OfferteCsv` edge in the connection."""
type OfferteCsvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OfferteCsv` at the end of the edge."""
  node: OfferteCsv!
}

"""Methods to use when ordering `OfferteCsv`."""
enum OfferteCsvsOrderBy {
  NATURAL
  QUOTE_ASC
  QUOTE_DESC
  DATE_ASC
  DATE_DESC
  STATUS_ASC
  STATUS_DESC
  REPRESENTATIVE_CODE_ASC
  REPRESENTATIVE_CODE_DESC
  COMPANY_CODE_ASC
  COMPANY_CODE_DESC
  REPRESENTATIVE_ASC
  REPRESENTATIVE_DESC
  COMPANY_ASC
  COMPANY_DESC
  INDUSTRY_ASC
  INDUSTRY_DESC
  COUNTRY_CODE_ASC
  COUNTRY_CODE_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  REFERENCE_ASC
  REFERENCE_DESC
  CHANCE_ASC
  CHANCE_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  COMPETITORS_ASC
  COMPETITORS_DESC
  ACTIONS_ASC
  ACTIONS_DESC
  ACTION_DATE_ASC
  ACTION_DATE_DESC
  DECISION_DATE_ASC
  DECISION_DATE_DESC
  REJECTED_DATE_ASC
  REJECTED_DATE_DESC
  DETECTORS_SENSORS_ASC
  DETECTORS_SENSORS_DESC
}

"""
A condition to be used against `OfferteCsv` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OfferteCsvCondition {
  """Checks for equality with the object’s `quote` field."""
  quote: String

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `representativeCode` field."""
  representativeCode: String

  """Checks for equality with the object’s `companyCode` field."""
  companyCode: Int

  """Checks for equality with the object’s `representative` field."""
  representative: String

  """Checks for equality with the object’s `company` field."""
  company: String

  """Checks for equality with the object’s `industry` field."""
  industry: String

  """Checks for equality with the object’s `countryCode` field."""
  countryCode: String

  """Checks for equality with the object’s `country` field."""
  country: String

  """Checks for equality with the object’s `reference` field."""
  reference: String

  """Checks for equality with the object’s `chance` field."""
  chance: Int

  """Checks for equality with the object’s `amount` field."""
  amount: Int

  """Checks for equality with the object’s `competitors` field."""
  competitors: String

  """Checks for equality with the object’s `actions` field."""
  actions: String

  """Checks for equality with the object’s `actionDate` field."""
  actionDate: Date

  """Checks for equality with the object’s `decisionDate` field."""
  decisionDate: Date

  """Checks for equality with the object’s `rejectedDate` field."""
  rejectedDate: Date

  """Checks for equality with the object’s `detectorsSensors` field."""
  detectorsSensors: String
}

"""
A filter to be used against `OfferteCsv` object types. All fields are combined with a logical ‘and.’
"""
input OfferteCsvFilter {
  """Filter by the object’s `quote` field."""
  quote: StringFilter

  """Filter by the object’s `date` field."""
  date: DateFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `representativeCode` field."""
  representativeCode: StringFilter

  """Filter by the object’s `companyCode` field."""
  companyCode: IntFilter

  """Filter by the object’s `representative` field."""
  representative: StringFilter

  """Filter by the object’s `company` field."""
  company: StringFilter

  """Filter by the object’s `industry` field."""
  industry: StringFilter

  """Filter by the object’s `countryCode` field."""
  countryCode: StringFilter

  """Filter by the object’s `country` field."""
  country: StringFilter

  """Filter by the object’s `reference` field."""
  reference: StringFilter

  """Filter by the object’s `chance` field."""
  chance: IntFilter

  """Filter by the object’s `amount` field."""
  amount: IntFilter

  """Filter by the object’s `competitors` field."""
  competitors: StringFilter

  """Filter by the object’s `actions` field."""
  actions: StringFilter

  """Filter by the object’s `actionDate` field."""
  actionDate: DateFilter

  """Filter by the object’s `decisionDate` field."""
  decisionDate: DateFilter

  """Filter by the object’s `rejectedDate` field."""
  rejectedDate: DateFilter

  """Filter by the object’s `detectorsSensors` field."""
  detectorsSensors: StringFilter

  """Checks for all expressions in this list."""
  and: [OfferteCsvFilter!]

  """Checks for any expressions in this list."""
  or: [OfferteCsvFilter!]

  """Negates the expression."""
  not: OfferteCsvFilter
}

"""A connection to a list of `OfferteMv` values."""
type OfferteMvsConnection {
  """A list of `OfferteMv` objects."""
  nodes: [OfferteMv!]!

  """
  A list of edges which contains the `OfferteMv` and cursor to aid in pagination.
  """
  edges: [OfferteMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `OfferteMv` you could get from the connection."""
  totalCount: Int!
}

type OfferteMv {
  offertenummer: String
  offertevolgnr: Int
  cdrelatie: Int
  cddebiteur: String
  offertedatum: Date
  cdbetcond: String
  cdlevcond: String
  cdvaluta: String
  cdbtw: String
  btwscenario: Int
  referentie: String
  kortingperc: BigFloat
  status: String
  adres: String
  afdrukteller: Int
  kredbepperc: BigFloat
  cdsoort: String
  geldigtm: Date
  kans: BigFloat
  koptekst: String
  voettekst: String
  cdreden: String
  kvc: String
  betkortperc: BigFloat
  cdvert: String
  notitieafwijzing: String
  datumafwijzing: Date
  verlorenaan: String
  cdadres: Int
  subadres: String
  cdpersoon: String
  persoon: String
  cdbehandelddoor: String
  behandelddoor: String
  vertegenwoordiger: String
  gefiatteerd: String
  cdfiatteur: String
  guidItem: String
  sysCreate: String
  sysUpdate: String
  margeblokkade: String
  projOfferte: String
  projOmschr: String
}

"""A `OfferteMv` edge in the connection."""
type OfferteMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OfferteMv` at the end of the edge."""
  node: OfferteMv!
}

"""Methods to use when ordering `OfferteMv`."""
enum OfferteMvsOrderBy {
  NATURAL
  OFFERTENUMMER_ASC
  OFFERTENUMMER_DESC
  OFFERTEVOLGNR_ASC
  OFFERTEVOLGNR_DESC
  CDRELATIE_ASC
  CDRELATIE_DESC
  CDDEBITEUR_ASC
  CDDEBITEUR_DESC
  OFFERTEDATUM_ASC
  OFFERTEDATUM_DESC
  CDBETCOND_ASC
  CDBETCOND_DESC
  CDLEVCOND_ASC
  CDLEVCOND_DESC
  CDVALUTA_ASC
  CDVALUTA_DESC
  CDBTW_ASC
  CDBTW_DESC
  BTWSCENARIO_ASC
  BTWSCENARIO_DESC
  REFERENTIE_ASC
  REFERENTIE_DESC
  KORTINGPERC_ASC
  KORTINGPERC_DESC
  STATUS_ASC
  STATUS_DESC
  ADRES_ASC
  ADRES_DESC
  AFDRUKTELLER_ASC
  AFDRUKTELLER_DESC
  KREDBEPPERC_ASC
  KREDBEPPERC_DESC
  CDSOORT_ASC
  CDSOORT_DESC
  GELDIGTM_ASC
  GELDIGTM_DESC
  KANS_ASC
  KANS_DESC
  KOPTEKST_ASC
  KOPTEKST_DESC
  VOETTEKST_ASC
  VOETTEKST_DESC
  CDREDEN_ASC
  CDREDEN_DESC
  KVC_ASC
  KVC_DESC
  BETKORTPERC_ASC
  BETKORTPERC_DESC
  CDVERT_ASC
  CDVERT_DESC
  NOTITIEAFWIJZING_ASC
  NOTITIEAFWIJZING_DESC
  DATUMAFWIJZING_ASC
  DATUMAFWIJZING_DESC
  VERLORENAAN_ASC
  VERLORENAAN_DESC
  CDADRES_ASC
  CDADRES_DESC
  SUBADRES_ASC
  SUBADRES_DESC
  CDPERSOON_ASC
  CDPERSOON_DESC
  PERSOON_ASC
  PERSOON_DESC
  CDBEHANDELDDOOR_ASC
  CDBEHANDELDDOOR_DESC
  BEHANDELDDOOR_ASC
  BEHANDELDDOOR_DESC
  VERTEGENWOORDIGER_ASC
  VERTEGENWOORDIGER_DESC
  GEFIATTEERD_ASC
  GEFIATTEERD_DESC
  CDFIATTEUR_ASC
  CDFIATTEUR_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  SYS_CREATE_ASC
  SYS_CREATE_DESC
  SYS_UPDATE_ASC
  SYS_UPDATE_DESC
  MARGEBLOKKADE_ASC
  MARGEBLOKKADE_DESC
  PROJ_OFFERTE_ASC
  PROJ_OFFERTE_DESC
  PROJ_OMSCHR_ASC
  PROJ_OMSCHR_DESC
}

"""
A condition to be used against `OfferteMv` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OfferteMvCondition {
  """Checks for equality with the object’s `offertenummer` field."""
  offertenummer: String

  """Checks for equality with the object’s `offertevolgnr` field."""
  offertevolgnr: Int

  """Checks for equality with the object’s `cdrelatie` field."""
  cdrelatie: Int

  """Checks for equality with the object’s `cddebiteur` field."""
  cddebiteur: String

  """Checks for equality with the object’s `offertedatum` field."""
  offertedatum: Date

  """Checks for equality with the object’s `cdbetcond` field."""
  cdbetcond: String

  """Checks for equality with the object’s `cdlevcond` field."""
  cdlevcond: String

  """Checks for equality with the object’s `cdvaluta` field."""
  cdvaluta: String

  """Checks for equality with the object’s `cdbtw` field."""
  cdbtw: String

  """Checks for equality with the object’s `btwscenario` field."""
  btwscenario: Int

  """Checks for equality with the object’s `referentie` field."""
  referentie: String

  """Checks for equality with the object’s `kortingperc` field."""
  kortingperc: BigFloat

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `adres` field."""
  adres: String

  """Checks for equality with the object’s `afdrukteller` field."""
  afdrukteller: Int

  """Checks for equality with the object’s `kredbepperc` field."""
  kredbepperc: BigFloat

  """Checks for equality with the object’s `cdsoort` field."""
  cdsoort: String

  """Checks for equality with the object’s `geldigtm` field."""
  geldigtm: Date

  """Checks for equality with the object’s `kans` field."""
  kans: BigFloat

  """Checks for equality with the object’s `koptekst` field."""
  koptekst: String

  """Checks for equality with the object’s `voettekst` field."""
  voettekst: String

  """Checks for equality with the object’s `cdreden` field."""
  cdreden: String

  """Checks for equality with the object’s `kvc` field."""
  kvc: String

  """Checks for equality with the object’s `betkortperc` field."""
  betkortperc: BigFloat

  """Checks for equality with the object’s `cdvert` field."""
  cdvert: String

  """Checks for equality with the object’s `notitieafwijzing` field."""
  notitieafwijzing: String

  """Checks for equality with the object’s `datumafwijzing` field."""
  datumafwijzing: Date

  """Checks for equality with the object’s `verlorenaan` field."""
  verlorenaan: String

  """Checks for equality with the object’s `cdadres` field."""
  cdadres: Int

  """Checks for equality with the object’s `subadres` field."""
  subadres: String

  """Checks for equality with the object’s `cdpersoon` field."""
  cdpersoon: String

  """Checks for equality with the object’s `persoon` field."""
  persoon: String

  """Checks for equality with the object’s `cdbehandelddoor` field."""
  cdbehandelddoor: String

  """Checks for equality with the object’s `behandelddoor` field."""
  behandelddoor: String

  """Checks for equality with the object’s `vertegenwoordiger` field."""
  vertegenwoordiger: String

  """Checks for equality with the object’s `gefiatteerd` field."""
  gefiatteerd: String

  """Checks for equality with the object’s `cdfiatteur` field."""
  cdfiatteur: String

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `sysCreate` field."""
  sysCreate: String

  """Checks for equality with the object’s `sysUpdate` field."""
  sysUpdate: String

  """Checks for equality with the object’s `margeblokkade` field."""
  margeblokkade: String

  """Checks for equality with the object’s `projOfferte` field."""
  projOfferte: String

  """Checks for equality with the object’s `projOmschr` field."""
  projOmschr: String
}

"""
A filter to be used against `OfferteMv` object types. All fields are combined with a logical ‘and.’
"""
input OfferteMvFilter {
  """Filter by the object’s `offertenummer` field."""
  offertenummer: StringFilter

  """Filter by the object’s `offertevolgnr` field."""
  offertevolgnr: IntFilter

  """Filter by the object’s `cdrelatie` field."""
  cdrelatie: IntFilter

  """Filter by the object’s `cddebiteur` field."""
  cddebiteur: StringFilter

  """Filter by the object’s `offertedatum` field."""
  offertedatum: DateFilter

  """Filter by the object’s `cdbetcond` field."""
  cdbetcond: StringFilter

  """Filter by the object’s `cdlevcond` field."""
  cdlevcond: StringFilter

  """Filter by the object’s `cdvaluta` field."""
  cdvaluta: StringFilter

  """Filter by the object’s `cdbtw` field."""
  cdbtw: StringFilter

  """Filter by the object’s `btwscenario` field."""
  btwscenario: IntFilter

  """Filter by the object’s `referentie` field."""
  referentie: StringFilter

  """Filter by the object’s `kortingperc` field."""
  kortingperc: BigFloatFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `adres` field."""
  adres: StringFilter

  """Filter by the object’s `afdrukteller` field."""
  afdrukteller: IntFilter

  """Filter by the object’s `kredbepperc` field."""
  kredbepperc: BigFloatFilter

  """Filter by the object’s `cdsoort` field."""
  cdsoort: StringFilter

  """Filter by the object’s `geldigtm` field."""
  geldigtm: DateFilter

  """Filter by the object’s `kans` field."""
  kans: BigFloatFilter

  """Filter by the object’s `koptekst` field."""
  koptekst: StringFilter

  """Filter by the object’s `voettekst` field."""
  voettekst: StringFilter

  """Filter by the object’s `cdreden` field."""
  cdreden: StringFilter

  """Filter by the object’s `kvc` field."""
  kvc: StringFilter

  """Filter by the object’s `betkortperc` field."""
  betkortperc: BigFloatFilter

  """Filter by the object’s `cdvert` field."""
  cdvert: StringFilter

  """Filter by the object’s `notitieafwijzing` field."""
  notitieafwijzing: StringFilter

  """Filter by the object’s `datumafwijzing` field."""
  datumafwijzing: DateFilter

  """Filter by the object’s `verlorenaan` field."""
  verlorenaan: StringFilter

  """Filter by the object’s `cdadres` field."""
  cdadres: IntFilter

  """Filter by the object’s `subadres` field."""
  subadres: StringFilter

  """Filter by the object’s `cdpersoon` field."""
  cdpersoon: StringFilter

  """Filter by the object’s `persoon` field."""
  persoon: StringFilter

  """Filter by the object’s `cdbehandelddoor` field."""
  cdbehandelddoor: StringFilter

  """Filter by the object’s `behandelddoor` field."""
  behandelddoor: StringFilter

  """Filter by the object’s `vertegenwoordiger` field."""
  vertegenwoordiger: StringFilter

  """Filter by the object’s `gefiatteerd` field."""
  gefiatteerd: StringFilter

  """Filter by the object’s `cdfiatteur` field."""
  cdfiatteur: StringFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `sysCreate` field."""
  sysCreate: StringFilter

  """Filter by the object’s `sysUpdate` field."""
  sysUpdate: StringFilter

  """Filter by the object’s `margeblokkade` field."""
  margeblokkade: StringFilter

  """Filter by the object’s `projOfferte` field."""
  projOfferte: StringFilter

  """Filter by the object’s `projOmschr` field."""
  projOmschr: StringFilter

  """Checks for all expressions in this list."""
  and: [OfferteMvFilter!]

  """Checks for any expressions in this list."""
  or: [OfferteMvFilter!]

  """Negates the expression."""
  not: OfferteMvFilter
}

"""A connection to a list of `Offerteregel` values."""
type OfferteregelsConnection {
  """A list of `Offerteregel` objects."""
  nodes: [Offerteregel!]!

  """
  A list of edges which contains the `Offerteregel` and cursor to aid in pagination.
  """
  edges: [OfferteregelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Offerteregel` you could get from the connection."""
  totalCount: Int!
}

type Offerteregel {
  id: String
  offerteId: String
  offertenummer: String
  offertevolgnr: Int
  offerteregel: Int
  soort: String
  cdartikel: String
  omschr: String
  eenheid: String
  aantaldec: Int
  aantal: BigFloat
  prijs: BigFloat
  prijsper: BigFloat
  kortingperc: BigFloat
  bedragexcl: BigFloat
  bedragincl: BigFloat
  btwcode: Int
  btwperc: BigFloat
  cdstatus: String
  cdreden: String
  datum: Date
  kvc: String
  samVersie: String
  vvbestand: String
  vvvrijvelda: String
  vvdatumopdracht: Date
  vvgroepscode: String
  projDeelOmschr: String
  projMutsoort: String
  cduursoort: String
}

"""A `Offerteregel` edge in the connection."""
type OfferteregelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Offerteregel` at the end of the edge."""
  node: Offerteregel!
}

"""Methods to use when ordering `Offerteregel`."""
enum OfferteregelsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  OFFERTE_ID_ASC
  OFFERTE_ID_DESC
  OFFERTENUMMER_ASC
  OFFERTENUMMER_DESC
  OFFERTEVOLGNR_ASC
  OFFERTEVOLGNR_DESC
  OFFERTEREGEL_ASC
  OFFERTEREGEL_DESC
  SOORT_ASC
  SOORT_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  EENHEID_ASC
  EENHEID_DESC
  AANTALDEC_ASC
  AANTALDEC_DESC
  AANTAL_ASC
  AANTAL_DESC
  PRIJS_ASC
  PRIJS_DESC
  PRIJSPER_ASC
  PRIJSPER_DESC
  KORTINGPERC_ASC
  KORTINGPERC_DESC
  BEDRAGEXCL_ASC
  BEDRAGEXCL_DESC
  BEDRAGINCL_ASC
  BEDRAGINCL_DESC
  BTWCODE_ASC
  BTWCODE_DESC
  BTWPERC_ASC
  BTWPERC_DESC
  CDSTATUS_ASC
  CDSTATUS_DESC
  CDREDEN_ASC
  CDREDEN_DESC
  DATUM_ASC
  DATUM_DESC
  KVC_ASC
  KVC_DESC
  SAM_VERSIE_ASC
  SAM_VERSIE_DESC
  VVBESTAND_ASC
  VVBESTAND_DESC
  VVVRIJVELDA_ASC
  VVVRIJVELDA_DESC
  VVDATUMOPDRACHT_ASC
  VVDATUMOPDRACHT_DESC
  VVGROEPSCODE_ASC
  VVGROEPSCODE_DESC
  PROJ_DEEL_OMSCHR_ASC
  PROJ_DEEL_OMSCHR_DESC
  PROJ_MUTSOORT_ASC
  PROJ_MUTSOORT_DESC
  CDUURSOORT_ASC
  CDUURSOORT_DESC
}

"""
A condition to be used against `Offerteregel` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OfferteregelCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `offerteId` field."""
  offerteId: String

  """Checks for equality with the object’s `offertenummer` field."""
  offertenummer: String

  """Checks for equality with the object’s `offertevolgnr` field."""
  offertevolgnr: Int

  """Checks for equality with the object’s `offerteregel` field."""
  offerteregel: Int

  """Checks for equality with the object’s `soort` field."""
  soort: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `eenheid` field."""
  eenheid: String

  """Checks for equality with the object’s `aantaldec` field."""
  aantaldec: Int

  """Checks for equality with the object’s `aantal` field."""
  aantal: BigFloat

  """Checks for equality with the object’s `prijs` field."""
  prijs: BigFloat

  """Checks for equality with the object’s `prijsper` field."""
  prijsper: BigFloat

  """Checks for equality with the object’s `kortingperc` field."""
  kortingperc: BigFloat

  """Checks for equality with the object’s `bedragexcl` field."""
  bedragexcl: BigFloat

  """Checks for equality with the object’s `bedragincl` field."""
  bedragincl: BigFloat

  """Checks for equality with the object’s `btwcode` field."""
  btwcode: Int

  """Checks for equality with the object’s `btwperc` field."""
  btwperc: BigFloat

  """Checks for equality with the object’s `cdstatus` field."""
  cdstatus: String

  """Checks for equality with the object’s `cdreden` field."""
  cdreden: String

  """Checks for equality with the object’s `datum` field."""
  datum: Date

  """Checks for equality with the object’s `kvc` field."""
  kvc: String

  """Checks for equality with the object’s `samVersie` field."""
  samVersie: String

  """Checks for equality with the object’s `vvbestand` field."""
  vvbestand: String

  """Checks for equality with the object’s `vvvrijvelda` field."""
  vvvrijvelda: String

  """Checks for equality with the object’s `vvdatumopdracht` field."""
  vvdatumopdracht: Date

  """Checks for equality with the object’s `vvgroepscode` field."""
  vvgroepscode: String

  """Checks for equality with the object’s `projDeelOmschr` field."""
  projDeelOmschr: String

  """Checks for equality with the object’s `projMutsoort` field."""
  projMutsoort: String

  """Checks for equality with the object’s `cduursoort` field."""
  cduursoort: String
}

"""
A filter to be used against `Offerteregel` object types. All fields are combined with a logical ‘and.’
"""
input OfferteregelFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `offerteId` field."""
  offerteId: StringFilter

  """Filter by the object’s `offertenummer` field."""
  offertenummer: StringFilter

  """Filter by the object’s `offertevolgnr` field."""
  offertevolgnr: IntFilter

  """Filter by the object’s `offerteregel` field."""
  offerteregel: IntFilter

  """Filter by the object’s `soort` field."""
  soort: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `eenheid` field."""
  eenheid: StringFilter

  """Filter by the object’s `aantaldec` field."""
  aantaldec: IntFilter

  """Filter by the object’s `aantal` field."""
  aantal: BigFloatFilter

  """Filter by the object’s `prijs` field."""
  prijs: BigFloatFilter

  """Filter by the object’s `prijsper` field."""
  prijsper: BigFloatFilter

  """Filter by the object’s `kortingperc` field."""
  kortingperc: BigFloatFilter

  """Filter by the object’s `bedragexcl` field."""
  bedragexcl: BigFloatFilter

  """Filter by the object’s `bedragincl` field."""
  bedragincl: BigFloatFilter

  """Filter by the object’s `btwcode` field."""
  btwcode: IntFilter

  """Filter by the object’s `btwperc` field."""
  btwperc: BigFloatFilter

  """Filter by the object’s `cdstatus` field."""
  cdstatus: StringFilter

  """Filter by the object’s `cdreden` field."""
  cdreden: StringFilter

  """Filter by the object’s `datum` field."""
  datum: DateFilter

  """Filter by the object’s `kvc` field."""
  kvc: StringFilter

  """Filter by the object’s `samVersie` field."""
  samVersie: StringFilter

  """Filter by the object’s `vvbestand` field."""
  vvbestand: StringFilter

  """Filter by the object’s `vvvrijvelda` field."""
  vvvrijvelda: StringFilter

  """Filter by the object’s `vvdatumopdracht` field."""
  vvdatumopdracht: DateFilter

  """Filter by the object’s `vvgroepscode` field."""
  vvgroepscode: StringFilter

  """Filter by the object’s `projDeelOmschr` field."""
  projDeelOmschr: StringFilter

  """Filter by the object’s `projMutsoort` field."""
  projMutsoort: StringFilter

  """Filter by the object’s `cduursoort` field."""
  cduursoort: StringFilter

  """Checks for all expressions in this list."""
  and: [OfferteregelFilter!]

  """Checks for any expressions in this list."""
  or: [OfferteregelFilter!]

  """Negates the expression."""
  not: OfferteregelFilter
}

"""A connection to a list of `OfferteregelMv` values."""
type OfferteregelMvsConnection {
  """A list of `OfferteregelMv` objects."""
  nodes: [OfferteregelMv!]!

  """
  A list of edges which contains the `OfferteregelMv` and cursor to aid in pagination.
  """
  edges: [OfferteregelMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `OfferteregelMv` you could get from the connection."""
  totalCount: Int!
}

type OfferteregelMv {
  offertenummer: String
  offertevolgnr: Int
  offerteregel: Int
  soort: String
  cdartikel: String
  omschr: String
  eenheid: String
  aantaldec: Int
  aantal: BigFloat
  prijs: BigFloat
  prijsper: BigFloat
  kortingperc: BigFloat
  bedragexcl: BigFloat
  bedragincl: BigFloat
  btwcode: Int
  btwperc: BigFloat
  cdstatus: String
  cdreden: String
  datum: Date
  kvc: String
  samVersie: String
  vvbestand: String
  vvvrijvelda: String
  vvdatumopdracht: Date
  vvgroepscode: String
  projDeelOmschr: String
  projMutsoort: String
  cduursoort: String
}

"""A `OfferteregelMv` edge in the connection."""
type OfferteregelMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OfferteregelMv` at the end of the edge."""
  node: OfferteregelMv!
}

"""Methods to use when ordering `OfferteregelMv`."""
enum OfferteregelMvsOrderBy {
  NATURAL
  OFFERTENUMMER_ASC
  OFFERTENUMMER_DESC
  OFFERTEVOLGNR_ASC
  OFFERTEVOLGNR_DESC
  OFFERTEREGEL_ASC
  OFFERTEREGEL_DESC
  SOORT_ASC
  SOORT_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  EENHEID_ASC
  EENHEID_DESC
  AANTALDEC_ASC
  AANTALDEC_DESC
  AANTAL_ASC
  AANTAL_DESC
  PRIJS_ASC
  PRIJS_DESC
  PRIJSPER_ASC
  PRIJSPER_DESC
  KORTINGPERC_ASC
  KORTINGPERC_DESC
  BEDRAGEXCL_ASC
  BEDRAGEXCL_DESC
  BEDRAGINCL_ASC
  BEDRAGINCL_DESC
  BTWCODE_ASC
  BTWCODE_DESC
  BTWPERC_ASC
  BTWPERC_DESC
  CDSTATUS_ASC
  CDSTATUS_DESC
  CDREDEN_ASC
  CDREDEN_DESC
  DATUM_ASC
  DATUM_DESC
  KVC_ASC
  KVC_DESC
  SAM_VERSIE_ASC
  SAM_VERSIE_DESC
  VVBESTAND_ASC
  VVBESTAND_DESC
  VVVRIJVELDA_ASC
  VVVRIJVELDA_DESC
  VVDATUMOPDRACHT_ASC
  VVDATUMOPDRACHT_DESC
  VVGROEPSCODE_ASC
  VVGROEPSCODE_DESC
  PROJ_DEEL_OMSCHR_ASC
  PROJ_DEEL_OMSCHR_DESC
  PROJ_MUTSOORT_ASC
  PROJ_MUTSOORT_DESC
  CDUURSOORT_ASC
  CDUURSOORT_DESC
}

"""
A condition to be used against `OfferteregelMv` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OfferteregelMvCondition {
  """Checks for equality with the object’s `offertenummer` field."""
  offertenummer: String

  """Checks for equality with the object’s `offertevolgnr` field."""
  offertevolgnr: Int

  """Checks for equality with the object’s `offerteregel` field."""
  offerteregel: Int

  """Checks for equality with the object’s `soort` field."""
  soort: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `eenheid` field."""
  eenheid: String

  """Checks for equality with the object’s `aantaldec` field."""
  aantaldec: Int

  """Checks for equality with the object’s `aantal` field."""
  aantal: BigFloat

  """Checks for equality with the object’s `prijs` field."""
  prijs: BigFloat

  """Checks for equality with the object’s `prijsper` field."""
  prijsper: BigFloat

  """Checks for equality with the object’s `kortingperc` field."""
  kortingperc: BigFloat

  """Checks for equality with the object’s `bedragexcl` field."""
  bedragexcl: BigFloat

  """Checks for equality with the object’s `bedragincl` field."""
  bedragincl: BigFloat

  """Checks for equality with the object’s `btwcode` field."""
  btwcode: Int

  """Checks for equality with the object’s `btwperc` field."""
  btwperc: BigFloat

  """Checks for equality with the object’s `cdstatus` field."""
  cdstatus: String

  """Checks for equality with the object’s `cdreden` field."""
  cdreden: String

  """Checks for equality with the object’s `datum` field."""
  datum: Date

  """Checks for equality with the object’s `kvc` field."""
  kvc: String

  """Checks for equality with the object’s `samVersie` field."""
  samVersie: String

  """Checks for equality with the object’s `vvbestand` field."""
  vvbestand: String

  """Checks for equality with the object’s `vvvrijvelda` field."""
  vvvrijvelda: String

  """Checks for equality with the object’s `vvdatumopdracht` field."""
  vvdatumopdracht: Date

  """Checks for equality with the object’s `vvgroepscode` field."""
  vvgroepscode: String

  """Checks for equality with the object’s `projDeelOmschr` field."""
  projDeelOmschr: String

  """Checks for equality with the object’s `projMutsoort` field."""
  projMutsoort: String

  """Checks for equality with the object’s `cduursoort` field."""
  cduursoort: String
}

"""
A filter to be used against `OfferteregelMv` object types. All fields are combined with a logical ‘and.’
"""
input OfferteregelMvFilter {
  """Filter by the object’s `offertenummer` field."""
  offertenummer: StringFilter

  """Filter by the object’s `offertevolgnr` field."""
  offertevolgnr: IntFilter

  """Filter by the object’s `offerteregel` field."""
  offerteregel: IntFilter

  """Filter by the object’s `soort` field."""
  soort: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `eenheid` field."""
  eenheid: StringFilter

  """Filter by the object’s `aantaldec` field."""
  aantaldec: IntFilter

  """Filter by the object’s `aantal` field."""
  aantal: BigFloatFilter

  """Filter by the object’s `prijs` field."""
  prijs: BigFloatFilter

  """Filter by the object’s `prijsper` field."""
  prijsper: BigFloatFilter

  """Filter by the object’s `kortingperc` field."""
  kortingperc: BigFloatFilter

  """Filter by the object’s `bedragexcl` field."""
  bedragexcl: BigFloatFilter

  """Filter by the object’s `bedragincl` field."""
  bedragincl: BigFloatFilter

  """Filter by the object’s `btwcode` field."""
  btwcode: IntFilter

  """Filter by the object’s `btwperc` field."""
  btwperc: BigFloatFilter

  """Filter by the object’s `cdstatus` field."""
  cdstatus: StringFilter

  """Filter by the object’s `cdreden` field."""
  cdreden: StringFilter

  """Filter by the object’s `datum` field."""
  datum: DateFilter

  """Filter by the object’s `kvc` field."""
  kvc: StringFilter

  """Filter by the object’s `samVersie` field."""
  samVersie: StringFilter

  """Filter by the object’s `vvbestand` field."""
  vvbestand: StringFilter

  """Filter by the object’s `vvvrijvelda` field."""
  vvvrijvelda: StringFilter

  """Filter by the object’s `vvdatumopdracht` field."""
  vvdatumopdracht: DateFilter

  """Filter by the object’s `vvgroepscode` field."""
  vvgroepscode: StringFilter

  """Filter by the object’s `projDeelOmschr` field."""
  projDeelOmschr: StringFilter

  """Filter by the object’s `projMutsoort` field."""
  projMutsoort: StringFilter

  """Filter by the object’s `cduursoort` field."""
  cduursoort: StringFilter

  """Checks for all expressions in this list."""
  and: [OfferteregelMvFilter!]

  """Checks for any expressions in this list."""
  or: [OfferteregelMvFilter!]

  """Negates the expression."""
  not: OfferteregelMvFilter
}

"""A connection to a list of `Overtime` values."""
type OvertimesConnection {
  """A list of `Overtime` objects."""
  nodes: [Overtime!]!

  """
  A list of edges which contains the `Overtime` and cursor to aid in pagination.
  """
  edges: [OvertimesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Overtime` you could get from the connection."""
  totalCount: Int!
}

type Overtime {
  userId: Int
  date: Date
  overtime: BigFloat
}

"""A `Overtime` edge in the connection."""
type OvertimesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Overtime` at the end of the edge."""
  node: Overtime!
}

"""Methods to use when ordering `Overtime`."""
enum OvertimesOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
  DATE_ASC
  DATE_DESC
  OVERTIME_ASC
  OVERTIME_DESC
}

"""
A condition to be used against `Overtime` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OvertimeCondition {
  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `overtime` field."""
  overtime: BigFloat
}

"""
A filter to be used against `Overtime` object types. All fields are combined with a logical ‘and.’
"""
input OvertimeFilter {
  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `date` field."""
  date: DateFilter

  """Filter by the object’s `overtime` field."""
  overtime: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [OvertimeFilter!]

  """Checks for any expressions in this list."""
  or: [OvertimeFilter!]

  """Negates the expression."""
  not: OvertimeFilter
}

"""A connection to a list of `Overtime2` values."""
type Overtime2SConnection {
  """A list of `Overtime2` objects."""
  nodes: [Overtime2!]!

  """
  A list of edges which contains the `Overtime2` and cursor to aid in pagination.
  """
  edges: [Overtime2SEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Overtime2` you could get from the connection."""
  totalCount: Int!
}

type Overtime2 {
  userId: Int
  year: String
  week: String
  compensation: BigFloat
  totalCompensation: BigFloat
}

"""A `Overtime2` edge in the connection."""
type Overtime2SEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Overtime2` at the end of the edge."""
  node: Overtime2!
}

"""Methods to use when ordering `Overtime2`."""
enum Overtime2SOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
  YEAR_ASC
  YEAR_DESC
  WEEK_ASC
  WEEK_DESC
  COMPENSATION_ASC
  COMPENSATION_DESC
  TOTAL_COMPENSATION_ASC
  TOTAL_COMPENSATION_DESC
}

"""
A condition to be used against `Overtime2` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input Overtime2Condition {
  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `year` field."""
  year: String

  """Checks for equality with the object’s `week` field."""
  week: String

  """Checks for equality with the object’s `compensation` field."""
  compensation: BigFloat

  """Checks for equality with the object’s `totalCompensation` field."""
  totalCompensation: BigFloat
}

"""
A filter to be used against `Overtime2` object types. All fields are combined with a logical ‘and.’
"""
input Overtime2Filter {
  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `year` field."""
  year: StringFilter

  """Filter by the object’s `week` field."""
  week: StringFilter

  """Filter by the object’s `compensation` field."""
  compensation: BigFloatFilter

  """Filter by the object’s `totalCompensation` field."""
  totalCompensation: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [Overtime2Filter!]

  """Checks for any expressions in this list."""
  or: [Overtime2Filter!]

  """Negates the expression."""
  not: Overtime2Filter
}

"""A connection to a list of `Permission` values."""
type PermissionsConnection {
  """A list of `Permission` objects."""
  nodes: [Permission!]!

  """
  A list of edges which contains the `Permission` and cursor to aid in pagination.
  """
  edges: [PermissionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Permission` you could get from the connection."""
  totalCount: Int!
}

type Permission implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
}

"""A `Permission` edge in the connection."""
type PermissionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Permission` at the end of the edge."""
  node: Permission!
}

"""Methods to use when ordering `Permission`."""
enum PermissionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Permission` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PermissionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
A filter to be used against `Permission` object types. All fields are combined with a logical ‘and.’
"""
input PermissionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Checks for all expressions in this list."""
  and: [PermissionFilter!]

  """Checks for any expressions in this list."""
  or: [PermissionFilter!]

  """Negates the expression."""
  not: PermissionFilter
}

"""A connection to a list of `Persoon` values."""
type PersoonsConnection {
  """A list of `Persoon` objects."""
  nodes: [Persoon!]!

  """
  A list of edges which contains the `Persoon` and cursor to aid in pagination.
  """
  edges: [PersoonsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Persoon` you could get from the connection."""
  totalCount: Int!
}

type Persoon {
  vvkalender: String
  zoeknaam: String
  naam: String
  voornaam: String
  voorletters: String
  guidItem: String
  sysCreate: String
  sysUpdate: String
  vvbriefvertrekdh: String
  cdtitelvoor: String
  cdtitelna: String
  geslacht: String
  vvkerst: String
  vvuitnodigingbeurs: String
  vvopvolgingbeurs: String
  vvlead: String
  vvlocatie: String
  vvdiverse: String
  cdpersoon: String
  status: String
  geboortedatum: Date
}

"""A `Persoon` edge in the connection."""
type PersoonsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Persoon` at the end of the edge."""
  node: Persoon!
}

"""Methods to use when ordering `Persoon`."""
enum PersoonsOrderBy {
  NATURAL
  VVKALENDER_ASC
  VVKALENDER_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  NAAM_ASC
  NAAM_DESC
  VOORNAAM_ASC
  VOORNAAM_DESC
  VOORLETTERS_ASC
  VOORLETTERS_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  SYS_CREATE_ASC
  SYS_CREATE_DESC
  SYS_UPDATE_ASC
  SYS_UPDATE_DESC
  VVBRIEFVERTREKDH_ASC
  VVBRIEFVERTREKDH_DESC
  CDTITELVOOR_ASC
  CDTITELVOOR_DESC
  CDTITELNA_ASC
  CDTITELNA_DESC
  GESLACHT_ASC
  GESLACHT_DESC
  VVKERST_ASC
  VVKERST_DESC
  VVUITNODIGINGBEURS_ASC
  VVUITNODIGINGBEURS_DESC
  VVOPVOLGINGBEURS_ASC
  VVOPVOLGINGBEURS_DESC
  VVLEAD_ASC
  VVLEAD_DESC
  VVLOCATIE_ASC
  VVLOCATIE_DESC
  VVDIVERSE_ASC
  VVDIVERSE_DESC
  CDPERSOON_ASC
  CDPERSOON_DESC
  STATUS_ASC
  STATUS_DESC
  GEBOORTEDATUM_ASC
  GEBOORTEDATUM_DESC
}

"""
A condition to be used against `Persoon` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PersoonCondition {
  """Checks for equality with the object’s `vvkalender` field."""
  vvkalender: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `naam` field."""
  naam: String

  """Checks for equality with the object’s `voornaam` field."""
  voornaam: String

  """Checks for equality with the object’s `voorletters` field."""
  voorletters: String

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `sysCreate` field."""
  sysCreate: String

  """Checks for equality with the object’s `sysUpdate` field."""
  sysUpdate: String

  """Checks for equality with the object’s `vvbriefvertrekdh` field."""
  vvbriefvertrekdh: String

  """Checks for equality with the object’s `cdtitelvoor` field."""
  cdtitelvoor: String

  """Checks for equality with the object’s `cdtitelna` field."""
  cdtitelna: String

  """Checks for equality with the object’s `geslacht` field."""
  geslacht: String

  """Checks for equality with the object’s `vvkerst` field."""
  vvkerst: String

  """Checks for equality with the object’s `vvuitnodigingbeurs` field."""
  vvuitnodigingbeurs: String

  """Checks for equality with the object’s `vvopvolgingbeurs` field."""
  vvopvolgingbeurs: String

  """Checks for equality with the object’s `vvlead` field."""
  vvlead: String

  """Checks for equality with the object’s `vvlocatie` field."""
  vvlocatie: String

  """Checks for equality with the object’s `vvdiverse` field."""
  vvdiverse: String

  """Checks for equality with the object’s `cdpersoon` field."""
  cdpersoon: String

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `geboortedatum` field."""
  geboortedatum: Date
}

"""
A filter to be used against `Persoon` object types. All fields are combined with a logical ‘and.’
"""
input PersoonFilter {
  """Filter by the object’s `vvkalender` field."""
  vvkalender: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `naam` field."""
  naam: StringFilter

  """Filter by the object’s `voornaam` field."""
  voornaam: StringFilter

  """Filter by the object’s `voorletters` field."""
  voorletters: StringFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `sysCreate` field."""
  sysCreate: StringFilter

  """Filter by the object’s `sysUpdate` field."""
  sysUpdate: StringFilter

  """Filter by the object’s `vvbriefvertrekdh` field."""
  vvbriefvertrekdh: StringFilter

  """Filter by the object’s `cdtitelvoor` field."""
  cdtitelvoor: StringFilter

  """Filter by the object’s `cdtitelna` field."""
  cdtitelna: StringFilter

  """Filter by the object’s `geslacht` field."""
  geslacht: StringFilter

  """Filter by the object’s `vvkerst` field."""
  vvkerst: StringFilter

  """Filter by the object’s `vvuitnodigingbeurs` field."""
  vvuitnodigingbeurs: StringFilter

  """Filter by the object’s `vvopvolgingbeurs` field."""
  vvopvolgingbeurs: StringFilter

  """Filter by the object’s `vvlead` field."""
  vvlead: StringFilter

  """Filter by the object’s `vvlocatie` field."""
  vvlocatie: StringFilter

  """Filter by the object’s `vvdiverse` field."""
  vvdiverse: StringFilter

  """Filter by the object’s `cdpersoon` field."""
  cdpersoon: StringFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `geboortedatum` field."""
  geboortedatum: DateFilter

  """Checks for all expressions in this list."""
  and: [PersoonFilter!]

  """Checks for any expressions in this list."""
  or: [PersoonFilter!]

  """Negates the expression."""
  not: PersoonFilter
}

"""A connection to a list of `PersoonInfo` values."""
type PersoonInfosConnection {
  """A list of `PersoonInfo` objects."""
  nodes: [PersoonInfo!]!

  """
  A list of edges which contains the `PersoonInfo` and cursor to aid in pagination.
  """
  edges: [PersoonInfosEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PersoonInfo` you could get from the connection."""
  totalCount: Int!
}

type PersoonInfo {
  cdpersoon: String
  cdrelatie: Int
  cdtitelna: String
  titelna: String
  cdtitelvoor: String
  titelvoor: String
  geslacht: String
  naam: String
  voorletters: String
  voornaam: String
  zoeknaam: String
  status: String
  geboortedatum: Date
  cdaanhef: String
  aanhef: String
  tav: String
  adresvoorkeur: String
  cdafdeling: String
  afdeling: String
  cdfunctie: String
  functie: String
  cdrol: String
  rolvoorkeur: String
  telefoon: String
  telefax: String
  email: String
  cdtaal: String
  taal: String
  telefoonmobiel: String
  homepage: String
}

"""A `PersoonInfo` edge in the connection."""
type PersoonInfosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PersoonInfo` at the end of the edge."""
  node: PersoonInfo!
}

"""Methods to use when ordering `PersoonInfo`."""
enum PersoonInfosOrderBy {
  NATURAL
  CDPERSOON_ASC
  CDPERSOON_DESC
  CDRELATIE_ASC
  CDRELATIE_DESC
  CDTITELNA_ASC
  CDTITELNA_DESC
  TITELNA_ASC
  TITELNA_DESC
  CDTITELVOOR_ASC
  CDTITELVOOR_DESC
  TITELVOOR_ASC
  TITELVOOR_DESC
  GESLACHT_ASC
  GESLACHT_DESC
  NAAM_ASC
  NAAM_DESC
  VOORLETTERS_ASC
  VOORLETTERS_DESC
  VOORNAAM_ASC
  VOORNAAM_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  STATUS_ASC
  STATUS_DESC
  GEBOORTEDATUM_ASC
  GEBOORTEDATUM_DESC
  CDAANHEF_ASC
  CDAANHEF_DESC
  AANHEF_ASC
  AANHEF_DESC
  TAV_ASC
  TAV_DESC
  ADRESVOORKEUR_ASC
  ADRESVOORKEUR_DESC
  CDAFDELING_ASC
  CDAFDELING_DESC
  AFDELING_ASC
  AFDELING_DESC
  CDFUNCTIE_ASC
  CDFUNCTIE_DESC
  FUNCTIE_ASC
  FUNCTIE_DESC
  CDROL_ASC
  CDROL_DESC
  ROLVOORKEUR_ASC
  ROLVOORKEUR_DESC
  TELEFOON_ASC
  TELEFOON_DESC
  TELEFAX_ASC
  TELEFAX_DESC
  EMAIL_ASC
  EMAIL_DESC
  CDTAAL_ASC
  CDTAAL_DESC
  TAAL_ASC
  TAAL_DESC
  TELEFOONMOBIEL_ASC
  TELEFOONMOBIEL_DESC
  HOMEPAGE_ASC
  HOMEPAGE_DESC
}

"""
A condition to be used against `PersoonInfo` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PersoonInfoCondition {
  """Checks for equality with the object’s `cdpersoon` field."""
  cdpersoon: String

  """Checks for equality with the object’s `cdrelatie` field."""
  cdrelatie: Int

  """Checks for equality with the object’s `cdtitelna` field."""
  cdtitelna: String

  """Checks for equality with the object’s `titelna` field."""
  titelna: String

  """Checks for equality with the object’s `cdtitelvoor` field."""
  cdtitelvoor: String

  """Checks for equality with the object’s `titelvoor` field."""
  titelvoor: String

  """Checks for equality with the object’s `geslacht` field."""
  geslacht: String

  """Checks for equality with the object’s `naam` field."""
  naam: String

  """Checks for equality with the object’s `voorletters` field."""
  voorletters: String

  """Checks for equality with the object’s `voornaam` field."""
  voornaam: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `geboortedatum` field."""
  geboortedatum: Date

  """Checks for equality with the object’s `cdaanhef` field."""
  cdaanhef: String

  """Checks for equality with the object’s `aanhef` field."""
  aanhef: String

  """Checks for equality with the object’s `tav` field."""
  tav: String

  """Checks for equality with the object’s `adresvoorkeur` field."""
  adresvoorkeur: String

  """Checks for equality with the object’s `cdafdeling` field."""
  cdafdeling: String

  """Checks for equality with the object’s `afdeling` field."""
  afdeling: String

  """Checks for equality with the object’s `cdfunctie` field."""
  cdfunctie: String

  """Checks for equality with the object’s `functie` field."""
  functie: String

  """Checks for equality with the object’s `cdrol` field."""
  cdrol: String

  """Checks for equality with the object’s `rolvoorkeur` field."""
  rolvoorkeur: String

  """Checks for equality with the object’s `telefoon` field."""
  telefoon: String

  """Checks for equality with the object’s `telefax` field."""
  telefax: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `cdtaal` field."""
  cdtaal: String

  """Checks for equality with the object’s `taal` field."""
  taal: String

  """Checks for equality with the object’s `telefoonmobiel` field."""
  telefoonmobiel: String

  """Checks for equality with the object’s `homepage` field."""
  homepage: String
}

"""
A filter to be used against `PersoonInfo` object types. All fields are combined with a logical ‘and.’
"""
input PersoonInfoFilter {
  """Filter by the object’s `cdpersoon` field."""
  cdpersoon: StringFilter

  """Filter by the object’s `cdrelatie` field."""
  cdrelatie: IntFilter

  """Filter by the object’s `cdtitelna` field."""
  cdtitelna: StringFilter

  """Filter by the object’s `titelna` field."""
  titelna: StringFilter

  """Filter by the object’s `cdtitelvoor` field."""
  cdtitelvoor: StringFilter

  """Filter by the object’s `titelvoor` field."""
  titelvoor: StringFilter

  """Filter by the object’s `geslacht` field."""
  geslacht: StringFilter

  """Filter by the object’s `naam` field."""
  naam: StringFilter

  """Filter by the object’s `voorletters` field."""
  voorletters: StringFilter

  """Filter by the object’s `voornaam` field."""
  voornaam: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `geboortedatum` field."""
  geboortedatum: DateFilter

  """Filter by the object’s `cdaanhef` field."""
  cdaanhef: StringFilter

  """Filter by the object’s `aanhef` field."""
  aanhef: StringFilter

  """Filter by the object’s `tav` field."""
  tav: StringFilter

  """Filter by the object’s `adresvoorkeur` field."""
  adresvoorkeur: StringFilter

  """Filter by the object’s `cdafdeling` field."""
  cdafdeling: StringFilter

  """Filter by the object’s `afdeling` field."""
  afdeling: StringFilter

  """Filter by the object’s `cdfunctie` field."""
  cdfunctie: StringFilter

  """Filter by the object’s `functie` field."""
  functie: StringFilter

  """Filter by the object’s `cdrol` field."""
  cdrol: StringFilter

  """Filter by the object’s `rolvoorkeur` field."""
  rolvoorkeur: StringFilter

  """Filter by the object’s `telefoon` field."""
  telefoon: StringFilter

  """Filter by the object’s `telefax` field."""
  telefax: StringFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `cdtaal` field."""
  cdtaal: StringFilter

  """Filter by the object’s `taal` field."""
  taal: StringFilter

  """Filter by the object’s `telefoonmobiel` field."""
  telefoonmobiel: StringFilter

  """Filter by the object’s `homepage` field."""
  homepage: StringFilter

  """Checks for all expressions in this list."""
  and: [PersoonInfoFilter!]

  """Checks for any expressions in this list."""
  or: [PersoonInfoFilter!]

  """Negates the expression."""
  not: PersoonInfoFilter
}

"""A connection to a list of `PersoonInfoMv` values."""
type PersoonInfoMvsConnection {
  """A list of `PersoonInfoMv` objects."""
  nodes: [PersoonInfoMv!]!

  """
  A list of edges which contains the `PersoonInfoMv` and cursor to aid in pagination.
  """
  edges: [PersoonInfoMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PersoonInfoMv` you could get from the connection."""
  totalCount: Int!
}

type PersoonInfoMv {
  cdpersoon: String
  cdrelatie: Int
  cdtitelna: String
  titelna: String
  cdtitelvoor: String
  titelvoor: String
  geslacht: String
  naam: String
  voorletters: String
  voornaam: String
  zoeknaam: String
  status: String
  geboortedatum: Date
  cdaanhef: String
  aanhef: String
  tav: String
  adresvoorkeur: String
  cdafdeling: String
  afdeling: String
  cdfunctie: String
  functie: String
  cdrol: String
  rolvoorkeur: String
  telefoon: String
  telefax: String
  email: String
  cdtaal: String
  taal: String
  telefoonmobiel: String
  homepage: String
}

"""A `PersoonInfoMv` edge in the connection."""
type PersoonInfoMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PersoonInfoMv` at the end of the edge."""
  node: PersoonInfoMv!
}

"""Methods to use when ordering `PersoonInfoMv`."""
enum PersoonInfoMvsOrderBy {
  NATURAL
  CDPERSOON_ASC
  CDPERSOON_DESC
  CDRELATIE_ASC
  CDRELATIE_DESC
  CDTITELNA_ASC
  CDTITELNA_DESC
  TITELNA_ASC
  TITELNA_DESC
  CDTITELVOOR_ASC
  CDTITELVOOR_DESC
  TITELVOOR_ASC
  TITELVOOR_DESC
  GESLACHT_ASC
  GESLACHT_DESC
  NAAM_ASC
  NAAM_DESC
  VOORLETTERS_ASC
  VOORLETTERS_DESC
  VOORNAAM_ASC
  VOORNAAM_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  STATUS_ASC
  STATUS_DESC
  GEBOORTEDATUM_ASC
  GEBOORTEDATUM_DESC
  CDAANHEF_ASC
  CDAANHEF_DESC
  AANHEF_ASC
  AANHEF_DESC
  TAV_ASC
  TAV_DESC
  ADRESVOORKEUR_ASC
  ADRESVOORKEUR_DESC
  CDAFDELING_ASC
  CDAFDELING_DESC
  AFDELING_ASC
  AFDELING_DESC
  CDFUNCTIE_ASC
  CDFUNCTIE_DESC
  FUNCTIE_ASC
  FUNCTIE_DESC
  CDROL_ASC
  CDROL_DESC
  ROLVOORKEUR_ASC
  ROLVOORKEUR_DESC
  TELEFOON_ASC
  TELEFOON_DESC
  TELEFAX_ASC
  TELEFAX_DESC
  EMAIL_ASC
  EMAIL_DESC
  CDTAAL_ASC
  CDTAAL_DESC
  TAAL_ASC
  TAAL_DESC
  TELEFOONMOBIEL_ASC
  TELEFOONMOBIEL_DESC
  HOMEPAGE_ASC
  HOMEPAGE_DESC
}

"""
A condition to be used against `PersoonInfoMv` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PersoonInfoMvCondition {
  """Checks for equality with the object’s `cdpersoon` field."""
  cdpersoon: String

  """Checks for equality with the object’s `cdrelatie` field."""
  cdrelatie: Int

  """Checks for equality with the object’s `cdtitelna` field."""
  cdtitelna: String

  """Checks for equality with the object’s `titelna` field."""
  titelna: String

  """Checks for equality with the object’s `cdtitelvoor` field."""
  cdtitelvoor: String

  """Checks for equality with the object’s `titelvoor` field."""
  titelvoor: String

  """Checks for equality with the object’s `geslacht` field."""
  geslacht: String

  """Checks for equality with the object’s `naam` field."""
  naam: String

  """Checks for equality with the object’s `voorletters` field."""
  voorletters: String

  """Checks for equality with the object’s `voornaam` field."""
  voornaam: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `geboortedatum` field."""
  geboortedatum: Date

  """Checks for equality with the object’s `cdaanhef` field."""
  cdaanhef: String

  """Checks for equality with the object’s `aanhef` field."""
  aanhef: String

  """Checks for equality with the object’s `tav` field."""
  tav: String

  """Checks for equality with the object’s `adresvoorkeur` field."""
  adresvoorkeur: String

  """Checks for equality with the object’s `cdafdeling` field."""
  cdafdeling: String

  """Checks for equality with the object’s `afdeling` field."""
  afdeling: String

  """Checks for equality with the object’s `cdfunctie` field."""
  cdfunctie: String

  """Checks for equality with the object’s `functie` field."""
  functie: String

  """Checks for equality with the object’s `cdrol` field."""
  cdrol: String

  """Checks for equality with the object’s `rolvoorkeur` field."""
  rolvoorkeur: String

  """Checks for equality with the object’s `telefoon` field."""
  telefoon: String

  """Checks for equality with the object’s `telefax` field."""
  telefax: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `cdtaal` field."""
  cdtaal: String

  """Checks for equality with the object’s `taal` field."""
  taal: String

  """Checks for equality with the object’s `telefoonmobiel` field."""
  telefoonmobiel: String

  """Checks for equality with the object’s `homepage` field."""
  homepage: String
}

"""
A filter to be used against `PersoonInfoMv` object types. All fields are combined with a logical ‘and.’
"""
input PersoonInfoMvFilter {
  """Filter by the object’s `cdpersoon` field."""
  cdpersoon: StringFilter

  """Filter by the object’s `cdrelatie` field."""
  cdrelatie: IntFilter

  """Filter by the object’s `cdtitelna` field."""
  cdtitelna: StringFilter

  """Filter by the object’s `titelna` field."""
  titelna: StringFilter

  """Filter by the object’s `cdtitelvoor` field."""
  cdtitelvoor: StringFilter

  """Filter by the object’s `titelvoor` field."""
  titelvoor: StringFilter

  """Filter by the object’s `geslacht` field."""
  geslacht: StringFilter

  """Filter by the object’s `naam` field."""
  naam: StringFilter

  """Filter by the object’s `voorletters` field."""
  voorletters: StringFilter

  """Filter by the object’s `voornaam` field."""
  voornaam: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `geboortedatum` field."""
  geboortedatum: DateFilter

  """Filter by the object’s `cdaanhef` field."""
  cdaanhef: StringFilter

  """Filter by the object’s `aanhef` field."""
  aanhef: StringFilter

  """Filter by the object’s `tav` field."""
  tav: StringFilter

  """Filter by the object’s `adresvoorkeur` field."""
  adresvoorkeur: StringFilter

  """Filter by the object’s `cdafdeling` field."""
  cdafdeling: StringFilter

  """Filter by the object’s `afdeling` field."""
  afdeling: StringFilter

  """Filter by the object’s `cdfunctie` field."""
  cdfunctie: StringFilter

  """Filter by the object’s `functie` field."""
  functie: StringFilter

  """Filter by the object’s `cdrol` field."""
  cdrol: StringFilter

  """Filter by the object’s `rolvoorkeur` field."""
  rolvoorkeur: StringFilter

  """Filter by the object’s `telefoon` field."""
  telefoon: StringFilter

  """Filter by the object’s `telefax` field."""
  telefax: StringFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `cdtaal` field."""
  cdtaal: StringFilter

  """Filter by the object’s `taal` field."""
  taal: StringFilter

  """Filter by the object’s `telefoonmobiel` field."""
  telefoonmobiel: StringFilter

  """Filter by the object’s `homepage` field."""
  homepage: StringFilter

  """Checks for all expressions in this list."""
  and: [PersoonInfoMvFilter!]

  """Checks for any expressions in this list."""
  or: [PersoonInfoMvFilter!]

  """Negates the expression."""
  not: PersoonInfoMvFilter
}

"""A connection to a list of `PersoonMv` values."""
type PersoonMvsConnection {
  """A list of `PersoonMv` objects."""
  nodes: [PersoonMv!]!

  """
  A list of edges which contains the `PersoonMv` and cursor to aid in pagination.
  """
  edges: [PersoonMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PersoonMv` you could get from the connection."""
  totalCount: Int!
}

type PersoonMv {
  vvkalender: String
  zoeknaam: String
  naam: String
  voornaam: String
  voorletters: String
  guidItem: String
  sysCreate: String
  sysUpdate: String
  vvbriefvertrekdh: String
  cdtitelvoor: String
  cdtitelna: String
  geslacht: String
  vvkerst: String
  vvuitnodigingbeurs: String
  vvopvolgingbeurs: String
  vvlead: String
  vvlocatie: String
  vvdiverse: String
  cdpersoon: String
  status: String
  geboortedatum: Date
}

"""A `PersoonMv` edge in the connection."""
type PersoonMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PersoonMv` at the end of the edge."""
  node: PersoonMv!
}

"""Methods to use when ordering `PersoonMv`."""
enum PersoonMvsOrderBy {
  NATURAL
  VVKALENDER_ASC
  VVKALENDER_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  NAAM_ASC
  NAAM_DESC
  VOORNAAM_ASC
  VOORNAAM_DESC
  VOORLETTERS_ASC
  VOORLETTERS_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  SYS_CREATE_ASC
  SYS_CREATE_DESC
  SYS_UPDATE_ASC
  SYS_UPDATE_DESC
  VVBRIEFVERTREKDH_ASC
  VVBRIEFVERTREKDH_DESC
  CDTITELVOOR_ASC
  CDTITELVOOR_DESC
  CDTITELNA_ASC
  CDTITELNA_DESC
  GESLACHT_ASC
  GESLACHT_DESC
  VVKERST_ASC
  VVKERST_DESC
  VVUITNODIGINGBEURS_ASC
  VVUITNODIGINGBEURS_DESC
  VVOPVOLGINGBEURS_ASC
  VVOPVOLGINGBEURS_DESC
  VVLEAD_ASC
  VVLEAD_DESC
  VVLOCATIE_ASC
  VVLOCATIE_DESC
  VVDIVERSE_ASC
  VVDIVERSE_DESC
  CDPERSOON_ASC
  CDPERSOON_DESC
  STATUS_ASC
  STATUS_DESC
  GEBOORTEDATUM_ASC
  GEBOORTEDATUM_DESC
}

"""
A condition to be used against `PersoonMv` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PersoonMvCondition {
  """Checks for equality with the object’s `vvkalender` field."""
  vvkalender: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `naam` field."""
  naam: String

  """Checks for equality with the object’s `voornaam` field."""
  voornaam: String

  """Checks for equality with the object’s `voorletters` field."""
  voorletters: String

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `sysCreate` field."""
  sysCreate: String

  """Checks for equality with the object’s `sysUpdate` field."""
  sysUpdate: String

  """Checks for equality with the object’s `vvbriefvertrekdh` field."""
  vvbriefvertrekdh: String

  """Checks for equality with the object’s `cdtitelvoor` field."""
  cdtitelvoor: String

  """Checks for equality with the object’s `cdtitelna` field."""
  cdtitelna: String

  """Checks for equality with the object’s `geslacht` field."""
  geslacht: String

  """Checks for equality with the object’s `vvkerst` field."""
  vvkerst: String

  """Checks for equality with the object’s `vvuitnodigingbeurs` field."""
  vvuitnodigingbeurs: String

  """Checks for equality with the object’s `vvopvolgingbeurs` field."""
  vvopvolgingbeurs: String

  """Checks for equality with the object’s `vvlead` field."""
  vvlead: String

  """Checks for equality with the object’s `vvlocatie` field."""
  vvlocatie: String

  """Checks for equality with the object’s `vvdiverse` field."""
  vvdiverse: String

  """Checks for equality with the object’s `cdpersoon` field."""
  cdpersoon: String

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `geboortedatum` field."""
  geboortedatum: Date
}

"""
A filter to be used against `PersoonMv` object types. All fields are combined with a logical ‘and.’
"""
input PersoonMvFilter {
  """Filter by the object’s `vvkalender` field."""
  vvkalender: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `naam` field."""
  naam: StringFilter

  """Filter by the object’s `voornaam` field."""
  voornaam: StringFilter

  """Filter by the object’s `voorletters` field."""
  voorletters: StringFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `sysCreate` field."""
  sysCreate: StringFilter

  """Filter by the object’s `sysUpdate` field."""
  sysUpdate: StringFilter

  """Filter by the object’s `vvbriefvertrekdh` field."""
  vvbriefvertrekdh: StringFilter

  """Filter by the object’s `cdtitelvoor` field."""
  cdtitelvoor: StringFilter

  """Filter by the object’s `cdtitelna` field."""
  cdtitelna: StringFilter

  """Filter by the object’s `geslacht` field."""
  geslacht: StringFilter

  """Filter by the object’s `vvkerst` field."""
  vvkerst: StringFilter

  """Filter by the object’s `vvuitnodigingbeurs` field."""
  vvuitnodigingbeurs: StringFilter

  """Filter by the object’s `vvopvolgingbeurs` field."""
  vvopvolgingbeurs: StringFilter

  """Filter by the object’s `vvlead` field."""
  vvlead: StringFilter

  """Filter by the object’s `vvlocatie` field."""
  vvlocatie: StringFilter

  """Filter by the object’s `vvdiverse` field."""
  vvdiverse: StringFilter

  """Filter by the object’s `cdpersoon` field."""
  cdpersoon: StringFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `geboortedatum` field."""
  geboortedatum: DateFilter

  """Checks for all expressions in this list."""
  and: [PersoonMvFilter!]

  """Checks for any expressions in this list."""
  or: [PersoonMvFilter!]

  """Negates the expression."""
  not: PersoonMvFilter
}

"""A connection to a list of `PersoonRol` values."""
type PersoonRolsConnection {
  """A list of `PersoonRol` objects."""
  nodes: [PersoonRol!]!

  """
  A list of edges which contains the `PersoonRol` and cursor to aid in pagination.
  """
  edges: [PersoonRolsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PersoonRol` you could get from the connection."""
  totalCount: Int!
}

type PersoonRol implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  persoonRolGuid: String!
  cdpersoon: String!
  cdrelatie: Int
  cdrol: String!
  rolcode: String
  voorkeur: String!
  cdfunctie: String
  cdafdeling: String
  limiet: BigFloat
  limietPerc: BigFloat
}

"""A `PersoonRol` edge in the connection."""
type PersoonRolsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PersoonRol` at the end of the edge."""
  node: PersoonRol!
}

"""Methods to use when ordering `PersoonRol`."""
enum PersoonRolsOrderBy {
  NATURAL
  PERSOON_ROL_GUID_ASC
  PERSOON_ROL_GUID_DESC
  CDPERSOON_ASC
  CDPERSOON_DESC
  CDRELATIE_ASC
  CDRELATIE_DESC
  CDROL_ASC
  CDROL_DESC
  ROLCODE_ASC
  ROLCODE_DESC
  VOORKEUR_ASC
  VOORKEUR_DESC
  CDFUNCTIE_ASC
  CDFUNCTIE_DESC
  CDAFDELING_ASC
  CDAFDELING_DESC
  LIMIET_ASC
  LIMIET_DESC
  LIMIET_PERC_ASC
  LIMIET_PERC_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PersoonRol` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PersoonRolCondition {
  """Checks for equality with the object’s `persoonRolGuid` field."""
  persoonRolGuid: String

  """Checks for equality with the object’s `cdpersoon` field."""
  cdpersoon: String

  """Checks for equality with the object’s `cdrelatie` field."""
  cdrelatie: Int

  """Checks for equality with the object’s `cdrol` field."""
  cdrol: String

  """Checks for equality with the object’s `rolcode` field."""
  rolcode: String

  """Checks for equality with the object’s `voorkeur` field."""
  voorkeur: String

  """Checks for equality with the object’s `cdfunctie` field."""
  cdfunctie: String

  """Checks for equality with the object’s `cdafdeling` field."""
  cdafdeling: String

  """Checks for equality with the object’s `limiet` field."""
  limiet: BigFloat

  """Checks for equality with the object’s `limietPerc` field."""
  limietPerc: BigFloat
}

"""
A filter to be used against `PersoonRol` object types. All fields are combined with a logical ‘and.’
"""
input PersoonRolFilter {
  """Filter by the object’s `persoonRolGuid` field."""
  persoonRolGuid: StringFilter

  """Filter by the object’s `cdpersoon` field."""
  cdpersoon: StringFilter

  """Filter by the object’s `cdrelatie` field."""
  cdrelatie: IntFilter

  """Filter by the object’s `cdrol` field."""
  cdrol: StringFilter

  """Filter by the object’s `rolcode` field."""
  rolcode: StringFilter

  """Filter by the object’s `voorkeur` field."""
  voorkeur: StringFilter

  """Filter by the object’s `cdfunctie` field."""
  cdfunctie: StringFilter

  """Filter by the object’s `cdafdeling` field."""
  cdafdeling: StringFilter

  """Filter by the object’s `limiet` field."""
  limiet: BigFloatFilter

  """Filter by the object’s `limietPerc` field."""
  limietPerc: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [PersoonRolFilter!]

  """Checks for any expressions in this list."""
  or: [PersoonRolFilter!]

  """Negates the expression."""
  not: PersoonRolFilter
}

"""A connection to a list of `Production` values."""
type ProductionsConnection {
  """A list of `Production` objects."""
  nodes: [Production!]!

  """
  A list of edges which contains the `Production` and cursor to aid in pagination.
  """
  edges: [ProductionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Production` you could get from the connection."""
  totalCount: Int!
}

type Production implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
}

"""A `Production` edge in the connection."""
type ProductionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Production` at the end of the edge."""
  node: Production!
}

"""Methods to use when ordering `Production`."""
enum ProductionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Production` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ProductionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""
A filter to be used against `Production` object types. All fields are combined with a logical ‘and.’
"""
input ProductionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Checks for all expressions in this list."""
  and: [ProductionFilter!]

  """Checks for any expressions in this list."""
  or: [ProductionFilter!]

  """Negates the expression."""
  not: ProductionFilter
}

"""A connection to a list of `PyrolyserEntity` values."""
type PyrolyserEntitiesConnection {
  """A list of `PyrolyserEntity` objects."""
  nodes: [PyrolyserEntity!]!

  """
  A list of edges which contains the `PyrolyserEntity` and cursor to aid in pagination.
  """
  edges: [PyrolyserEntitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PyrolyserEntity` you could get from the connection.
  """
  totalCount: Int!
}

type PyrolyserEntity {
  id: Int
  name: String
  created: Datetime
  omschr: String
  cdartikel: String
  replacementIntervalMonths: Int
  ownerId: Int
  initials: String
}

"""A `PyrolyserEntity` edge in the connection."""
type PyrolyserEntitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PyrolyserEntity` at the end of the edge."""
  node: PyrolyserEntity!
}

"""Methods to use when ordering `PyrolyserEntity`."""
enum PyrolyserEntitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  REPLACEMENT_INTERVAL_MONTHS_ASC
  REPLACEMENT_INTERVAL_MONTHS_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  INITIALS_ASC
  INITIALS_DESC
}

"""
A condition to be used against `PyrolyserEntity` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PyrolyserEntityCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """
  Checks for equality with the object’s `replacementIntervalMonths` field.
  """
  replacementIntervalMonths: Int

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `initials` field."""
  initials: String
}

"""
A filter to be used against `PyrolyserEntity` object types. All fields are combined with a logical ‘and.’
"""
input PyrolyserEntityFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `replacementIntervalMonths` field."""
  replacementIntervalMonths: IntFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `initials` field."""
  initials: StringFilter

  """Checks for all expressions in this list."""
  and: [PyrolyserEntityFilter!]

  """Checks for any expressions in this list."""
  or: [PyrolyserEntityFilter!]

  """Negates the expression."""
  not: PyrolyserEntityFilter
}

"""A connection to a list of `AnotherRefreshToken` values."""
type AnotherRefreshTokensConnection {
  """A list of `AnotherRefreshToken` objects."""
  nodes: [AnotherRefreshToken!]!

  """
  A list of edges which contains the `AnotherRefreshToken` and cursor to aid in pagination.
  """
  edges: [AnotherRefreshTokensEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AnotherRefreshToken` you could get from the connection.
  """
  totalCount: Int!
}

type AnotherRefreshToken {
  id: UUID!
  hashedValue: String!
  columnName: Int
  isBlackListed: Boolean!
  lastUsed: Datetime
  created: Datetime
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""A `AnotherRefreshToken` edge in the connection."""
type AnotherRefreshTokensEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AnotherRefreshToken` at the end of the edge."""
  node: AnotherRefreshToken!
}

"""Methods to use when ordering `AnotherRefreshToken`."""
enum AnotherRefreshTokensOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  HASHED_VALUE_ASC
  HASHED_VALUE_DESC
  COLUMN_NAME_ASC
  COLUMN_NAME_DESC
  IS_BLACK_LISTED_ASC
  IS_BLACK_LISTED_DESC
  LAST_USED_ASC
  LAST_USED_DESC
  CREATED_ASC
  CREATED_DESC
}

"""
A condition to be used against `AnotherRefreshToken` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input AnotherRefreshTokenCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `hashedValue` field."""
  hashedValue: String

  """Checks for equality with the object’s `columnName` field."""
  columnName: Int

  """Checks for equality with the object’s `isBlackListed` field."""
  isBlackListed: Boolean

  """Checks for equality with the object’s `lastUsed` field."""
  lastUsed: Datetime

  """Checks for equality with the object’s `created` field."""
  created: Datetime
}

"""
A filter to be used against `AnotherRefreshToken` object types. All fields are combined with a logical ‘and.’
"""
input AnotherRefreshTokenFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `hashedValue` field."""
  hashedValue: StringFilter

  """Filter by the object’s `columnName` field."""
  columnName: IntFilter

  """Filter by the object’s `isBlackListed` field."""
  isBlackListed: BooleanFilter

  """Filter by the object’s `lastUsed` field."""
  lastUsed: DatetimeFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [AnotherRefreshTokenFilter!]

  """Checks for any expressions in this list."""
  or: [AnotherRefreshTokenFilter!]

  """Negates the expression."""
  not: AnotherRefreshTokenFilter
}

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Included in the specified list."""
  in: [UUID!]

  """Not included in the specified list."""
  notIn: [UUID!]

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """
  Included in the specified list -unless list is empty in which case this operator is not applied.
  """
  inExpansive: [UUID!]
}

"""A connection to a list of `Relatie` values."""
type RelatiesConnection {
  """A list of `Relatie` objects."""
  nodes: [Relatie!]!

  """
  A list of edges which contains the `Relatie` and cursor to aid in pagination.
  """
  edges: [RelatiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Relatie` you could get from the connection."""
  totalCount: Int!
}

type Relatie {
  cdrelatie: Int
  ltstcdcontact: Int
  zoeknaam: String
  naam: String
  naamstraat: String
  straat: String
  woonplaats: String
  postcode: String
  cdland: String
  telefoon: String
  telefoonmobiel: String
  telefax: String
  email: String
  btwnummer: String
  datumverif: Date
  cdtaal: String
  nummerkvk: String
  plaatskvk: String
  datumkvk: Date
  homepage: String
  cdvert: String
  aanmaakdatum: Date
  datumltstewijz: Date
  ondernemersnr: String
  guidItem: String
  sysCreate: String
  sysUpdate: String
  vvindustry: String
  overhIdNr: String
}

"""A `Relatie` edge in the connection."""
type RelatiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Relatie` at the end of the edge."""
  node: Relatie!
}

"""Methods to use when ordering `Relatie`."""
enum RelatiesOrderBy {
  NATURAL
  CDRELATIE_ASC
  CDRELATIE_DESC
  LTSTCDCONTACT_ASC
  LTSTCDCONTACT_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  NAAM_ASC
  NAAM_DESC
  NAAMSTRAAT_ASC
  NAAMSTRAAT_DESC
  STRAAT_ASC
  STRAAT_DESC
  WOONPLAATS_ASC
  WOONPLAATS_DESC
  POSTCODE_ASC
  POSTCODE_DESC
  CDLAND_ASC
  CDLAND_DESC
  TELEFOON_ASC
  TELEFOON_DESC
  TELEFOONMOBIEL_ASC
  TELEFOONMOBIEL_DESC
  TELEFAX_ASC
  TELEFAX_DESC
  EMAIL_ASC
  EMAIL_DESC
  BTWNUMMER_ASC
  BTWNUMMER_DESC
  DATUMVERIF_ASC
  DATUMVERIF_DESC
  CDTAAL_ASC
  CDTAAL_DESC
  NUMMERKVK_ASC
  NUMMERKVK_DESC
  PLAATSKVK_ASC
  PLAATSKVK_DESC
  DATUMKVK_ASC
  DATUMKVK_DESC
  HOMEPAGE_ASC
  HOMEPAGE_DESC
  CDVERT_ASC
  CDVERT_DESC
  AANMAAKDATUM_ASC
  AANMAAKDATUM_DESC
  DATUMLTSTEWIJZ_ASC
  DATUMLTSTEWIJZ_DESC
  ONDERNEMERSNR_ASC
  ONDERNEMERSNR_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  SYS_CREATE_ASC
  SYS_CREATE_DESC
  SYS_UPDATE_ASC
  SYS_UPDATE_DESC
  VVINDUSTRY_ASC
  VVINDUSTRY_DESC
  OVERH_ID_NR_ASC
  OVERH_ID_NR_DESC
}

"""
A condition to be used against `Relatie` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RelatieCondition {
  """Checks for equality with the object’s `cdrelatie` field."""
  cdrelatie: Int

  """Checks for equality with the object’s `ltstcdcontact` field."""
  ltstcdcontact: Int

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `naam` field."""
  naam: String

  """Checks for equality with the object’s `naamstraat` field."""
  naamstraat: String

  """Checks for equality with the object’s `straat` field."""
  straat: String

  """Checks for equality with the object’s `woonplaats` field."""
  woonplaats: String

  """Checks for equality with the object’s `postcode` field."""
  postcode: String

  """Checks for equality with the object’s `cdland` field."""
  cdland: String

  """Checks for equality with the object’s `telefoon` field."""
  telefoon: String

  """Checks for equality with the object’s `telefoonmobiel` field."""
  telefoonmobiel: String

  """Checks for equality with the object’s `telefax` field."""
  telefax: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `btwnummer` field."""
  btwnummer: String

  """Checks for equality with the object’s `datumverif` field."""
  datumverif: Date

  """Checks for equality with the object’s `cdtaal` field."""
  cdtaal: String

  """Checks for equality with the object’s `nummerkvk` field."""
  nummerkvk: String

  """Checks for equality with the object’s `plaatskvk` field."""
  plaatskvk: String

  """Checks for equality with the object’s `datumkvk` field."""
  datumkvk: Date

  """Checks for equality with the object’s `homepage` field."""
  homepage: String

  """Checks for equality with the object’s `cdvert` field."""
  cdvert: String

  """Checks for equality with the object’s `aanmaakdatum` field."""
  aanmaakdatum: Date

  """Checks for equality with the object’s `datumltstewijz` field."""
  datumltstewijz: Date

  """Checks for equality with the object’s `ondernemersnr` field."""
  ondernemersnr: String

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `sysCreate` field."""
  sysCreate: String

  """Checks for equality with the object’s `sysUpdate` field."""
  sysUpdate: String

  """Checks for equality with the object’s `vvindustry` field."""
  vvindustry: String

  """Checks for equality with the object’s `overhIdNr` field."""
  overhIdNr: String
}

"""
A filter to be used against `Relatie` object types. All fields are combined with a logical ‘and.’
"""
input RelatieFilter {
  """Filter by the object’s `cdrelatie` field."""
  cdrelatie: IntFilter

  """Filter by the object’s `ltstcdcontact` field."""
  ltstcdcontact: IntFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `naam` field."""
  naam: StringFilter

  """Filter by the object’s `naamstraat` field."""
  naamstraat: StringFilter

  """Filter by the object’s `straat` field."""
  straat: StringFilter

  """Filter by the object’s `woonplaats` field."""
  woonplaats: StringFilter

  """Filter by the object’s `postcode` field."""
  postcode: StringFilter

  """Filter by the object’s `cdland` field."""
  cdland: StringFilter

  """Filter by the object’s `telefoon` field."""
  telefoon: StringFilter

  """Filter by the object’s `telefoonmobiel` field."""
  telefoonmobiel: StringFilter

  """Filter by the object’s `telefax` field."""
  telefax: StringFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `btwnummer` field."""
  btwnummer: StringFilter

  """Filter by the object’s `datumverif` field."""
  datumverif: DateFilter

  """Filter by the object’s `cdtaal` field."""
  cdtaal: StringFilter

  """Filter by the object’s `nummerkvk` field."""
  nummerkvk: StringFilter

  """Filter by the object’s `plaatskvk` field."""
  plaatskvk: StringFilter

  """Filter by the object’s `datumkvk` field."""
  datumkvk: DateFilter

  """Filter by the object’s `homepage` field."""
  homepage: StringFilter

  """Filter by the object’s `cdvert` field."""
  cdvert: StringFilter

  """Filter by the object’s `aanmaakdatum` field."""
  aanmaakdatum: DateFilter

  """Filter by the object’s `datumltstewijz` field."""
  datumltstewijz: DateFilter

  """Filter by the object’s `ondernemersnr` field."""
  ondernemersnr: StringFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `sysCreate` field."""
  sysCreate: StringFilter

  """Filter by the object’s `sysUpdate` field."""
  sysUpdate: StringFilter

  """Filter by the object’s `vvindustry` field."""
  vvindustry: StringFilter

  """Filter by the object’s `overhIdNr` field."""
  overhIdNr: StringFilter

  """Checks for all expressions in this list."""
  and: [RelatieFilter!]

  """Checks for any expressions in this list."""
  or: [RelatieFilter!]

  """Negates the expression."""
  not: RelatieFilter
}

"""A connection to a list of `RelatieMv` values."""
type RelatieMvsConnection {
  """A list of `RelatieMv` objects."""
  nodes: [RelatieMv!]!

  """
  A list of edges which contains the `RelatieMv` and cursor to aid in pagination.
  """
  edges: [RelatieMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RelatieMv` you could get from the connection."""
  totalCount: Int!
}

type RelatieMv {
  cdrelatie: Int
  ltstcdcontact: Int
  zoeknaam: String
  naam: String
  naamstraat: String
  straat: String
  woonplaats: String
  postcode: String
  cdland: String
  telefoon: String
  telefoonmobiel: String
  telefax: String
  email: String
  btwnummer: String
  datumverif: Date
  cdtaal: String
  nummerkvk: String
  plaatskvk: String
  datumkvk: Date
  homepage: String
  cdvert: String
  aanmaakdatum: Date
  datumltstewijz: Date
  ondernemersnr: String
  guidItem: String
  sysCreate: String
  sysUpdate: String
  vvindustry: String
  overhIdNr: String
}

"""A `RelatieMv` edge in the connection."""
type RelatieMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RelatieMv` at the end of the edge."""
  node: RelatieMv!
}

"""Methods to use when ordering `RelatieMv`."""
enum RelatieMvsOrderBy {
  NATURAL
  CDRELATIE_ASC
  CDRELATIE_DESC
  LTSTCDCONTACT_ASC
  LTSTCDCONTACT_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  NAAM_ASC
  NAAM_DESC
  NAAMSTRAAT_ASC
  NAAMSTRAAT_DESC
  STRAAT_ASC
  STRAAT_DESC
  WOONPLAATS_ASC
  WOONPLAATS_DESC
  POSTCODE_ASC
  POSTCODE_DESC
  CDLAND_ASC
  CDLAND_DESC
  TELEFOON_ASC
  TELEFOON_DESC
  TELEFOONMOBIEL_ASC
  TELEFOONMOBIEL_DESC
  TELEFAX_ASC
  TELEFAX_DESC
  EMAIL_ASC
  EMAIL_DESC
  BTWNUMMER_ASC
  BTWNUMMER_DESC
  DATUMVERIF_ASC
  DATUMVERIF_DESC
  CDTAAL_ASC
  CDTAAL_DESC
  NUMMERKVK_ASC
  NUMMERKVK_DESC
  PLAATSKVK_ASC
  PLAATSKVK_DESC
  DATUMKVK_ASC
  DATUMKVK_DESC
  HOMEPAGE_ASC
  HOMEPAGE_DESC
  CDVERT_ASC
  CDVERT_DESC
  AANMAAKDATUM_ASC
  AANMAAKDATUM_DESC
  DATUMLTSTEWIJZ_ASC
  DATUMLTSTEWIJZ_DESC
  ONDERNEMERSNR_ASC
  ONDERNEMERSNR_DESC
  GUID_ITEM_ASC
  GUID_ITEM_DESC
  SYS_CREATE_ASC
  SYS_CREATE_DESC
  SYS_UPDATE_ASC
  SYS_UPDATE_DESC
  VVINDUSTRY_ASC
  VVINDUSTRY_DESC
  OVERH_ID_NR_ASC
  OVERH_ID_NR_DESC
}

"""
A condition to be used against `RelatieMv` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input RelatieMvCondition {
  """Checks for equality with the object’s `cdrelatie` field."""
  cdrelatie: Int

  """Checks for equality with the object’s `ltstcdcontact` field."""
  ltstcdcontact: Int

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `naam` field."""
  naam: String

  """Checks for equality with the object’s `naamstraat` field."""
  naamstraat: String

  """Checks for equality with the object’s `straat` field."""
  straat: String

  """Checks for equality with the object’s `woonplaats` field."""
  woonplaats: String

  """Checks for equality with the object’s `postcode` field."""
  postcode: String

  """Checks for equality with the object’s `cdland` field."""
  cdland: String

  """Checks for equality with the object’s `telefoon` field."""
  telefoon: String

  """Checks for equality with the object’s `telefoonmobiel` field."""
  telefoonmobiel: String

  """Checks for equality with the object’s `telefax` field."""
  telefax: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `btwnummer` field."""
  btwnummer: String

  """Checks for equality with the object’s `datumverif` field."""
  datumverif: Date

  """Checks for equality with the object’s `cdtaal` field."""
  cdtaal: String

  """Checks for equality with the object’s `nummerkvk` field."""
  nummerkvk: String

  """Checks for equality with the object’s `plaatskvk` field."""
  plaatskvk: String

  """Checks for equality with the object’s `datumkvk` field."""
  datumkvk: Date

  """Checks for equality with the object’s `homepage` field."""
  homepage: String

  """Checks for equality with the object’s `cdvert` field."""
  cdvert: String

  """Checks for equality with the object’s `aanmaakdatum` field."""
  aanmaakdatum: Date

  """Checks for equality with the object’s `datumltstewijz` field."""
  datumltstewijz: Date

  """Checks for equality with the object’s `ondernemersnr` field."""
  ondernemersnr: String

  """Checks for equality with the object’s `guidItem` field."""
  guidItem: String

  """Checks for equality with the object’s `sysCreate` field."""
  sysCreate: String

  """Checks for equality with the object’s `sysUpdate` field."""
  sysUpdate: String

  """Checks for equality with the object’s `vvindustry` field."""
  vvindustry: String

  """Checks for equality with the object’s `overhIdNr` field."""
  overhIdNr: String
}

"""
A filter to be used against `RelatieMv` object types. All fields are combined with a logical ‘and.’
"""
input RelatieMvFilter {
  """Filter by the object’s `cdrelatie` field."""
  cdrelatie: IntFilter

  """Filter by the object’s `ltstcdcontact` field."""
  ltstcdcontact: IntFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `naam` field."""
  naam: StringFilter

  """Filter by the object’s `naamstraat` field."""
  naamstraat: StringFilter

  """Filter by the object’s `straat` field."""
  straat: StringFilter

  """Filter by the object’s `woonplaats` field."""
  woonplaats: StringFilter

  """Filter by the object’s `postcode` field."""
  postcode: StringFilter

  """Filter by the object’s `cdland` field."""
  cdland: StringFilter

  """Filter by the object’s `telefoon` field."""
  telefoon: StringFilter

  """Filter by the object’s `telefoonmobiel` field."""
  telefoonmobiel: StringFilter

  """Filter by the object’s `telefax` field."""
  telefax: StringFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `btwnummer` field."""
  btwnummer: StringFilter

  """Filter by the object’s `datumverif` field."""
  datumverif: DateFilter

  """Filter by the object’s `cdtaal` field."""
  cdtaal: StringFilter

  """Filter by the object’s `nummerkvk` field."""
  nummerkvk: StringFilter

  """Filter by the object’s `plaatskvk` field."""
  plaatskvk: StringFilter

  """Filter by the object’s `datumkvk` field."""
  datumkvk: DateFilter

  """Filter by the object’s `homepage` field."""
  homepage: StringFilter

  """Filter by the object’s `cdvert` field."""
  cdvert: StringFilter

  """Filter by the object’s `aanmaakdatum` field."""
  aanmaakdatum: DateFilter

  """Filter by the object’s `datumltstewijz` field."""
  datumltstewijz: DateFilter

  """Filter by the object’s `ondernemersnr` field."""
  ondernemersnr: StringFilter

  """Filter by the object’s `guidItem` field."""
  guidItem: StringFilter

  """Filter by the object’s `sysCreate` field."""
  sysCreate: StringFilter

  """Filter by the object’s `sysUpdate` field."""
  sysUpdate: StringFilter

  """Filter by the object’s `vvindustry` field."""
  vvindustry: StringFilter

  """Filter by the object’s `overhIdNr` field."""
  overhIdNr: StringFilter

  """Checks for all expressions in this list."""
  and: [RelatieMvFilter!]

  """Checks for any expressions in this list."""
  or: [RelatieMvFilter!]

  """Negates the expression."""
  not: RelatieMvFilter
}

"""A connection to a list of `ReportList` values."""
type ReportListsConnection {
  """A list of `ReportList` objects."""
  nodes: [ReportList!]!

  """
  A list of edges which contains the `ReportList` and cursor to aid in pagination.
  """
  edges: [ReportListsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportList` you could get from the connection."""
  totalCount: Int!
}

type ReportList {
  id: Int
  endUserId: Int
  label: String
}

"""A `ReportList` edge in the connection."""
type ReportListsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportList` at the end of the edge."""
  node: ReportList!
}

"""Methods to use when ordering `ReportList`."""
enum ReportListsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  END_USER_ID_ASC
  END_USER_ID_DESC
  LABEL_ASC
  LABEL_DESC
}

"""
A condition to be used against `ReportList` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ReportListCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `endUserId` field."""
  endUserId: Int

  """Checks for equality with the object’s `label` field."""
  label: String
}

"""
A filter to be used against `ReportList` object types. All fields are combined with a logical ‘and.’
"""
input ReportListFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `endUserId` field."""
  endUserId: IntFilter

  """Filter by the object’s `label` field."""
  label: StringFilter

  """Checks for all expressions in this list."""
  and: [ReportListFilter!]

  """Checks for any expressions in this list."""
  or: [ReportListFilter!]

  """Negates the expression."""
  not: ReportListFilter
}

"""A connection to a list of `SamplePointEntity` values."""
type SamplePointEntitiesConnection {
  """A list of `SamplePointEntity` objects."""
  nodes: [SamplePointEntity!]!

  """
  A list of edges which contains the `SamplePointEntity` and cursor to aid in pagination.
  """
  edges: [SamplePointEntitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SamplePointEntity` you could get from the connection.
  """
  totalCount: Int!
}

type SamplePointEntity {
  id: Int
  name: String
  created: Datetime
  areaId: Int
  areaName: String
  floorId: Int
  floorName: String
  buildingId: Int
  buildingName: String
  endUserId: Int
  endUserName: String
  ownerId: Int
  initials: String
}

"""A `SamplePointEntity` edge in the connection."""
type SamplePointEntitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SamplePointEntity` at the end of the edge."""
  node: SamplePointEntity!
}

"""Methods to use when ordering `SamplePointEntity`."""
enum SamplePointEntitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  AREA_ID_ASC
  AREA_ID_DESC
  AREA_NAME_ASC
  AREA_NAME_DESC
  FLOOR_ID_ASC
  FLOOR_ID_DESC
  FLOOR_NAME_ASC
  FLOOR_NAME_DESC
  BUILDING_ID_ASC
  BUILDING_ID_DESC
  BUILDING_NAME_ASC
  BUILDING_NAME_DESC
  END_USER_ID_ASC
  END_USER_ID_DESC
  END_USER_NAME_ASC
  END_USER_NAME_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  INITIALS_ASC
  INITIALS_DESC
}

"""
A condition to be used against `SamplePointEntity` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SamplePointEntityCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `areaId` field."""
  areaId: Int

  """Checks for equality with the object’s `areaName` field."""
  areaName: String

  """Checks for equality with the object’s `floorId` field."""
  floorId: Int

  """Checks for equality with the object’s `floorName` field."""
  floorName: String

  """Checks for equality with the object’s `buildingId` field."""
  buildingId: Int

  """Checks for equality with the object’s `buildingName` field."""
  buildingName: String

  """Checks for equality with the object’s `endUserId` field."""
  endUserId: Int

  """Checks for equality with the object’s `endUserName` field."""
  endUserName: String

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `initials` field."""
  initials: String
}

"""
A filter to be used against `SamplePointEntity` object types. All fields are combined with a logical ‘and.’
"""
input SamplePointEntityFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `areaId` field."""
  areaId: IntFilter

  """Filter by the object’s `areaName` field."""
  areaName: StringFilter

  """Filter by the object’s `floorId` field."""
  floorId: IntFilter

  """Filter by the object’s `floorName` field."""
  floorName: StringFilter

  """Filter by the object’s `buildingId` field."""
  buildingId: IntFilter

  """Filter by the object’s `buildingName` field."""
  buildingName: StringFilter

  """Filter by the object’s `endUserId` field."""
  endUserId: IntFilter

  """Filter by the object’s `endUserName` field."""
  endUserName: StringFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `initials` field."""
  initials: StringFilter

  """Checks for all expressions in this list."""
  and: [SamplePointEntityFilter!]

  """Checks for any expressions in this list."""
  or: [SamplePointEntityFilter!]

  """Negates the expression."""
  not: SamplePointEntityFilter
}

"""A connection to a list of `SensorIndex` values."""
type SensorIndicesConnection {
  """A list of `SensorIndex` objects."""
  nodes: [SensorIndex!]!

  """
  A list of edges which contains the `SensorIndex` and cursor to aid in pagination.
  """
  edges: [SensorIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SensorIndex` you could get from the connection."""
  totalCount: Int!
}

type SensorIndex {
  id: Int
  serialNumber: String
  sensorType: String
  label: String
  sensorTypeSort: String
  range: String
  gasName: String
  formattedLabelDate: String
  createdDate: String
  factuuropdracht: String
  debiteurNaam: String
  sensorTypeId: Int
  detectorSensorId: Int
}

"""A `SensorIndex` edge in the connection."""
type SensorIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SensorIndex` at the end of the edge."""
  node: SensorIndex!
}

"""Methods to use when ordering `SensorIndex`."""
enum SensorIndicesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SERIAL_NUMBER_ASC
  SERIAL_NUMBER_DESC
  SENSOR_TYPE_ASC
  SENSOR_TYPE_DESC
  LABEL_ASC
  LABEL_DESC
  SENSOR_TYPE_SORT_ASC
  SENSOR_TYPE_SORT_DESC
  RANGE_ASC
  RANGE_DESC
  GAS_NAME_ASC
  GAS_NAME_DESC
  FORMATTED_LABEL_DATE_ASC
  FORMATTED_LABEL_DATE_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  DEBITEUR_NAAM_ASC
  DEBITEUR_NAAM_DESC
  SENSOR_TYPE_ID_ASC
  SENSOR_TYPE_ID_DESC
  DETECTOR_SENSOR_ID_ASC
  DETECTOR_SENSOR_ID_DESC
}

"""
A condition to be used against `SensorIndex` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SensorIndexCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `serialNumber` field."""
  serialNumber: String

  """Checks for equality with the object’s `sensorType` field."""
  sensorType: String

  """Checks for equality with the object’s `label` field."""
  label: String

  """Checks for equality with the object’s `sensorTypeSort` field."""
  sensorTypeSort: String

  """Checks for equality with the object’s `range` field."""
  range: String

  """Checks for equality with the object’s `gasName` field."""
  gasName: String

  """Checks for equality with the object’s `formattedLabelDate` field."""
  formattedLabelDate: String

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: String

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `debiteurNaam` field."""
  debiteurNaam: String

  """Checks for equality with the object’s `sensorTypeId` field."""
  sensorTypeId: Int

  """Checks for equality with the object’s `detectorSensorId` field."""
  detectorSensorId: Int
}

"""
A filter to be used against `SensorIndex` object types. All fields are combined with a logical ‘and.’
"""
input SensorIndexFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `serialNumber` field."""
  serialNumber: StringFilter

  """Filter by the object’s `sensorType` field."""
  sensorType: StringFilter

  """Filter by the object’s `label` field."""
  label: StringFilter

  """Filter by the object’s `sensorTypeSort` field."""
  sensorTypeSort: StringFilter

  """Filter by the object’s `range` field."""
  range: StringFilter

  """Filter by the object’s `gasName` field."""
  gasName: StringFilter

  """Filter by the object’s `formattedLabelDate` field."""
  formattedLabelDate: StringFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: StringFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `debiteurNaam` field."""
  debiteurNaam: StringFilter

  """Filter by the object’s `sensorTypeId` field."""
  sensorTypeId: IntFilter

  """Filter by the object’s `detectorSensorId` field."""
  detectorSensorId: IntFilter

  """Checks for all expressions in this list."""
  and: [SensorIndexFilter!]

  """Checks for any expressions in this list."""
  or: [SensorIndexFilter!]

  """Negates the expression."""
  not: SensorIndexFilter
}

"""A connection to a list of `SensorSetting` values."""
type SensorSettingsConnection {
  """A list of `SensorSetting` objects."""
  nodes: [SensorSetting!]!

  """
  A list of edges which contains the `SensorSetting` and cursor to aid in pagination.
  """
  edges: [SensorSettingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SensorSetting` you could get from the connection."""
  totalCount: Int!
}

type SensorSetting implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  typeTarget: String
  type: String
  version: String
  target: String
  min: BigFloat
  max: BigFloat
  units: String
  nDec: Int
  gas: String
  flow: BigFloat
  sw5: String
  sw6: String
  electrolyte: String
  membrane: String
  oRing: String
  restr: String
  battery: String
  seal: String
  plug: String
  sw4: String
  battConn: String
  alarmUnits: Int
  alarm1Percentage: BigFloat
  alarm1Units: BigFloat
  alarm1Current: Int
  alarm1Direction: Int
  alarm2Percentage: BigFloat
  alarm2Units: BigFloat
  alarm2Current: Int
  alarm2Direction: Int
  warningPercentageA1: BigFloat
  warningCurrent: Int
  calFlow: BigFloat
  byPassFlow: BigFloat
  pyroType: String
  pyroVoltage: BigFloat
  span100K: String
  span10K: String
  span1K: String
}

"""A `SensorSetting` edge in the connection."""
type SensorSettingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SensorSetting` at the end of the edge."""
  node: SensorSetting!
}

"""Methods to use when ordering `SensorSetting`."""
enum SensorSettingsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TYPE_TARGET_ASC
  TYPE_TARGET_DESC
  TYPE_ASC
  TYPE_DESC
  VERSION_ASC
  VERSION_DESC
  TARGET_ASC
  TARGET_DESC
  MIN_ASC
  MIN_DESC
  MAX_ASC
  MAX_DESC
  UNITS_ASC
  UNITS_DESC
  N_DEC_ASC
  N_DEC_DESC
  GAS_ASC
  GAS_DESC
  FLOW_ASC
  FLOW_DESC
  SW5_ASC
  SW5_DESC
  SW6_ASC
  SW6_DESC
  ELECTROLYTE_ASC
  ELECTROLYTE_DESC
  MEMBRANE_ASC
  MEMBRANE_DESC
  O_RING_ASC
  O_RING_DESC
  RESTR_ASC
  RESTR_DESC
  BATTERY_ASC
  BATTERY_DESC
  SEAL_ASC
  SEAL_DESC
  PLUG_ASC
  PLUG_DESC
  SW4_ASC
  SW4_DESC
  BATT_CONN_ASC
  BATT_CONN_DESC
  ALARM_UNITS_ASC
  ALARM_UNITS_DESC
  ALARM_1_PERCENTAGE_ASC
  ALARM_1_PERCENTAGE_DESC
  ALARM_1_UNITS_ASC
  ALARM_1_UNITS_DESC
  ALARM_1_CURRENT_ASC
  ALARM_1_CURRENT_DESC
  ALARM_1_DIRECTION_ASC
  ALARM_1_DIRECTION_DESC
  ALARM_2_PERCENTAGE_ASC
  ALARM_2_PERCENTAGE_DESC
  ALARM_2_UNITS_ASC
  ALARM_2_UNITS_DESC
  ALARM_2_CURRENT_ASC
  ALARM_2_CURRENT_DESC
  ALARM_2_DIRECTION_ASC
  ALARM_2_DIRECTION_DESC
  WARNING_PERCENTAGE_A_1_ASC
  WARNING_PERCENTAGE_A_1_DESC
  WARNING_CURRENT_ASC
  WARNING_CURRENT_DESC
  CAL_FLOW_ASC
  CAL_FLOW_DESC
  BY_PASS_FLOW_ASC
  BY_PASS_FLOW_DESC
  PYRO_TYPE_ASC
  PYRO_TYPE_DESC
  PYRO_VOLTAGE_ASC
  PYRO_VOLTAGE_DESC
  SPAN_100K_ASC
  SPAN_100K_DESC
  SPAN_10K_ASC
  SPAN_10K_DESC
  SPAN_1K_ASC
  SPAN_1K_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SensorSetting` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SensorSettingCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `typeTarget` field."""
  typeTarget: String

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `version` field."""
  version: String

  """Checks for equality with the object’s `target` field."""
  target: String

  """Checks for equality with the object’s `min` field."""
  min: BigFloat

  """Checks for equality with the object’s `max` field."""
  max: BigFloat

  """Checks for equality with the object’s `units` field."""
  units: String

  """Checks for equality with the object’s `nDec` field."""
  nDec: Int

  """Checks for equality with the object’s `gas` field."""
  gas: String

  """Checks for equality with the object’s `flow` field."""
  flow: BigFloat

  """Checks for equality with the object’s `sw5` field."""
  sw5: String

  """Checks for equality with the object’s `sw6` field."""
  sw6: String

  """Checks for equality with the object’s `electrolyte` field."""
  electrolyte: String

  """Checks for equality with the object’s `membrane` field."""
  membrane: String

  """Checks for equality with the object’s `oRing` field."""
  oRing: String

  """Checks for equality with the object’s `restr` field."""
  restr: String

  """Checks for equality with the object’s `battery` field."""
  battery: String

  """Checks for equality with the object’s `seal` field."""
  seal: String

  """Checks for equality with the object’s `plug` field."""
  plug: String

  """Checks for equality with the object’s `sw4` field."""
  sw4: String

  """Checks for equality with the object’s `battConn` field."""
  battConn: String

  """Checks for equality with the object’s `alarmUnits` field."""
  alarmUnits: Int

  """Checks for equality with the object’s `alarm1Percentage` field."""
  alarm1Percentage: BigFloat

  """Checks for equality with the object’s `alarm1Units` field."""
  alarm1Units: BigFloat

  """Checks for equality with the object’s `alarm1Current` field."""
  alarm1Current: Int

  """Checks for equality with the object’s `alarm1Direction` field."""
  alarm1Direction: Int

  """Checks for equality with the object’s `alarm2Percentage` field."""
  alarm2Percentage: BigFloat

  """Checks for equality with the object’s `alarm2Units` field."""
  alarm2Units: BigFloat

  """Checks for equality with the object’s `alarm2Current` field."""
  alarm2Current: Int

  """Checks for equality with the object’s `alarm2Direction` field."""
  alarm2Direction: Int

  """Checks for equality with the object’s `warningPercentageA1` field."""
  warningPercentageA1: BigFloat

  """Checks for equality with the object’s `warningCurrent` field."""
  warningCurrent: Int

  """Checks for equality with the object’s `calFlow` field."""
  calFlow: BigFloat

  """Checks for equality with the object’s `byPassFlow` field."""
  byPassFlow: BigFloat

  """Checks for equality with the object’s `pyroType` field."""
  pyroType: String

  """Checks for equality with the object’s `pyroVoltage` field."""
  pyroVoltage: BigFloat

  """Checks for equality with the object’s `span100K` field."""
  span100K: String

  """Checks for equality with the object’s `span10K` field."""
  span10K: String

  """Checks for equality with the object’s `span1K` field."""
  span1K: String
}

"""
A filter to be used against `SensorSetting` object types. All fields are combined with a logical ‘and.’
"""
input SensorSettingFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `typeTarget` field."""
  typeTarget: StringFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `version` field."""
  version: StringFilter

  """Filter by the object’s `target` field."""
  target: StringFilter

  """Filter by the object’s `min` field."""
  min: BigFloatFilter

  """Filter by the object’s `max` field."""
  max: BigFloatFilter

  """Filter by the object’s `units` field."""
  units: StringFilter

  """Filter by the object’s `nDec` field."""
  nDec: IntFilter

  """Filter by the object’s `gas` field."""
  gas: StringFilter

  """Filter by the object’s `flow` field."""
  flow: BigFloatFilter

  """Filter by the object’s `sw5` field."""
  sw5: StringFilter

  """Filter by the object’s `sw6` field."""
  sw6: StringFilter

  """Filter by the object’s `electrolyte` field."""
  electrolyte: StringFilter

  """Filter by the object’s `membrane` field."""
  membrane: StringFilter

  """Filter by the object’s `oRing` field."""
  oRing: StringFilter

  """Filter by the object’s `restr` field."""
  restr: StringFilter

  """Filter by the object’s `battery` field."""
  battery: StringFilter

  """Filter by the object’s `seal` field."""
  seal: StringFilter

  """Filter by the object’s `plug` field."""
  plug: StringFilter

  """Filter by the object’s `sw4` field."""
  sw4: StringFilter

  """Filter by the object’s `battConn` field."""
  battConn: StringFilter

  """Filter by the object’s `alarmUnits` field."""
  alarmUnits: IntFilter

  """Filter by the object’s `alarm1Percentage` field."""
  alarm1Percentage: BigFloatFilter

  """Filter by the object’s `alarm1Units` field."""
  alarm1Units: BigFloatFilter

  """Filter by the object’s `alarm1Current` field."""
  alarm1Current: IntFilter

  """Filter by the object’s `alarm1Direction` field."""
  alarm1Direction: IntFilter

  """Filter by the object’s `alarm2Percentage` field."""
  alarm2Percentage: BigFloatFilter

  """Filter by the object’s `alarm2Units` field."""
  alarm2Units: BigFloatFilter

  """Filter by the object’s `alarm2Current` field."""
  alarm2Current: IntFilter

  """Filter by the object’s `alarm2Direction` field."""
  alarm2Direction: IntFilter

  """Filter by the object’s `warningPercentageA1` field."""
  warningPercentageA1: BigFloatFilter

  """Filter by the object’s `warningCurrent` field."""
  warningCurrent: IntFilter

  """Filter by the object’s `calFlow` field."""
  calFlow: BigFloatFilter

  """Filter by the object’s `byPassFlow` field."""
  byPassFlow: BigFloatFilter

  """Filter by the object’s `pyroType` field."""
  pyroType: StringFilter

  """Filter by the object’s `pyroVoltage` field."""
  pyroVoltage: BigFloatFilter

  """Filter by the object’s `span100K` field."""
  span100K: StringFilter

  """Filter by the object’s `span10K` field."""
  span10K: StringFilter

  """Filter by the object’s `span1K` field."""
  span1K: StringFilter

  """Checks for all expressions in this list."""
  and: [SensorSettingFilter!]

  """Checks for any expressions in this list."""
  or: [SensorSettingFilter!]

  """Negates the expression."""
  not: SensorSettingFilter
}

"""A connection to a list of `SensorTypesChecklist` values."""
type SensorTypesChecklistsConnection {
  """A list of `SensorTypesChecklist` objects."""
  nodes: [SensorTypesChecklist!]!

  """
  A list of edges which contains the `SensorTypesChecklist` and cursor to aid in pagination.
  """
  edges: [SensorTypesChecklistsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SensorTypesChecklist` you could get from the connection.
  """
  totalCount: Int!
}

type SensorTypesChecklist {
  sensorType: String
  sensorTypeId: Int
  sensorName: String
  sensorHighEu: Float
  sensorEngineeringUnits: String
  spanResistor: BigFloat
  biasMv: Int
  direction: Boolean
  lowElectrolyte: Boolean
  electrodeCount: Int
  restrictor: String
  battery: String
  seal: String
  plugName: String
  transportSwitch: String
  batteryConnection: String
  pc5109DSw1: String
  pc5109DSw2: String
  pc5109DSw3: String
  pc5109DSw5: String
  pc5109DSw6: String
  pc5154BS1: String
  pc5154BS2: String
  pc5155BS3: String
  pc5155BS4: String
  pc5155BS5: String
  pc5155BS1: String
}

"""A `SensorTypesChecklist` edge in the connection."""
type SensorTypesChecklistsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SensorTypesChecklist` at the end of the edge."""
  node: SensorTypesChecklist!
}

"""Methods to use when ordering `SensorTypesChecklist`."""
enum SensorTypesChecklistsOrderBy {
  NATURAL
  SENSOR_TYPE_ASC
  SENSOR_TYPE_DESC
  SENSOR_TYPE_ID_ASC
  SENSOR_TYPE_ID_DESC
  SENSOR_NAME_ASC
  SENSOR_NAME_DESC
  SENSOR_HIGH_EU_ASC
  SENSOR_HIGH_EU_DESC
  SENSOR_ENGINEERING_UNITS_ASC
  SENSOR_ENGINEERING_UNITS_DESC
  SPAN_RESISTOR_ASC
  SPAN_RESISTOR_DESC
  BIAS_MV_ASC
  BIAS_MV_DESC
  DIRECTION_ASC
  DIRECTION_DESC
  LOW_ELECTROLYTE_ASC
  LOW_ELECTROLYTE_DESC
  ELECTRODE_COUNT_ASC
  ELECTRODE_COUNT_DESC
  RESTRICTOR_ASC
  RESTRICTOR_DESC
  BATTERY_ASC
  BATTERY_DESC
  SEAL_ASC
  SEAL_DESC
  PLUG_NAME_ASC
  PLUG_NAME_DESC
  TRANSPORT_SWITCH_ASC
  TRANSPORT_SWITCH_DESC
  BATTERY_CONNECTION_ASC
  BATTERY_CONNECTION_DESC
  PC_5109D_SW1_ASC
  PC_5109D_SW1_DESC
  PC_5109D_SW2_ASC
  PC_5109D_SW2_DESC
  PC_5109D_SW3_ASC
  PC_5109D_SW3_DESC
  PC_5109D_SW5_ASC
  PC_5109D_SW5_DESC
  PC_5109D_SW6_ASC
  PC_5109D_SW6_DESC
  PC_5154B_S1_ASC
  PC_5154B_S1_DESC
  PC_5154B_S2_ASC
  PC_5154B_S2_DESC
  PC_5155B_S3_ASC
  PC_5155B_S3_DESC
  PC_5155B_S4_ASC
  PC_5155B_S4_DESC
  PC_5155B_S5_ASC
  PC_5155B_S5_DESC
  PC_5155B_S1_ASC
  PC_5155B_S1_DESC
}

"""
A condition to be used against `SensorTypesChecklist` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SensorTypesChecklistCondition {
  """Checks for equality with the object’s `sensorType` field."""
  sensorType: String

  """Checks for equality with the object’s `sensorTypeId` field."""
  sensorTypeId: Int

  """Checks for equality with the object’s `sensorName` field."""
  sensorName: String

  """Checks for equality with the object’s `sensorHighEu` field."""
  sensorHighEu: Float

  """Checks for equality with the object’s `sensorEngineeringUnits` field."""
  sensorEngineeringUnits: String

  """Checks for equality with the object’s `spanResistor` field."""
  spanResistor: BigFloat

  """Checks for equality with the object’s `biasMv` field."""
  biasMv: Int

  """Checks for equality with the object’s `direction` field."""
  direction: Boolean

  """Checks for equality with the object’s `lowElectrolyte` field."""
  lowElectrolyte: Boolean

  """Checks for equality with the object’s `electrodeCount` field."""
  electrodeCount: Int

  """Checks for equality with the object’s `restrictor` field."""
  restrictor: String

  """Checks for equality with the object’s `battery` field."""
  battery: String

  """Checks for equality with the object’s `seal` field."""
  seal: String

  """Checks for equality with the object’s `plugName` field."""
  plugName: String

  """Checks for equality with the object’s `transportSwitch` field."""
  transportSwitch: String

  """Checks for equality with the object’s `batteryConnection` field."""
  batteryConnection: String

  """Checks for equality with the object’s `pc5109DSw1` field."""
  pc5109DSw1: String

  """Checks for equality with the object’s `pc5109DSw2` field."""
  pc5109DSw2: String

  """Checks for equality with the object’s `pc5109DSw3` field."""
  pc5109DSw3: String

  """Checks for equality with the object’s `pc5109DSw5` field."""
  pc5109DSw5: String

  """Checks for equality with the object’s `pc5109DSw6` field."""
  pc5109DSw6: String

  """Checks for equality with the object’s `pc5154BS1` field."""
  pc5154BS1: String

  """Checks for equality with the object’s `pc5154BS2` field."""
  pc5154BS2: String

  """Checks for equality with the object’s `pc5155BS3` field."""
  pc5155BS3: String

  """Checks for equality with the object’s `pc5155BS4` field."""
  pc5155BS4: String

  """Checks for equality with the object’s `pc5155BS5` field."""
  pc5155BS5: String

  """Checks for equality with the object’s `pc5155BS1` field."""
  pc5155BS1: String
}

"""
A filter to be used against `SensorTypesChecklist` object types. All fields are combined with a logical ‘and.’
"""
input SensorTypesChecklistFilter {
  """Filter by the object’s `sensorType` field."""
  sensorType: StringFilter

  """Filter by the object’s `sensorTypeId` field."""
  sensorTypeId: IntFilter

  """Filter by the object’s `sensorName` field."""
  sensorName: StringFilter

  """Filter by the object’s `sensorHighEu` field."""
  sensorHighEu: FloatFilter

  """Filter by the object’s `sensorEngineeringUnits` field."""
  sensorEngineeringUnits: StringFilter

  """Filter by the object’s `spanResistor` field."""
  spanResistor: BigFloatFilter

  """Filter by the object’s `biasMv` field."""
  biasMv: IntFilter

  """Filter by the object’s `direction` field."""
  direction: BooleanFilter

  """Filter by the object’s `lowElectrolyte` field."""
  lowElectrolyte: BooleanFilter

  """Filter by the object’s `electrodeCount` field."""
  electrodeCount: IntFilter

  """Filter by the object’s `restrictor` field."""
  restrictor: StringFilter

  """Filter by the object’s `battery` field."""
  battery: StringFilter

  """Filter by the object’s `seal` field."""
  seal: StringFilter

  """Filter by the object’s `plugName` field."""
  plugName: StringFilter

  """Filter by the object’s `transportSwitch` field."""
  transportSwitch: StringFilter

  """Filter by the object’s `batteryConnection` field."""
  batteryConnection: StringFilter

  """Filter by the object’s `pc5109DSw1` field."""
  pc5109DSw1: StringFilter

  """Filter by the object’s `pc5109DSw2` field."""
  pc5109DSw2: StringFilter

  """Filter by the object’s `pc5109DSw3` field."""
  pc5109DSw3: StringFilter

  """Filter by the object’s `pc5109DSw5` field."""
  pc5109DSw5: StringFilter

  """Filter by the object’s `pc5109DSw6` field."""
  pc5109DSw6: StringFilter

  """Filter by the object’s `pc5154BS1` field."""
  pc5154BS1: StringFilter

  """Filter by the object’s `pc5154BS2` field."""
  pc5154BS2: StringFilter

  """Filter by the object’s `pc5155BS3` field."""
  pc5155BS3: StringFilter

  """Filter by the object’s `pc5155BS4` field."""
  pc5155BS4: StringFilter

  """Filter by the object’s `pc5155BS5` field."""
  pc5155BS5: StringFilter

  """Filter by the object’s `pc5155BS1` field."""
  pc5155BS1: StringFilter

  """Checks for all expressions in this list."""
  and: [SensorTypesChecklistFilter!]

  """Checks for any expressions in this list."""
  or: [SensorTypesChecklistFilter!]

  """Negates the expression."""
  not: SensorTypesChecklistFilter
}

"""A connection to a list of `SensorTypesIndex` values."""
type SensorTypesIndicesConnection {
  """A list of `SensorTypesIndex` objects."""
  nodes: [SensorTypesIndex!]!

  """
  A list of edges which contains the `SensorTypesIndex` and cursor to aid in pagination.
  """
  edges: [SensorTypesIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SensorTypesIndex` you could get from the connection.
  """
  totalCount: Int!
}

type SensorTypesIndex {
  id: Int
  sensorTypeCdartikel: String
  code: String
  createdDate: String
  model: String
  flowRate: Float
  calResponse: Float
  calFlowRate: Float
  restrictor: Boolean
  battery: Boolean
  pyrolyserVoltage: Float
  volume: Int
  ownerId: Int
  elementCount: Int
  membraneSeal: Boolean
  siliconeSheet: Boolean
  sensorTypeArtikelOmschr: String
  prefix: String
  sensorBaseTypeId: Int
  suffix: String
  principleName: String
  principleId: Int
  rangeId: Int
  highEu: Float
  engineeringUnits: String
  target: String
  gasId: Int
  electrolyteId: Int
  electrolyteName: String
  electrolyteCdartikel: String
  membraneId: Int
  membraneName: String
  membraneCdartikel: String
  oRingsId: Int
  oRingName: String
  oRingCdartikel: String
  pyrolyserId: Int
  pyrolyserName: String
  pyrolyserCdartikel: String
  filterId: Int
  filterName: String
  filterCdartikel: String
  calGasName: String
  calGasId: Int
  calGasConcentration: Float
  calEngineeringUnits: String
  maintenanceIntervalMonths: Int
  replacementIntervalMonths: Int
}

"""A `SensorTypesIndex` edge in the connection."""
type SensorTypesIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SensorTypesIndex` at the end of the edge."""
  node: SensorTypesIndex!
}

"""Methods to use when ordering `SensorTypesIndex`."""
enum SensorTypesIndicesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SENSOR_TYPE_CDARTIKEL_ASC
  SENSOR_TYPE_CDARTIKEL_DESC
  CODE_ASC
  CODE_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  MODEL_ASC
  MODEL_DESC
  FLOW_RATE_ASC
  FLOW_RATE_DESC
  CAL_RESPONSE_ASC
  CAL_RESPONSE_DESC
  CAL_FLOW_RATE_ASC
  CAL_FLOW_RATE_DESC
  RESTRICTOR_ASC
  RESTRICTOR_DESC
  BATTERY_ASC
  BATTERY_DESC
  PYROLYSER_VOLTAGE_ASC
  PYROLYSER_VOLTAGE_DESC
  VOLUME_ASC
  VOLUME_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  ELEMENT_COUNT_ASC
  ELEMENT_COUNT_DESC
  MEMBRANE_SEAL_ASC
  MEMBRANE_SEAL_DESC
  SILICONE_SHEET_ASC
  SILICONE_SHEET_DESC
  SENSOR_TYPE_ARTIKEL_OMSCHR_ASC
  SENSOR_TYPE_ARTIKEL_OMSCHR_DESC
  PREFIX_ASC
  PREFIX_DESC
  SENSOR_BASE_TYPE_ID_ASC
  SENSOR_BASE_TYPE_ID_DESC
  SUFFIX_ASC
  SUFFIX_DESC
  PRINCIPLE_NAME_ASC
  PRINCIPLE_NAME_DESC
  PRINCIPLE_ID_ASC
  PRINCIPLE_ID_DESC
  RANGE_ID_ASC
  RANGE_ID_DESC
  HIGH_EU_ASC
  HIGH_EU_DESC
  ENGINEERING_UNITS_ASC
  ENGINEERING_UNITS_DESC
  TARGET_ASC
  TARGET_DESC
  GAS_ID_ASC
  GAS_ID_DESC
  ELECTROLYTE_ID_ASC
  ELECTROLYTE_ID_DESC
  ELECTROLYTE_NAME_ASC
  ELECTROLYTE_NAME_DESC
  ELECTROLYTE_CDARTIKEL_ASC
  ELECTROLYTE_CDARTIKEL_DESC
  MEMBRANE_ID_ASC
  MEMBRANE_ID_DESC
  MEMBRANE_NAME_ASC
  MEMBRANE_NAME_DESC
  MEMBRANE_CDARTIKEL_ASC
  MEMBRANE_CDARTIKEL_DESC
  O_RINGS_ID_ASC
  O_RINGS_ID_DESC
  O_RING_NAME_ASC
  O_RING_NAME_DESC
  O_RING_CDARTIKEL_ASC
  O_RING_CDARTIKEL_DESC
  PYROLYSER_ID_ASC
  PYROLYSER_ID_DESC
  PYROLYSER_NAME_ASC
  PYROLYSER_NAME_DESC
  PYROLYSER_CDARTIKEL_ASC
  PYROLYSER_CDARTIKEL_DESC
  FILTER_ID_ASC
  FILTER_ID_DESC
  FILTER_NAME_ASC
  FILTER_NAME_DESC
  FILTER_CDARTIKEL_ASC
  FILTER_CDARTIKEL_DESC
  CAL_GAS_NAME_ASC
  CAL_GAS_NAME_DESC
  CAL_GAS_ID_ASC
  CAL_GAS_ID_DESC
  CAL_GAS_CONCENTRATION_ASC
  CAL_GAS_CONCENTRATION_DESC
  CAL_ENGINEERING_UNITS_ASC
  CAL_ENGINEERING_UNITS_DESC
  MAINTENANCE_INTERVAL_MONTHS_ASC
  MAINTENANCE_INTERVAL_MONTHS_DESC
  REPLACEMENT_INTERVAL_MONTHS_ASC
  REPLACEMENT_INTERVAL_MONTHS_DESC
}

"""
A condition to be used against `SensorTypesIndex` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SensorTypesIndexCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `sensorTypeCdartikel` field."""
  sensorTypeCdartikel: String

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: String

  """Checks for equality with the object’s `model` field."""
  model: String

  """Checks for equality with the object’s `flowRate` field."""
  flowRate: Float

  """Checks for equality with the object’s `calResponse` field."""
  calResponse: Float

  """Checks for equality with the object’s `calFlowRate` field."""
  calFlowRate: Float

  """Checks for equality with the object’s `restrictor` field."""
  restrictor: Boolean

  """Checks for equality with the object’s `battery` field."""
  battery: Boolean

  """Checks for equality with the object’s `pyrolyserVoltage` field."""
  pyrolyserVoltage: Float

  """Checks for equality with the object’s `volume` field."""
  volume: Int

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `elementCount` field."""
  elementCount: Int

  """Checks for equality with the object’s `membraneSeal` field."""
  membraneSeal: Boolean

  """Checks for equality with the object’s `siliconeSheet` field."""
  siliconeSheet: Boolean

  """Checks for equality with the object’s `sensorTypeArtikelOmschr` field."""
  sensorTypeArtikelOmschr: String

  """Checks for equality with the object’s `prefix` field."""
  prefix: String

  """Checks for equality with the object’s `sensorBaseTypeId` field."""
  sensorBaseTypeId: Int

  """Checks for equality with the object’s `suffix` field."""
  suffix: String

  """Checks for equality with the object’s `principleName` field."""
  principleName: String

  """Checks for equality with the object’s `principleId` field."""
  principleId: Int

  """Checks for equality with the object’s `rangeId` field."""
  rangeId: Int

  """Checks for equality with the object’s `highEu` field."""
  highEu: Float

  """Checks for equality with the object’s `engineeringUnits` field."""
  engineeringUnits: String

  """Checks for equality with the object’s `target` field."""
  target: String

  """Checks for equality with the object’s `gasId` field."""
  gasId: Int

  """Checks for equality with the object’s `electrolyteId` field."""
  electrolyteId: Int

  """Checks for equality with the object’s `electrolyteName` field."""
  electrolyteName: String

  """Checks for equality with the object’s `electrolyteCdartikel` field."""
  electrolyteCdartikel: String

  """Checks for equality with the object’s `membraneId` field."""
  membraneId: Int

  """Checks for equality with the object’s `membraneName` field."""
  membraneName: String

  """Checks for equality with the object’s `membraneCdartikel` field."""
  membraneCdartikel: String

  """Checks for equality with the object’s `oRingsId` field."""
  oRingsId: Int

  """Checks for equality with the object’s `oRingName` field."""
  oRingName: String

  """Checks for equality with the object’s `oRingCdartikel` field."""
  oRingCdartikel: String

  """Checks for equality with the object’s `pyrolyserId` field."""
  pyrolyserId: Int

  """Checks for equality with the object’s `pyrolyserName` field."""
  pyrolyserName: String

  """Checks for equality with the object’s `pyrolyserCdartikel` field."""
  pyrolyserCdartikel: String

  """Checks for equality with the object’s `filterId` field."""
  filterId: Int

  """Checks for equality with the object’s `filterName` field."""
  filterName: String

  """Checks for equality with the object’s `filterCdartikel` field."""
  filterCdartikel: String

  """Checks for equality with the object’s `calGasName` field."""
  calGasName: String

  """Checks for equality with the object’s `calGasId` field."""
  calGasId: Int

  """Checks for equality with the object’s `calGasConcentration` field."""
  calGasConcentration: Float

  """Checks for equality with the object’s `calEngineeringUnits` field."""
  calEngineeringUnits: String

  """
  Checks for equality with the object’s `maintenanceIntervalMonths` field.
  """
  maintenanceIntervalMonths: Int

  """
  Checks for equality with the object’s `replacementIntervalMonths` field.
  """
  replacementIntervalMonths: Int
}

"""
A filter to be used against `SensorTypesIndex` object types. All fields are combined with a logical ‘and.’
"""
input SensorTypesIndexFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `sensorTypeCdartikel` field."""
  sensorTypeCdartikel: StringFilter

  """Filter by the object’s `code` field."""
  code: StringFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: StringFilter

  """Filter by the object’s `model` field."""
  model: StringFilter

  """Filter by the object’s `flowRate` field."""
  flowRate: FloatFilter

  """Filter by the object’s `calResponse` field."""
  calResponse: FloatFilter

  """Filter by the object’s `calFlowRate` field."""
  calFlowRate: FloatFilter

  """Filter by the object’s `restrictor` field."""
  restrictor: BooleanFilter

  """Filter by the object’s `battery` field."""
  battery: BooleanFilter

  """Filter by the object’s `pyrolyserVoltage` field."""
  pyrolyserVoltage: FloatFilter

  """Filter by the object’s `volume` field."""
  volume: IntFilter

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `elementCount` field."""
  elementCount: IntFilter

  """Filter by the object’s `membraneSeal` field."""
  membraneSeal: BooleanFilter

  """Filter by the object’s `siliconeSheet` field."""
  siliconeSheet: BooleanFilter

  """Filter by the object’s `sensorTypeArtikelOmschr` field."""
  sensorTypeArtikelOmschr: StringFilter

  """Filter by the object’s `prefix` field."""
  prefix: StringFilter

  """Filter by the object’s `sensorBaseTypeId` field."""
  sensorBaseTypeId: IntFilter

  """Filter by the object’s `suffix` field."""
  suffix: StringFilter

  """Filter by the object’s `principleName` field."""
  principleName: StringFilter

  """Filter by the object’s `principleId` field."""
  principleId: IntFilter

  """Filter by the object’s `rangeId` field."""
  rangeId: IntFilter

  """Filter by the object’s `highEu` field."""
  highEu: FloatFilter

  """Filter by the object’s `engineeringUnits` field."""
  engineeringUnits: StringFilter

  """Filter by the object’s `target` field."""
  target: StringFilter

  """Filter by the object’s `gasId` field."""
  gasId: IntFilter

  """Filter by the object’s `electrolyteId` field."""
  electrolyteId: IntFilter

  """Filter by the object’s `electrolyteName` field."""
  electrolyteName: StringFilter

  """Filter by the object’s `electrolyteCdartikel` field."""
  electrolyteCdartikel: StringFilter

  """Filter by the object’s `membraneId` field."""
  membraneId: IntFilter

  """Filter by the object’s `membraneName` field."""
  membraneName: StringFilter

  """Filter by the object’s `membraneCdartikel` field."""
  membraneCdartikel: StringFilter

  """Filter by the object’s `oRingsId` field."""
  oRingsId: IntFilter

  """Filter by the object’s `oRingName` field."""
  oRingName: StringFilter

  """Filter by the object’s `oRingCdartikel` field."""
  oRingCdartikel: StringFilter

  """Filter by the object’s `pyrolyserId` field."""
  pyrolyserId: IntFilter

  """Filter by the object’s `pyrolyserName` field."""
  pyrolyserName: StringFilter

  """Filter by the object’s `pyrolyserCdartikel` field."""
  pyrolyserCdartikel: StringFilter

  """Filter by the object’s `filterId` field."""
  filterId: IntFilter

  """Filter by the object’s `filterName` field."""
  filterName: StringFilter

  """Filter by the object’s `filterCdartikel` field."""
  filterCdartikel: StringFilter

  """Filter by the object’s `calGasName` field."""
  calGasName: StringFilter

  """Filter by the object’s `calGasId` field."""
  calGasId: IntFilter

  """Filter by the object’s `calGasConcentration` field."""
  calGasConcentration: FloatFilter

  """Filter by the object’s `calEngineeringUnits` field."""
  calEngineeringUnits: StringFilter

  """Filter by the object’s `maintenanceIntervalMonths` field."""
  maintenanceIntervalMonths: IntFilter

  """Filter by the object’s `replacementIntervalMonths` field."""
  replacementIntervalMonths: IntFilter

  """Checks for all expressions in this list."""
  and: [SensorTypesIndexFilter!]

  """Checks for any expressions in this list."""
  or: [SensorTypesIndexFilter!]

  """Negates the expression."""
  not: SensorTypesIndexFilter
}

"""A connection to a list of `SensorsChecklist` values."""
type SensorsChecklistsConnection {
  """A list of `SensorsChecklist` objects."""
  nodes: [SensorsChecklist!]!

  """
  A list of edges which contains the `SensorsChecklist` and cursor to aid in pagination.
  """
  edges: [SensorsChecklistsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SensorsChecklist` you could get from the connection.
  """
  totalCount: Int!
}

type SensorsChecklist {
  factuuropdracht: String
  sensorSerialNumber: String
  longDate: String
  shortDate: String
  sensorType: String
  origSensorType: String
  sensorShortType: String
  origSensorShortType: String
  sensorTypePrefix: String
  sensorTypeCode: String
  sensorTypeSuffix: String
  origSensorTypeSuffix: String
  target: String
  origTarget: String
  lowEu: String
  highEu: String
  engineeringUnits: String
  origEngineeringUnits: String
  sensorRange: String
  origSensorRange: String
  sensorRange2: String
  origSensorRange2: String
  precision: Int
  origPrecision: Int
  alarm1DirectionUp: Boolean
  origAlarm1DirectionUp: Int
  alarm2DirectionUp: Boolean
  origAlarm2DirectionUp: Int
  alarmUnits: Boolean
  origAlarmUnits: Int
  alarm1LevelCurrent: Int
  origAlarm1LevelCurrent: Int
  alarm2LevelCurrent: Int
  origAlarm2LevelCurrent: Int
  alarm1LevelUnits: Float
  origAlarm1LevelUnits: Float
  alarm2LevelUnits: Float
  origAlarm2LevelUnits: Float
  alarm1LevelPercentage: Float
  origAlarm1LevelPercentage: Float
  alarm2LevelPercentage: Float
  origAlarm2LevelPercentage: Float
  warning1LevelCurrent: Int
  origWarning1LevelCurrent: Int
  warning2LevelCurrent: Int
  warning1LevelPercentage: Float
  origWarning1LevelPercentage: Float
  warning2LevelPercentage: Float
  electrolyteName: String
  origElectrolyteName: String
  oRingName: String
  origORingName: String
  membraneName: String
  origMembraneName: String
  restrictor: String
  origRestrictor: String
  battery: String
  origBattery: String
  seal: String
  origSeal: String
  calFlowRate: Float
  origCalFlowRate: Float
  calGas: String
  origCalGas: String
  pyrolyserId: Int
  plugName: String
  origPlugName: String
  transportSwitch: String
  origTransportSwitch: String
  batteryConnection: String
  origBatteryConnection: String
  calReading: String
  pc5109DS1: String
  origPc5109DS1: String
  pc5109DS2: String
  origPc5109DS2: String
  pc5109DS3: String
  origPc5109DS3: String
  pc5109DS5: String
  origPc5109DS5: String
  pc5109DS6: String
  origPc5109DS6: String
  pc5154BS1: String
  pc5154BS2: String
  pc5155BS3: String
  pc5155BS4: String
  pc5155BS5: String
  pc5155BS1: String
}

"""A `SensorsChecklist` edge in the connection."""
type SensorsChecklistsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SensorsChecklist` at the end of the edge."""
  node: SensorsChecklist!
}

"""Methods to use when ordering `SensorsChecklist`."""
enum SensorsChecklistsOrderBy {
  NATURAL
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  SENSOR_SERIAL_NUMBER_ASC
  SENSOR_SERIAL_NUMBER_DESC
  LONG_DATE_ASC
  LONG_DATE_DESC
  SHORT_DATE_ASC
  SHORT_DATE_DESC
  SENSOR_TYPE_ASC
  SENSOR_TYPE_DESC
  ORIG_SENSOR_TYPE_ASC
  ORIG_SENSOR_TYPE_DESC
  SENSOR_SHORT_TYPE_ASC
  SENSOR_SHORT_TYPE_DESC
  ORIG_SENSOR_SHORT_TYPE_ASC
  ORIG_SENSOR_SHORT_TYPE_DESC
  SENSOR_TYPE_PREFIX_ASC
  SENSOR_TYPE_PREFIX_DESC
  SENSOR_TYPE_CODE_ASC
  SENSOR_TYPE_CODE_DESC
  SENSOR_TYPE_SUFFIX_ASC
  SENSOR_TYPE_SUFFIX_DESC
  ORIG_SENSOR_TYPE_SUFFIX_ASC
  ORIG_SENSOR_TYPE_SUFFIX_DESC
  TARGET_ASC
  TARGET_DESC
  ORIG_TARGET_ASC
  ORIG_TARGET_DESC
  LOW_EU_ASC
  LOW_EU_DESC
  HIGH_EU_ASC
  HIGH_EU_DESC
  ENGINEERING_UNITS_ASC
  ENGINEERING_UNITS_DESC
  ORIG_ENGINEERING_UNITS_ASC
  ORIG_ENGINEERING_UNITS_DESC
  SENSOR_RANGE_ASC
  SENSOR_RANGE_DESC
  ORIG_SENSOR_RANGE_ASC
  ORIG_SENSOR_RANGE_DESC
  SENSOR_RANGE_2_ASC
  SENSOR_RANGE_2_DESC
  ORIG_SENSOR_RANGE_2_ASC
  ORIG_SENSOR_RANGE_2_DESC
  PRECISION_ASC
  PRECISION_DESC
  ORIG_PRECISION_ASC
  ORIG_PRECISION_DESC
  ALARM_1_DIRECTION_UP_ASC
  ALARM_1_DIRECTION_UP_DESC
  ORIG_ALARM_1_DIRECTION_UP_ASC
  ORIG_ALARM_1_DIRECTION_UP_DESC
  ALARM_2_DIRECTION_UP_ASC
  ALARM_2_DIRECTION_UP_DESC
  ORIG_ALARM_2_DIRECTION_UP_ASC
  ORIG_ALARM_2_DIRECTION_UP_DESC
  ALARM_UNITS_ASC
  ALARM_UNITS_DESC
  ORIG_ALARM_UNITS_ASC
  ORIG_ALARM_UNITS_DESC
  ALARM_1_LEVEL_CURRENT_ASC
  ALARM_1_LEVEL_CURRENT_DESC
  ORIG_ALARM_1_LEVEL_CURRENT_ASC
  ORIG_ALARM_1_LEVEL_CURRENT_DESC
  ALARM_2_LEVEL_CURRENT_ASC
  ALARM_2_LEVEL_CURRENT_DESC
  ORIG_ALARM_2_LEVEL_CURRENT_ASC
  ORIG_ALARM_2_LEVEL_CURRENT_DESC
  ALARM_1_LEVEL_UNITS_ASC
  ALARM_1_LEVEL_UNITS_DESC
  ORIG_ALARM_1_LEVEL_UNITS_ASC
  ORIG_ALARM_1_LEVEL_UNITS_DESC
  ALARM_2_LEVEL_UNITS_ASC
  ALARM_2_LEVEL_UNITS_DESC
  ORIG_ALARM_2_LEVEL_UNITS_ASC
  ORIG_ALARM_2_LEVEL_UNITS_DESC
  ALARM_1_LEVEL_PERCENTAGE_ASC
  ALARM_1_LEVEL_PERCENTAGE_DESC
  ORIG_ALARM_1_LEVEL_PERCENTAGE_ASC
  ORIG_ALARM_1_LEVEL_PERCENTAGE_DESC
  ALARM_2_LEVEL_PERCENTAGE_ASC
  ALARM_2_LEVEL_PERCENTAGE_DESC
  ORIG_ALARM_2_LEVEL_PERCENTAGE_ASC
  ORIG_ALARM_2_LEVEL_PERCENTAGE_DESC
  WARNING_1_LEVEL_CURRENT_ASC
  WARNING_1_LEVEL_CURRENT_DESC
  ORIG_WARNING_1_LEVEL_CURRENT_ASC
  ORIG_WARNING_1_LEVEL_CURRENT_DESC
  WARNING_2_LEVEL_CURRENT_ASC
  WARNING_2_LEVEL_CURRENT_DESC
  WARNING_1_LEVEL_PERCENTAGE_ASC
  WARNING_1_LEVEL_PERCENTAGE_DESC
  ORIG_WARNING_1_LEVEL_PERCENTAGE_ASC
  ORIG_WARNING_1_LEVEL_PERCENTAGE_DESC
  WARNING_2_LEVEL_PERCENTAGE_ASC
  WARNING_2_LEVEL_PERCENTAGE_DESC
  ELECTROLYTE_NAME_ASC
  ELECTROLYTE_NAME_DESC
  ORIG_ELECTROLYTE_NAME_ASC
  ORIG_ELECTROLYTE_NAME_DESC
  O_RING_NAME_ASC
  O_RING_NAME_DESC
  ORIG_O_RING_NAME_ASC
  ORIG_O_RING_NAME_DESC
  MEMBRANE_NAME_ASC
  MEMBRANE_NAME_DESC
  ORIG_MEMBRANE_NAME_ASC
  ORIG_MEMBRANE_NAME_DESC
  RESTRICTOR_ASC
  RESTRICTOR_DESC
  ORIG_RESTRICTOR_ASC
  ORIG_RESTRICTOR_DESC
  BATTERY_ASC
  BATTERY_DESC
  ORIG_BATTERY_ASC
  ORIG_BATTERY_DESC
  SEAL_ASC
  SEAL_DESC
  ORIG_SEAL_ASC
  ORIG_SEAL_DESC
  CAL_FLOW_RATE_ASC
  CAL_FLOW_RATE_DESC
  ORIG_CAL_FLOW_RATE_ASC
  ORIG_CAL_FLOW_RATE_DESC
  CAL_GAS_ASC
  CAL_GAS_DESC
  ORIG_CAL_GAS_ASC
  ORIG_CAL_GAS_DESC
  PYROLYSER_ID_ASC
  PYROLYSER_ID_DESC
  PLUG_NAME_ASC
  PLUG_NAME_DESC
  ORIG_PLUG_NAME_ASC
  ORIG_PLUG_NAME_DESC
  TRANSPORT_SWITCH_ASC
  TRANSPORT_SWITCH_DESC
  ORIG_TRANSPORT_SWITCH_ASC
  ORIG_TRANSPORT_SWITCH_DESC
  BATTERY_CONNECTION_ASC
  BATTERY_CONNECTION_DESC
  ORIG_BATTERY_CONNECTION_ASC
  ORIG_BATTERY_CONNECTION_DESC
  CAL_READING_ASC
  CAL_READING_DESC
  PC_5109D_S1_ASC
  PC_5109D_S1_DESC
  ORIG_PC_5109D_S1_ASC
  ORIG_PC_5109D_S1_DESC
  PC_5109D_S2_ASC
  PC_5109D_S2_DESC
  ORIG_PC_5109D_S2_ASC
  ORIG_PC_5109D_S2_DESC
  PC_5109D_S3_ASC
  PC_5109D_S3_DESC
  ORIG_PC_5109D_S3_ASC
  ORIG_PC_5109D_S3_DESC
  PC_5109D_S5_ASC
  PC_5109D_S5_DESC
  ORIG_PC_5109D_S5_ASC
  ORIG_PC_5109D_S5_DESC
  PC_5109D_S6_ASC
  PC_5109D_S6_DESC
  ORIG_PC_5109D_S6_ASC
  ORIG_PC_5109D_S6_DESC
  PC_5154B_S1_ASC
  PC_5154B_S1_DESC
  PC_5154B_S2_ASC
  PC_5154B_S2_DESC
  PC_5155B_S3_ASC
  PC_5155B_S3_DESC
  PC_5155B_S4_ASC
  PC_5155B_S4_DESC
  PC_5155B_S5_ASC
  PC_5155B_S5_DESC
  PC_5155B_S1_ASC
  PC_5155B_S1_DESC
}

"""
A condition to be used against `SensorsChecklist` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SensorsChecklistCondition {
  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `sensorSerialNumber` field."""
  sensorSerialNumber: String

  """Checks for equality with the object’s `longDate` field."""
  longDate: String

  """Checks for equality with the object’s `shortDate` field."""
  shortDate: String

  """Checks for equality with the object’s `sensorType` field."""
  sensorType: String

  """Checks for equality with the object’s `origSensorType` field."""
  origSensorType: String

  """Checks for equality with the object’s `sensorShortType` field."""
  sensorShortType: String

  """Checks for equality with the object’s `origSensorShortType` field."""
  origSensorShortType: String

  """Checks for equality with the object’s `sensorTypePrefix` field."""
  sensorTypePrefix: String

  """Checks for equality with the object’s `sensorTypeCode` field."""
  sensorTypeCode: String

  """Checks for equality with the object’s `sensorTypeSuffix` field."""
  sensorTypeSuffix: String

  """Checks for equality with the object’s `origSensorTypeSuffix` field."""
  origSensorTypeSuffix: String

  """Checks for equality with the object’s `target` field."""
  target: String

  """Checks for equality with the object’s `origTarget` field."""
  origTarget: String

  """Checks for equality with the object’s `lowEu` field."""
  lowEu: String

  """Checks for equality with the object’s `highEu` field."""
  highEu: String

  """Checks for equality with the object’s `engineeringUnits` field."""
  engineeringUnits: String

  """Checks for equality with the object’s `origEngineeringUnits` field."""
  origEngineeringUnits: String

  """Checks for equality with the object’s `sensorRange` field."""
  sensorRange: String

  """Checks for equality with the object’s `origSensorRange` field."""
  origSensorRange: String

  """Checks for equality with the object’s `sensorRange2` field."""
  sensorRange2: String

  """Checks for equality with the object’s `origSensorRange2` field."""
  origSensorRange2: String

  """Checks for equality with the object’s `precision` field."""
  precision: Int

  """Checks for equality with the object’s `origPrecision` field."""
  origPrecision: Int

  """Checks for equality with the object’s `alarm1DirectionUp` field."""
  alarm1DirectionUp: Boolean

  """Checks for equality with the object’s `origAlarm1DirectionUp` field."""
  origAlarm1DirectionUp: Int

  """Checks for equality with the object’s `alarm2DirectionUp` field."""
  alarm2DirectionUp: Boolean

  """Checks for equality with the object’s `origAlarm2DirectionUp` field."""
  origAlarm2DirectionUp: Int

  """Checks for equality with the object’s `alarmUnits` field."""
  alarmUnits: Boolean

  """Checks for equality with the object’s `origAlarmUnits` field."""
  origAlarmUnits: Int

  """Checks for equality with the object’s `alarm1LevelCurrent` field."""
  alarm1LevelCurrent: Int

  """Checks for equality with the object’s `origAlarm1LevelCurrent` field."""
  origAlarm1LevelCurrent: Int

  """Checks for equality with the object’s `alarm2LevelCurrent` field."""
  alarm2LevelCurrent: Int

  """Checks for equality with the object’s `origAlarm2LevelCurrent` field."""
  origAlarm2LevelCurrent: Int

  """Checks for equality with the object’s `alarm1LevelUnits` field."""
  alarm1LevelUnits: Float

  """Checks for equality with the object’s `origAlarm1LevelUnits` field."""
  origAlarm1LevelUnits: Float

  """Checks for equality with the object’s `alarm2LevelUnits` field."""
  alarm2LevelUnits: Float

  """Checks for equality with the object’s `origAlarm2LevelUnits` field."""
  origAlarm2LevelUnits: Float

  """Checks for equality with the object’s `alarm1LevelPercentage` field."""
  alarm1LevelPercentage: Float

  """
  Checks for equality with the object’s `origAlarm1LevelPercentage` field.
  """
  origAlarm1LevelPercentage: Float

  """Checks for equality with the object’s `alarm2LevelPercentage` field."""
  alarm2LevelPercentage: Float

  """
  Checks for equality with the object’s `origAlarm2LevelPercentage` field.
  """
  origAlarm2LevelPercentage: Float

  """Checks for equality with the object’s `warning1LevelCurrent` field."""
  warning1LevelCurrent: Int

  """
  Checks for equality with the object’s `origWarning1LevelCurrent` field.
  """
  origWarning1LevelCurrent: Int

  """Checks for equality with the object’s `warning2LevelCurrent` field."""
  warning2LevelCurrent: Int

  """Checks for equality with the object’s `warning1LevelPercentage` field."""
  warning1LevelPercentage: Float

  """
  Checks for equality with the object’s `origWarning1LevelPercentage` field.
  """
  origWarning1LevelPercentage: Float

  """Checks for equality with the object’s `warning2LevelPercentage` field."""
  warning2LevelPercentage: Float

  """Checks for equality with the object’s `electrolyteName` field."""
  electrolyteName: String

  """Checks for equality with the object’s `origElectrolyteName` field."""
  origElectrolyteName: String

  """Checks for equality with the object’s `oRingName` field."""
  oRingName: String

  """Checks for equality with the object’s `origORingName` field."""
  origORingName: String

  """Checks for equality with the object’s `membraneName` field."""
  membraneName: String

  """Checks for equality with the object’s `origMembraneName` field."""
  origMembraneName: String

  """Checks for equality with the object’s `restrictor` field."""
  restrictor: String

  """Checks for equality with the object’s `origRestrictor` field."""
  origRestrictor: String

  """Checks for equality with the object’s `battery` field."""
  battery: String

  """Checks for equality with the object’s `origBattery` field."""
  origBattery: String

  """Checks for equality with the object’s `seal` field."""
  seal: String

  """Checks for equality with the object’s `origSeal` field."""
  origSeal: String

  """Checks for equality with the object’s `calFlowRate` field."""
  calFlowRate: Float

  """Checks for equality with the object’s `origCalFlowRate` field."""
  origCalFlowRate: Float

  """Checks for equality with the object’s `calGas` field."""
  calGas: String

  """Checks for equality with the object’s `origCalGas` field."""
  origCalGas: String

  """Checks for equality with the object’s `pyrolyserId` field."""
  pyrolyserId: Int

  """Checks for equality with the object’s `plugName` field."""
  plugName: String

  """Checks for equality with the object’s `origPlugName` field."""
  origPlugName: String

  """Checks for equality with the object’s `transportSwitch` field."""
  transportSwitch: String

  """Checks for equality with the object’s `origTransportSwitch` field."""
  origTransportSwitch: String

  """Checks for equality with the object’s `batteryConnection` field."""
  batteryConnection: String

  """Checks for equality with the object’s `origBatteryConnection` field."""
  origBatteryConnection: String

  """Checks for equality with the object’s `calReading` field."""
  calReading: String

  """Checks for equality with the object’s `pc5109DS1` field."""
  pc5109DS1: String

  """Checks for equality with the object’s `origPc5109DS1` field."""
  origPc5109DS1: String

  """Checks for equality with the object’s `pc5109DS2` field."""
  pc5109DS2: String

  """Checks for equality with the object’s `origPc5109DS2` field."""
  origPc5109DS2: String

  """Checks for equality with the object’s `pc5109DS3` field."""
  pc5109DS3: String

  """Checks for equality with the object’s `origPc5109DS3` field."""
  origPc5109DS3: String

  """Checks for equality with the object’s `pc5109DS5` field."""
  pc5109DS5: String

  """Checks for equality with the object’s `origPc5109DS5` field."""
  origPc5109DS5: String

  """Checks for equality with the object’s `pc5109DS6` field."""
  pc5109DS6: String

  """Checks for equality with the object’s `origPc5109DS6` field."""
  origPc5109DS6: String

  """Checks for equality with the object’s `pc5154BS1` field."""
  pc5154BS1: String

  """Checks for equality with the object’s `pc5154BS2` field."""
  pc5154BS2: String

  """Checks for equality with the object’s `pc5155BS3` field."""
  pc5155BS3: String

  """Checks for equality with the object’s `pc5155BS4` field."""
  pc5155BS4: String

  """Checks for equality with the object’s `pc5155BS5` field."""
  pc5155BS5: String

  """Checks for equality with the object’s `pc5155BS1` field."""
  pc5155BS1: String
}

"""
A filter to be used against `SensorsChecklist` object types. All fields are combined with a logical ‘and.’
"""
input SensorsChecklistFilter {
  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `sensorSerialNumber` field."""
  sensorSerialNumber: StringFilter

  """Filter by the object’s `longDate` field."""
  longDate: StringFilter

  """Filter by the object’s `shortDate` field."""
  shortDate: StringFilter

  """Filter by the object’s `sensorType` field."""
  sensorType: StringFilter

  """Filter by the object’s `origSensorType` field."""
  origSensorType: StringFilter

  """Filter by the object’s `sensorShortType` field."""
  sensorShortType: StringFilter

  """Filter by the object’s `origSensorShortType` field."""
  origSensorShortType: StringFilter

  """Filter by the object’s `sensorTypePrefix` field."""
  sensorTypePrefix: StringFilter

  """Filter by the object’s `sensorTypeCode` field."""
  sensorTypeCode: StringFilter

  """Filter by the object’s `sensorTypeSuffix` field."""
  sensorTypeSuffix: StringFilter

  """Filter by the object’s `origSensorTypeSuffix` field."""
  origSensorTypeSuffix: StringFilter

  """Filter by the object’s `target` field."""
  target: StringFilter

  """Filter by the object’s `origTarget` field."""
  origTarget: StringFilter

  """Filter by the object’s `lowEu` field."""
  lowEu: StringFilter

  """Filter by the object’s `highEu` field."""
  highEu: StringFilter

  """Filter by the object’s `engineeringUnits` field."""
  engineeringUnits: StringFilter

  """Filter by the object’s `origEngineeringUnits` field."""
  origEngineeringUnits: StringFilter

  """Filter by the object’s `sensorRange` field."""
  sensorRange: StringFilter

  """Filter by the object’s `origSensorRange` field."""
  origSensorRange: StringFilter

  """Filter by the object’s `sensorRange2` field."""
  sensorRange2: StringFilter

  """Filter by the object’s `origSensorRange2` field."""
  origSensorRange2: StringFilter

  """Filter by the object’s `precision` field."""
  precision: IntFilter

  """Filter by the object’s `origPrecision` field."""
  origPrecision: IntFilter

  """Filter by the object’s `alarm1DirectionUp` field."""
  alarm1DirectionUp: BooleanFilter

  """Filter by the object’s `origAlarm1DirectionUp` field."""
  origAlarm1DirectionUp: IntFilter

  """Filter by the object’s `alarm2DirectionUp` field."""
  alarm2DirectionUp: BooleanFilter

  """Filter by the object’s `origAlarm2DirectionUp` field."""
  origAlarm2DirectionUp: IntFilter

  """Filter by the object’s `alarmUnits` field."""
  alarmUnits: BooleanFilter

  """Filter by the object’s `origAlarmUnits` field."""
  origAlarmUnits: IntFilter

  """Filter by the object’s `alarm1LevelCurrent` field."""
  alarm1LevelCurrent: IntFilter

  """Filter by the object’s `origAlarm1LevelCurrent` field."""
  origAlarm1LevelCurrent: IntFilter

  """Filter by the object’s `alarm2LevelCurrent` field."""
  alarm2LevelCurrent: IntFilter

  """Filter by the object’s `origAlarm2LevelCurrent` field."""
  origAlarm2LevelCurrent: IntFilter

  """Filter by the object’s `alarm1LevelUnits` field."""
  alarm1LevelUnits: FloatFilter

  """Filter by the object’s `origAlarm1LevelUnits` field."""
  origAlarm1LevelUnits: FloatFilter

  """Filter by the object’s `alarm2LevelUnits` field."""
  alarm2LevelUnits: FloatFilter

  """Filter by the object’s `origAlarm2LevelUnits` field."""
  origAlarm2LevelUnits: FloatFilter

  """Filter by the object’s `alarm1LevelPercentage` field."""
  alarm1LevelPercentage: FloatFilter

  """Filter by the object’s `origAlarm1LevelPercentage` field."""
  origAlarm1LevelPercentage: FloatFilter

  """Filter by the object’s `alarm2LevelPercentage` field."""
  alarm2LevelPercentage: FloatFilter

  """Filter by the object’s `origAlarm2LevelPercentage` field."""
  origAlarm2LevelPercentage: FloatFilter

  """Filter by the object’s `warning1LevelCurrent` field."""
  warning1LevelCurrent: IntFilter

  """Filter by the object’s `origWarning1LevelCurrent` field."""
  origWarning1LevelCurrent: IntFilter

  """Filter by the object’s `warning2LevelCurrent` field."""
  warning2LevelCurrent: IntFilter

  """Filter by the object’s `warning1LevelPercentage` field."""
  warning1LevelPercentage: FloatFilter

  """Filter by the object’s `origWarning1LevelPercentage` field."""
  origWarning1LevelPercentage: FloatFilter

  """Filter by the object’s `warning2LevelPercentage` field."""
  warning2LevelPercentage: FloatFilter

  """Filter by the object’s `electrolyteName` field."""
  electrolyteName: StringFilter

  """Filter by the object’s `origElectrolyteName` field."""
  origElectrolyteName: StringFilter

  """Filter by the object’s `oRingName` field."""
  oRingName: StringFilter

  """Filter by the object’s `origORingName` field."""
  origORingName: StringFilter

  """Filter by the object’s `membraneName` field."""
  membraneName: StringFilter

  """Filter by the object’s `origMembraneName` field."""
  origMembraneName: StringFilter

  """Filter by the object’s `restrictor` field."""
  restrictor: StringFilter

  """Filter by the object’s `origRestrictor` field."""
  origRestrictor: StringFilter

  """Filter by the object’s `battery` field."""
  battery: StringFilter

  """Filter by the object’s `origBattery` field."""
  origBattery: StringFilter

  """Filter by the object’s `seal` field."""
  seal: StringFilter

  """Filter by the object’s `origSeal` field."""
  origSeal: StringFilter

  """Filter by the object’s `calFlowRate` field."""
  calFlowRate: FloatFilter

  """Filter by the object’s `origCalFlowRate` field."""
  origCalFlowRate: FloatFilter

  """Filter by the object’s `calGas` field."""
  calGas: StringFilter

  """Filter by the object’s `origCalGas` field."""
  origCalGas: StringFilter

  """Filter by the object’s `pyrolyserId` field."""
  pyrolyserId: IntFilter

  """Filter by the object’s `plugName` field."""
  plugName: StringFilter

  """Filter by the object’s `origPlugName` field."""
  origPlugName: StringFilter

  """Filter by the object’s `transportSwitch` field."""
  transportSwitch: StringFilter

  """Filter by the object’s `origTransportSwitch` field."""
  origTransportSwitch: StringFilter

  """Filter by the object’s `batteryConnection` field."""
  batteryConnection: StringFilter

  """Filter by the object’s `origBatteryConnection` field."""
  origBatteryConnection: StringFilter

  """Filter by the object’s `calReading` field."""
  calReading: StringFilter

  """Filter by the object’s `pc5109DS1` field."""
  pc5109DS1: StringFilter

  """Filter by the object’s `origPc5109DS1` field."""
  origPc5109DS1: StringFilter

  """Filter by the object’s `pc5109DS2` field."""
  pc5109DS2: StringFilter

  """Filter by the object’s `origPc5109DS2` field."""
  origPc5109DS2: StringFilter

  """Filter by the object’s `pc5109DS3` field."""
  pc5109DS3: StringFilter

  """Filter by the object’s `origPc5109DS3` field."""
  origPc5109DS3: StringFilter

  """Filter by the object’s `pc5109DS5` field."""
  pc5109DS5: StringFilter

  """Filter by the object’s `origPc5109DS5` field."""
  origPc5109DS5: StringFilter

  """Filter by the object’s `pc5109DS6` field."""
  pc5109DS6: StringFilter

  """Filter by the object’s `origPc5109DS6` field."""
  origPc5109DS6: StringFilter

  """Filter by the object’s `pc5154BS1` field."""
  pc5154BS1: StringFilter

  """Filter by the object’s `pc5154BS2` field."""
  pc5154BS2: StringFilter

  """Filter by the object’s `pc5155BS3` field."""
  pc5155BS3: StringFilter

  """Filter by the object’s `pc5155BS4` field."""
  pc5155BS4: StringFilter

  """Filter by the object’s `pc5155BS5` field."""
  pc5155BS5: StringFilter

  """Filter by the object’s `pc5155BS1` field."""
  pc5155BS1: StringFilter

  """Checks for all expressions in this list."""
  and: [SensorsChecklistFilter!]

  """Checks for any expressions in this list."""
  or: [SensorsChecklistFilter!]

  """Negates the expression."""
  not: SensorsChecklistFilter
}

"""A connection to a list of `StockSuppliersIndex` values."""
type StockSuppliersIndicesConnection {
  """A list of `StockSuppliersIndex` objects."""
  nodes: [StockSuppliersIndex!]!

  """
  A list of edges which contains the `StockSuppliersIndex` and cursor to aid in pagination.
  """
  edges: [StockSuppliersIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `StockSuppliersIndex` you could get from the connection.
  """
  totalCount: Int!
}

type StockSuppliersIndex {
  id: Int
  cdcrediteur: String
  zoeknaam: String
  totalStockVvp: BigFloat
  totalReservedVvp: BigFloat
  totalPoVvp: BigFloat
  totalAdvice: BigInt
  tztAdvice: BigInt
}

"""A `StockSuppliersIndex` edge in the connection."""
type StockSuppliersIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StockSuppliersIndex` at the end of the edge."""
  node: StockSuppliersIndex!
}

"""Methods to use when ordering `StockSuppliersIndex`."""
enum StockSuppliersIndicesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CDCREDITEUR_ASC
  CDCREDITEUR_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  TOTAL_STOCK_VVP_ASC
  TOTAL_STOCK_VVP_DESC
  TOTAL_RESERVED_VVP_ASC
  TOTAL_RESERVED_VVP_DESC
  TOTAL_PO_VVP_ASC
  TOTAL_PO_VVP_DESC
  TOTAL_ADVICE_ASC
  TOTAL_ADVICE_DESC
  TZT_ADVICE_ASC
  TZT_ADVICE_DESC
}

"""
A condition to be used against `StockSuppliersIndex` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input StockSuppliersIndexCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `cdcrediteur` field."""
  cdcrediteur: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `totalStockVvp` field."""
  totalStockVvp: BigFloat

  """Checks for equality with the object’s `totalReservedVvp` field."""
  totalReservedVvp: BigFloat

  """Checks for equality with the object’s `totalPoVvp` field."""
  totalPoVvp: BigFloat

  """Checks for equality with the object’s `totalAdvice` field."""
  totalAdvice: BigInt

  """Checks for equality with the object’s `tztAdvice` field."""
  tztAdvice: BigInt
}

"""
A filter to be used against `StockSuppliersIndex` object types. All fields are combined with a logical ‘and.’
"""
input StockSuppliersIndexFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `cdcrediteur` field."""
  cdcrediteur: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `totalStockVvp` field."""
  totalStockVvp: BigFloatFilter

  """Filter by the object’s `totalReservedVvp` field."""
  totalReservedVvp: BigFloatFilter

  """Filter by the object’s `totalPoVvp` field."""
  totalPoVvp: BigFloatFilter

  """Filter by the object’s `totalAdvice` field."""
  totalAdvice: BigIntFilter

  """Filter by the object’s `tztAdvice` field."""
  tztAdvice: BigIntFilter

  """Checks for all expressions in this list."""
  and: [StockSuppliersIndexFilter!]

  """Checks for any expressions in this list."""
  or: [StockSuppliersIndexFilter!]

  """Negates the expression."""
  not: StockSuppliersIndexFilter
}

"""A connection to a list of `StockSuppliersIndexOld` values."""
type StockSuppliersIndexOldsConnection {
  """A list of `StockSuppliersIndexOld` objects."""
  nodes: [StockSuppliersIndexOld!]!

  """
  A list of edges which contains the `StockSuppliersIndexOld` and cursor to aid in pagination.
  """
  edges: [StockSuppliersIndexOldsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `StockSuppliersIndexOld` you could get from the connection.
  """
  totalCount: Int!
}

type StockSuppliersIndexOld {
  id: Int
  cdcrediteur: String
  name: String
  created: String
  cdartikel: String
  bestcode: String
  inkoopprijs: BigFloat
  besthoeveelheid: BigFloat
  voorkeur: String
  zoeknaam: String
  omschr: String
  voorraad: BigFloat
  gereserveerd: BigFloat
  assemblaf: BigFloat
  vrij: BigFloat
  inkopen: BigFloat
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  isovaluta: String
  initials: String
  advice: BigFloat
  stockVvp: BigFloat
  reservedVvp: BigFloat
  poVvp: BigFloat
}

"""A `StockSuppliersIndexOld` edge in the connection."""
type StockSuppliersIndexOldsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StockSuppliersIndexOld` at the end of the edge."""
  node: StockSuppliersIndexOld!
}

"""Methods to use when ordering `StockSuppliersIndexOld`."""
enum StockSuppliersIndexOldsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CDCREDITEUR_ASC
  CDCREDITEUR_DESC
  NAME_ASC
  NAME_DESC
  CREATED_ASC
  CREATED_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  BESTCODE_ASC
  BESTCODE_DESC
  INKOOPPRIJS_ASC
  INKOOPPRIJS_DESC
  BESTHOEVEELHEID_ASC
  BESTHOEVEELHEID_DESC
  VOORKEUR_ASC
  VOORKEUR_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  VOORRAAD_ASC
  VOORRAAD_DESC
  GERESERVEERD_ASC
  GERESERVEERD_DESC
  ASSEMBLAF_ASC
  ASSEMBLAF_DESC
  VRIJ_ASC
  VRIJ_DESC
  INKOPEN_ASC
  INKOPEN_DESC
  MINVOORRAAD_ASC
  MINVOORRAAD_DESC
  MAXVOORRAAD_ASC
  MAXVOORRAAD_DESC
  ISOVALUTA_ASC
  ISOVALUTA_DESC
  INITIALS_ASC
  INITIALS_DESC
  ADVICE_ASC
  ADVICE_DESC
  STOCK_VVP_ASC
  STOCK_VVP_DESC
  RESERVED_VVP_ASC
  RESERVED_VVP_DESC
  PO_VVP_ASC
  PO_VVP_DESC
}

"""
A condition to be used against `StockSuppliersIndexOld` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input StockSuppliersIndexOldCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `cdcrediteur` field."""
  cdcrediteur: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `created` field."""
  created: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `bestcode` field."""
  bestcode: String

  """Checks for equality with the object’s `inkoopprijs` field."""
  inkoopprijs: BigFloat

  """Checks for equality with the object’s `besthoeveelheid` field."""
  besthoeveelheid: BigFloat

  """Checks for equality with the object’s `voorkeur` field."""
  voorkeur: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `voorraad` field."""
  voorraad: BigFloat

  """Checks for equality with the object’s `gereserveerd` field."""
  gereserveerd: BigFloat

  """Checks for equality with the object’s `assemblaf` field."""
  assemblaf: BigFloat

  """Checks for equality with the object’s `vrij` field."""
  vrij: BigFloat

  """Checks for equality with the object’s `inkopen` field."""
  inkopen: BigFloat

  """Checks for equality with the object’s `minvoorraad` field."""
  minvoorraad: BigFloat

  """Checks for equality with the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloat

  """Checks for equality with the object’s `isovaluta` field."""
  isovaluta: String

  """Checks for equality with the object’s `initials` field."""
  initials: String

  """Checks for equality with the object’s `advice` field."""
  advice: BigFloat

  """Checks for equality with the object’s `stockVvp` field."""
  stockVvp: BigFloat

  """Checks for equality with the object’s `reservedVvp` field."""
  reservedVvp: BigFloat

  """Checks for equality with the object’s `poVvp` field."""
  poVvp: BigFloat
}

"""
A filter to be used against `StockSuppliersIndexOld` object types. All fields are combined with a logical ‘and.’
"""
input StockSuppliersIndexOldFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `cdcrediteur` field."""
  cdcrediteur: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `created` field."""
  created: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `bestcode` field."""
  bestcode: StringFilter

  """Filter by the object’s `inkoopprijs` field."""
  inkoopprijs: BigFloatFilter

  """Filter by the object’s `besthoeveelheid` field."""
  besthoeveelheid: BigFloatFilter

  """Filter by the object’s `voorkeur` field."""
  voorkeur: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `voorraad` field."""
  voorraad: BigFloatFilter

  """Filter by the object’s `gereserveerd` field."""
  gereserveerd: BigFloatFilter

  """Filter by the object’s `assemblaf` field."""
  assemblaf: BigFloatFilter

  """Filter by the object’s `vrij` field."""
  vrij: BigFloatFilter

  """Filter by the object’s `inkopen` field."""
  inkopen: BigFloatFilter

  """Filter by the object’s `minvoorraad` field."""
  minvoorraad: BigFloatFilter

  """Filter by the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloatFilter

  """Filter by the object’s `isovaluta` field."""
  isovaluta: StringFilter

  """Filter by the object’s `initials` field."""
  initials: StringFilter

  """Filter by the object’s `advice` field."""
  advice: BigFloatFilter

  """Filter by the object’s `stockVvp` field."""
  stockVvp: BigFloatFilter

  """Filter by the object’s `reservedVvp` field."""
  reservedVvp: BigFloatFilter

  """Filter by the object’s `poVvp` field."""
  poVvp: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [StockSuppliersIndexOldFilter!]

  """Checks for any expressions in this list."""
  or: [StockSuppliersIndexOldFilter!]

  """Negates the expression."""
  not: StockSuppliersIndexOldFilter
}

"""A connection to a list of `TempFactopdrachtregel` values."""
type TempFactopdrachtregelsConnection {
  """A list of `TempFactopdrachtregel` objects."""
  nodes: [TempFactopdrachtregel!]!

  """
  A list of edges which contains the `TempFactopdrachtregel` and cursor to aid in pagination.
  """
  edges: [TempFactopdrachtregelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TempFactopdrachtregel` you could get from the connection.
  """
  totalCount: Int!
}

type TempFactopdrachtregel implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  factuuropdracht: String!
  factuurregel: Int!
  hoofdregel: Int
  soort: String
  cdartikel: String
  omschr: String
  eenheid: String
  aantaldec: Int
  aantalgeleverd: BigFloat
  prijs: BigFloat
  prijsper: BigFloat
  kortingperc: BigFloat
  factbedragincl: BigFloat
  factbedragexcl: BigFloat
  btwcode: Int
  btwperc: BigFloat
  cdgrbrekening: String
  nettoomzet: BigFloat
  kostprijs: BigFloat
  statcode: String
  aantalbesteld: BigFloat
  aantalleveren: BigFloat
  datum: Date
  cdstatus: String
  aantalnaleveren: BigFloat
  tekstmagb: String
  cdmagazijn: String
  cdgrbrekomzvj: String
  factbedragexclvj: BigFloat
  aantalgereserv: BigFloat
  kvc: String
  cdkostenplaats: String
  cddossier: String
  cdgrbrekkort: String
  cdwerknemer: String
  weeknummer: Int
  factopdrRglGuid: String
  koppelMetInkoop: String
  cddeelproject: String
  cdtermijn: Int
  bonnummer: String
  projMutsoort: String
  voorschot: Int
  cdgrbkostprijs: String
  cdgrbdekking: String
  samVersie: String
  declarabel: String
  vvvrijvelda: String
}

"""A `TempFactopdrachtregel` edge in the connection."""
type TempFactopdrachtregelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TempFactopdrachtregel` at the end of the edge."""
  node: TempFactopdrachtregel!
}

"""Methods to use when ordering `TempFactopdrachtregel`."""
enum TempFactopdrachtregelsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  FACTUURREGEL_ASC
  FACTUURREGEL_DESC
  HOOFDREGEL_ASC
  HOOFDREGEL_DESC
  SOORT_ASC
  SOORT_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  EENHEID_ASC
  EENHEID_DESC
  AANTALDEC_ASC
  AANTALDEC_DESC
  AANTALGELEVERD_ASC
  AANTALGELEVERD_DESC
  PRIJS_ASC
  PRIJS_DESC
  PRIJSPER_ASC
  PRIJSPER_DESC
  KORTINGPERC_ASC
  KORTINGPERC_DESC
  FACTBEDRAGINCL_ASC
  FACTBEDRAGINCL_DESC
  FACTBEDRAGEXCL_ASC
  FACTBEDRAGEXCL_DESC
  BTWCODE_ASC
  BTWCODE_DESC
  BTWPERC_ASC
  BTWPERC_DESC
  CDGRBREKENING_ASC
  CDGRBREKENING_DESC
  NETTOOMZET_ASC
  NETTOOMZET_DESC
  KOSTPRIJS_ASC
  KOSTPRIJS_DESC
  STATCODE_ASC
  STATCODE_DESC
  AANTALBESTELD_ASC
  AANTALBESTELD_DESC
  AANTALLEVEREN_ASC
  AANTALLEVEREN_DESC
  DATUM_ASC
  DATUM_DESC
  CDSTATUS_ASC
  CDSTATUS_DESC
  AANTALNALEVEREN_ASC
  AANTALNALEVEREN_DESC
  TEKSTMAGB_ASC
  TEKSTMAGB_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  CDGRBREKOMZVJ_ASC
  CDGRBREKOMZVJ_DESC
  FACTBEDRAGEXCLVJ_ASC
  FACTBEDRAGEXCLVJ_DESC
  AANTALGERESERV_ASC
  AANTALGERESERV_DESC
  KVC_ASC
  KVC_DESC
  CDKOSTENPLAATS_ASC
  CDKOSTENPLAATS_DESC
  CDDOSSIER_ASC
  CDDOSSIER_DESC
  CDGRBREKKORT_ASC
  CDGRBREKKORT_DESC
  CDWERKNEMER_ASC
  CDWERKNEMER_DESC
  WEEKNUMMER_ASC
  WEEKNUMMER_DESC
  FACTOPDR_RGL_GUID_ASC
  FACTOPDR_RGL_GUID_DESC
  KOPPEL_MET_INKOOP_ASC
  KOPPEL_MET_INKOOP_DESC
  CDDEELPROJECT_ASC
  CDDEELPROJECT_DESC
  CDTERMIJN_ASC
  CDTERMIJN_DESC
  BONNUMMER_ASC
  BONNUMMER_DESC
  PROJ_MUTSOORT_ASC
  PROJ_MUTSOORT_DESC
  VOORSCHOT_ASC
  VOORSCHOT_DESC
  CDGRBKOSTPRIJS_ASC
  CDGRBKOSTPRIJS_DESC
  CDGRBDEKKING_ASC
  CDGRBDEKKING_DESC
  SAM_VERSIE_ASC
  SAM_VERSIE_DESC
  DECLARABEL_ASC
  DECLARABEL_DESC
  VVVRIJVELDA_ASC
  VVVRIJVELDA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TempFactopdrachtregel` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input TempFactopdrachtregelCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `factuurregel` field."""
  factuurregel: Int

  """Checks for equality with the object’s `hoofdregel` field."""
  hoofdregel: Int

  """Checks for equality with the object’s `soort` field."""
  soort: String

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `eenheid` field."""
  eenheid: String

  """Checks for equality with the object’s `aantaldec` field."""
  aantaldec: Int

  """Checks for equality with the object’s `aantalgeleverd` field."""
  aantalgeleverd: BigFloat

  """Checks for equality with the object’s `prijs` field."""
  prijs: BigFloat

  """Checks for equality with the object’s `prijsper` field."""
  prijsper: BigFloat

  """Checks for equality with the object’s `kortingperc` field."""
  kortingperc: BigFloat

  """Checks for equality with the object’s `factbedragincl` field."""
  factbedragincl: BigFloat

  """Checks for equality with the object’s `factbedragexcl` field."""
  factbedragexcl: BigFloat

  """Checks for equality with the object’s `btwcode` field."""
  btwcode: Int

  """Checks for equality with the object’s `btwperc` field."""
  btwperc: BigFloat

  """Checks for equality with the object’s `cdgrbrekening` field."""
  cdgrbrekening: String

  """Checks for equality with the object’s `nettoomzet` field."""
  nettoomzet: BigFloat

  """Checks for equality with the object’s `kostprijs` field."""
  kostprijs: BigFloat

  """Checks for equality with the object’s `statcode` field."""
  statcode: String

  """Checks for equality with the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloat

  """Checks for equality with the object’s `aantalleveren` field."""
  aantalleveren: BigFloat

  """Checks for equality with the object’s `datum` field."""
  datum: Date

  """Checks for equality with the object’s `cdstatus` field."""
  cdstatus: String

  """Checks for equality with the object’s `aantalnaleveren` field."""
  aantalnaleveren: BigFloat

  """Checks for equality with the object’s `tekstmagb` field."""
  tekstmagb: String

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `cdgrbrekomzvj` field."""
  cdgrbrekomzvj: String

  """Checks for equality with the object’s `factbedragexclvj` field."""
  factbedragexclvj: BigFloat

  """Checks for equality with the object’s `aantalgereserv` field."""
  aantalgereserv: BigFloat

  """Checks for equality with the object’s `kvc` field."""
  kvc: String

  """Checks for equality with the object’s `cdkostenplaats` field."""
  cdkostenplaats: String

  """Checks for equality with the object’s `cddossier` field."""
  cddossier: String

  """Checks for equality with the object’s `cdgrbrekkort` field."""
  cdgrbrekkort: String

  """Checks for equality with the object’s `cdwerknemer` field."""
  cdwerknemer: String

  """Checks for equality with the object’s `weeknummer` field."""
  weeknummer: Int

  """Checks for equality with the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: String

  """Checks for equality with the object’s `koppelMetInkoop` field."""
  koppelMetInkoop: String

  """Checks for equality with the object’s `cddeelproject` field."""
  cddeelproject: String

  """Checks for equality with the object’s `cdtermijn` field."""
  cdtermijn: Int

  """Checks for equality with the object’s `bonnummer` field."""
  bonnummer: String

  """Checks for equality with the object’s `projMutsoort` field."""
  projMutsoort: String

  """Checks for equality with the object’s `voorschot` field."""
  voorschot: Int

  """Checks for equality with the object’s `cdgrbkostprijs` field."""
  cdgrbkostprijs: String

  """Checks for equality with the object’s `cdgrbdekking` field."""
  cdgrbdekking: String

  """Checks for equality with the object’s `samVersie` field."""
  samVersie: String

  """Checks for equality with the object’s `declarabel` field."""
  declarabel: String

  """Checks for equality with the object’s `vvvrijvelda` field."""
  vvvrijvelda: String
}

"""
A filter to be used against `TempFactopdrachtregel` object types. All fields are combined with a logical ‘and.’
"""
input TempFactopdrachtregelFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `factuurregel` field."""
  factuurregel: IntFilter

  """Filter by the object’s `hoofdregel` field."""
  hoofdregel: IntFilter

  """Filter by the object’s `soort` field."""
  soort: StringFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `eenheid` field."""
  eenheid: StringFilter

  """Filter by the object’s `aantaldec` field."""
  aantaldec: IntFilter

  """Filter by the object’s `aantalgeleverd` field."""
  aantalgeleverd: BigFloatFilter

  """Filter by the object’s `prijs` field."""
  prijs: BigFloatFilter

  """Filter by the object’s `prijsper` field."""
  prijsper: BigFloatFilter

  """Filter by the object’s `kortingperc` field."""
  kortingperc: BigFloatFilter

  """Filter by the object’s `factbedragincl` field."""
  factbedragincl: BigFloatFilter

  """Filter by the object’s `factbedragexcl` field."""
  factbedragexcl: BigFloatFilter

  """Filter by the object’s `btwcode` field."""
  btwcode: IntFilter

  """Filter by the object’s `btwperc` field."""
  btwperc: BigFloatFilter

  """Filter by the object’s `cdgrbrekening` field."""
  cdgrbrekening: StringFilter

  """Filter by the object’s `nettoomzet` field."""
  nettoomzet: BigFloatFilter

  """Filter by the object’s `kostprijs` field."""
  kostprijs: BigFloatFilter

  """Filter by the object’s `statcode` field."""
  statcode: StringFilter

  """Filter by the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloatFilter

  """Filter by the object’s `aantalleveren` field."""
  aantalleveren: BigFloatFilter

  """Filter by the object’s `datum` field."""
  datum: DateFilter

  """Filter by the object’s `cdstatus` field."""
  cdstatus: StringFilter

  """Filter by the object’s `aantalnaleveren` field."""
  aantalnaleveren: BigFloatFilter

  """Filter by the object’s `tekstmagb` field."""
  tekstmagb: StringFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `cdgrbrekomzvj` field."""
  cdgrbrekomzvj: StringFilter

  """Filter by the object’s `factbedragexclvj` field."""
  factbedragexclvj: BigFloatFilter

  """Filter by the object’s `aantalgereserv` field."""
  aantalgereserv: BigFloatFilter

  """Filter by the object’s `kvc` field."""
  kvc: StringFilter

  """Filter by the object’s `cdkostenplaats` field."""
  cdkostenplaats: StringFilter

  """Filter by the object’s `cddossier` field."""
  cddossier: StringFilter

  """Filter by the object’s `cdgrbrekkort` field."""
  cdgrbrekkort: StringFilter

  """Filter by the object’s `cdwerknemer` field."""
  cdwerknemer: StringFilter

  """Filter by the object’s `weeknummer` field."""
  weeknummer: IntFilter

  """Filter by the object’s `factopdrRglGuid` field."""
  factopdrRglGuid: StringFilter

  """Filter by the object’s `koppelMetInkoop` field."""
  koppelMetInkoop: StringFilter

  """Filter by the object’s `cddeelproject` field."""
  cddeelproject: StringFilter

  """Filter by the object’s `cdtermijn` field."""
  cdtermijn: IntFilter

  """Filter by the object’s `bonnummer` field."""
  bonnummer: StringFilter

  """Filter by the object’s `projMutsoort` field."""
  projMutsoort: StringFilter

  """Filter by the object’s `voorschot` field."""
  voorschot: IntFilter

  """Filter by the object’s `cdgrbkostprijs` field."""
  cdgrbkostprijs: StringFilter

  """Filter by the object’s `cdgrbdekking` field."""
  cdgrbdekking: StringFilter

  """Filter by the object’s `samVersie` field."""
  samVersie: StringFilter

  """Filter by the object’s `declarabel` field."""
  declarabel: StringFilter

  """Filter by the object’s `vvvrijvelda` field."""
  vvvrijvelda: StringFilter

  """Checks for all expressions in this list."""
  and: [TempFactopdrachtregelFilter!]

  """Checks for any expressions in this list."""
  or: [TempFactopdrachtregelFilter!]

  """Negates the expression."""
  not: TempFactopdrachtregelFilter
}

"""A connection to a list of `TempLicense` values."""
type TempLicensesConnection {
  """A list of `TempLicense` objects."""
  nodes: [TempLicense!]!

  """
  A list of edges which contains the `TempLicense` and cursor to aid in pagination.
  """
  edges: [TempLicensesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TempLicense` you could get from the connection."""
  totalCount: Int!
}

type TempLicense implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  moduletype: Int
  moduledata: String
  licensecode: String
  remarks: String
  customerkey: Int
  licenseid: Int
  durationmonths: Int
  durationdays: Int
  creationtime: Datetime
  ordercode: Int
  activate: Int
}

"""A `TempLicense` edge in the connection."""
type TempLicensesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TempLicense` at the end of the edge."""
  node: TempLicense!
}

"""Methods to use when ordering `TempLicense`."""
enum TempLicensesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MODULETYPE_ASC
  MODULETYPE_DESC
  MODULEDATA_ASC
  MODULEDATA_DESC
  LICENSECODE_ASC
  LICENSECODE_DESC
  REMARKS_ASC
  REMARKS_DESC
  CUSTOMERKEY_ASC
  CUSTOMERKEY_DESC
  LICENSEID_ASC
  LICENSEID_DESC
  DURATIONMONTHS_ASC
  DURATIONMONTHS_DESC
  DURATIONDAYS_ASC
  DURATIONDAYS_DESC
  CREATIONTIME_ASC
  CREATIONTIME_DESC
  ORDERCODE_ASC
  ORDERCODE_DESC
  ACTIVATE_ASC
  ACTIVATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TempLicense` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TempLicenseCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `moduletype` field."""
  moduletype: Int

  """Checks for equality with the object’s `moduledata` field."""
  moduledata: String

  """Checks for equality with the object’s `licensecode` field."""
  licensecode: String

  """Checks for equality with the object’s `remarks` field."""
  remarks: String

  """Checks for equality with the object’s `customerkey` field."""
  customerkey: Int

  """Checks for equality with the object’s `licenseid` field."""
  licenseid: Int

  """Checks for equality with the object’s `durationmonths` field."""
  durationmonths: Int

  """Checks for equality with the object’s `durationdays` field."""
  durationdays: Int

  """Checks for equality with the object’s `creationtime` field."""
  creationtime: Datetime

  """Checks for equality with the object’s `ordercode` field."""
  ordercode: Int

  """Checks for equality with the object’s `activate` field."""
  activate: Int
}

"""
A filter to be used against `TempLicense` object types. All fields are combined with a logical ‘and.’
"""
input TempLicenseFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `moduletype` field."""
  moduletype: IntFilter

  """Filter by the object’s `moduledata` field."""
  moduledata: StringFilter

  """Filter by the object’s `licensecode` field."""
  licensecode: StringFilter

  """Filter by the object’s `remarks` field."""
  remarks: StringFilter

  """Filter by the object’s `customerkey` field."""
  customerkey: IntFilter

  """Filter by the object’s `licenseid` field."""
  licenseid: IntFilter

  """Filter by the object’s `durationmonths` field."""
  durationmonths: IntFilter

  """Filter by the object’s `durationdays` field."""
  durationdays: IntFilter

  """Filter by the object’s `creationtime` field."""
  creationtime: DatetimeFilter

  """Filter by the object’s `ordercode` field."""
  ordercode: IntFilter

  """Filter by the object’s `activate` field."""
  activate: IntFilter

  """Checks for all expressions in this list."""
  and: [TempLicenseFilter!]

  """Checks for any expressions in this list."""
  or: [TempLicenseFilter!]

  """Negates the expression."""
  not: TempLicenseFilter
}

"""A connection to a list of `TempRegistrationHistory` values."""
type TempRegistrationHistoriesConnection {
  """A list of `TempRegistrationHistory` objects."""
  nodes: [TempRegistrationHistory!]!

  """
  A list of edges which contains the `TempRegistrationHistory` and cursor to aid in pagination.
  """
  edges: [TempRegistrationHistoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TempRegistrationHistory` you could get from the connection.
  """
  totalCount: Int!
}

type TempRegistrationHistory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  activationCode: String
  registrationId: Int
  expirationDate: Date
  orderCode: String
}

"""A `TempRegistrationHistory` edge in the connection."""
type TempRegistrationHistoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TempRegistrationHistory` at the end of the edge."""
  node: TempRegistrationHistory!
}

"""Methods to use when ordering `TempRegistrationHistory`."""
enum TempRegistrationHistoriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ACTIVATION_CODE_ASC
  ACTIVATION_CODE_DESC
  REGISTRATION_ID_ASC
  REGISTRATION_ID_DESC
  EXPIRATION_DATE_ASC
  EXPIRATION_DATE_DESC
  ORDER_CODE_ASC
  ORDER_CODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TempRegistrationHistory` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input TempRegistrationHistoryCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `activationCode` field."""
  activationCode: String

  """Checks for equality with the object’s `registrationId` field."""
  registrationId: Int

  """Checks for equality with the object’s `expirationDate` field."""
  expirationDate: Date

  """Checks for equality with the object’s `orderCode` field."""
  orderCode: String
}

"""
A filter to be used against `TempRegistrationHistory` object types. All fields are combined with a logical ‘and.’
"""
input TempRegistrationHistoryFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `activationCode` field."""
  activationCode: StringFilter

  """Filter by the object’s `registrationId` field."""
  registrationId: IntFilter

  """Filter by the object’s `expirationDate` field."""
  expirationDate: DateFilter

  """Filter by the object’s `orderCode` field."""
  orderCode: StringFilter

  """Checks for all expressions in this list."""
  and: [TempRegistrationHistoryFilter!]

  """Checks for any expressions in this list."""
  or: [TempRegistrationHistoryFilter!]

  """Negates the expression."""
  not: TempRegistrationHistoryFilter
}

"""A connection to a list of `TempRegistration` values."""
type TempRegistrationsConnection {
  """A list of `TempRegistration` objects."""
  nodes: [TempRegistration!]!

  """
  A list of edges which contains the `TempRegistration` and cursor to aid in pagination.
  """
  edges: [TempRegistrationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TempRegistration` you could get from the connection.
  """
  totalCount: Int!
}

type TempRegistration implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  hwType: Int
  registrationCode: String
  activationCode: String
  licenseId: Int
  expirationDate: Date
  hwCode: String
  computerName: String
  ipAddress: String
  orderCode: String
}

"""A `TempRegistration` edge in the connection."""
type TempRegistrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TempRegistration` at the end of the edge."""
  node: TempRegistration!
}

"""Methods to use when ordering `TempRegistration`."""
enum TempRegistrationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  HW_TYPE_ASC
  HW_TYPE_DESC
  REGISTRATION_CODE_ASC
  REGISTRATION_CODE_DESC
  ACTIVATION_CODE_ASC
  ACTIVATION_CODE_DESC
  LICENSE_ID_ASC
  LICENSE_ID_DESC
  EXPIRATION_DATE_ASC
  EXPIRATION_DATE_DESC
  HW_CODE_ASC
  HW_CODE_DESC
  COMPUTER_NAME_ASC
  COMPUTER_NAME_DESC
  IP_ADDRESS_ASC
  IP_ADDRESS_DESC
  ORDER_CODE_ASC
  ORDER_CODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TempRegistration` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TempRegistrationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `hwType` field."""
  hwType: Int

  """Checks for equality with the object’s `registrationCode` field."""
  registrationCode: String

  """Checks for equality with the object’s `activationCode` field."""
  activationCode: String

  """Checks for equality with the object’s `licenseId` field."""
  licenseId: Int

  """Checks for equality with the object’s `expirationDate` field."""
  expirationDate: Date

  """Checks for equality with the object’s `hwCode` field."""
  hwCode: String

  """Checks for equality with the object’s `computerName` field."""
  computerName: String

  """Checks for equality with the object’s `ipAddress` field."""
  ipAddress: String

  """Checks for equality with the object’s `orderCode` field."""
  orderCode: String
}

"""
A filter to be used against `TempRegistration` object types. All fields are combined with a logical ‘and.’
"""
input TempRegistrationFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `hwType` field."""
  hwType: IntFilter

  """Filter by the object’s `registrationCode` field."""
  registrationCode: StringFilter

  """Filter by the object’s `activationCode` field."""
  activationCode: StringFilter

  """Filter by the object’s `licenseId` field."""
  licenseId: IntFilter

  """Filter by the object’s `expirationDate` field."""
  expirationDate: DateFilter

  """Filter by the object’s `hwCode` field."""
  hwCode: StringFilter

  """Filter by the object’s `computerName` field."""
  computerName: StringFilter

  """Filter by the object’s `ipAddress` field."""
  ipAddress: StringFilter

  """Filter by the object’s `orderCode` field."""
  orderCode: StringFilter

  """Checks for all expressions in this list."""
  and: [TempRegistrationFilter!]

  """Checks for any expressions in this list."""
  or: [TempRegistrationFilter!]

  """Negates the expression."""
  not: TempRegistrationFilter
}

"""A connection to a list of `TempRegistrations2` values."""
type TempRegistrations2SConnection {
  """A list of `TempRegistrations2` objects."""
  nodes: [TempRegistrations2!]!

  """
  A list of edges which contains the `TempRegistrations2` and cursor to aid in pagination.
  """
  edges: [TempRegistrations2SEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TempRegistrations2` you could get from the connection.
  """
  totalCount: Int!
}

type TempRegistrations2 implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  hwType: Int
  registrationCode: String
  activationCode: String
  licenseId: Int
  expirationDate: Date
  hwCode: String
  computerName: String
  ipAddress: String
  orderCode: String
}

"""A `TempRegistrations2` edge in the connection."""
type TempRegistrations2SEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TempRegistrations2` at the end of the edge."""
  node: TempRegistrations2!
}

"""Methods to use when ordering `TempRegistrations2`."""
enum TempRegistrations2SOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  HW_TYPE_ASC
  HW_TYPE_DESC
  REGISTRATION_CODE_ASC
  REGISTRATION_CODE_DESC
  ACTIVATION_CODE_ASC
  ACTIVATION_CODE_DESC
  LICENSE_ID_ASC
  LICENSE_ID_DESC
  EXPIRATION_DATE_ASC
  EXPIRATION_DATE_DESC
  HW_CODE_ASC
  HW_CODE_DESC
  COMPUTER_NAME_ASC
  COMPUTER_NAME_DESC
  IP_ADDRESS_ASC
  IP_ADDRESS_DESC
  ORDER_CODE_ASC
  ORDER_CODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TempRegistrations2` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TempRegistrations2Condition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `hwType` field."""
  hwType: Int

  """Checks for equality with the object’s `registrationCode` field."""
  registrationCode: String

  """Checks for equality with the object’s `activationCode` field."""
  activationCode: String

  """Checks for equality with the object’s `licenseId` field."""
  licenseId: Int

  """Checks for equality with the object’s `expirationDate` field."""
  expirationDate: Date

  """Checks for equality with the object’s `hwCode` field."""
  hwCode: String

  """Checks for equality with the object’s `computerName` field."""
  computerName: String

  """Checks for equality with the object’s `ipAddress` field."""
  ipAddress: String

  """Checks for equality with the object’s `orderCode` field."""
  orderCode: String
}

"""
A filter to be used against `TempRegistrations2` object types. All fields are combined with a logical ‘and.’
"""
input TempRegistrations2Filter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `hwType` field."""
  hwType: IntFilter

  """Filter by the object’s `registrationCode` field."""
  registrationCode: StringFilter

  """Filter by the object’s `activationCode` field."""
  activationCode: StringFilter

  """Filter by the object’s `licenseId` field."""
  licenseId: IntFilter

  """Filter by the object’s `expirationDate` field."""
  expirationDate: DateFilter

  """Filter by the object’s `hwCode` field."""
  hwCode: StringFilter

  """Filter by the object’s `computerName` field."""
  computerName: StringFilter

  """Filter by the object’s `ipAddress` field."""
  ipAddress: StringFilter

  """Filter by the object’s `orderCode` field."""
  orderCode: StringFilter

  """Checks for all expressions in this list."""
  and: [TempRegistrations2Filter!]

  """Checks for any expressions in this list."""
  or: [TempRegistrations2Filter!]

  """Negates the expression."""
  not: TempRegistrations2Filter
}

"""A connection to a list of `Test` values."""
type TestsConnection {
  """A list of `Test` objects."""
  nodes: [Test!]!

  """
  A list of edges which contains the `Test` and cursor to aid in pagination.
  """
  edges: [TestsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Test` you could get from the connection."""
  totalCount: Int!
}

type Test implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  detectorSensorLocationId: Int!
  date: Datetime
  day: Int
  success: Boolean
  sensorId: Int
  originalSensorId: Int
  filterId: Int
  pyrolyserId: Int
}

"""A `Test` edge in the connection."""
type TestsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Test` at the end of the edge."""
  node: Test!
}

"""Methods to use when ordering `Test`."""
enum TestsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DETECTOR_SENSOR_LOCATION_ID_ASC
  DETECTOR_SENSOR_LOCATION_ID_DESC
  DATE_ASC
  DATE_DESC
  DAY_ASC
  DAY_DESC
  SUCCESS_ASC
  SUCCESS_DESC
  SENSOR_ID_ASC
  SENSOR_ID_DESC
  ORIGINAL_SENSOR_ID_ASC
  ORIGINAL_SENSOR_ID_DESC
  FILTER_ID_ASC
  FILTER_ID_DESC
  PYROLYSER_ID_ASC
  PYROLYSER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Test` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TestCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """
  Checks for equality with the object’s `detectorSensorLocationId` field.
  """
  detectorSensorLocationId: Int

  """Checks for equality with the object’s `date` field."""
  date: Datetime

  """Checks for equality with the object’s `day` field."""
  day: Int

  """Checks for equality with the object’s `success` field."""
  success: Boolean

  """Checks for equality with the object’s `sensorId` field."""
  sensorId: Int

  """Checks for equality with the object’s `originalSensorId` field."""
  originalSensorId: Int

  """Checks for equality with the object’s `filterId` field."""
  filterId: Int

  """Checks for equality with the object’s `pyrolyserId` field."""
  pyrolyserId: Int
}

"""
A filter to be used against `Test` object types. All fields are combined with a logical ‘and.’
"""
input TestFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `detectorSensorLocationId` field."""
  detectorSensorLocationId: IntFilter

  """Filter by the object’s `date` field."""
  date: DatetimeFilter

  """Filter by the object’s `day` field."""
  day: IntFilter

  """Filter by the object’s `success` field."""
  success: BooleanFilter

  """Filter by the object’s `sensorId` field."""
  sensorId: IntFilter

  """Filter by the object’s `originalSensorId` field."""
  originalSensorId: IntFilter

  """Filter by the object’s `filterId` field."""
  filterId: IntFilter

  """Filter by the object’s `pyrolyserId` field."""
  pyrolyserId: IntFilter

  """Checks for all expressions in this list."""
  and: [TestFilter!]

  """Checks for any expressions in this list."""
  or: [TestFilter!]

  """Negates the expression."""
  not: TestFilter
}

"""A connection to a list of `Tztadvy` values."""
type TztadviesConnection {
  """A list of `Tztadvy` objects."""
  nodes: [Tztadvy!]!

  """
  A list of edges which contains the `Tztadvy` and cursor to aid in pagination.
  """
  edges: [TztadviesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Tztadvy` you could get from the connection."""
  totalCount: Int!
}

type Tztadvy {
  stockSupplierId: Int
  cdartikel: String
  bestcode: String
  inkoopprijs: BigFloat
  besthoeveelheid: BigFloat
  omschr: String
  factuuropdracht: String
  aantalbesteld: BigFloat
}

"""A `Tztadvy` edge in the connection."""
type TztadviesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Tztadvy` at the end of the edge."""
  node: Tztadvy!
}

"""Methods to use when ordering `Tztadvy`."""
enum TztadviesOrderBy {
  NATURAL
  STOCK_SUPPLIER_ID_ASC
  STOCK_SUPPLIER_ID_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  BESTCODE_ASC
  BESTCODE_DESC
  INKOOPPRIJS_ASC
  INKOOPPRIJS_DESC
  BESTHOEVEELHEID_ASC
  BESTHOEVEELHEID_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  FACTUUROPDRACHT_ASC
  FACTUUROPDRACHT_DESC
  AANTALBESTELD_ASC
  AANTALBESTELD_DESC
}

"""
A condition to be used against `Tztadvy` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TztadvyCondition {
  """Checks for equality with the object’s `stockSupplierId` field."""
  stockSupplierId: Int

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `bestcode` field."""
  bestcode: String

  """Checks for equality with the object’s `inkoopprijs` field."""
  inkoopprijs: BigFloat

  """Checks for equality with the object’s `besthoeveelheid` field."""
  besthoeveelheid: BigFloat

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `factuuropdracht` field."""
  factuuropdracht: String

  """Checks for equality with the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloat
}

"""
A filter to be used against `Tztadvy` object types. All fields are combined with a logical ‘and.’
"""
input TztadvyFilter {
  """Filter by the object’s `stockSupplierId` field."""
  stockSupplierId: IntFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `bestcode` field."""
  bestcode: StringFilter

  """Filter by the object’s `inkoopprijs` field."""
  inkoopprijs: BigFloatFilter

  """Filter by the object’s `besthoeveelheid` field."""
  besthoeveelheid: BigFloatFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `factuuropdracht` field."""
  factuuropdracht: StringFilter

  """Filter by the object’s `aantalbesteld` field."""
  aantalbesteld: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [TztadvyFilter!]

  """Checks for any expressions in this list."""
  or: [TztadvyFilter!]

  """Negates the expression."""
  not: TztadvyFilter
}

"""A connection to a list of `Valuta` values."""
type ValutasConnection {
  """A list of `Valuta` objects."""
  nodes: [Valuta!]!

  """
  A list of edges which contains the `Valuta` and cursor to aid in pagination.
  """
  edges: [ValutasEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Valuta` you could get from the connection."""
  totalCount: Int!
}

type Valuta {
  cdvaluta: String
  isovaluta: String
  omschr: String
  cddecimalen: String
  biedkoerseuro: BigFloat
  laatkoerseuro: BigFloat
  rekenkoerseuro: BigFloat
  cdemusoort: String
}

"""A `Valuta` edge in the connection."""
type ValutasEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Valuta` at the end of the edge."""
  node: Valuta!
}

"""Methods to use when ordering `Valuta`."""
enum ValutasOrderBy {
  NATURAL
  CDVALUTA_ASC
  CDVALUTA_DESC
  ISOVALUTA_ASC
  ISOVALUTA_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  CDDECIMALEN_ASC
  CDDECIMALEN_DESC
  BIEDKOERSEURO_ASC
  BIEDKOERSEURO_DESC
  LAATKOERSEURO_ASC
  LAATKOERSEURO_DESC
  REKENKOERSEURO_ASC
  REKENKOERSEURO_DESC
  CDEMUSOORT_ASC
  CDEMUSOORT_DESC
}

"""
A condition to be used against `Valuta` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ValutaCondition {
  """Checks for equality with the object’s `cdvaluta` field."""
  cdvaluta: String

  """Checks for equality with the object’s `isovaluta` field."""
  isovaluta: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `cddecimalen` field."""
  cddecimalen: String

  """Checks for equality with the object’s `biedkoerseuro` field."""
  biedkoerseuro: BigFloat

  """Checks for equality with the object’s `laatkoerseuro` field."""
  laatkoerseuro: BigFloat

  """Checks for equality with the object’s `rekenkoerseuro` field."""
  rekenkoerseuro: BigFloat

  """Checks for equality with the object’s `cdemusoort` field."""
  cdemusoort: String
}

"""
A filter to be used against `Valuta` object types. All fields are combined with a logical ‘and.’
"""
input ValutaFilter {
  """Filter by the object’s `cdvaluta` field."""
  cdvaluta: StringFilter

  """Filter by the object’s `isovaluta` field."""
  isovaluta: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `cddecimalen` field."""
  cddecimalen: StringFilter

  """Filter by the object’s `biedkoerseuro` field."""
  biedkoerseuro: BigFloatFilter

  """Filter by the object’s `laatkoerseuro` field."""
  laatkoerseuro: BigFloatFilter

  """Filter by the object’s `rekenkoerseuro` field."""
  rekenkoerseuro: BigFloatFilter

  """Filter by the object’s `cdemusoort` field."""
  cdemusoort: StringFilter

  """Checks for all expressions in this list."""
  and: [ValutaFilter!]

  """Checks for any expressions in this list."""
  or: [ValutaFilter!]

  """Negates the expression."""
  not: ValutaFilter
}

"""A connection to a list of `ValutaMv` values."""
type ValutaMvsConnection {
  """A list of `ValutaMv` objects."""
  nodes: [ValutaMv!]!

  """
  A list of edges which contains the `ValutaMv` and cursor to aid in pagination.
  """
  edges: [ValutaMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ValutaMv` you could get from the connection."""
  totalCount: Int!
}

type ValutaMv {
  cdvaluta: String
  isovaluta: String
  omschr: String
  cddecimalen: String
  biedkoerseuro: BigFloat
  laatkoerseuro: BigFloat
  rekenkoerseuro: BigFloat
  cdemusoort: String
}

"""A `ValutaMv` edge in the connection."""
type ValutaMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ValutaMv` at the end of the edge."""
  node: ValutaMv!
}

"""Methods to use when ordering `ValutaMv`."""
enum ValutaMvsOrderBy {
  NATURAL
  CDVALUTA_ASC
  CDVALUTA_DESC
  ISOVALUTA_ASC
  ISOVALUTA_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  CDDECIMALEN_ASC
  CDDECIMALEN_DESC
  BIEDKOERSEURO_ASC
  BIEDKOERSEURO_DESC
  LAATKOERSEURO_ASC
  LAATKOERSEURO_DESC
  REKENKOERSEURO_ASC
  REKENKOERSEURO_DESC
  CDEMUSOORT_ASC
  CDEMUSOORT_DESC
}

"""
A condition to be used against `ValutaMv` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ValutaMvCondition {
  """Checks for equality with the object’s `cdvaluta` field."""
  cdvaluta: String

  """Checks for equality with the object’s `isovaluta` field."""
  isovaluta: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `cddecimalen` field."""
  cddecimalen: String

  """Checks for equality with the object’s `biedkoerseuro` field."""
  biedkoerseuro: BigFloat

  """Checks for equality with the object’s `laatkoerseuro` field."""
  laatkoerseuro: BigFloat

  """Checks for equality with the object’s `rekenkoerseuro` field."""
  rekenkoerseuro: BigFloat

  """Checks for equality with the object’s `cdemusoort` field."""
  cdemusoort: String
}

"""
A filter to be used against `ValutaMv` object types. All fields are combined with a logical ‘and.’
"""
input ValutaMvFilter {
  """Filter by the object’s `cdvaluta` field."""
  cdvaluta: StringFilter

  """Filter by the object’s `isovaluta` field."""
  isovaluta: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `cddecimalen` field."""
  cddecimalen: StringFilter

  """Filter by the object’s `biedkoerseuro` field."""
  biedkoerseuro: BigFloatFilter

  """Filter by the object’s `laatkoerseuro` field."""
  laatkoerseuro: BigFloatFilter

  """Filter by the object’s `rekenkoerseuro` field."""
  rekenkoerseuro: BigFloatFilter

  """Filter by the object’s `cdemusoort` field."""
  cdemusoort: StringFilter

  """Checks for all expressions in this list."""
  and: [ValutaMvFilter!]

  """Checks for any expressions in this list."""
  or: [ValutaMvFilter!]

  """Negates the expression."""
  not: ValutaMvFilter
}

"""A connection to a list of `VerrekenprijsChangesIndex` values."""
type VerrekenprijsChangesIndicesConnection {
  """A list of `VerrekenprijsChangesIndex` objects."""
  nodes: [VerrekenprijsChangesIndex!]!

  """
  A list of edges which contains the `VerrekenprijsChangesIndex` and cursor to aid in pagination.
  """
  edges: [VerrekenprijsChangesIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `VerrekenprijsChangesIndex` you could get from the connection.
  """
  totalCount: Int!
}

type VerrekenprijsChangesIndex {
  id: Int
  created: Datetime
  cdartikel: String
  verrekenprijsOld: BigFloat
  verrekenprijsNew: BigFloat
  zoeknaam: String
  omschr: String
  prijsexcl: BigFloat
  uitloop: String
  voorraad: BigFloat
  marginOld: BigFloat
  marginNew: BigFloat
  marginDiff: BigFloat
  verrekenprijsDiff: BigFloat
  voorraadVerrekenprijsDiff: BigFloat
}

"""A `VerrekenprijsChangesIndex` edge in the connection."""
type VerrekenprijsChangesIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `VerrekenprijsChangesIndex` at the end of the edge."""
  node: VerrekenprijsChangesIndex!
}

"""Methods to use when ordering `VerrekenprijsChangesIndex`."""
enum VerrekenprijsChangesIndicesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_ASC
  CREATED_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  VERREKENPRIJS_OLD_ASC
  VERREKENPRIJS_OLD_DESC
  VERREKENPRIJS_NEW_ASC
  VERREKENPRIJS_NEW_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  PRIJSEXCL_ASC
  PRIJSEXCL_DESC
  UITLOOP_ASC
  UITLOOP_DESC
  VOORRAAD_ASC
  VOORRAAD_DESC
  MARGIN_OLD_ASC
  MARGIN_OLD_DESC
  MARGIN_NEW_ASC
  MARGIN_NEW_DESC
  MARGIN_DIFF_ASC
  MARGIN_DIFF_DESC
  VERREKENPRIJS_DIFF_ASC
  VERREKENPRIJS_DIFF_DESC
  VOORRAAD_VERREKENPRIJS_DIFF_ASC
  VOORRAAD_VERREKENPRIJS_DIFF_DESC
}

"""
A condition to be used against `VerrekenprijsChangesIndex` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input VerrekenprijsChangesIndexCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `verrekenprijsOld` field."""
  verrekenprijsOld: BigFloat

  """Checks for equality with the object’s `verrekenprijsNew` field."""
  verrekenprijsNew: BigFloat

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `prijsexcl` field."""
  prijsexcl: BigFloat

  """Checks for equality with the object’s `uitloop` field."""
  uitloop: String

  """Checks for equality with the object’s `voorraad` field."""
  voorraad: BigFloat

  """Checks for equality with the object’s `marginOld` field."""
  marginOld: BigFloat

  """Checks for equality with the object’s `marginNew` field."""
  marginNew: BigFloat

  """Checks for equality with the object’s `marginDiff` field."""
  marginDiff: BigFloat

  """Checks for equality with the object’s `verrekenprijsDiff` field."""
  verrekenprijsDiff: BigFloat

  """
  Checks for equality with the object’s `voorraadVerrekenprijsDiff` field.
  """
  voorraadVerrekenprijsDiff: BigFloat
}

"""
A filter to be used against `VerrekenprijsChangesIndex` object types. All fields are combined with a logical ‘and.’
"""
input VerrekenprijsChangesIndexFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `verrekenprijsOld` field."""
  verrekenprijsOld: BigFloatFilter

  """Filter by the object’s `verrekenprijsNew` field."""
  verrekenprijsNew: BigFloatFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `prijsexcl` field."""
  prijsexcl: BigFloatFilter

  """Filter by the object’s `uitloop` field."""
  uitloop: StringFilter

  """Filter by the object’s `voorraad` field."""
  voorraad: BigFloatFilter

  """Filter by the object’s `marginOld` field."""
  marginOld: BigFloatFilter

  """Filter by the object’s `marginNew` field."""
  marginNew: BigFloatFilter

  """Filter by the object’s `marginDiff` field."""
  marginDiff: BigFloatFilter

  """Filter by the object’s `verrekenprijsDiff` field."""
  verrekenprijsDiff: BigFloatFilter

  """Filter by the object’s `voorraadVerrekenprijsDiff` field."""
  voorraadVerrekenprijsDiff: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [VerrekenprijsChangesIndexFilter!]

  """Checks for any expressions in this list."""
  or: [VerrekenprijsChangesIndexFilter!]

  """Negates the expression."""
  not: VerrekenprijsChangesIndexFilter
}

"""A connection to a list of `VerrekenprijsIndex` values."""
type VerrekenprijsIndicesConnection {
  """A list of `VerrekenprijsIndex` objects."""
  nodes: [VerrekenprijsIndex!]!

  """
  A list of edges which contains the `VerrekenprijsIndex` and cursor to aid in pagination.
  """
  edges: [VerrekenprijsIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `VerrekenprijsIndex` you could get from the connection.
  """
  totalCount: Int!
}

type VerrekenprijsIndex {
  cdartikel: String
  zoeknaam: String
  omschr: String
  soort: String
  assemblageArtikel: String
  uitloop: String
  prijsexcl: BigFloat
  verrekenprijs: BigFloat
  verrekenprijsCalc: BigFloat
  verrekenprijsDiff: BigFloat
  margin: BigFloat
  marginCalc: BigFloat
  marginDiff: BigFloat
}

"""A `VerrekenprijsIndex` edge in the connection."""
type VerrekenprijsIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `VerrekenprijsIndex` at the end of the edge."""
  node: VerrekenprijsIndex!
}

"""Methods to use when ordering `VerrekenprijsIndex`."""
enum VerrekenprijsIndicesOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  SOORT_ASC
  SOORT_DESC
  ASSEMBLAGE_ARTIKEL_ASC
  ASSEMBLAGE_ARTIKEL_DESC
  UITLOOP_ASC
  UITLOOP_DESC
  PRIJSEXCL_ASC
  PRIJSEXCL_DESC
  VERREKENPRIJS_ASC
  VERREKENPRIJS_DESC
  VERREKENPRIJS_CALC_ASC
  VERREKENPRIJS_CALC_DESC
  VERREKENPRIJS_DIFF_ASC
  VERREKENPRIJS_DIFF_DESC
  MARGIN_ASC
  MARGIN_DESC
  MARGIN_CALC_ASC
  MARGIN_CALC_DESC
  MARGIN_DIFF_ASC
  MARGIN_DIFF_DESC
}

"""
A condition to be used against `VerrekenprijsIndex` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input VerrekenprijsIndexCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `soort` field."""
  soort: String

  """Checks for equality with the object’s `assemblageArtikel` field."""
  assemblageArtikel: String

  """Checks for equality with the object’s `uitloop` field."""
  uitloop: String

  """Checks for equality with the object’s `prijsexcl` field."""
  prijsexcl: BigFloat

  """Checks for equality with the object’s `verrekenprijs` field."""
  verrekenprijs: BigFloat

  """Checks for equality with the object’s `verrekenprijsCalc` field."""
  verrekenprijsCalc: BigFloat

  """Checks for equality with the object’s `verrekenprijsDiff` field."""
  verrekenprijsDiff: BigFloat

  """Checks for equality with the object’s `margin` field."""
  margin: BigFloat

  """Checks for equality with the object’s `marginCalc` field."""
  marginCalc: BigFloat

  """Checks for equality with the object’s `marginDiff` field."""
  marginDiff: BigFloat
}

"""
A filter to be used against `VerrekenprijsIndex` object types. All fields are combined with a logical ‘and.’
"""
input VerrekenprijsIndexFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `soort` field."""
  soort: StringFilter

  """Filter by the object’s `assemblageArtikel` field."""
  assemblageArtikel: StringFilter

  """Filter by the object’s `uitloop` field."""
  uitloop: StringFilter

  """Filter by the object’s `prijsexcl` field."""
  prijsexcl: BigFloatFilter

  """Filter by the object’s `verrekenprijs` field."""
  verrekenprijs: BigFloatFilter

  """Filter by the object’s `verrekenprijsCalc` field."""
  verrekenprijsCalc: BigFloatFilter

  """Filter by the object’s `verrekenprijsDiff` field."""
  verrekenprijsDiff: BigFloatFilter

  """Filter by the object’s `margin` field."""
  margin: BigFloatFilter

  """Filter by the object’s `marginCalc` field."""
  marginCalc: BigFloatFilter

  """Filter by the object’s `marginDiff` field."""
  marginDiff: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [VerrekenprijsIndexFilter!]

  """Checks for any expressions in this list."""
  or: [VerrekenprijsIndexFilter!]

  """Negates the expression."""
  not: VerrekenprijsIndexFilter
}

"""A connection to a list of `VooradenIndex` values."""
type VooradenIndicesConnection {
  """A list of `VooradenIndex` objects."""
  nodes: [VooradenIndex!]!

  """
  A list of edges which contains the `VooradenIndex` and cursor to aid in pagination.
  """
  edges: [VooradenIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `VooradenIndex` you could get from the connection."""
  totalCount: Int!
}

type VooradenIndex {
  cdartikel: String
  voorraad: BigFloat
  gereserveerd: BigFloat
  assemblaf: BigFloat
  vrij: BigFloat
  inkopen: BigFloat
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  omschr: String
  bestcode: String
  inkoopprijs: BigFloat
  besthoeveelheid: BigFloat
  isovaluta: String
}

"""A `VooradenIndex` edge in the connection."""
type VooradenIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `VooradenIndex` at the end of the edge."""
  node: VooradenIndex!
}

"""Methods to use when ordering `VooradenIndex`."""
enum VooradenIndicesOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  VOORRAAD_ASC
  VOORRAAD_DESC
  GERESERVEERD_ASC
  GERESERVEERD_DESC
  ASSEMBLAF_ASC
  ASSEMBLAF_DESC
  VRIJ_ASC
  VRIJ_DESC
  INKOPEN_ASC
  INKOPEN_DESC
  MINVOORRAAD_ASC
  MINVOORRAAD_DESC
  MAXVOORRAAD_ASC
  MAXVOORRAAD_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  BESTCODE_ASC
  BESTCODE_DESC
  INKOOPPRIJS_ASC
  INKOOPPRIJS_DESC
  BESTHOEVEELHEID_ASC
  BESTHOEVEELHEID_DESC
  ISOVALUTA_ASC
  ISOVALUTA_DESC
}

"""
A condition to be used against `VooradenIndex` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input VooradenIndexCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `voorraad` field."""
  voorraad: BigFloat

  """Checks for equality with the object’s `gereserveerd` field."""
  gereserveerd: BigFloat

  """Checks for equality with the object’s `assemblaf` field."""
  assemblaf: BigFloat

  """Checks for equality with the object’s `vrij` field."""
  vrij: BigFloat

  """Checks for equality with the object’s `inkopen` field."""
  inkopen: BigFloat

  """Checks for equality with the object’s `minvoorraad` field."""
  minvoorraad: BigFloat

  """Checks for equality with the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloat

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `bestcode` field."""
  bestcode: String

  """Checks for equality with the object’s `inkoopprijs` field."""
  inkoopprijs: BigFloat

  """Checks for equality with the object’s `besthoeveelheid` field."""
  besthoeveelheid: BigFloat

  """Checks for equality with the object’s `isovaluta` field."""
  isovaluta: String
}

"""
A filter to be used against `VooradenIndex` object types. All fields are combined with a logical ‘and.’
"""
input VooradenIndexFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `voorraad` field."""
  voorraad: BigFloatFilter

  """Filter by the object’s `gereserveerd` field."""
  gereserveerd: BigFloatFilter

  """Filter by the object’s `assemblaf` field."""
  assemblaf: BigFloatFilter

  """Filter by the object’s `vrij` field."""
  vrij: BigFloatFilter

  """Filter by the object’s `inkopen` field."""
  inkopen: BigFloatFilter

  """Filter by the object’s `minvoorraad` field."""
  minvoorraad: BigFloatFilter

  """Filter by the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloatFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `bestcode` field."""
  bestcode: StringFilter

  """Filter by the object’s `inkoopprijs` field."""
  inkoopprijs: BigFloatFilter

  """Filter by the object’s `besthoeveelheid` field."""
  besthoeveelheid: BigFloatFilter

  """Filter by the object’s `isovaluta` field."""
  isovaluta: StringFilter

  """Checks for all expressions in this list."""
  and: [VooradenIndexFilter!]

  """Checks for any expressions in this list."""
  or: [VooradenIndexFilter!]

  """Negates the expression."""
  not: VooradenIndexFilter
}

"""A connection to a list of `Voorraden` values."""
type VoorradensConnection {
  """A list of `Voorraden` objects."""
  nodes: [Voorraden!]!

  """
  A list of edges which contains the `Voorraden` and cursor to aid in pagination.
  """
  edges: [VoorradensEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Voorraden` you could get from the connection."""
  totalCount: Int!
}

type Voorraden implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  cdartikel: String!
  cdmagazijn: String!
  locatie: String
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  voorraad: BigFloat
  leveren: BigFloat
  geleverd: BigFloat
  besteld: BigFloat
  inkopen: BigFloat
  gereserveerd: BigFloat
  assemblbij: BigFloat
  assemblaf: BigFloat
}

"""A `Voorraden` edge in the connection."""
type VoorradensEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Voorraden` at the end of the edge."""
  node: Voorraden!
}

"""Methods to use when ordering `Voorraden`."""
enum VoorradensOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  LOCATIE_ASC
  LOCATIE_DESC
  MINVOORRAAD_ASC
  MINVOORRAAD_DESC
  MAXVOORRAAD_ASC
  MAXVOORRAAD_DESC
  VOORRAAD_ASC
  VOORRAAD_DESC
  LEVEREN_ASC
  LEVEREN_DESC
  GELEVERD_ASC
  GELEVERD_DESC
  BESTELD_ASC
  BESTELD_DESC
  INKOPEN_ASC
  INKOPEN_DESC
  GERESERVEERD_ASC
  GERESERVEERD_DESC
  ASSEMBLBIJ_ASC
  ASSEMBLBIJ_DESC
  ASSEMBLAF_ASC
  ASSEMBLAF_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Voorraden` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input VoorradenCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `locatie` field."""
  locatie: String

  """Checks for equality with the object’s `minvoorraad` field."""
  minvoorraad: BigFloat

  """Checks for equality with the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloat

  """Checks for equality with the object’s `voorraad` field."""
  voorraad: BigFloat

  """Checks for equality with the object’s `leveren` field."""
  leveren: BigFloat

  """Checks for equality with the object’s `geleverd` field."""
  geleverd: BigFloat

  """Checks for equality with the object’s `besteld` field."""
  besteld: BigFloat

  """Checks for equality with the object’s `inkopen` field."""
  inkopen: BigFloat

  """Checks for equality with the object’s `gereserveerd` field."""
  gereserveerd: BigFloat

  """Checks for equality with the object’s `assemblbij` field."""
  assemblbij: BigFloat

  """Checks for equality with the object’s `assemblaf` field."""
  assemblaf: BigFloat
}

"""
A filter to be used against `Voorraden` object types. All fields are combined with a logical ‘and.’
"""
input VoorradenFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `locatie` field."""
  locatie: StringFilter

  """Filter by the object’s `minvoorraad` field."""
  minvoorraad: BigFloatFilter

  """Filter by the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloatFilter

  """Filter by the object’s `voorraad` field."""
  voorraad: BigFloatFilter

  """Filter by the object’s `leveren` field."""
  leveren: BigFloatFilter

  """Filter by the object’s `geleverd` field."""
  geleverd: BigFloatFilter

  """Filter by the object’s `besteld` field."""
  besteld: BigFloatFilter

  """Filter by the object’s `inkopen` field."""
  inkopen: BigFloatFilter

  """Filter by the object’s `gereserveerd` field."""
  gereserveerd: BigFloatFilter

  """Filter by the object’s `assemblbij` field."""
  assemblbij: BigFloatFilter

  """Filter by the object’s `assemblaf` field."""
  assemblaf: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [VoorradenFilter!]

  """Checks for any expressions in this list."""
  or: [VoorradenFilter!]

  """Negates the expression."""
  not: VoorradenFilter
}

"""A connection to a list of `VoorradenLog` values."""
type VoorradenLogsConnection {
  """A list of `VoorradenLog` objects."""
  nodes: [VoorradenLog!]!

  """
  A list of edges which contains the `VoorradenLog` and cursor to aid in pagination.
  """
  edges: [VoorradenLogsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `VoorradenLog` you could get from the connection."""
  totalCount: Int!
}

type VoorradenLog implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  created: Datetime
  operation: String
  new: JSON
  old: JSON
}

"""A `VoorradenLog` edge in the connection."""
type VoorradenLogsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `VoorradenLog` at the end of the edge."""
  node: VoorradenLog!
}

"""Methods to use when ordering `VoorradenLog`."""
enum VoorradenLogsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_ASC
  CREATED_DESC
  OPERATION_ASC
  OPERATION_DESC
  NEW_ASC
  NEW_DESC
  OLD_ASC
  OLD_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `VoorradenLog` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input VoorradenLogCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `operation` field."""
  operation: String

  """Checks for equality with the object’s `new` field."""
  new: JSON

  """Checks for equality with the object’s `old` field."""
  old: JSON
}

"""
A filter to be used against `VoorradenLog` object types. All fields are combined with a logical ‘and.’
"""
input VoorradenLogFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `operation` field."""
  operation: StringFilter

  """Filter by the object’s `new` field."""
  new: JSONFilter

  """Filter by the object’s `old` field."""
  old: JSONFilter

  """Checks for all expressions in this list."""
  and: [VoorradenLogFilter!]

  """Checks for any expressions in this list."""
  or: [VoorradenLogFilter!]

  """Negates the expression."""
  not: VoorradenLogFilter
}

"""A connection to a list of `VoorradenLogsIndex` values."""
type VoorradenLogsIndicesConnection {
  """A list of `VoorradenLogsIndex` objects."""
  nodes: [VoorradenLogsIndex!]!

  """
  A list of edges which contains the `VoorradenLogsIndex` and cursor to aid in pagination.
  """
  edges: [VoorradenLogsIndicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `VoorradenLogsIndex` you could get from the connection.
  """
  totalCount: Int!
}

type VoorradenLogsIndex {
  id: Int
  created: Date
  cdartikel: String
  zoeknaam: String
  omschr: String
  key: String
  old: String
  new: String
}

"""A `VoorradenLogsIndex` edge in the connection."""
type VoorradenLogsIndicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `VoorradenLogsIndex` at the end of the edge."""
  node: VoorradenLogsIndex!
}

"""Methods to use when ordering `VoorradenLogsIndex`."""
enum VoorradenLogsIndicesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_ASC
  CREATED_DESC
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  ZOEKNAAM_ASC
  ZOEKNAAM_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  KEY_ASC
  KEY_DESC
  OLD_ASC
  OLD_DESC
  NEW_ASC
  NEW_DESC
}

"""
A condition to be used against `VoorradenLogsIndex` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input VoorradenLogsIndexCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `created` field."""
  created: Date

  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `zoeknaam` field."""
  zoeknaam: String

  """Checks for equality with the object’s `omschr` field."""
  omschr: String

  """Checks for equality with the object’s `key` field."""
  key: String

  """Checks for equality with the object’s `old` field."""
  old: String

  """Checks for equality with the object’s `new` field."""
  new: String
}

"""
A filter to be used against `VoorradenLogsIndex` object types. All fields are combined with a logical ‘and.’
"""
input VoorradenLogsIndexFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `created` field."""
  created: DateFilter

  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `zoeknaam` field."""
  zoeknaam: StringFilter

  """Filter by the object’s `omschr` field."""
  omschr: StringFilter

  """Filter by the object’s `key` field."""
  key: StringFilter

  """Filter by the object’s `old` field."""
  old: StringFilter

  """Filter by the object’s `new` field."""
  new: StringFilter

  """Checks for all expressions in this list."""
  and: [VoorradenLogsIndexFilter!]

  """Checks for any expressions in this list."""
  or: [VoorradenLogsIndexFilter!]

  """Negates the expression."""
  not: VoorradenLogsIndexFilter
}

"""A connection to a list of `VoorradenMv` values."""
type VoorradenMvsConnection {
  """A list of `VoorradenMv` objects."""
  nodes: [VoorradenMv!]!

  """
  A list of edges which contains the `VoorradenMv` and cursor to aid in pagination.
  """
  edges: [VoorradenMvsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `VoorradenMv` you could get from the connection."""
  totalCount: Int!
}

type VoorradenMv {
  cdartikel: String
  cdmagazijn: String
  locatie: String
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  voorraad: BigFloat
  leveren: BigFloat
  geleverd: BigFloat
  besteld: BigFloat
  inkopen: BigFloat
  gereserveerd: BigFloat
  assemblbij: BigFloat
  assemblaf: BigFloat
}

"""A `VoorradenMv` edge in the connection."""
type VoorradenMvsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `VoorradenMv` at the end of the edge."""
  node: VoorradenMv!
}

"""Methods to use when ordering `VoorradenMv`."""
enum VoorradenMvsOrderBy {
  NATURAL
  CDARTIKEL_ASC
  CDARTIKEL_DESC
  CDMAGAZIJN_ASC
  CDMAGAZIJN_DESC
  LOCATIE_ASC
  LOCATIE_DESC
  MINVOORRAAD_ASC
  MINVOORRAAD_DESC
  MAXVOORRAAD_ASC
  MAXVOORRAAD_DESC
  VOORRAAD_ASC
  VOORRAAD_DESC
  LEVEREN_ASC
  LEVEREN_DESC
  GELEVERD_ASC
  GELEVERD_DESC
  BESTELD_ASC
  BESTELD_DESC
  INKOPEN_ASC
  INKOPEN_DESC
  GERESERVEERD_ASC
  GERESERVEERD_DESC
  ASSEMBLBIJ_ASC
  ASSEMBLBIJ_DESC
  ASSEMBLAF_ASC
  ASSEMBLAF_DESC
}

"""
A condition to be used against `VoorradenMv` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input VoorradenMvCondition {
  """Checks for equality with the object’s `cdartikel` field."""
  cdartikel: String

  """Checks for equality with the object’s `cdmagazijn` field."""
  cdmagazijn: String

  """Checks for equality with the object’s `locatie` field."""
  locatie: String

  """Checks for equality with the object’s `minvoorraad` field."""
  minvoorraad: BigFloat

  """Checks for equality with the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloat

  """Checks for equality with the object’s `voorraad` field."""
  voorraad: BigFloat

  """Checks for equality with the object’s `leveren` field."""
  leveren: BigFloat

  """Checks for equality with the object’s `geleverd` field."""
  geleverd: BigFloat

  """Checks for equality with the object’s `besteld` field."""
  besteld: BigFloat

  """Checks for equality with the object’s `inkopen` field."""
  inkopen: BigFloat

  """Checks for equality with the object’s `gereserveerd` field."""
  gereserveerd: BigFloat

  """Checks for equality with the object’s `assemblbij` field."""
  assemblbij: BigFloat

  """Checks for equality with the object’s `assemblaf` field."""
  assemblaf: BigFloat
}

"""
A filter to be used against `VoorradenMv` object types. All fields are combined with a logical ‘and.’
"""
input VoorradenMvFilter {
  """Filter by the object’s `cdartikel` field."""
  cdartikel: StringFilter

  """Filter by the object’s `cdmagazijn` field."""
  cdmagazijn: StringFilter

  """Filter by the object’s `locatie` field."""
  locatie: StringFilter

  """Filter by the object’s `minvoorraad` field."""
  minvoorraad: BigFloatFilter

  """Filter by the object’s `maxvoorraad` field."""
  maxvoorraad: BigFloatFilter

  """Filter by the object’s `voorraad` field."""
  voorraad: BigFloatFilter

  """Filter by the object’s `leveren` field."""
  leveren: BigFloatFilter

  """Filter by the object’s `geleverd` field."""
  geleverd: BigFloatFilter

  """Filter by the object’s `besteld` field."""
  besteld: BigFloatFilter

  """Filter by the object’s `inkopen` field."""
  inkopen: BigFloatFilter

  """Filter by the object’s `gereserveerd` field."""
  gereserveerd: BigFloatFilter

  """Filter by the object’s `assemblbij` field."""
  assemblbij: BigFloatFilter

  """Filter by the object’s `assemblaf` field."""
  assemblaf: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [VoorradenMvFilter!]

  """Checks for any expressions in this list."""
  or: [VoorradenMvFilter!]

  """Negates the expression."""
  not: VoorradenMvFilter
}

"""A connection to a list of `WeeklyHoursWeekTotal` values."""
type WeeklyHoursWeekTotalsConnection {
  """A list of `WeeklyHoursWeekTotal` objects."""
  nodes: [WeeklyHoursWeekTotal!]!

  """
  A list of edges which contains the `WeeklyHoursWeekTotal` and cursor to aid in pagination.
  """
  edges: [WeeklyHoursWeekTotalsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `WeeklyHoursWeekTotal` you could get from the connection.
  """
  totalCount: Int!
}

type WeeklyHoursWeekTotal {
  userId: Int
  yearWeek: String
  year: String
  week: String
  total: Int
  worked: Int
  absent: Int
  target: Int
  holidaySpent: Int
  spareHourSpent: Int
  compensationSpent: Int
  office: BigInt
  compensation: Int
}

"""A `WeeklyHoursWeekTotal` edge in the connection."""
type WeeklyHoursWeekTotalsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `WeeklyHoursWeekTotal` at the end of the edge."""
  node: WeeklyHoursWeekTotal!
}

"""Methods to use when ordering `WeeklyHoursWeekTotal`."""
enum WeeklyHoursWeekTotalsOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
  YEAR_WEEK_ASC
  YEAR_WEEK_DESC
  YEAR_ASC
  YEAR_DESC
  WEEK_ASC
  WEEK_DESC
  TOTAL_ASC
  TOTAL_DESC
  WORKED_ASC
  WORKED_DESC
  ABSENT_ASC
  ABSENT_DESC
  TARGET_ASC
  TARGET_DESC
  HOLIDAY_SPENT_ASC
  HOLIDAY_SPENT_DESC
  SPARE_HOUR_SPENT_ASC
  SPARE_HOUR_SPENT_DESC
  COMPENSATION_SPENT_ASC
  COMPENSATION_SPENT_DESC
  OFFICE_ASC
  OFFICE_DESC
  COMPENSATION_ASC
  COMPENSATION_DESC
}

"""
A condition to be used against `WeeklyHoursWeekTotal` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input WeeklyHoursWeekTotalCondition {
  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `yearWeek` field."""
  yearWeek: String

  """Checks for equality with the object’s `year` field."""
  year: String

  """Checks for equality with the object’s `week` field."""
  week: String

  """Checks for equality with the object’s `total` field."""
  total: Int

  """Checks for equality with the object’s `worked` field."""
  worked: Int

  """Checks for equality with the object’s `absent` field."""
  absent: Int

  """Checks for equality with the object’s `target` field."""
  target: Int

  """Checks for equality with the object’s `holidaySpent` field."""
  holidaySpent: Int

  """Checks for equality with the object’s `spareHourSpent` field."""
  spareHourSpent: Int

  """Checks for equality with the object’s `compensationSpent` field."""
  compensationSpent: Int

  """Checks for equality with the object’s `office` field."""
  office: BigInt

  """Checks for equality with the object’s `compensation` field."""
  compensation: Int
}

"""
A filter to be used against `WeeklyHoursWeekTotal` object types. All fields are combined with a logical ‘and.’
"""
input WeeklyHoursWeekTotalFilter {
  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `yearWeek` field."""
  yearWeek: StringFilter

  """Filter by the object’s `year` field."""
  year: StringFilter

  """Filter by the object’s `week` field."""
  week: StringFilter

  """Filter by the object’s `total` field."""
  total: IntFilter

  """Filter by the object’s `worked` field."""
  worked: IntFilter

  """Filter by the object’s `absent` field."""
  absent: IntFilter

  """Filter by the object’s `target` field."""
  target: IntFilter

  """Filter by the object’s `holidaySpent` field."""
  holidaySpent: IntFilter

  """Filter by the object’s `spareHourSpent` field."""
  spareHourSpent: IntFilter

  """Filter by the object’s `compensationSpent` field."""
  compensationSpent: IntFilter

  """Filter by the object’s `office` field."""
  office: BigIntFilter

  """Filter by the object’s `compensation` field."""
  compensation: IntFilter

  """Checks for all expressions in this list."""
  and: [WeeklyHoursWeekTotalFilter!]

  """Checks for any expressions in this list."""
  or: [WeeklyHoursWeekTotalFilter!]

  """Negates the expression."""
  not: WeeklyHoursWeekTotalFilter
}

type _Adre implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  adrestype: String!
  adresGuid: String!
  cdadres: Int
  cdland: String
  cdpersoon: String
  cdrelatie: Int
  cdtaal: String
  email: String
  homepage: String
  naam: String
  naamstraat: String
  persoon: String
  postcode: String
  straat: String
  telefax: String
  telefoon: String
  telefoonmobiel: String
  woonplaats: String
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `AspNetRoleClaim`."""
  createAspNetRoleClaim(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAspNetRoleClaimInput!
  ): CreateAspNetRoleClaimPayload

  """Creates a single `AspNetRole`."""
  createAspNetRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAspNetRoleInput!
  ): CreateAspNetRolePayload

  """Creates a single `AspNetUserClaim`."""
  createAspNetUserClaim(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAspNetUserClaimInput!
  ): CreateAspNetUserClaimPayload

  """Creates a single `AspNetUserLogin`."""
  createAspNetUserLogin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAspNetUserLoginInput!
  ): CreateAspNetUserLoginPayload

  """Creates a single `AspNetUserRole`."""
  createAspNetUserRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAspNetUserRoleInput!
  ): CreateAspNetUserRolePayload

  """Creates a single `AspNetUserToken`."""
  createAspNetUserToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAspNetUserTokenInput!
  ): CreateAspNetUserTokenPayload

  """Creates a single `AspNetUser`."""
  createAspNetUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAspNetUserInput!
  ): CreateAspNetUserPayload

  """Creates a single `RefreshToken`."""
  createRefreshToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRefreshTokenInput!
  ): CreateRefreshTokenPayload

  """Creates a single `_Adre`."""
  createAdre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAdreInput!
  ): CreateAdrePayload

  """Creates a single `_Land`."""
  createLand(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLandInput!
  ): CreateLandPayload

  """Creates a single `Aco`."""
  createAco(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAcoInput!
  ): CreateAcoPayload

  """Creates a single `Action`."""
  createAction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateActionInput!
  ): CreateActionPayload

  """Creates a single `Application`."""
  createApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationInput!
  ): CreateApplicationPayload

  """Creates a single `Area`."""
  createArea(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAreaInput!
  ): CreateAreaPayload

  """Creates a single `Aro`."""
  createAro(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAroInput!
  ): CreateAroPayload

  """Creates a single `ArosAco`."""
  createArosAco(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateArosAcoInput!
  ): CreateArosAcoPayload

  """Creates a single `Artikel`."""
  createArtikel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateArtikelInput!
  ): CreateArtikelPayload

  """Creates a single `ArtikelLog`."""
  createArtikelLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateArtikelLogInput!
  ): CreateArtikelLogPayload

  """Creates a single `Artikelomschr`."""
  createArtikelomschr(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateArtikelomschrInput!
  ): CreateArtikelomschrPayload

  """Creates a single `Assembly`."""
  createAssembly(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAssemblyInput!
  ): CreateAssemblyPayload

  """Creates a single `AssemblyPart`."""
  createAssemblyPart(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAssemblyPartInput!
  ): CreateAssemblyPartPayload

  """Creates a single `AssemblyTypePart`."""
  createAssemblyTypePart(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAssemblyTypePartInput!
  ): CreateAssemblyTypePartPayload

  """Creates a single `AssemblyType`."""
  createAssemblyType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAssemblyTypeInput!
  ): CreateAssemblyTypePayload

  """Creates a single `Building`."""
  createBuilding(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBuildingInput!
  ): CreateBuildingPayload

  """Creates a single `CalGas`."""
  createCalGas(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCalGasInput!
  ): CreateCalGasPayload

  """Creates a single `CatalogGroup`."""
  createCatalogGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCatalogGroupInput!
  ): CreateCatalogGroupPayload

  """Creates a single `CatalogItemFile`."""
  createCatalogItemFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCatalogItemFileInput!
  ): CreateCatalogItemFilePayload

  """Creates a single `CatalogItemRelation`."""
  createCatalogItemRelation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCatalogItemRelationInput!
  ): CreateCatalogItemRelationPayload

  """Creates a single `CatalogItem`."""
  createCatalogItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCatalogItemInput!
  ): CreateCatalogItemPayload

  """Creates a single `CatalogSubGroup`."""
  createCatalogSubGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCatalogSubGroupInput!
  ): CreateCatalogSubGroupPayload

  """Creates a single `ChemicalCompound`."""
  createChemicalCompound(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChemicalCompoundInput!
  ): CreateChemicalCompoundPayload

  """Creates a single `DetectorLocation`."""
  createDetectorLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDetectorLocationInput!
  ): CreateDetectorLocationPayload

  """Creates a single `DetectorOrder`."""
  createDetectorOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDetectorOrderInput!
  ): CreateDetectorOrderPayload

  """Creates a single `DetectorSensorLocation`."""
  createDetectorSensorLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDetectorSensorLocationInput!
  ): CreateDetectorSensorLocationPayload

  """Creates a single `DetectorSensorType`."""
  createDetectorSensorType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDetectorSensorTypeInput!
  ): CreateDetectorSensorTypePayload

  """Creates a single `DetectorSensor`."""
  createDetectorSensor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDetectorSensorInput!
  ): CreateDetectorSensorPayload

  """Creates a single `DetectorType`."""
  createDetectorType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDetectorTypeInput!
  ): CreateDetectorTypePayload

  """Creates a single `Detector`."""
  createDetector(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDetectorInput!
  ): CreateDetectorPayload

  """Creates a single `DpCard`."""
  createDpCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDpCardInput!
  ): CreateDpCardPayload

  """Creates a single `Electrolyte`."""
  createElectrolyte(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateElectrolyteInput!
  ): CreateElectrolytePayload

  """Creates a single `EndUser`."""
  createEndUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEndUserInput!
  ): CreateEndUserPayload

  """Creates a single `FactopdrachtArtikelExclusion`."""
  createFactopdrachtArtikelExclusion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFactopdrachtArtikelExclusionInput!
  ): CreateFactopdrachtArtikelExclusionPayload

  """Creates a single `FactopdrachtregelLineDate`."""
  createFactopdrachtregelLineDate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFactopdrachtregelLineDateInput!
  ): CreateFactopdrachtregelLineDatePayload

  """Creates a single `FactopdrachtregelLineRemark`."""
  createFactopdrachtregelLineRemark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFactopdrachtregelLineRemarkInput!
  ): CreateFactopdrachtregelLineRemarkPayload

  """Creates a single `FactopdrachtregelLineWeek`."""
  createFactopdrachtregelLineWeek(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFactopdrachtregelLineWeekInput!
  ): CreateFactopdrachtregelLineWeekPayload

  """Creates a single `FactopdrachtregelLine`."""
  createFactopdrachtregelLine(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFactopdrachtregelLineInput!
  ): CreateFactopdrachtregelLinePayload

  """Creates a single `Factuur`."""
  createFactuur(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFactuurInput!
  ): CreateFactuurPayload

  """Creates a single `Filter`."""
  createFilter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFilterInput!
  ): CreateFilterPayload

  """Creates a single `Floor`."""
  createFloor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFloorInput!
  ): CreateFloorPayload

  """Creates a single `Gas`."""
  createGas(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGasInput!
  ): CreateGasPayload

  """Creates a single `GroupPermission`."""
  createGroupPermission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupPermissionInput!
  ): CreateGroupPermissionPayload

  """Creates a single `GroupRight`."""
  createGroupRight(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupRightInput!
  ): CreateGroupRightPayload

  """Creates a single `Hardware`."""
  createHardware(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHardwareInput!
  ): CreateHardwarePayload

  """Creates a single `IncomingDocument`."""
  createIncomingDocument(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateIncomingDocumentInput!
  ): CreateIncomingDocumentPayload

  """Creates a single `Inkoopgegeven`."""
  createInkoopgegeven(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateInkoopgegevenInput!
  ): CreateInkoopgegevenPayload

  """Creates a single `InkoopgegevensLog`."""
  createInkoopgegevensLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateInkoopgegevensLogInput!
  ): CreateInkoopgegevensLogPayload

  """Creates a single `InkooporderregelLine`."""
  createInkooporderregelLine(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateInkooporderregelLineInput!
  ): CreateInkooporderregelLinePayload

  """Creates a single `Item`."""
  createItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateItemInput!
  ): CreateItemPayload

  """Creates a single `Job`."""
  createJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateJobInput!
  ): CreateJobPayload

  """Creates a single `JunctionBox`."""
  createJunctionBox(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateJunctionBoxInput!
  ): CreateJunctionBoxPayload

  """Creates a single `Lead`."""
  createLead(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLeadInput!
  ): CreateLeadPayload

  """Creates a single `LicenseCustomer`."""
  createLicenseCustomer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLicenseCustomerInput!
  ): CreateLicenseCustomerPayload

  """Creates a single `LicenseModule`."""
  createLicenseModule(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLicenseModuleInput!
  ): CreateLicenseModulePayload

  """Creates a single `LicenseOrder`."""
  createLicenseOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLicenseOrderInput!
  ): CreateLicenseOrderPayload

  """Creates a single `LicenseRegistration`."""
  createLicenseRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLicenseRegistrationInput!
  ): CreateLicenseRegistrationPayload

  """Creates a single `License`."""
  createLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLicenseInput!
  ): CreateLicensePayload

  """Creates a single `MaintenanceVisitLine`."""
  createMaintenanceVisitLine(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMaintenanceVisitLineInput!
  ): CreateMaintenanceVisitLinePayload

  """Creates a single `MaintenanceVisitRemark`."""
  createMaintenanceVisitRemark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMaintenanceVisitRemarkInput!
  ): CreateMaintenanceVisitRemarkPayload

  """Creates a single `MaintenanceVisit`."""
  createMaintenanceVisit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMaintenanceVisitInput!
  ): CreateMaintenanceVisitPayload

  """Creates a single `Membrane`."""
  createMembrane(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMembraneInput!
  ): CreateMembranePayload

  """Creates a single `ORing`."""
  createORing(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateORingInput!
  ): CreateORingPayload

  """Creates a single `OfferteRemark`."""
  createOfferteRemark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOfferteRemarkInput!
  ): CreateOfferteRemarkPayload

  """Creates a single `Opportunity`."""
  createOpportunity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOpportunityInput!
  ): CreateOpportunityPayload

  """Creates a single `Permission`."""
  createPermission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePermissionInput!
  ): CreatePermissionPayload

  """Creates a single `PersoonRol`."""
  createPersoonRol(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePersoonRolInput!
  ): CreatePersoonRolPayload

  """Creates a single `Plug`."""
  createPlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePlugInput!
  ): CreatePlugPayload

  """Creates a single `Principle`."""
  createPrinciple(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePrincipleInput!
  ): CreatePrinciplePayload

  """Creates a single `Production`."""
  createProduction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProductionInput!
  ): CreateProductionPayload

  """Creates a single `Pyrolyser`."""
  createPyrolyser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePyrolyserInput!
  ): CreatePyrolyserPayload

  """Creates a single `Range`."""
  createRange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRangeInput!
  ): CreateRangePayload

  """Creates a single `RcCard`."""
  createRcCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRcCardInput!
  ): CreateRcCardPayload

  """Creates a single `AnotherRefreshToken`."""
  createAnotherRefreshToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAnotherRefreshTokenInput!
  ): CreateAnotherRefreshTokenPayload

  """Creates a single `ReportDetector`."""
  createReportDetector(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReportDetectorInput!
  ): CreateReportDetectorPayload

  """Creates a single `ReportItem`."""
  createReportItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReportItemInput!
  ): CreateReportItemPayload

  """Creates a single `ReportSensor`."""
  createReportSensor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReportSensorInput!
  ): CreateReportSensorPayload

  """Creates a single `Report`."""
  createReport(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReportInput!
  ): CreateReportPayload

  """Creates a single `Request`."""
  createRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRequestInput!
  ): CreateRequestPayload

  """Creates a single `RxCard`."""
  createRxCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRxCardInput!
  ): CreateRxCardPayload

  """Creates a single `SamplePoint`."""
  createSamplePoint(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSamplePointInput!
  ): CreateSamplePointPayload

  """Creates a single `SensorBaseType`."""
  createSensorBaseType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSensorBaseTypeInput!
  ): CreateSensorBaseTypePayload

  """Creates a single `SensorElementLocation`."""
  createSensorElementLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSensorElementLocationInput!
  ): CreateSensorElementLocationPayload

  """Creates a single `SensorElementLog`."""
  createSensorElementLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSensorElementLogInput!
  ): CreateSensorElementLogPayload

  """Creates a single `SensorElementType`."""
  createSensorElementType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSensorElementTypeInput!
  ): CreateSensorElementTypePayload

  """Creates a single `SensorElement`."""
  createSensorElement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSensorElementInput!
  ): CreateSensorElementPayload

  """Creates a single `SensorOrder`."""
  createSensorOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSensorOrderInput!
  ): CreateSensorOrderPayload

  """Creates a single `SensorSensorElement`."""
  createSensorSensorElement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSensorSensorElementInput!
  ): CreateSensorSensorElementPayload

  """Creates a single `SensorSetting`."""
  createSensorSetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSensorSettingInput!
  ): CreateSensorSettingPayload

  """Creates a single `SensorTestResult`."""
  createSensorTestResult(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSensorTestResultInput!
  ): CreateSensorTestResultPayload

  """Creates a single `SensorType`."""
  createSensorType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSensorTypeInput!
  ): CreateSensorTypePayload

  """Creates a single `Software`."""
  createSoftware(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSoftwareInput!
  ): CreateSoftwarePayload

  """Creates a single `StockGroup`."""
  createStockGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateStockGroupInput!
  ): CreateStockGroupPayload

  """Creates a single `StockItem`."""
  createStockItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateStockItemInput!
  ): CreateStockItemPayload

  """Creates a single `StockSupplier`."""
  createStockSupplier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateStockSupplierInput!
  ): CreateStockSupplierPayload

  """Creates a single `Task`."""
  createTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTaskInput!
  ): CreateTaskPayload

  """Creates a single `TempFactopdrachtregel`."""
  createTempFactopdrachtregel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTempFactopdrachtregelInput!
  ): CreateTempFactopdrachtregelPayload

  """Creates a single `TempLicense`."""
  createTempLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTempLicenseInput!
  ): CreateTempLicensePayload

  """Creates a single `TempRegistrationHistory`."""
  createTempRegistrationHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTempRegistrationHistoryInput!
  ): CreateTempRegistrationHistoryPayload

  """Creates a single `TempRegistration`."""
  createTempRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTempRegistrationInput!
  ): CreateTempRegistrationPayload

  """Creates a single `TempRegistrations2`."""
  createTempRegistrations2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTempRegistrations2Input!
  ): CreateTempRegistrations2Payload

  """Creates a single `Test`."""
  createTest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTestInput!
  ): CreateTestPayload

  """Creates a single `UserRight`."""
  createUserRight(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserRightInput!
  ): CreateUserRightPayload

  """Creates a single `UserTask`."""
  createUserTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserTaskInput!
  ): CreateUserTaskPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Creates a single `Voorraden`."""
  createVoorraden(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateVoorradenInput!
  ): CreateVoorradenPayload

  """Creates a single `VoorradenLog`."""
  createVoorradenLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateVoorradenLogInput!
  ): CreateVoorradenLogPayload

  """Creates a single `WeeklyHourRemark`."""
  createWeeklyHourRemark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateWeeklyHourRemarkInput!
  ): CreateWeeklyHourRemarkPayload

  """Creates a single `WeeklyHour`."""
  createWeeklyHour(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateWeeklyHourInput!
  ): CreateWeeklyHourPayload

  """
  Updates a single `AspNetRoleClaim` using its globally unique id and a patch.
  """
  updateAspNetRoleClaim(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAspNetRoleClaimInput!
  ): UpdateAspNetRoleClaimPayload

  """Updates a single `AspNetRoleClaim` using a unique key and a patch."""
  updateAspNetRoleClaimById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAspNetRoleClaimByIdInput!
  ): UpdateAspNetRoleClaimPayload

  """
  Updates a single `AspNetRole` using its globally unique id and a patch.
  """
  updateAspNetRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAspNetRoleInput!
  ): UpdateAspNetRolePayload

  """Updates a single `AspNetRole` using a unique key and a patch."""
  updateAspNetRoleById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAspNetRoleByIdInput!
  ): UpdateAspNetRolePayload

  """
  Updates a single `AspNetUserClaim` using its globally unique id and a patch.
  """
  updateAspNetUserClaim(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAspNetUserClaimInput!
  ): UpdateAspNetUserClaimPayload

  """Updates a single `AspNetUserClaim` using a unique key and a patch."""
  updateAspNetUserClaimById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAspNetUserClaimByIdInput!
  ): UpdateAspNetUserClaimPayload

  """
  Updates a single `AspNetUserLogin` using its globally unique id and a patch.
  """
  updateAspNetUserLogin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAspNetUserLoginInput!
  ): UpdateAspNetUserLoginPayload

  """Updates a single `AspNetUserLogin` using a unique key and a patch."""
  updateAspNetUserLoginByLoginProviderAndProviderKey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAspNetUserLoginByLoginProviderAndProviderKeyInput!
  ): UpdateAspNetUserLoginPayload

  """
  Updates a single `AspNetUserRole` using its globally unique id and a patch.
  """
  updateAspNetUserRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAspNetUserRoleInput!
  ): UpdateAspNetUserRolePayload

  """Updates a single `AspNetUserRole` using a unique key and a patch."""
  updateAspNetUserRoleByUserIdAndRoleId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAspNetUserRoleByUserIdAndRoleIdInput!
  ): UpdateAspNetUserRolePayload

  """
  Updates a single `AspNetUserToken` using its globally unique id and a patch.
  """
  updateAspNetUserToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAspNetUserTokenInput!
  ): UpdateAspNetUserTokenPayload

  """Updates a single `AspNetUserToken` using a unique key and a patch."""
  updateAspNetUserTokenByUserIdAndLoginProviderAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAspNetUserTokenByUserIdAndLoginProviderAndNameInput!
  ): UpdateAspNetUserTokenPayload

  """
  Updates a single `AspNetUser` using its globally unique id and a patch.
  """
  updateAspNetUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAspNetUserInput!
  ): UpdateAspNetUserPayload

  """Updates a single `AspNetUser` using a unique key and a patch."""
  updateAspNetUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAspNetUserByIdInput!
  ): UpdateAspNetUserPayload

  """
  Updates a single `RefreshToken` using its globally unique id and a patch.
  """
  updateRefreshToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRefreshTokenInput!
  ): UpdateRefreshTokenPayload

  """Updates a single `RefreshToken` using a unique key and a patch."""
  updateRefreshTokenById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRefreshTokenByIdInput!
  ): UpdateRefreshTokenPayload

  """Updates a single `_Adre` using its globally unique id and a patch."""
  updateAdre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAdreInput!
  ): UpdateAdrePayload

  """Updates a single `_Adre` using a unique key and a patch."""
  updateAdreByAdresGuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAdreByAdresGuidInput!
  ): UpdateAdrePayload

  """Updates a single `_Land` using its globally unique id and a patch."""
  updateLand(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLandInput!
  ): UpdateLandPayload

  """Updates a single `_Land` using a unique key and a patch."""
  updateLandByCdland(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLandByCdlandInput!
  ): UpdateLandPayload

  """Updates a single `Aco` using its globally unique id and a patch."""
  updateAco(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAcoInput!
  ): UpdateAcoPayload

  """Updates a single `Aco` using a unique key and a patch."""
  updateAcoById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAcoByIdInput!
  ): UpdateAcoPayload

  """Updates a single `Action` using its globally unique id and a patch."""
  updateAction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActionInput!
  ): UpdateActionPayload

  """Updates a single `Action` using a unique key and a patch."""
  updateActionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActionByIdInput!
  ): UpdateActionPayload

  """
  Updates a single `Application` using its globally unique id and a patch.
  """
  updateApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationInput!
  ): UpdateApplicationPayload

  """Updates a single `Application` using a unique key and a patch."""
  updateApplicationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationByIdInput!
  ): UpdateApplicationPayload

  """Updates a single `Application` using a unique key and a patch."""
  updateApplicationByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationByNameInput!
  ): UpdateApplicationPayload

  """Updates a single `Area` using its globally unique id and a patch."""
  updateArea(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAreaInput!
  ): UpdateAreaPayload

  """Updates a single `Area` using a unique key and a patch."""
  updateAreaById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAreaByIdInput!
  ): UpdateAreaPayload

  """Updates a single `Area` using a unique key and a patch."""
  updateAreaByFloorIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAreaByFloorIdAndNameInput!
  ): UpdateAreaPayload

  """Updates a single `Aro` using its globally unique id and a patch."""
  updateAro(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAroInput!
  ): UpdateAroPayload

  """Updates a single `Aro` using a unique key and a patch."""
  updateAroById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAroByIdInput!
  ): UpdateAroPayload

  """Updates a single `ArosAco` using its globally unique id and a patch."""
  updateArosAco(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateArosAcoInput!
  ): UpdateArosAcoPayload

  """Updates a single `ArosAco` using a unique key and a patch."""
  updateArosAcoById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateArosAcoByIdInput!
  ): UpdateArosAcoPayload

  """Updates a single `Artikel` using its globally unique id and a patch."""
  updateArtikel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateArtikelInput!
  ): UpdateArtikelPayload

  """Updates a single `Artikel` using a unique key and a patch."""
  updateArtikelByCdartikel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateArtikelByCdartikelInput!
  ): UpdateArtikelPayload

  """
  Updates a single `ArtikelLog` using its globally unique id and a patch.
  """
  updateArtikelLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateArtikelLogInput!
  ): UpdateArtikelLogPayload

  """Updates a single `ArtikelLog` using a unique key and a patch."""
  updateArtikelLogById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateArtikelLogByIdInput!
  ): UpdateArtikelLogPayload

  """
  Updates a single `Artikelomschr` using its globally unique id and a patch.
  """
  updateArtikelomschr(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateArtikelomschrInput!
  ): UpdateArtikelomschrPayload

  """Updates a single `Artikelomschr` using a unique key and a patch."""
  updateArtikelomschrByCdartikelAndCdtaal(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateArtikelomschrByCdartikelAndCdtaalInput!
  ): UpdateArtikelomschrPayload

  """Updates a single `Assembly` using its globally unique id and a patch."""
  updateAssembly(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAssemblyInput!
  ): UpdateAssemblyPayload

  """Updates a single `Assembly` using a unique key and a patch."""
  updateAssemblyById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAssemblyByIdInput!
  ): UpdateAssemblyPayload

  """Updates a single `Assembly` using a unique key and a patch."""
  updateAssemblyByCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAssemblyByCodeInput!
  ): UpdateAssemblyPayload

  """
  Updates a single `AssemblyPart` using its globally unique id and a patch.
  """
  updateAssemblyPart(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAssemblyPartInput!
  ): UpdateAssemblyPartPayload

  """Updates a single `AssemblyPart` using a unique key and a patch."""
  updateAssemblyPartById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAssemblyPartByIdInput!
  ): UpdateAssemblyPartPayload

  """Updates a single `AssemblyPart` using a unique key and a patch."""
  updateAssemblyPartByAssemblyIdAndCdartikel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAssemblyPartByAssemblyIdAndCdartikelInput!
  ): UpdateAssemblyPartPayload

  """
  Updates a single `AssemblyTypePart` using its globally unique id and a patch.
  """
  updateAssemblyTypePart(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAssemblyTypePartInput!
  ): UpdateAssemblyTypePartPayload

  """Updates a single `AssemblyTypePart` using a unique key and a patch."""
  updateAssemblyTypePartById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAssemblyTypePartByIdInput!
  ): UpdateAssemblyTypePartPayload

  """Updates a single `AssemblyTypePart` using a unique key and a patch."""
  updateAssemblyTypePartByAssemblyTypeIdAndCdartikel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAssemblyTypePartByAssemblyTypeIdAndCdartikelInput!
  ): UpdateAssemblyTypePartPayload

  """
  Updates a single `AssemblyType` using its globally unique id and a patch.
  """
  updateAssemblyType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAssemblyTypeInput!
  ): UpdateAssemblyTypePayload

  """Updates a single `AssemblyType` using a unique key and a patch."""
  updateAssemblyTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAssemblyTypeByIdInput!
  ): UpdateAssemblyTypePayload

  """Updates a single `Building` using its globally unique id and a patch."""
  updateBuilding(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBuildingInput!
  ): UpdateBuildingPayload

  """Updates a single `Building` using a unique key and a patch."""
  updateBuildingById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBuildingByIdInput!
  ): UpdateBuildingPayload

  """Updates a single `Building` using a unique key and a patch."""
  updateBuildingByEndUserIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBuildingByEndUserIdAndNameInput!
  ): UpdateBuildingPayload

  """Updates a single `CalGas` using its globally unique id and a patch."""
  updateCalGas(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCalGasInput!
  ): UpdateCalGasPayload

  """Updates a single `CalGas` using a unique key and a patch."""
  updateCalGasById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCalGasByIdInput!
  ): UpdateCalGasPayload

  """Updates a single `CalGas` using a unique key and a patch."""
  updateCalGasByConcentrationAndEngineeringUnitsAndGasId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCalGasByConcentrationAndEngineeringUnitsAndGasIdInput!
  ): UpdateCalGasPayload

  """
  Updates a single `CatalogGroup` using its globally unique id and a patch.
  """
  updateCatalogGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCatalogGroupInput!
  ): UpdateCatalogGroupPayload

  """Updates a single `CatalogGroup` using a unique key and a patch."""
  updateCatalogGroupById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCatalogGroupByIdInput!
  ): UpdateCatalogGroupPayload

  """
  Updates a single `CatalogItemFile` using its globally unique id and a patch.
  """
  updateCatalogItemFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCatalogItemFileInput!
  ): UpdateCatalogItemFilePayload

  """Updates a single `CatalogItemFile` using a unique key and a patch."""
  updateCatalogItemFileById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCatalogItemFileByIdInput!
  ): UpdateCatalogItemFilePayload

  """
  Updates a single `CatalogItemRelation` using its globally unique id and a patch.
  """
  updateCatalogItemRelation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCatalogItemRelationInput!
  ): UpdateCatalogItemRelationPayload

  """Updates a single `CatalogItemRelation` using a unique key and a patch."""
  updateCatalogItemRelationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCatalogItemRelationByIdInput!
  ): UpdateCatalogItemRelationPayload

  """
  Updates a single `CatalogItem` using its globally unique id and a patch.
  """
  updateCatalogItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCatalogItemInput!
  ): UpdateCatalogItemPayload

  """Updates a single `CatalogItem` using a unique key and a patch."""
  updateCatalogItemById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCatalogItemByIdInput!
  ): UpdateCatalogItemPayload

  """
  Updates a single `CatalogSubGroup` using its globally unique id and a patch.
  """
  updateCatalogSubGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCatalogSubGroupInput!
  ): UpdateCatalogSubGroupPayload

  """Updates a single `CatalogSubGroup` using a unique key and a patch."""
  updateCatalogSubGroupById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCatalogSubGroupByIdInput!
  ): UpdateCatalogSubGroupPayload

  """
  Updates a single `ChemicalCompound` using its globally unique id and a patch.
  """
  updateChemicalCompound(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChemicalCompoundInput!
  ): UpdateChemicalCompoundPayload

  """Updates a single `ChemicalCompound` using a unique key and a patch."""
  updateChemicalCompoundById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChemicalCompoundByIdInput!
  ): UpdateChemicalCompoundPayload

  """
  Updates a single `DetectorLocation` using its globally unique id and a patch.
  """
  updateDetectorLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorLocationInput!
  ): UpdateDetectorLocationPayload

  """Updates a single `DetectorLocation` using a unique key and a patch."""
  updateDetectorLocationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorLocationByIdInput!
  ): UpdateDetectorLocationPayload

  """Updates a single `DetectorLocation` using a unique key and a patch."""
  updateDetectorLocationByDetectorId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorLocationByDetectorIdInput!
  ): UpdateDetectorLocationPayload

  """
  Updates a single `DetectorOrder` using its globally unique id and a patch.
  """
  updateDetectorOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorOrderInput!
  ): UpdateDetectorOrderPayload

  """Updates a single `DetectorOrder` using a unique key and a patch."""
  updateDetectorOrderById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorOrderByIdInput!
  ): UpdateDetectorOrderPayload

  """Updates a single `DetectorOrder` using a unique key and a patch."""
  updateDetectorOrderByFactuuropdrachtAndDetectorId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorOrderByFactuuropdrachtAndDetectorIdInput!
  ): UpdateDetectorOrderPayload

  """
  Updates a single `DetectorSensorLocation` using its globally unique id and a patch.
  """
  updateDetectorSensorLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorSensorLocationInput!
  ): UpdateDetectorSensorLocationPayload

  """
  Updates a single `DetectorSensorLocation` using a unique key and a patch.
  """
  updateDetectorSensorLocationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorSensorLocationByIdInput!
  ): UpdateDetectorSensorLocationPayload

  """
  Updates a single `DetectorSensorLocation` using a unique key and a patch.
  """
  updateDetectorSensorLocationByDetectorSensorId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorSensorLocationByDetectorSensorIdInput!
  ): UpdateDetectorSensorLocationPayload

  """
  Updates a single `DetectorSensorLocation` using a unique key and a patch.
  """
  updateDetectorSensorLocationByLicenseIdAndSimsChannel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorSensorLocationByLicenseIdAndSimsChannelInput!
  ): UpdateDetectorSensorLocationPayload

  """
  Updates a single `DetectorSensorType` using its globally unique id and a patch.
  """
  updateDetectorSensorType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorSensorTypeInput!
  ): UpdateDetectorSensorTypePayload

  """Updates a single `DetectorSensorType` using a unique key and a patch."""
  updateDetectorSensorTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorSensorTypeByIdInput!
  ): UpdateDetectorSensorTypePayload

  """Updates a single `DetectorSensorType` using a unique key and a patch."""
  updateDetectorSensorTypeByDetectorIdAndDetectorPosition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorSensorTypeByDetectorIdAndDetectorPositionInput!
  ): UpdateDetectorSensorTypePayload

  """
  Updates a single `DetectorSensor` using its globally unique id and a patch.
  """
  updateDetectorSensor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorSensorInput!
  ): UpdateDetectorSensorPayload

  """Updates a single `DetectorSensor` using a unique key and a patch."""
  updateDetectorSensorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorSensorByIdInput!
  ): UpdateDetectorSensorPayload

  """Updates a single `DetectorSensor` using a unique key and a patch."""
  updateDetectorSensorByDetectorIdAndDetectorPosition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorSensorByDetectorIdAndDetectorPositionInput!
  ): UpdateDetectorSensorPayload

  """Updates a single `DetectorSensor` using a unique key and a patch."""
  updateDetectorSensorBySensorId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorSensorBySensorIdInput!
  ): UpdateDetectorSensorPayload

  """
  Updates a single `DetectorType` using its globally unique id and a patch.
  """
  updateDetectorType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorTypeInput!
  ): UpdateDetectorTypePayload

  """Updates a single `DetectorType` using a unique key and a patch."""
  updateDetectorTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorTypeByIdInput!
  ): UpdateDetectorTypePayload

  """Updates a single `DetectorType` using a unique key and a patch."""
  updateDetectorTypeByPrefixAndCodeAndSuffix(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorTypeByPrefixAndCodeAndSuffixInput!
  ): UpdateDetectorTypePayload

  """Updates a single `Detector` using its globally unique id and a patch."""
  updateDetector(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorInput!
  ): UpdateDetectorPayload

  """Updates a single `Detector` using a unique key and a patch."""
  updateDetectorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorByIdInput!
  ): UpdateDetectorPayload

  """Updates a single `Detector` using a unique key and a patch."""
  updateDetectorBySerialNumberAndDetectorTypeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorBySerialNumberAndDetectorTypeIdInput!
  ): UpdateDetectorPayload

  """Updates a single `DpCard` using its globally unique id and a patch."""
  updateDpCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDpCardInput!
  ): UpdateDpCardPayload

  """Updates a single `DpCard` using a unique key and a patch."""
  updateDpCardById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDpCardByIdInput!
  ): UpdateDpCardPayload

  """
  Updates a single `Electrolyte` using its globally unique id and a patch.
  """
  updateElectrolyte(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateElectrolyteInput!
  ): UpdateElectrolytePayload

  """Updates a single `Electrolyte` using a unique key and a patch."""
  updateElectrolyteById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateElectrolyteByIdInput!
  ): UpdateElectrolytePayload

  """Updates a single `Electrolyte` using a unique key and a patch."""
  updateElectrolyteByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateElectrolyteByNameInput!
  ): UpdateElectrolytePayload

  """Updates a single `EndUser` using its globally unique id and a patch."""
  updateEndUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEndUserInput!
  ): UpdateEndUserPayload

  """Updates a single `EndUser` using a unique key and a patch."""
  updateEndUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEndUserByIdInput!
  ): UpdateEndUserPayload

  """Updates a single `EndUser` using a unique key and a patch."""
  updateEndUserByNameAndLocationAndSubLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEndUserByNameAndLocationAndSubLocationInput!
  ): UpdateEndUserPayload

  """
  Updates a single `FactopdrachtArtikelExclusion` using its globally unique id and a patch.
  """
  updateFactopdrachtArtikelExclusion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFactopdrachtArtikelExclusionInput!
  ): UpdateFactopdrachtArtikelExclusionPayload

  """
  Updates a single `FactopdrachtArtikelExclusion` using a unique key and a patch.
  """
  updateFactopdrachtArtikelExclusionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFactopdrachtArtikelExclusionByIdInput!
  ): UpdateFactopdrachtArtikelExclusionPayload

  """
  Updates a single `FactopdrachtArtikelExclusion` using a unique key and a patch.
  """
  updateFactopdrachtArtikelExclusionByFactuuropdrachtAndCdartikel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFactopdrachtArtikelExclusionByFactuuropdrachtAndCdartikelInput!
  ): UpdateFactopdrachtArtikelExclusionPayload

  """
  Updates a single `FactopdrachtregelLineDate` using its globally unique id and a patch.
  """
  updateFactopdrachtregelLineDate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFactopdrachtregelLineDateInput!
  ): UpdateFactopdrachtregelLineDatePayload

  """
  Updates a single `FactopdrachtregelLineDate` using a unique key and a patch.
  """
  updateFactopdrachtregelLineDateById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFactopdrachtregelLineDateByIdInput!
  ): UpdateFactopdrachtregelLineDatePayload

  """
  Updates a single `FactopdrachtregelLineRemark` using its globally unique id and a patch.
  """
  updateFactopdrachtregelLineRemark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFactopdrachtregelLineRemarkInput!
  ): UpdateFactopdrachtregelLineRemarkPayload

  """
  Updates a single `FactopdrachtregelLineRemark` using a unique key and a patch.
  """
  updateFactopdrachtregelLineRemarkById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFactopdrachtregelLineRemarkByIdInput!
  ): UpdateFactopdrachtregelLineRemarkPayload

  """
  Updates a single `FactopdrachtregelLine` using its globally unique id and a patch.
  """
  updateFactopdrachtregelLine(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFactopdrachtregelLineInput!
  ): UpdateFactopdrachtregelLinePayload

  """
  Updates a single `FactopdrachtregelLine` using a unique key and a patch.
  """
  updateFactopdrachtregelLineByFactopdrRglGuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFactopdrachtregelLineByFactopdrRglGuidInput!
  ): UpdateFactopdrachtregelLinePayload

  """
  Updates a single `FactopdrachtregelLine` using a unique key and a patch.
  """
  updateFactopdrachtregelLineById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFactopdrachtregelLineByIdInput!
  ): UpdateFactopdrachtregelLinePayload

  """Updates a single `Factuur` using its globally unique id and a patch."""
  updateFactuur(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFactuurInput!
  ): UpdateFactuurPayload

  """Updates a single `Factuur` using a unique key and a patch."""
  updateFactuurById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFactuurByIdInput!
  ): UpdateFactuurPayload

  """Updates a single `Factuur` using a unique key and a patch."""
  updateFactuurByFactuuropdracht(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFactuurByFactuuropdrachtInput!
  ): UpdateFactuurPayload

  """Updates a single `Filter` using its globally unique id and a patch."""
  updateFilter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFilterInput!
  ): UpdateFilterPayload

  """Updates a single `Filter` using a unique key and a patch."""
  updateFilterById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFilterByIdInput!
  ): UpdateFilterPayload

  """Updates a single `Filter` using a unique key and a patch."""
  updateFilterByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFilterByNameInput!
  ): UpdateFilterPayload

  """Updates a single `Floor` using its globally unique id and a patch."""
  updateFloor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFloorInput!
  ): UpdateFloorPayload

  """Updates a single `Floor` using a unique key and a patch."""
  updateFloorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFloorByIdInput!
  ): UpdateFloorPayload

  """Updates a single `Floor` using a unique key and a patch."""
  updateFloorByBuildingIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFloorByBuildingIdAndNameInput!
  ): UpdateFloorPayload

  """Updates a single `Gas` using its globally unique id and a patch."""
  updateGas(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGasInput!
  ): UpdateGasPayload

  """Updates a single `Gas` using a unique key and a patch."""
  updateGasById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGasByIdInput!
  ): UpdateGasPayload

  """Updates a single `Gas` using a unique key and a patch."""
  updateGasByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGasByNameInput!
  ): UpdateGasPayload

  """
  Updates a single `GroupPermission` using its globally unique id and a patch.
  """
  updateGroupPermission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupPermissionInput!
  ): UpdateGroupPermissionPayload

  """Updates a single `GroupPermission` using a unique key and a patch."""
  updateGroupPermissionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupPermissionByIdInput!
  ): UpdateGroupPermissionPayload

  """Updates a single `GroupPermission` using a unique key and a patch."""
  updateGroupPermissionByGroupId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupPermissionByGroupIdInput!
  ): UpdateGroupPermissionPayload

  """
  Updates a single `GroupRight` using its globally unique id and a patch.
  """
  updateGroupRight(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupRightInput!
  ): UpdateGroupRightPayload

  """Updates a single `GroupRight` using a unique key and a patch."""
  updateGroupRightById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupRightByIdInput!
  ): UpdateGroupRightPayload

  """Updates a single `GroupRight` using a unique key and a patch."""
  updateGroupRightByGroupIdAndPath(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupRightByGroupIdAndPathInput!
  ): UpdateGroupRightPayload

  """Updates a single `Group` using its globally unique id and a patch."""
  updateGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupInput!
  ): UpdateGroupPayload

  """Updates a single `Group` using a unique key and a patch."""
  updateGroupById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupByIdInput!
  ): UpdateGroupPayload

  """Updates a single `Hardware` using its globally unique id and a patch."""
  updateHardware(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHardwareInput!
  ): UpdateHardwarePayload

  """Updates a single `Hardware` using a unique key and a patch."""
  updateHardwareById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHardwareByIdInput!
  ): UpdateHardwarePayload

  """
  Updates a single `IncomingDocument` using its globally unique id and a patch.
  """
  updateIncomingDocument(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIncomingDocumentInput!
  ): UpdateIncomingDocumentPayload

  """Updates a single `IncomingDocument` using a unique key and a patch."""
  updateIncomingDocumentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIncomingDocumentByIdInput!
  ): UpdateIncomingDocumentPayload

  """
  Updates a single `Inkoopgegeven` using its globally unique id and a patch.
  """
  updateInkoopgegeven(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInkoopgegevenInput!
  ): UpdateInkoopgegevenPayload

  """Updates a single `Inkoopgegeven` using a unique key and a patch."""
  updateInkoopgegevenByCdartikelAndInkvolgnr(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInkoopgegevenByCdartikelAndInkvolgnrInput!
  ): UpdateInkoopgegevenPayload

  """
  Updates a single `InkoopgegevensLog` using its globally unique id and a patch.
  """
  updateInkoopgegevensLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInkoopgegevensLogInput!
  ): UpdateInkoopgegevensLogPayload

  """Updates a single `InkoopgegevensLog` using a unique key and a patch."""
  updateInkoopgegevensLogById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInkoopgegevensLogByIdInput!
  ): UpdateInkoopgegevensLogPayload

  """
  Updates a single `InkooporderregelLine` using its globally unique id and a patch.
  """
  updateInkooporderregelLine(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInkooporderregelLineInput!
  ): UpdateInkooporderregelLinePayload

  """
  Updates a single `InkooporderregelLine` using a unique key and a patch.
  """
  updateInkooporderregelLineByInkopdrRglGuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInkooporderregelLineByInkopdrRglGuidInput!
  ): UpdateInkooporderregelLinePayload

  """
  Updates a single `InkooporderregelLine` using a unique key and a patch.
  """
  updateInkooporderregelLineById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInkooporderregelLineByIdInput!
  ): UpdateInkooporderregelLinePayload

  """Updates a single `Item` using its globally unique id and a patch."""
  updateItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemInput!
  ): UpdateItemPayload

  """Updates a single `Item` using a unique key and a patch."""
  updateItemById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemByIdInput!
  ): UpdateItemPayload

  """Updates a single `Item` using a unique key and a patch."""
  updateItemByCdartikelAndSerialNumber(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemByCdartikelAndSerialNumberInput!
  ): UpdateItemPayload

  """Updates a single `Job` using its globally unique id and a patch."""
  updateJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateJobInput!
  ): UpdateJobPayload

  """Updates a single `Job` using a unique key and a patch."""
  updateJobById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateJobByIdInput!
  ): UpdateJobPayload

  """
  Updates a single `JunctionBox` using its globally unique id and a patch.
  """
  updateJunctionBox(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateJunctionBoxInput!
  ): UpdateJunctionBoxPayload

  """Updates a single `JunctionBox` using a unique key and a patch."""
  updateJunctionBoxById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateJunctionBoxByIdInput!
  ): UpdateJunctionBoxPayload

  """Updates a single `Lead` using its globally unique id and a patch."""
  updateLead(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLeadInput!
  ): UpdateLeadPayload

  """Updates a single `Lead` using a unique key and a patch."""
  updateLeadById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLeadByIdInput!
  ): UpdateLeadPayload

  """
  Updates a single `LicenseCustomer` using its globally unique id and a patch.
  """
  updateLicenseCustomer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLicenseCustomerInput!
  ): UpdateLicenseCustomerPayload

  """Updates a single `LicenseCustomer` using a unique key and a patch."""
  updateLicenseCustomerById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLicenseCustomerByIdInput!
  ): UpdateLicenseCustomerPayload

  """
  Updates a single `LicenseModule` using its globally unique id and a patch.
  """
  updateLicenseModule(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLicenseModuleInput!
  ): UpdateLicenseModulePayload

  """Updates a single `LicenseModule` using a unique key and a patch."""
  updateLicenseModuleById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLicenseModuleByIdInput!
  ): UpdateLicenseModulePayload

  """
  Updates a single `LicenseOrder` using its globally unique id and a patch.
  """
  updateLicenseOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLicenseOrderInput!
  ): UpdateLicenseOrderPayload

  """Updates a single `LicenseOrder` using a unique key and a patch."""
  updateLicenseOrderById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLicenseOrderByIdInput!
  ): UpdateLicenseOrderPayload

  """Updates a single `LicenseOrder` using a unique key and a patch."""
  updateLicenseOrderByLicenseIdAndFactuuropdracht(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLicenseOrderByLicenseIdAndFactuuropdrachtInput!
  ): UpdateLicenseOrderPayload

  """Updates a single `LicenseOrder` using a unique key and a patch."""
  updateLicenseOrderByLicenseRegistrationIdAndFactuuropdracht(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLicenseOrderByLicenseRegistrationIdAndFactuuropdrachtInput!
  ): UpdateLicenseOrderPayload

  """
  Updates a single `LicenseRegistration` using its globally unique id and a patch.
  """
  updateLicenseRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLicenseRegistrationInput!
  ): UpdateLicenseRegistrationPayload

  """Updates a single `LicenseRegistration` using a unique key and a patch."""
  updateLicenseRegistrationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLicenseRegistrationByIdInput!
  ): UpdateLicenseRegistrationPayload

  """Updates a single `License` using its globally unique id and a patch."""
  updateLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLicenseInput!
  ): UpdateLicensePayload

  """Updates a single `License` using a unique key and a patch."""
  updateLicenseById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLicenseByIdInput!
  ): UpdateLicensePayload

  """
  Updates a single `MaintenanceVisitLine` using its globally unique id and a patch.
  """
  updateMaintenanceVisitLine(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMaintenanceVisitLineInput!
  ): UpdateMaintenanceVisitLinePayload

  """
  Updates a single `MaintenanceVisitLine` using a unique key and a patch.
  """
  updateMaintenanceVisitLineById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMaintenanceVisitLineByIdInput!
  ): UpdateMaintenanceVisitLinePayload

  """
  Updates a single `MaintenanceVisitLine` using a unique key and a patch.
  """
  updateMaintenanceVisitLineByMaintenanceVisitIdAndDetectorSensorLocationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMaintenanceVisitLineByMaintenanceVisitIdAndDetectorSensorLocationIdInput!
  ): UpdateMaintenanceVisitLinePayload

  """
  Updates a single `MaintenanceVisitRemark` using its globally unique id and a patch.
  """
  updateMaintenanceVisitRemark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMaintenanceVisitRemarkInput!
  ): UpdateMaintenanceVisitRemarkPayload

  """
  Updates a single `MaintenanceVisitRemark` using a unique key and a patch.
  """
  updateMaintenanceVisitRemarkById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMaintenanceVisitRemarkByIdInput!
  ): UpdateMaintenanceVisitRemarkPayload

  """
  Updates a single `MaintenanceVisitRemark` using a unique key and a patch.
  """
  updateMaintenanceVisitRemarkByMaintenanceVisitIdAndLine(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMaintenanceVisitRemarkByMaintenanceVisitIdAndLineInput!
  ): UpdateMaintenanceVisitRemarkPayload

  """
  Updates a single `MaintenanceVisit` using its globally unique id and a patch.
  """
  updateMaintenanceVisit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMaintenanceVisitInput!
  ): UpdateMaintenanceVisitPayload

  """Updates a single `MaintenanceVisit` using a unique key and a patch."""
  updateMaintenanceVisitById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMaintenanceVisitByIdInput!
  ): UpdateMaintenanceVisitPayload

  """Updates a single `Membrane` using its globally unique id and a patch."""
  updateMembrane(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMembraneInput!
  ): UpdateMembranePayload

  """Updates a single `Membrane` using a unique key and a patch."""
  updateMembraneById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMembraneByIdInput!
  ): UpdateMembranePayload

  """Updates a single `Membrane` using a unique key and a patch."""
  updateMembraneByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMembraneByNameInput!
  ): UpdateMembranePayload

  """Updates a single `ORing` using its globally unique id and a patch."""
  updateORing(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateORingInput!
  ): UpdateORingPayload

  """Updates a single `ORing` using a unique key and a patch."""
  updateORingById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateORingByIdInput!
  ): UpdateORingPayload

  """Updates a single `ORing` using a unique key and a patch."""
  updateORingByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateORingByNameInput!
  ): UpdateORingPayload

  """
  Updates a single `OfferteRemark` using its globally unique id and a patch.
  """
  updateOfferteRemark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOfferteRemarkInput!
  ): UpdateOfferteRemarkPayload

  """Updates a single `OfferteRemark` using a unique key and a patch."""
  updateOfferteRemarkById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOfferteRemarkByIdInput!
  ): UpdateOfferteRemarkPayload

  """Updates a single `OfferteRemark` using a unique key and a patch."""
  updateOfferteRemarkByOfferteId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOfferteRemarkByOfferteIdInput!
  ): UpdateOfferteRemarkPayload

  """
  Updates a single `Opportunity` using its globally unique id and a patch.
  """
  updateOpportunity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpportunityInput!
  ): UpdateOpportunityPayload

  """Updates a single `Opportunity` using a unique key and a patch."""
  updateOpportunityById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpportunityByIdInput!
  ): UpdateOpportunityPayload

  """
  Updates a single `Permission` using its globally unique id and a patch.
  """
  updatePermission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePermissionInput!
  ): UpdatePermissionPayload

  """Updates a single `Permission` using a unique key and a patch."""
  updatePermissionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePermissionByIdInput!
  ): UpdatePermissionPayload

  """
  Updates a single `PersoonRol` using its globally unique id and a patch.
  """
  updatePersoonRol(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePersoonRolInput!
  ): UpdatePersoonRolPayload

  """Updates a single `PersoonRol` using a unique key and a patch."""
  updatePersoonRolByPersoonRolGuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePersoonRolByPersoonRolGuidInput!
  ): UpdatePersoonRolPayload

  """Updates a single `Plug` using its globally unique id and a patch."""
  updatePlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlugInput!
  ): UpdatePlugPayload

  """Updates a single `Plug` using a unique key and a patch."""
  updatePlugById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlugByIdInput!
  ): UpdatePlugPayload

  """Updates a single `Plug` using a unique key and a patch."""
  updatePlugByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlugByNameInput!
  ): UpdatePlugPayload

  """Updates a single `Principle` using its globally unique id and a patch."""
  updatePrinciple(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePrincipleInput!
  ): UpdatePrinciplePayload

  """Updates a single `Principle` using a unique key and a patch."""
  updatePrincipleById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePrincipleByIdInput!
  ): UpdatePrinciplePayload

  """Updates a single `Principle` using a unique key and a patch."""
  updatePrincipleByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePrincipleByNameInput!
  ): UpdatePrinciplePayload

  """
  Updates a single `Production` using its globally unique id and a patch.
  """
  updateProduction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductionInput!
  ): UpdateProductionPayload

  """Updates a single `Production` using a unique key and a patch."""
  updateProductionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductionByIdInput!
  ): UpdateProductionPayload

  """Updates a single `Pyrolyser` using its globally unique id and a patch."""
  updatePyrolyser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePyrolyserInput!
  ): UpdatePyrolyserPayload

  """Updates a single `Pyrolyser` using a unique key and a patch."""
  updatePyrolyserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePyrolyserByIdInput!
  ): UpdatePyrolyserPayload

  """Updates a single `Pyrolyser` using a unique key and a patch."""
  updatePyrolyserByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePyrolyserByNameInput!
  ): UpdatePyrolyserPayload

  """Updates a single `Range` using its globally unique id and a patch."""
  updateRange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRangeInput!
  ): UpdateRangePayload

  """Updates a single `Range` using a unique key and a patch."""
  updateRangeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRangeByIdInput!
  ): UpdateRangePayload

  """Updates a single `Range` using a unique key and a patch."""
  updateRangeByLowEuAndHighEuAndEngineeringUnitsAndGasId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRangeByLowEuAndHighEuAndEngineeringUnitsAndGasIdInput!
  ): UpdateRangePayload

  """Updates a single `RcCard` using its globally unique id and a patch."""
  updateRcCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRcCardInput!
  ): UpdateRcCardPayload

  """Updates a single `RcCard` using a unique key and a patch."""
  updateRcCardById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRcCardByIdInput!
  ): UpdateRcCardPayload

  """
  Updates a single `ReportDetector` using its globally unique id and a patch.
  """
  updateReportDetector(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportDetectorInput!
  ): UpdateReportDetectorPayload

  """Updates a single `ReportDetector` using a unique key and a patch."""
  updateReportDetectorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportDetectorByIdInput!
  ): UpdateReportDetectorPayload

  """Updates a single `ReportDetector` using a unique key and a patch."""
  updateReportDetectorByReportIdAndDetectorId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportDetectorByReportIdAndDetectorIdInput!
  ): UpdateReportDetectorPayload

  """
  Updates a single `ReportItem` using its globally unique id and a patch.
  """
  updateReportItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportItemInput!
  ): UpdateReportItemPayload

  """Updates a single `ReportItem` using a unique key and a patch."""
  updateReportItemById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportItemByIdInput!
  ): UpdateReportItemPayload

  """
  Updates a single `ReportSensor` using its globally unique id and a patch.
  """
  updateReportSensor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportSensorInput!
  ): UpdateReportSensorPayload

  """Updates a single `ReportSensor` using a unique key and a patch."""
  updateReportSensorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportSensorByIdInput!
  ): UpdateReportSensorPayload

  """Updates a single `ReportSensor` using a unique key and a patch."""
  updateReportSensorByReportIdAndSensorId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportSensorByReportIdAndSensorIdInput!
  ): UpdateReportSensorPayload

  """Updates a single `Report` using its globally unique id and a patch."""
  updateReport(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportInput!
  ): UpdateReportPayload

  """Updates a single `Report` using a unique key and a patch."""
  updateReportById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportByIdInput!
  ): UpdateReportPayload

  """Updates a single `Report` using a unique key and a patch."""
  updateReportByFilename(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportByFilenameInput!
  ): UpdateReportPayload

  """Updates a single `Report` using a unique key and a patch."""
  updateReportByTsrNumberAndVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportByTsrNumberAndVersionInput!
  ): UpdateReportPayload

  """Updates a single `Request` using its globally unique id and a patch."""
  updateRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRequestInput!
  ): UpdateRequestPayload

  """Updates a single `Request` using a unique key and a patch."""
  updateRequestById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRequestByIdInput!
  ): UpdateRequestPayload

  """Updates a single `RxCard` using its globally unique id and a patch."""
  updateRxCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRxCardInput!
  ): UpdateRxCardPayload

  """Updates a single `RxCard` using a unique key and a patch."""
  updateRxCardById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRxCardByIdInput!
  ): UpdateRxCardPayload

  """
  Updates a single `SamplePoint` using its globally unique id and a patch.
  """
  updateSamplePoint(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSamplePointInput!
  ): UpdateSamplePointPayload

  """Updates a single `SamplePoint` using a unique key and a patch."""
  updateSamplePointById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSamplePointByIdInput!
  ): UpdateSamplePointPayload

  """Updates a single `SamplePoint` using a unique key and a patch."""
  updateSamplePointByAreaIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSamplePointByAreaIdAndNameInput!
  ): UpdateSamplePointPayload

  """
  Updates a single `SensorBaseType` using its globally unique id and a patch.
  """
  updateSensorBaseType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorBaseTypeInput!
  ): UpdateSensorBaseTypePayload

  """Updates a single `SensorBaseType` using a unique key and a patch."""
  updateSensorBaseTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorBaseTypeByIdInput!
  ): UpdateSensorBaseTypePayload

  """Updates a single `SensorBaseType` using a unique key and a patch."""
  updateSensorBaseTypeByPrefixAndSuffix(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorBaseTypeByPrefixAndSuffixInput!
  ): UpdateSensorBaseTypePayload

  """
  Updates a single `SensorElementLocation` using its globally unique id and a patch.
  """
  updateSensorElementLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorElementLocationInput!
  ): UpdateSensorElementLocationPayload

  """
  Updates a single `SensorElementLocation` using a unique key and a patch.
  """
  updateSensorElementLocationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorElementLocationByIdInput!
  ): UpdateSensorElementLocationPayload

  """
  Updates a single `SensorElementLocation` using a unique key and a patch.
  """
  updateSensorElementLocationBySensorElementId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorElementLocationBySensorElementIdInput!
  ): UpdateSensorElementLocationPayload

  """
  Updates a single `SensorElementLog` using its globally unique id and a patch.
  """
  updateSensorElementLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorElementLogInput!
  ): UpdateSensorElementLogPayload

  """Updates a single `SensorElementLog` using a unique key and a patch."""
  updateSensorElementLogById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorElementLogByIdInput!
  ): UpdateSensorElementLogPayload

  """
  Updates a single `SensorElementType` using its globally unique id and a patch.
  """
  updateSensorElementType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorElementTypeInput!
  ): UpdateSensorElementTypePayload

  """Updates a single `SensorElementType` using a unique key and a patch."""
  updateSensorElementTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorElementTypeByIdInput!
  ): UpdateSensorElementTypePayload

  """
  Updates a single `SensorElement` using its globally unique id and a patch.
  """
  updateSensorElement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorElementInput!
  ): UpdateSensorElementPayload

  """Updates a single `SensorElement` using a unique key and a patch."""
  updateSensorElementById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorElementByIdInput!
  ): UpdateSensorElementPayload

  """
  Updates a single `SensorOrder` using its globally unique id and a patch.
  """
  updateSensorOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorOrderInput!
  ): UpdateSensorOrderPayload

  """Updates a single `SensorOrder` using a unique key and a patch."""
  updateSensorOrderById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorOrderByIdInput!
  ): UpdateSensorOrderPayload

  """Updates a single `SensorOrder` using a unique key and a patch."""
  updateSensorOrderBySensorIdAndFactuuropdracht(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorOrderBySensorIdAndFactuuropdrachtInput!
  ): UpdateSensorOrderPayload

  """
  Updates a single `SensorSensorElement` using its globally unique id and a patch.
  """
  updateSensorSensorElement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorSensorElementInput!
  ): UpdateSensorSensorElementPayload

  """Updates a single `SensorSensorElement` using a unique key and a patch."""
  updateSensorSensorElementById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorSensorElementByIdInput!
  ): UpdateSensorSensorElementPayload

  """Updates a single `SensorSensorElement` using a unique key and a patch."""
  updateSensorSensorElementBySensorIdAndSensorPosition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorSensorElementBySensorIdAndSensorPositionInput!
  ): UpdateSensorSensorElementPayload

  """Updates a single `SensorSensorElement` using a unique key and a patch."""
  updateSensorSensorElementBySensorElementId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorSensorElementBySensorElementIdInput!
  ): UpdateSensorSensorElementPayload

  """
  Updates a single `SensorSetting` using its globally unique id and a patch.
  """
  updateSensorSetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorSettingInput!
  ): UpdateSensorSettingPayload

  """Updates a single `SensorSetting` using a unique key and a patch."""
  updateSensorSettingById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorSettingByIdInput!
  ): UpdateSensorSettingPayload

  """Updates a single `SensorSetting` using a unique key and a patch."""
  updateSensorSettingByTypeTarget(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorSettingByTypeTargetInput!
  ): UpdateSensorSettingPayload

  """
  Updates a single `SensorTestResult` using its globally unique id and a patch.
  """
  updateSensorTestResult(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorTestResultInput!
  ): UpdateSensorTestResultPayload

  """Updates a single `SensorTestResult` using a unique key and a patch."""
  updateSensorTestResultById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorTestResultByIdInput!
  ): UpdateSensorTestResultPayload

  """
  Updates a single `SensorType` using its globally unique id and a patch.
  """
  updateSensorType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorTypeInput!
  ): UpdateSensorTypePayload

  """Updates a single `SensorType` using a unique key and a patch."""
  updateSensorTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorTypeByIdInput!
  ): UpdateSensorTypePayload

  """Updates a single `SensorType` using a unique key and a patch."""
  updateSensorTypeBySensorTypeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorTypeBySensorTypeIdInput!
  ): UpdateSensorTypePayload

  """Updates a single `SensorType` using a unique key and a patch."""
  updateSensorTypeBySensorBaseTypeIdAndRangeIdAndCodeAndModelAndPyrolyserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorTypeBySensorBaseTypeIdAndRangeIdAndCodeAndModelAndPyrolyserIdInput!
  ): UpdateSensorTypePayload

  """Updates a single `Sensor` using its globally unique id and a patch."""
  updateSensor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorInput!
  ): UpdateSensorPayload

  """Updates a single `Sensor` using a unique key and a patch."""
  updateSensorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorByIdInput!
  ): UpdateSensorPayload

  """Updates a single `Sensor` using a unique key and a patch."""
  updateSensorBySerialNumberAndSensorTypeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSensorBySerialNumberAndSensorTypeIdInput!
  ): UpdateSensorPayload

  """Updates a single `Software` using its globally unique id and a patch."""
  updateSoftware(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSoftwareInput!
  ): UpdateSoftwarePayload

  """Updates a single `Software` using a unique key and a patch."""
  updateSoftwareById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSoftwareByIdInput!
  ): UpdateSoftwarePayload

  """
  Updates a single `StockGroup` using its globally unique id and a patch.
  """
  updateStockGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStockGroupInput!
  ): UpdateStockGroupPayload

  """Updates a single `StockGroup` using a unique key and a patch."""
  updateStockGroupById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStockGroupByIdInput!
  ): UpdateStockGroupPayload

  """Updates a single `StockItem` using its globally unique id and a patch."""
  updateStockItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStockItemInput!
  ): UpdateStockItemPayload

  """Updates a single `StockItem` using a unique key and a patch."""
  updateStockItemById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStockItemByIdInput!
  ): UpdateStockItemPayload

  """Updates a single `StockItem` using a unique key and a patch."""
  updateStockItemByStockGroupIdAndCdartikel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStockItemByStockGroupIdAndCdartikelInput!
  ): UpdateStockItemPayload

  """
  Updates a single `StockSupplier` using its globally unique id and a patch.
  """
  updateStockSupplier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStockSupplierInput!
  ): UpdateStockSupplierPayload

  """Updates a single `StockSupplier` using a unique key and a patch."""
  updateStockSupplierById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStockSupplierByIdInput!
  ): UpdateStockSupplierPayload

  """Updates a single `Task` using its globally unique id and a patch."""
  updateTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaskInput!
  ): UpdateTaskPayload

  """Updates a single `Task` using a unique key and a patch."""
  updateTaskById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaskByIdInput!
  ): UpdateTaskPayload

  """
  Updates a single `TempFactopdrachtregel` using its globally unique id and a patch.
  """
  updateTempFactopdrachtregel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTempFactopdrachtregelInput!
  ): UpdateTempFactopdrachtregelPayload

  """
  Updates a single `TempFactopdrachtregel` using a unique key and a patch.
  """
  updateTempFactopdrachtregelById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTempFactopdrachtregelByIdInput!
  ): UpdateTempFactopdrachtregelPayload

  """
  Updates a single `TempFactopdrachtregel` using a unique key and a patch.
  """
  updateTempFactopdrachtregelByFactuuropdrachtAndFactuurregel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTempFactopdrachtregelByFactuuropdrachtAndFactuurregelInput!
  ): UpdateTempFactopdrachtregelPayload

  """
  Updates a single `TempLicense` using its globally unique id and a patch.
  """
  updateTempLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTempLicenseInput!
  ): UpdateTempLicensePayload

  """Updates a single `TempLicense` using a unique key and a patch."""
  updateTempLicenseById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTempLicenseByIdInput!
  ): UpdateTempLicensePayload

  """
  Updates a single `TempRegistrationHistory` using its globally unique id and a patch.
  """
  updateTempRegistrationHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTempRegistrationHistoryInput!
  ): UpdateTempRegistrationHistoryPayload

  """
  Updates a single `TempRegistrationHistory` using a unique key and a patch.
  """
  updateTempRegistrationHistoryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTempRegistrationHistoryByIdInput!
  ): UpdateTempRegistrationHistoryPayload

  """
  Updates a single `TempRegistration` using its globally unique id and a patch.
  """
  updateTempRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTempRegistrationInput!
  ): UpdateTempRegistrationPayload

  """Updates a single `TempRegistration` using a unique key and a patch."""
  updateTempRegistrationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTempRegistrationByIdInput!
  ): UpdateTempRegistrationPayload

  """
  Updates a single `TempRegistrations2` using its globally unique id and a patch.
  """
  updateTempRegistrations2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTempRegistrations2Input!
  ): UpdateTempRegistrations2Payload

  """Updates a single `TempRegistrations2` using a unique key and a patch."""
  updateTempRegistrations2ById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTempRegistrations2ByIdInput!
  ): UpdateTempRegistrations2Payload

  """Updates a single `Test` using its globally unique id and a patch."""
  updateTest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTestInput!
  ): UpdateTestPayload

  """Updates a single `Test` using a unique key and a patch."""
  updateTestById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTestByIdInput!
  ): UpdateTestPayload

  """Updates a single `UserRight` using its globally unique id and a patch."""
  updateUserRight(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserRightInput!
  ): UpdateUserRightPayload

  """Updates a single `UserRight` using a unique key and a patch."""
  updateUserRightById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserRightByIdInput!
  ): UpdateUserRightPayload

  """Updates a single `UserRight` using a unique key and a patch."""
  updateUserRightByUserIdAndPath(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserRightByUserIdAndPathInput!
  ): UpdateUserRightPayload

  """Updates a single `UserTask` using its globally unique id and a patch."""
  updateUserTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserTaskInput!
  ): UpdateUserTaskPayload

  """Updates a single `UserTask` using a unique key and a patch."""
  updateUserTaskById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserTaskByIdInput!
  ): UpdateUserTaskPayload

  """Updates a single `UserTask` using a unique key and a patch."""
  updateUserTaskByUserIdAndTaskId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserTaskByUserIdAndTaskIdInput!
  ): UpdateUserTaskPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUsernameInput!
  ): UpdateUserPayload

  """Updates a single `Voorraden` using its globally unique id and a patch."""
  updateVoorraden(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateVoorradenInput!
  ): UpdateVoorradenPayload

  """Updates a single `Voorraden` using a unique key and a patch."""
  updateVoorradenByCdartikelAndCdmagazijn(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateVoorradenByCdartikelAndCdmagazijnInput!
  ): UpdateVoorradenPayload

  """
  Updates a single `VoorradenLog` using its globally unique id and a patch.
  """
  updateVoorradenLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateVoorradenLogInput!
  ): UpdateVoorradenLogPayload

  """Updates a single `VoorradenLog` using a unique key and a patch."""
  updateVoorradenLogById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateVoorradenLogByIdInput!
  ): UpdateVoorradenLogPayload

  """
  Updates a single `WeeklyHourRemark` using its globally unique id and a patch.
  """
  updateWeeklyHourRemark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWeeklyHourRemarkInput!
  ): UpdateWeeklyHourRemarkPayload

  """Updates a single `WeeklyHourRemark` using a unique key and a patch."""
  updateWeeklyHourRemarkById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWeeklyHourRemarkByIdInput!
  ): UpdateWeeklyHourRemarkPayload

  """Updates a single `WeeklyHourRemark` using a unique key and a patch."""
  updateWeeklyHourRemarkByUserIdAndTaskIdAndDate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWeeklyHourRemarkByUserIdAndTaskIdAndDateInput!
  ): UpdateWeeklyHourRemarkPayload

  """
  Updates a single `WeeklyHour` using its globally unique id and a patch.
  """
  updateWeeklyHour(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWeeklyHourInput!
  ): UpdateWeeklyHourPayload

  """Updates a single `WeeklyHour` using a unique key and a patch."""
  updateWeeklyHourById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWeeklyHourByIdInput!
  ): UpdateWeeklyHourPayload

  """Deletes a single `AspNetRoleClaim` using its globally unique id."""
  deleteAspNetRoleClaim(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAspNetRoleClaimInput!
  ): DeleteAspNetRoleClaimPayload

  """Deletes a single `AspNetRoleClaim` using a unique key."""
  deleteAspNetRoleClaimById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAspNetRoleClaimByIdInput!
  ): DeleteAspNetRoleClaimPayload

  """Deletes a single `AspNetRole` using its globally unique id."""
  deleteAspNetRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAspNetRoleInput!
  ): DeleteAspNetRolePayload

  """Deletes a single `AspNetRole` using a unique key."""
  deleteAspNetRoleById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAspNetRoleByIdInput!
  ): DeleteAspNetRolePayload

  """Deletes a single `AspNetUserClaim` using its globally unique id."""
  deleteAspNetUserClaim(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAspNetUserClaimInput!
  ): DeleteAspNetUserClaimPayload

  """Deletes a single `AspNetUserClaim` using a unique key."""
  deleteAspNetUserClaimById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAspNetUserClaimByIdInput!
  ): DeleteAspNetUserClaimPayload

  """Deletes a single `AspNetUserLogin` using its globally unique id."""
  deleteAspNetUserLogin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAspNetUserLoginInput!
  ): DeleteAspNetUserLoginPayload

  """Deletes a single `AspNetUserLogin` using a unique key."""
  deleteAspNetUserLoginByLoginProviderAndProviderKey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAspNetUserLoginByLoginProviderAndProviderKeyInput!
  ): DeleteAspNetUserLoginPayload

  """Deletes a single `AspNetUserRole` using its globally unique id."""
  deleteAspNetUserRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAspNetUserRoleInput!
  ): DeleteAspNetUserRolePayload

  """Deletes a single `AspNetUserRole` using a unique key."""
  deleteAspNetUserRoleByUserIdAndRoleId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAspNetUserRoleByUserIdAndRoleIdInput!
  ): DeleteAspNetUserRolePayload

  """Deletes a single `AspNetUserToken` using its globally unique id."""
  deleteAspNetUserToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAspNetUserTokenInput!
  ): DeleteAspNetUserTokenPayload

  """Deletes a single `AspNetUserToken` using a unique key."""
  deleteAspNetUserTokenByUserIdAndLoginProviderAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAspNetUserTokenByUserIdAndLoginProviderAndNameInput!
  ): DeleteAspNetUserTokenPayload

  """Deletes a single `AspNetUser` using its globally unique id."""
  deleteAspNetUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAspNetUserInput!
  ): DeleteAspNetUserPayload

  """Deletes a single `AspNetUser` using a unique key."""
  deleteAspNetUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAspNetUserByIdInput!
  ): DeleteAspNetUserPayload

  """Deletes a single `RefreshToken` using its globally unique id."""
  deleteRefreshToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRefreshTokenInput!
  ): DeleteRefreshTokenPayload

  """Deletes a single `RefreshToken` using a unique key."""
  deleteRefreshTokenById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRefreshTokenByIdInput!
  ): DeleteRefreshTokenPayload

  """Deletes a single `_Adre` using its globally unique id."""
  deleteAdre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAdreInput!
  ): DeleteAdrePayload

  """Deletes a single `_Adre` using a unique key."""
  deleteAdreByAdresGuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAdreByAdresGuidInput!
  ): DeleteAdrePayload

  """Deletes a single `_Land` using its globally unique id."""
  deleteLand(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLandInput!
  ): DeleteLandPayload

  """Deletes a single `_Land` using a unique key."""
  deleteLandByCdland(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLandByCdlandInput!
  ): DeleteLandPayload

  """Deletes a single `Aco` using its globally unique id."""
  deleteAco(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAcoInput!
  ): DeleteAcoPayload

  """Deletes a single `Aco` using a unique key."""
  deleteAcoById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAcoByIdInput!
  ): DeleteAcoPayload

  """Deletes a single `Action` using its globally unique id."""
  deleteAction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActionInput!
  ): DeleteActionPayload

  """Deletes a single `Action` using a unique key."""
  deleteActionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActionByIdInput!
  ): DeleteActionPayload

  """Deletes a single `Application` using its globally unique id."""
  deleteApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationInput!
  ): DeleteApplicationPayload

  """Deletes a single `Application` using a unique key."""
  deleteApplicationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationByIdInput!
  ): DeleteApplicationPayload

  """Deletes a single `Application` using a unique key."""
  deleteApplicationByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationByNameInput!
  ): DeleteApplicationPayload

  """Deletes a single `Area` using its globally unique id."""
  deleteArea(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAreaInput!
  ): DeleteAreaPayload

  """Deletes a single `Area` using a unique key."""
  deleteAreaById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAreaByIdInput!
  ): DeleteAreaPayload

  """Deletes a single `Area` using a unique key."""
  deleteAreaByFloorIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAreaByFloorIdAndNameInput!
  ): DeleteAreaPayload

  """Deletes a single `Aro` using its globally unique id."""
  deleteAro(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAroInput!
  ): DeleteAroPayload

  """Deletes a single `Aro` using a unique key."""
  deleteAroById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAroByIdInput!
  ): DeleteAroPayload

  """Deletes a single `ArosAco` using its globally unique id."""
  deleteArosAco(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArosAcoInput!
  ): DeleteArosAcoPayload

  """Deletes a single `ArosAco` using a unique key."""
  deleteArosAcoById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArosAcoByIdInput!
  ): DeleteArosAcoPayload

  """Deletes a single `Artikel` using its globally unique id."""
  deleteArtikel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArtikelInput!
  ): DeleteArtikelPayload

  """Deletes a single `Artikel` using a unique key."""
  deleteArtikelByCdartikel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArtikelByCdartikelInput!
  ): DeleteArtikelPayload

  """Deletes a single `ArtikelLog` using its globally unique id."""
  deleteArtikelLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArtikelLogInput!
  ): DeleteArtikelLogPayload

  """Deletes a single `ArtikelLog` using a unique key."""
  deleteArtikelLogById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArtikelLogByIdInput!
  ): DeleteArtikelLogPayload

  """Deletes a single `Artikelomschr` using its globally unique id."""
  deleteArtikelomschr(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArtikelomschrInput!
  ): DeleteArtikelomschrPayload

  """Deletes a single `Artikelomschr` using a unique key."""
  deleteArtikelomschrByCdartikelAndCdtaal(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArtikelomschrByCdartikelAndCdtaalInput!
  ): DeleteArtikelomschrPayload

  """Deletes a single `Assembly` using its globally unique id."""
  deleteAssembly(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAssemblyInput!
  ): DeleteAssemblyPayload

  """Deletes a single `Assembly` using a unique key."""
  deleteAssemblyById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAssemblyByIdInput!
  ): DeleteAssemblyPayload

  """Deletes a single `Assembly` using a unique key."""
  deleteAssemblyByCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAssemblyByCodeInput!
  ): DeleteAssemblyPayload

  """Deletes a single `AssemblyPart` using its globally unique id."""
  deleteAssemblyPart(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAssemblyPartInput!
  ): DeleteAssemblyPartPayload

  """Deletes a single `AssemblyPart` using a unique key."""
  deleteAssemblyPartById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAssemblyPartByIdInput!
  ): DeleteAssemblyPartPayload

  """Deletes a single `AssemblyPart` using a unique key."""
  deleteAssemblyPartByAssemblyIdAndCdartikel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAssemblyPartByAssemblyIdAndCdartikelInput!
  ): DeleteAssemblyPartPayload

  """Deletes a single `AssemblyTypePart` using its globally unique id."""
  deleteAssemblyTypePart(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAssemblyTypePartInput!
  ): DeleteAssemblyTypePartPayload

  """Deletes a single `AssemblyTypePart` using a unique key."""
  deleteAssemblyTypePartById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAssemblyTypePartByIdInput!
  ): DeleteAssemblyTypePartPayload

  """Deletes a single `AssemblyTypePart` using a unique key."""
  deleteAssemblyTypePartByAssemblyTypeIdAndCdartikel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAssemblyTypePartByAssemblyTypeIdAndCdartikelInput!
  ): DeleteAssemblyTypePartPayload

  """Deletes a single `AssemblyType` using its globally unique id."""
  deleteAssemblyType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAssemblyTypeInput!
  ): DeleteAssemblyTypePayload

  """Deletes a single `AssemblyType` using a unique key."""
  deleteAssemblyTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAssemblyTypeByIdInput!
  ): DeleteAssemblyTypePayload

  """Deletes a single `Building` using its globally unique id."""
  deleteBuilding(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBuildingInput!
  ): DeleteBuildingPayload

  """Deletes a single `Building` using a unique key."""
  deleteBuildingById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBuildingByIdInput!
  ): DeleteBuildingPayload

  """Deletes a single `Building` using a unique key."""
  deleteBuildingByEndUserIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBuildingByEndUserIdAndNameInput!
  ): DeleteBuildingPayload

  """Deletes a single `CalGas` using its globally unique id."""
  deleteCalGas(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCalGasInput!
  ): DeleteCalGasPayload

  """Deletes a single `CalGas` using a unique key."""
  deleteCalGasById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCalGasByIdInput!
  ): DeleteCalGasPayload

  """Deletes a single `CalGas` using a unique key."""
  deleteCalGasByConcentrationAndEngineeringUnitsAndGasId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCalGasByConcentrationAndEngineeringUnitsAndGasIdInput!
  ): DeleteCalGasPayload

  """Deletes a single `CatalogGroup` using its globally unique id."""
  deleteCatalogGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCatalogGroupInput!
  ): DeleteCatalogGroupPayload

  """Deletes a single `CatalogGroup` using a unique key."""
  deleteCatalogGroupById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCatalogGroupByIdInput!
  ): DeleteCatalogGroupPayload

  """Deletes a single `CatalogItemFile` using its globally unique id."""
  deleteCatalogItemFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCatalogItemFileInput!
  ): DeleteCatalogItemFilePayload

  """Deletes a single `CatalogItemFile` using a unique key."""
  deleteCatalogItemFileById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCatalogItemFileByIdInput!
  ): DeleteCatalogItemFilePayload

  """Deletes a single `CatalogItemRelation` using its globally unique id."""
  deleteCatalogItemRelation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCatalogItemRelationInput!
  ): DeleteCatalogItemRelationPayload

  """Deletes a single `CatalogItemRelation` using a unique key."""
  deleteCatalogItemRelationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCatalogItemRelationByIdInput!
  ): DeleteCatalogItemRelationPayload

  """Deletes a single `CatalogItem` using its globally unique id."""
  deleteCatalogItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCatalogItemInput!
  ): DeleteCatalogItemPayload

  """Deletes a single `CatalogItem` using a unique key."""
  deleteCatalogItemById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCatalogItemByIdInput!
  ): DeleteCatalogItemPayload

  """Deletes a single `CatalogSubGroup` using its globally unique id."""
  deleteCatalogSubGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCatalogSubGroupInput!
  ): DeleteCatalogSubGroupPayload

  """Deletes a single `CatalogSubGroup` using a unique key."""
  deleteCatalogSubGroupById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCatalogSubGroupByIdInput!
  ): DeleteCatalogSubGroupPayload

  """Deletes a single `ChemicalCompound` using its globally unique id."""
  deleteChemicalCompound(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChemicalCompoundInput!
  ): DeleteChemicalCompoundPayload

  """Deletes a single `ChemicalCompound` using a unique key."""
  deleteChemicalCompoundById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChemicalCompoundByIdInput!
  ): DeleteChemicalCompoundPayload

  """Deletes a single `DetectorLocation` using its globally unique id."""
  deleteDetectorLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorLocationInput!
  ): DeleteDetectorLocationPayload

  """Deletes a single `DetectorLocation` using a unique key."""
  deleteDetectorLocationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorLocationByIdInput!
  ): DeleteDetectorLocationPayload

  """Deletes a single `DetectorLocation` using a unique key."""
  deleteDetectorLocationByDetectorId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorLocationByDetectorIdInput!
  ): DeleteDetectorLocationPayload

  """Deletes a single `DetectorOrder` using its globally unique id."""
  deleteDetectorOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorOrderInput!
  ): DeleteDetectorOrderPayload

  """Deletes a single `DetectorOrder` using a unique key."""
  deleteDetectorOrderById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorOrderByIdInput!
  ): DeleteDetectorOrderPayload

  """Deletes a single `DetectorOrder` using a unique key."""
  deleteDetectorOrderByFactuuropdrachtAndDetectorId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorOrderByFactuuropdrachtAndDetectorIdInput!
  ): DeleteDetectorOrderPayload

  """
  Deletes a single `DetectorSensorLocation` using its globally unique id.
  """
  deleteDetectorSensorLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorSensorLocationInput!
  ): DeleteDetectorSensorLocationPayload

  """Deletes a single `DetectorSensorLocation` using a unique key."""
  deleteDetectorSensorLocationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorSensorLocationByIdInput!
  ): DeleteDetectorSensorLocationPayload

  """Deletes a single `DetectorSensorLocation` using a unique key."""
  deleteDetectorSensorLocationByDetectorSensorId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorSensorLocationByDetectorSensorIdInput!
  ): DeleteDetectorSensorLocationPayload

  """Deletes a single `DetectorSensorLocation` using a unique key."""
  deleteDetectorSensorLocationByLicenseIdAndSimsChannel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorSensorLocationByLicenseIdAndSimsChannelInput!
  ): DeleteDetectorSensorLocationPayload

  """Deletes a single `DetectorSensorType` using its globally unique id."""
  deleteDetectorSensorType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorSensorTypeInput!
  ): DeleteDetectorSensorTypePayload

  """Deletes a single `DetectorSensorType` using a unique key."""
  deleteDetectorSensorTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorSensorTypeByIdInput!
  ): DeleteDetectorSensorTypePayload

  """Deletes a single `DetectorSensorType` using a unique key."""
  deleteDetectorSensorTypeByDetectorIdAndDetectorPosition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorSensorTypeByDetectorIdAndDetectorPositionInput!
  ): DeleteDetectorSensorTypePayload

  """Deletes a single `DetectorSensor` using its globally unique id."""
  deleteDetectorSensor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorSensorInput!
  ): DeleteDetectorSensorPayload

  """Deletes a single `DetectorSensor` using a unique key."""
  deleteDetectorSensorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorSensorByIdInput!
  ): DeleteDetectorSensorPayload

  """Deletes a single `DetectorSensor` using a unique key."""
  deleteDetectorSensorByDetectorIdAndDetectorPosition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorSensorByDetectorIdAndDetectorPositionInput!
  ): DeleteDetectorSensorPayload

  """Deletes a single `DetectorSensor` using a unique key."""
  deleteDetectorSensorBySensorId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorSensorBySensorIdInput!
  ): DeleteDetectorSensorPayload

  """Deletes a single `DetectorType` using its globally unique id."""
  deleteDetectorType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorTypeInput!
  ): DeleteDetectorTypePayload

  """Deletes a single `DetectorType` using a unique key."""
  deleteDetectorTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorTypeByIdInput!
  ): DeleteDetectorTypePayload

  """Deletes a single `DetectorType` using a unique key."""
  deleteDetectorTypeByPrefixAndCodeAndSuffix(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorTypeByPrefixAndCodeAndSuffixInput!
  ): DeleteDetectorTypePayload

  """Deletes a single `Detector` using its globally unique id."""
  deleteDetector(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorInput!
  ): DeleteDetectorPayload

  """Deletes a single `Detector` using a unique key."""
  deleteDetectorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorByIdInput!
  ): DeleteDetectorPayload

  """Deletes a single `Detector` using a unique key."""
  deleteDetectorBySerialNumberAndDetectorTypeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDetectorBySerialNumberAndDetectorTypeIdInput!
  ): DeleteDetectorPayload

  """Deletes a single `DpCard` using its globally unique id."""
  deleteDpCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDpCardInput!
  ): DeleteDpCardPayload

  """Deletes a single `DpCard` using a unique key."""
  deleteDpCardById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDpCardByIdInput!
  ): DeleteDpCardPayload

  """Deletes a single `Electrolyte` using its globally unique id."""
  deleteElectrolyte(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteElectrolyteInput!
  ): DeleteElectrolytePayload

  """Deletes a single `Electrolyte` using a unique key."""
  deleteElectrolyteById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteElectrolyteByIdInput!
  ): DeleteElectrolytePayload

  """Deletes a single `Electrolyte` using a unique key."""
  deleteElectrolyteByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteElectrolyteByNameInput!
  ): DeleteElectrolytePayload

  """Deletes a single `EndUser` using its globally unique id."""
  deleteEndUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEndUserInput!
  ): DeleteEndUserPayload

  """Deletes a single `EndUser` using a unique key."""
  deleteEndUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEndUserByIdInput!
  ): DeleteEndUserPayload

  """Deletes a single `EndUser` using a unique key."""
  deleteEndUserByNameAndLocationAndSubLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEndUserByNameAndLocationAndSubLocationInput!
  ): DeleteEndUserPayload

  """
  Deletes a single `FactopdrachtArtikelExclusion` using its globally unique id.
  """
  deleteFactopdrachtArtikelExclusion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFactopdrachtArtikelExclusionInput!
  ): DeleteFactopdrachtArtikelExclusionPayload

  """Deletes a single `FactopdrachtArtikelExclusion` using a unique key."""
  deleteFactopdrachtArtikelExclusionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFactopdrachtArtikelExclusionByIdInput!
  ): DeleteFactopdrachtArtikelExclusionPayload

  """Deletes a single `FactopdrachtArtikelExclusion` using a unique key."""
  deleteFactopdrachtArtikelExclusionByFactuuropdrachtAndCdartikel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFactopdrachtArtikelExclusionByFactuuropdrachtAndCdartikelInput!
  ): DeleteFactopdrachtArtikelExclusionPayload

  """
  Deletes a single `FactopdrachtregelLineDate` using its globally unique id.
  """
  deleteFactopdrachtregelLineDate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFactopdrachtregelLineDateInput!
  ): DeleteFactopdrachtregelLineDatePayload

  """Deletes a single `FactopdrachtregelLineDate` using a unique key."""
  deleteFactopdrachtregelLineDateById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFactopdrachtregelLineDateByIdInput!
  ): DeleteFactopdrachtregelLineDatePayload

  """
  Deletes a single `FactopdrachtregelLineRemark` using its globally unique id.
  """
  deleteFactopdrachtregelLineRemark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFactopdrachtregelLineRemarkInput!
  ): DeleteFactopdrachtregelLineRemarkPayload

  """Deletes a single `FactopdrachtregelLineRemark` using a unique key."""
  deleteFactopdrachtregelLineRemarkById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFactopdrachtregelLineRemarkByIdInput!
  ): DeleteFactopdrachtregelLineRemarkPayload

  """Deletes a single `FactopdrachtregelLine` using its globally unique id."""
  deleteFactopdrachtregelLine(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFactopdrachtregelLineInput!
  ): DeleteFactopdrachtregelLinePayload

  """Deletes a single `FactopdrachtregelLine` using a unique key."""
  deleteFactopdrachtregelLineByFactopdrRglGuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFactopdrachtregelLineByFactopdrRglGuidInput!
  ): DeleteFactopdrachtregelLinePayload

  """Deletes a single `FactopdrachtregelLine` using a unique key."""
  deleteFactopdrachtregelLineById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFactopdrachtregelLineByIdInput!
  ): DeleteFactopdrachtregelLinePayload

  """Deletes a single `Factuur` using its globally unique id."""
  deleteFactuur(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFactuurInput!
  ): DeleteFactuurPayload

  """Deletes a single `Factuur` using a unique key."""
  deleteFactuurById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFactuurByIdInput!
  ): DeleteFactuurPayload

  """Deletes a single `Factuur` using a unique key."""
  deleteFactuurByFactuuropdracht(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFactuurByFactuuropdrachtInput!
  ): DeleteFactuurPayload

  """Deletes a single `Filter` using its globally unique id."""
  deleteFilter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFilterInput!
  ): DeleteFilterPayload

  """Deletes a single `Filter` using a unique key."""
  deleteFilterById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFilterByIdInput!
  ): DeleteFilterPayload

  """Deletes a single `Filter` using a unique key."""
  deleteFilterByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFilterByNameInput!
  ): DeleteFilterPayload

  """Deletes a single `Floor` using its globally unique id."""
  deleteFloor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFloorInput!
  ): DeleteFloorPayload

  """Deletes a single `Floor` using a unique key."""
  deleteFloorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFloorByIdInput!
  ): DeleteFloorPayload

  """Deletes a single `Floor` using a unique key."""
  deleteFloorByBuildingIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFloorByBuildingIdAndNameInput!
  ): DeleteFloorPayload

  """Deletes a single `Gas` using its globally unique id."""
  deleteGas(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGasInput!
  ): DeleteGasPayload

  """Deletes a single `Gas` using a unique key."""
  deleteGasById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGasByIdInput!
  ): DeleteGasPayload

  """Deletes a single `Gas` using a unique key."""
  deleteGasByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGasByNameInput!
  ): DeleteGasPayload

  """Deletes a single `GroupPermission` using its globally unique id."""
  deleteGroupPermission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupPermissionInput!
  ): DeleteGroupPermissionPayload

  """Deletes a single `GroupPermission` using a unique key."""
  deleteGroupPermissionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupPermissionByIdInput!
  ): DeleteGroupPermissionPayload

  """Deletes a single `GroupPermission` using a unique key."""
  deleteGroupPermissionByGroupId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupPermissionByGroupIdInput!
  ): DeleteGroupPermissionPayload

  """Deletes a single `GroupRight` using its globally unique id."""
  deleteGroupRight(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupRightInput!
  ): DeleteGroupRightPayload

  """Deletes a single `GroupRight` using a unique key."""
  deleteGroupRightById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupRightByIdInput!
  ): DeleteGroupRightPayload

  """Deletes a single `GroupRight` using a unique key."""
  deleteGroupRightByGroupIdAndPath(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupRightByGroupIdAndPathInput!
  ): DeleteGroupRightPayload

  """Deletes a single `Group` using its globally unique id."""
  deleteGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupInput!
  ): DeleteGroupPayload

  """Deletes a single `Group` using a unique key."""
  deleteGroupById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupByIdInput!
  ): DeleteGroupPayload

  """Deletes a single `Hardware` using its globally unique id."""
  deleteHardware(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHardwareInput!
  ): DeleteHardwarePayload

  """Deletes a single `Hardware` using a unique key."""
  deleteHardwareById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHardwareByIdInput!
  ): DeleteHardwarePayload

  """Deletes a single `IncomingDocument` using its globally unique id."""
  deleteIncomingDocument(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIncomingDocumentInput!
  ): DeleteIncomingDocumentPayload

  """Deletes a single `IncomingDocument` using a unique key."""
  deleteIncomingDocumentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIncomingDocumentByIdInput!
  ): DeleteIncomingDocumentPayload

  """Deletes a single `Inkoopgegeven` using its globally unique id."""
  deleteInkoopgegeven(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInkoopgegevenInput!
  ): DeleteInkoopgegevenPayload

  """Deletes a single `Inkoopgegeven` using a unique key."""
  deleteInkoopgegevenByCdartikelAndInkvolgnr(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInkoopgegevenByCdartikelAndInkvolgnrInput!
  ): DeleteInkoopgegevenPayload

  """Deletes a single `InkoopgegevensLog` using its globally unique id."""
  deleteInkoopgegevensLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInkoopgegevensLogInput!
  ): DeleteInkoopgegevensLogPayload

  """Deletes a single `InkoopgegevensLog` using a unique key."""
  deleteInkoopgegevensLogById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInkoopgegevensLogByIdInput!
  ): DeleteInkoopgegevensLogPayload

  """Deletes a single `InkooporderregelLine` using its globally unique id."""
  deleteInkooporderregelLine(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInkooporderregelLineInput!
  ): DeleteInkooporderregelLinePayload

  """Deletes a single `InkooporderregelLine` using a unique key."""
  deleteInkooporderregelLineByInkopdrRglGuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInkooporderregelLineByInkopdrRglGuidInput!
  ): DeleteInkooporderregelLinePayload

  """Deletes a single `InkooporderregelLine` using a unique key."""
  deleteInkooporderregelLineById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInkooporderregelLineByIdInput!
  ): DeleteInkooporderregelLinePayload

  """Deletes a single `Item` using its globally unique id."""
  deleteItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemInput!
  ): DeleteItemPayload

  """Deletes a single `Item` using a unique key."""
  deleteItemById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemByIdInput!
  ): DeleteItemPayload

  """Deletes a single `Item` using a unique key."""
  deleteItemByCdartikelAndSerialNumber(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemByCdartikelAndSerialNumberInput!
  ): DeleteItemPayload

  """Deletes a single `Job` using its globally unique id."""
  deleteJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteJobInput!
  ): DeleteJobPayload

  """Deletes a single `Job` using a unique key."""
  deleteJobById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteJobByIdInput!
  ): DeleteJobPayload

  """Deletes a single `JunctionBox` using its globally unique id."""
  deleteJunctionBox(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteJunctionBoxInput!
  ): DeleteJunctionBoxPayload

  """Deletes a single `JunctionBox` using a unique key."""
  deleteJunctionBoxById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteJunctionBoxByIdInput!
  ): DeleteJunctionBoxPayload

  """Deletes a single `Lead` using its globally unique id."""
  deleteLead(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLeadInput!
  ): DeleteLeadPayload

  """Deletes a single `Lead` using a unique key."""
  deleteLeadById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLeadByIdInput!
  ): DeleteLeadPayload

  """Deletes a single `LicenseCustomer` using its globally unique id."""
  deleteLicenseCustomer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLicenseCustomerInput!
  ): DeleteLicenseCustomerPayload

  """Deletes a single `LicenseCustomer` using a unique key."""
  deleteLicenseCustomerById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLicenseCustomerByIdInput!
  ): DeleteLicenseCustomerPayload

  """Deletes a single `LicenseModule` using its globally unique id."""
  deleteLicenseModule(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLicenseModuleInput!
  ): DeleteLicenseModulePayload

  """Deletes a single `LicenseModule` using a unique key."""
  deleteLicenseModuleById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLicenseModuleByIdInput!
  ): DeleteLicenseModulePayload

  """Deletes a single `LicenseOrder` using its globally unique id."""
  deleteLicenseOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLicenseOrderInput!
  ): DeleteLicenseOrderPayload

  """Deletes a single `LicenseOrder` using a unique key."""
  deleteLicenseOrderById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLicenseOrderByIdInput!
  ): DeleteLicenseOrderPayload

  """Deletes a single `LicenseOrder` using a unique key."""
  deleteLicenseOrderByLicenseIdAndFactuuropdracht(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLicenseOrderByLicenseIdAndFactuuropdrachtInput!
  ): DeleteLicenseOrderPayload

  """Deletes a single `LicenseOrder` using a unique key."""
  deleteLicenseOrderByLicenseRegistrationIdAndFactuuropdracht(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLicenseOrderByLicenseRegistrationIdAndFactuuropdrachtInput!
  ): DeleteLicenseOrderPayload

  """Deletes a single `LicenseRegistration` using its globally unique id."""
  deleteLicenseRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLicenseRegistrationInput!
  ): DeleteLicenseRegistrationPayload

  """Deletes a single `LicenseRegistration` using a unique key."""
  deleteLicenseRegistrationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLicenseRegistrationByIdInput!
  ): DeleteLicenseRegistrationPayload

  """Deletes a single `License` using its globally unique id."""
  deleteLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLicenseInput!
  ): DeleteLicensePayload

  """Deletes a single `License` using a unique key."""
  deleteLicenseById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLicenseByIdInput!
  ): DeleteLicensePayload

  """Deletes a single `MaintenanceVisitLine` using its globally unique id."""
  deleteMaintenanceVisitLine(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMaintenanceVisitLineInput!
  ): DeleteMaintenanceVisitLinePayload

  """Deletes a single `MaintenanceVisitLine` using a unique key."""
  deleteMaintenanceVisitLineById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMaintenanceVisitLineByIdInput!
  ): DeleteMaintenanceVisitLinePayload

  """Deletes a single `MaintenanceVisitLine` using a unique key."""
  deleteMaintenanceVisitLineByMaintenanceVisitIdAndDetectorSensorLocationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMaintenanceVisitLineByMaintenanceVisitIdAndDetectorSensorLocationIdInput!
  ): DeleteMaintenanceVisitLinePayload

  """
  Deletes a single `MaintenanceVisitRemark` using its globally unique id.
  """
  deleteMaintenanceVisitRemark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMaintenanceVisitRemarkInput!
  ): DeleteMaintenanceVisitRemarkPayload

  """Deletes a single `MaintenanceVisitRemark` using a unique key."""
  deleteMaintenanceVisitRemarkById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMaintenanceVisitRemarkByIdInput!
  ): DeleteMaintenanceVisitRemarkPayload

  """Deletes a single `MaintenanceVisitRemark` using a unique key."""
  deleteMaintenanceVisitRemarkByMaintenanceVisitIdAndLine(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMaintenanceVisitRemarkByMaintenanceVisitIdAndLineInput!
  ): DeleteMaintenanceVisitRemarkPayload

  """Deletes a single `MaintenanceVisit` using its globally unique id."""
  deleteMaintenanceVisit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMaintenanceVisitInput!
  ): DeleteMaintenanceVisitPayload

  """Deletes a single `MaintenanceVisit` using a unique key."""
  deleteMaintenanceVisitById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMaintenanceVisitByIdInput!
  ): DeleteMaintenanceVisitPayload

  """Deletes a single `Membrane` using its globally unique id."""
  deleteMembrane(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMembraneInput!
  ): DeleteMembranePayload

  """Deletes a single `Membrane` using a unique key."""
  deleteMembraneById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMembraneByIdInput!
  ): DeleteMembranePayload

  """Deletes a single `Membrane` using a unique key."""
  deleteMembraneByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMembraneByNameInput!
  ): DeleteMembranePayload

  """Deletes a single `ORing` using its globally unique id."""
  deleteORing(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteORingInput!
  ): DeleteORingPayload

  """Deletes a single `ORing` using a unique key."""
  deleteORingById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteORingByIdInput!
  ): DeleteORingPayload

  """Deletes a single `ORing` using a unique key."""
  deleteORingByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteORingByNameInput!
  ): DeleteORingPayload

  """Deletes a single `OfferteRemark` using its globally unique id."""
  deleteOfferteRemark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOfferteRemarkInput!
  ): DeleteOfferteRemarkPayload

  """Deletes a single `OfferteRemark` using a unique key."""
  deleteOfferteRemarkById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOfferteRemarkByIdInput!
  ): DeleteOfferteRemarkPayload

  """Deletes a single `OfferteRemark` using a unique key."""
  deleteOfferteRemarkByOfferteId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOfferteRemarkByOfferteIdInput!
  ): DeleteOfferteRemarkPayload

  """Deletes a single `Opportunity` using its globally unique id."""
  deleteOpportunity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpportunityInput!
  ): DeleteOpportunityPayload

  """Deletes a single `Opportunity` using a unique key."""
  deleteOpportunityById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpportunityByIdInput!
  ): DeleteOpportunityPayload

  """Deletes a single `Permission` using its globally unique id."""
  deletePermission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePermissionInput!
  ): DeletePermissionPayload

  """Deletes a single `Permission` using a unique key."""
  deletePermissionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePermissionByIdInput!
  ): DeletePermissionPayload

  """Deletes a single `PersoonRol` using its globally unique id."""
  deletePersoonRol(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePersoonRolInput!
  ): DeletePersoonRolPayload

  """Deletes a single `PersoonRol` using a unique key."""
  deletePersoonRolByPersoonRolGuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePersoonRolByPersoonRolGuidInput!
  ): DeletePersoonRolPayload

  """Deletes a single `Plug` using its globally unique id."""
  deletePlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlugInput!
  ): DeletePlugPayload

  """Deletes a single `Plug` using a unique key."""
  deletePlugById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlugByIdInput!
  ): DeletePlugPayload

  """Deletes a single `Plug` using a unique key."""
  deletePlugByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlugByNameInput!
  ): DeletePlugPayload

  """Deletes a single `Principle` using its globally unique id."""
  deletePrinciple(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePrincipleInput!
  ): DeletePrinciplePayload

  """Deletes a single `Principle` using a unique key."""
  deletePrincipleById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePrincipleByIdInput!
  ): DeletePrinciplePayload

  """Deletes a single `Principle` using a unique key."""
  deletePrincipleByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePrincipleByNameInput!
  ): DeletePrinciplePayload

  """Deletes a single `Production` using its globally unique id."""
  deleteProduction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductionInput!
  ): DeleteProductionPayload

  """Deletes a single `Production` using a unique key."""
  deleteProductionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductionByIdInput!
  ): DeleteProductionPayload

  """Deletes a single `Pyrolyser` using its globally unique id."""
  deletePyrolyser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePyrolyserInput!
  ): DeletePyrolyserPayload

  """Deletes a single `Pyrolyser` using a unique key."""
  deletePyrolyserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePyrolyserByIdInput!
  ): DeletePyrolyserPayload

  """Deletes a single `Pyrolyser` using a unique key."""
  deletePyrolyserByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePyrolyserByNameInput!
  ): DeletePyrolyserPayload

  """Deletes a single `Range` using its globally unique id."""
  deleteRange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRangeInput!
  ): DeleteRangePayload

  """Deletes a single `Range` using a unique key."""
  deleteRangeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRangeByIdInput!
  ): DeleteRangePayload

  """Deletes a single `Range` using a unique key."""
  deleteRangeByLowEuAndHighEuAndEngineeringUnitsAndGasId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRangeByLowEuAndHighEuAndEngineeringUnitsAndGasIdInput!
  ): DeleteRangePayload

  """Deletes a single `RcCard` using its globally unique id."""
  deleteRcCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRcCardInput!
  ): DeleteRcCardPayload

  """Deletes a single `RcCard` using a unique key."""
  deleteRcCardById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRcCardByIdInput!
  ): DeleteRcCardPayload

  """Deletes a single `ReportDetector` using its globally unique id."""
  deleteReportDetector(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReportDetectorInput!
  ): DeleteReportDetectorPayload

  """Deletes a single `ReportDetector` using a unique key."""
  deleteReportDetectorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReportDetectorByIdInput!
  ): DeleteReportDetectorPayload

  """Deletes a single `ReportDetector` using a unique key."""
  deleteReportDetectorByReportIdAndDetectorId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReportDetectorByReportIdAndDetectorIdInput!
  ): DeleteReportDetectorPayload

  """Deletes a single `ReportItem` using its globally unique id."""
  deleteReportItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReportItemInput!
  ): DeleteReportItemPayload

  """Deletes a single `ReportItem` using a unique key."""
  deleteReportItemById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReportItemByIdInput!
  ): DeleteReportItemPayload

  """Deletes a single `ReportSensor` using its globally unique id."""
  deleteReportSensor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReportSensorInput!
  ): DeleteReportSensorPayload

  """Deletes a single `ReportSensor` using a unique key."""
  deleteReportSensorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReportSensorByIdInput!
  ): DeleteReportSensorPayload

  """Deletes a single `ReportSensor` using a unique key."""
  deleteReportSensorByReportIdAndSensorId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReportSensorByReportIdAndSensorIdInput!
  ): DeleteReportSensorPayload

  """Deletes a single `Report` using its globally unique id."""
  deleteReport(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReportInput!
  ): DeleteReportPayload

  """Deletes a single `Report` using a unique key."""
  deleteReportById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReportByIdInput!
  ): DeleteReportPayload

  """Deletes a single `Report` using a unique key."""
  deleteReportByFilename(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReportByFilenameInput!
  ): DeleteReportPayload

  """Deletes a single `Report` using a unique key."""
  deleteReportByTsrNumberAndVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReportByTsrNumberAndVersionInput!
  ): DeleteReportPayload

  """Deletes a single `Request` using its globally unique id."""
  deleteRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRequestInput!
  ): DeleteRequestPayload

  """Deletes a single `Request` using a unique key."""
  deleteRequestById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRequestByIdInput!
  ): DeleteRequestPayload

  """Deletes a single `RxCard` using its globally unique id."""
  deleteRxCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRxCardInput!
  ): DeleteRxCardPayload

  """Deletes a single `RxCard` using a unique key."""
  deleteRxCardById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRxCardByIdInput!
  ): DeleteRxCardPayload

  """Deletes a single `SamplePoint` using its globally unique id."""
  deleteSamplePoint(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSamplePointInput!
  ): DeleteSamplePointPayload

  """Deletes a single `SamplePoint` using a unique key."""
  deleteSamplePointById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSamplePointByIdInput!
  ): DeleteSamplePointPayload

  """Deletes a single `SamplePoint` using a unique key."""
  deleteSamplePointByAreaIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSamplePointByAreaIdAndNameInput!
  ): DeleteSamplePointPayload

  """Deletes a single `SensorBaseType` using its globally unique id."""
  deleteSensorBaseType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorBaseTypeInput!
  ): DeleteSensorBaseTypePayload

  """Deletes a single `SensorBaseType` using a unique key."""
  deleteSensorBaseTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorBaseTypeByIdInput!
  ): DeleteSensorBaseTypePayload

  """Deletes a single `SensorBaseType` using a unique key."""
  deleteSensorBaseTypeByPrefixAndSuffix(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorBaseTypeByPrefixAndSuffixInput!
  ): DeleteSensorBaseTypePayload

  """Deletes a single `SensorElementLocation` using its globally unique id."""
  deleteSensorElementLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorElementLocationInput!
  ): DeleteSensorElementLocationPayload

  """Deletes a single `SensorElementLocation` using a unique key."""
  deleteSensorElementLocationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorElementLocationByIdInput!
  ): DeleteSensorElementLocationPayload

  """Deletes a single `SensorElementLocation` using a unique key."""
  deleteSensorElementLocationBySensorElementId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorElementLocationBySensorElementIdInput!
  ): DeleteSensorElementLocationPayload

  """Deletes a single `SensorElementLog` using its globally unique id."""
  deleteSensorElementLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorElementLogInput!
  ): DeleteSensorElementLogPayload

  """Deletes a single `SensorElementLog` using a unique key."""
  deleteSensorElementLogById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorElementLogByIdInput!
  ): DeleteSensorElementLogPayload

  """Deletes a single `SensorElementType` using its globally unique id."""
  deleteSensorElementType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorElementTypeInput!
  ): DeleteSensorElementTypePayload

  """Deletes a single `SensorElementType` using a unique key."""
  deleteSensorElementTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorElementTypeByIdInput!
  ): DeleteSensorElementTypePayload

  """Deletes a single `SensorElement` using its globally unique id."""
  deleteSensorElement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorElementInput!
  ): DeleteSensorElementPayload

  """Deletes a single `SensorElement` using a unique key."""
  deleteSensorElementById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorElementByIdInput!
  ): DeleteSensorElementPayload

  """Deletes a single `SensorOrder` using its globally unique id."""
  deleteSensorOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorOrderInput!
  ): DeleteSensorOrderPayload

  """Deletes a single `SensorOrder` using a unique key."""
  deleteSensorOrderById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorOrderByIdInput!
  ): DeleteSensorOrderPayload

  """Deletes a single `SensorOrder` using a unique key."""
  deleteSensorOrderBySensorIdAndFactuuropdracht(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorOrderBySensorIdAndFactuuropdrachtInput!
  ): DeleteSensorOrderPayload

  """Deletes a single `SensorSensorElement` using its globally unique id."""
  deleteSensorSensorElement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorSensorElementInput!
  ): DeleteSensorSensorElementPayload

  """Deletes a single `SensorSensorElement` using a unique key."""
  deleteSensorSensorElementById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorSensorElementByIdInput!
  ): DeleteSensorSensorElementPayload

  """Deletes a single `SensorSensorElement` using a unique key."""
  deleteSensorSensorElementBySensorIdAndSensorPosition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorSensorElementBySensorIdAndSensorPositionInput!
  ): DeleteSensorSensorElementPayload

  """Deletes a single `SensorSensorElement` using a unique key."""
  deleteSensorSensorElementBySensorElementId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorSensorElementBySensorElementIdInput!
  ): DeleteSensorSensorElementPayload

  """Deletes a single `SensorSetting` using its globally unique id."""
  deleteSensorSetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorSettingInput!
  ): DeleteSensorSettingPayload

  """Deletes a single `SensorSetting` using a unique key."""
  deleteSensorSettingById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorSettingByIdInput!
  ): DeleteSensorSettingPayload

  """Deletes a single `SensorSetting` using a unique key."""
  deleteSensorSettingByTypeTarget(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorSettingByTypeTargetInput!
  ): DeleteSensorSettingPayload

  """Deletes a single `SensorTestResult` using its globally unique id."""
  deleteSensorTestResult(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorTestResultInput!
  ): DeleteSensorTestResultPayload

  """Deletes a single `SensorTestResult` using a unique key."""
  deleteSensorTestResultById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorTestResultByIdInput!
  ): DeleteSensorTestResultPayload

  """Deletes a single `SensorType` using its globally unique id."""
  deleteSensorType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorTypeInput!
  ): DeleteSensorTypePayload

  """Deletes a single `SensorType` using a unique key."""
  deleteSensorTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorTypeByIdInput!
  ): DeleteSensorTypePayload

  """Deletes a single `SensorType` using a unique key."""
  deleteSensorTypeBySensorTypeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorTypeBySensorTypeIdInput!
  ): DeleteSensorTypePayload

  """Deletes a single `SensorType` using a unique key."""
  deleteSensorTypeBySensorBaseTypeIdAndRangeIdAndCodeAndModelAndPyrolyserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorTypeBySensorBaseTypeIdAndRangeIdAndCodeAndModelAndPyrolyserIdInput!
  ): DeleteSensorTypePayload

  """Deletes a single `Sensor` using its globally unique id."""
  deleteSensor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorInput!
  ): DeleteSensorPayload

  """Deletes a single `Sensor` using a unique key."""
  deleteSensorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorByIdInput!
  ): DeleteSensorPayload

  """Deletes a single `Sensor` using a unique key."""
  deleteSensorBySerialNumberAndSensorTypeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSensorBySerialNumberAndSensorTypeIdInput!
  ): DeleteSensorPayload

  """Deletes a single `Software` using its globally unique id."""
  deleteSoftware(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSoftwareInput!
  ): DeleteSoftwarePayload

  """Deletes a single `Software` using a unique key."""
  deleteSoftwareById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSoftwareByIdInput!
  ): DeleteSoftwarePayload

  """Deletes a single `StockGroup` using its globally unique id."""
  deleteStockGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStockGroupInput!
  ): DeleteStockGroupPayload

  """Deletes a single `StockGroup` using a unique key."""
  deleteStockGroupById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStockGroupByIdInput!
  ): DeleteStockGroupPayload

  """Deletes a single `StockItem` using its globally unique id."""
  deleteStockItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStockItemInput!
  ): DeleteStockItemPayload

  """Deletes a single `StockItem` using a unique key."""
  deleteStockItemById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStockItemByIdInput!
  ): DeleteStockItemPayload

  """Deletes a single `StockItem` using a unique key."""
  deleteStockItemByStockGroupIdAndCdartikel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStockItemByStockGroupIdAndCdartikelInput!
  ): DeleteStockItemPayload

  """Deletes a single `StockSupplier` using its globally unique id."""
  deleteStockSupplier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStockSupplierInput!
  ): DeleteStockSupplierPayload

  """Deletes a single `StockSupplier` using a unique key."""
  deleteStockSupplierById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStockSupplierByIdInput!
  ): DeleteStockSupplierPayload

  """Deletes a single `Task` using its globally unique id."""
  deleteTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaskInput!
  ): DeleteTaskPayload

  """Deletes a single `Task` using a unique key."""
  deleteTaskById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaskByIdInput!
  ): DeleteTaskPayload

  """Deletes a single `TempFactopdrachtregel` using its globally unique id."""
  deleteTempFactopdrachtregel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTempFactopdrachtregelInput!
  ): DeleteTempFactopdrachtregelPayload

  """Deletes a single `TempFactopdrachtregel` using a unique key."""
  deleteTempFactopdrachtregelById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTempFactopdrachtregelByIdInput!
  ): DeleteTempFactopdrachtregelPayload

  """Deletes a single `TempFactopdrachtregel` using a unique key."""
  deleteTempFactopdrachtregelByFactuuropdrachtAndFactuurregel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTempFactopdrachtregelByFactuuropdrachtAndFactuurregelInput!
  ): DeleteTempFactopdrachtregelPayload

  """Deletes a single `TempLicense` using its globally unique id."""
  deleteTempLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTempLicenseInput!
  ): DeleteTempLicensePayload

  """Deletes a single `TempLicense` using a unique key."""
  deleteTempLicenseById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTempLicenseByIdInput!
  ): DeleteTempLicensePayload

  """
  Deletes a single `TempRegistrationHistory` using its globally unique id.
  """
  deleteTempRegistrationHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTempRegistrationHistoryInput!
  ): DeleteTempRegistrationHistoryPayload

  """Deletes a single `TempRegistrationHistory` using a unique key."""
  deleteTempRegistrationHistoryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTempRegistrationHistoryByIdInput!
  ): DeleteTempRegistrationHistoryPayload

  """Deletes a single `TempRegistration` using its globally unique id."""
  deleteTempRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTempRegistrationInput!
  ): DeleteTempRegistrationPayload

  """Deletes a single `TempRegistration` using a unique key."""
  deleteTempRegistrationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTempRegistrationByIdInput!
  ): DeleteTempRegistrationPayload

  """Deletes a single `TempRegistrations2` using its globally unique id."""
  deleteTempRegistrations2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTempRegistrations2Input!
  ): DeleteTempRegistrations2Payload

  """Deletes a single `TempRegistrations2` using a unique key."""
  deleteTempRegistrations2ById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTempRegistrations2ByIdInput!
  ): DeleteTempRegistrations2Payload

  """Deletes a single `Test` using its globally unique id."""
  deleteTest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTestInput!
  ): DeleteTestPayload

  """Deletes a single `Test` using a unique key."""
  deleteTestById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTestByIdInput!
  ): DeleteTestPayload

  """Deletes a single `UserRight` using its globally unique id."""
  deleteUserRight(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserRightInput!
  ): DeleteUserRightPayload

  """Deletes a single `UserRight` using a unique key."""
  deleteUserRightById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserRightByIdInput!
  ): DeleteUserRightPayload

  """Deletes a single `UserRight` using a unique key."""
  deleteUserRightByUserIdAndPath(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserRightByUserIdAndPathInput!
  ): DeleteUserRightPayload

  """Deletes a single `UserTask` using its globally unique id."""
  deleteUserTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserTaskInput!
  ): DeleteUserTaskPayload

  """Deletes a single `UserTask` using a unique key."""
  deleteUserTaskById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserTaskByIdInput!
  ): DeleteUserTaskPayload

  """Deletes a single `UserTask` using a unique key."""
  deleteUserTaskByUserIdAndTaskId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserTaskByUserIdAndTaskIdInput!
  ): DeleteUserTaskPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByUsernameInput!
  ): DeleteUserPayload

  """Deletes a single `UsersGroup` using its globally unique id."""
  deleteUsersGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUsersGroupInput!
  ): DeleteUsersGroupPayload

  """Deletes a single `UsersGroup` using a unique key."""
  deleteUsersGroupById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUsersGroupByIdInput!
  ): DeleteUsersGroupPayload

  """Deletes a single `UsersGroup` using a unique key."""
  deleteUsersGroupByUserIdAndGroupId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUsersGroupByUserIdAndGroupIdInput!
  ): DeleteUsersGroupPayload

  """Deletes a single `Voorraden` using its globally unique id."""
  deleteVoorraden(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteVoorradenInput!
  ): DeleteVoorradenPayload

  """Deletes a single `Voorraden` using a unique key."""
  deleteVoorradenByCdartikelAndCdmagazijn(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteVoorradenByCdartikelAndCdmagazijnInput!
  ): DeleteVoorradenPayload

  """Deletes a single `VoorradenLog` using its globally unique id."""
  deleteVoorradenLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteVoorradenLogInput!
  ): DeleteVoorradenLogPayload

  """Deletes a single `VoorradenLog` using a unique key."""
  deleteVoorradenLogById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteVoorradenLogByIdInput!
  ): DeleteVoorradenLogPayload

  """Deletes a single `WeeklyHourRemark` using its globally unique id."""
  deleteWeeklyHourRemark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteWeeklyHourRemarkInput!
  ): DeleteWeeklyHourRemarkPayload

  """Deletes a single `WeeklyHourRemark` using a unique key."""
  deleteWeeklyHourRemarkById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteWeeklyHourRemarkByIdInput!
  ): DeleteWeeklyHourRemarkPayload

  """Deletes a single `WeeklyHourRemark` using a unique key."""
  deleteWeeklyHourRemarkByUserIdAndTaskIdAndDate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteWeeklyHourRemarkByUserIdAndTaskIdAndDateInput!
  ): DeleteWeeklyHourRemarkPayload

  """Deletes a single `WeeklyHour` using its globally unique id."""
  deleteWeeklyHour(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteWeeklyHourInput!
  ): DeleteWeeklyHourPayload

  """Deletes a single `WeeklyHour` using a unique key."""
  deleteWeeklyHourById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteWeeklyHourByIdInput!
  ): DeleteWeeklyHourPayload
  authenticate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AuthenticateInput!
  ): AuthenticatePayload
  createGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupInput!
  ): CreateGroupPayload
  createGroupWithPermissions(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupWithPermissionsInput!
  ): CreateGroupWithPermissionsPayload
  createSensors(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSensorsInput!
  ): CreateSensorsPayload
  createUserWithGroups(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserWithGroupsInput!
  ): CreateUserWithGroupsPayload
  deleteGroupAndPermissions(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupAndPermissionsInput!
  ): DeleteGroupAndPermissionsPayload
  deleteuserandgroups(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteuserandgroupsInput!
  ): DeleteuserandgroupsPayload
  dueClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DueClassInput!
  ): DueClassPayload
  exchangeDetectors(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ExchangeDetectorsInput!
  ): ExchangeDetectorsPayload
  exchangeDetectorsById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ExchangeDetectorsByIdInput!
  ): ExchangeDetectorsByIdPayload
  exchangeSensors(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ExchangeSensorsInput!
  ): ExchangeSensorsPayload
  exchangeSensorsById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ExchangeSensorsByIdInput!
  ): ExchangeSensorsByIdPayload
  pc5109DSettings(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: Pc5109DSettingsInput!
  ): Pc5109DSettingsPayload
  pc5154BSettings(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: Pc5154BSettingsInput!
  ): Pc5154BSettingsPayload
  pc5155BSettings(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: Pc5155BSettingsInput!
  ): Pc5155BSettingsPayload
  updateDetectorAndSensors(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDetectorAndSensorsInput!
  ): UpdateDetectorAndSensorsPayload
  updateGroupWithPermissions(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupWithPermissionsInput!
  ): UpdateGroupWithPermissionsPayload
  updateUserGroups(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserGroupsInput!
  ): UpdateUserGroupsPayload
  updateUserWithGroups(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserWithGroupsInput!
  ): UpdateUserWithGroupsPayload
  upsertDetectorSensorBySensorId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertDetectorSensorBySensorIdInput!
  ): UpsertDetectorSensorBySensorIdPayload
}

"""The output of our create `AspNetRoleClaim` mutation."""
type CreateAspNetRoleClaimPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AspNetRoleClaim` that was created by this mutation."""
  aspNetRoleClaim: AspNetRoleClaim

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `AspNetRole` that is related to this `AspNetRoleClaim`."""
  aspNetRoleByRoleId: AspNetRole

  """An edge for our `AspNetRoleClaim`. May be used by Relay 1."""
  aspNetRoleClaimEdge(
    """The method to use when ordering `AspNetRoleClaim`."""
    orderBy: [AspNetRoleClaimsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AspNetRoleClaimsEdge
}

"""All input for the create `AspNetRoleClaim` mutation."""
input CreateAspNetRoleClaimInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AspNetRoleClaim` to be created by this mutation."""
  aspNetRoleClaim: AspNetRoleClaimInput!
}

"""An input for mutations affecting `AspNetRoleClaim`"""
input AspNetRoleClaimInput {
  id: Int
  roleId: String!
  claimType: String
  claimValue: String
}

"""The output of our create `AspNetRole` mutation."""
type CreateAspNetRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AspNetRole` that was created by this mutation."""
  aspNetRole: AspNetRole

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `AspNetRole`. May be used by Relay 1."""
  aspNetRoleEdge(
    """The method to use when ordering `AspNetRole`."""
    orderBy: [AspNetRolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AspNetRolesEdge
}

"""All input for the create `AspNetRole` mutation."""
input CreateAspNetRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AspNetRole` to be created by this mutation."""
  aspNetRole: AspNetRoleInput!
}

"""An input for mutations affecting `AspNetRole`"""
input AspNetRoleInput {
  id: String!
  name: String
  normalizedName: String
  concurrencyStamp: String
}

"""The output of our create `AspNetUserClaim` mutation."""
type CreateAspNetUserClaimPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AspNetUserClaim` that was created by this mutation."""
  aspNetUserClaim: AspNetUserClaim

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `AspNetUser` that is related to this `AspNetUserClaim`."""
  aspNetUserByUserId: AspNetUser

  """An edge for our `AspNetUserClaim`. May be used by Relay 1."""
  aspNetUserClaimEdge(
    """The method to use when ordering `AspNetUserClaim`."""
    orderBy: [AspNetUserClaimsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AspNetUserClaimsEdge
}

"""All input for the create `AspNetUserClaim` mutation."""
input CreateAspNetUserClaimInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AspNetUserClaim` to be created by this mutation."""
  aspNetUserClaim: AspNetUserClaimInput!
}

"""An input for mutations affecting `AspNetUserClaim`"""
input AspNetUserClaimInput {
  id: Int
  userId: String!
  claimType: String
  claimValue: String
}

"""The output of our create `AspNetUserLogin` mutation."""
type CreateAspNetUserLoginPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AspNetUserLogin` that was created by this mutation."""
  aspNetUserLogin: AspNetUserLogin

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `AspNetUser` that is related to this `AspNetUserLogin`."""
  aspNetUserByUserId: AspNetUser

  """An edge for our `AspNetUserLogin`. May be used by Relay 1."""
  aspNetUserLoginEdge(
    """The method to use when ordering `AspNetUserLogin`."""
    orderBy: [AspNetUserLoginsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AspNetUserLoginsEdge
}

"""All input for the create `AspNetUserLogin` mutation."""
input CreateAspNetUserLoginInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AspNetUserLogin` to be created by this mutation."""
  aspNetUserLogin: AspNetUserLoginInput!
}

"""An input for mutations affecting `AspNetUserLogin`"""
input AspNetUserLoginInput {
  loginProvider: String!
  providerKey: String!
  providerDisplayName: String
  userId: String!
}

"""The output of our create `AspNetUserRole` mutation."""
type CreateAspNetUserRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AspNetUserRole` that was created by this mutation."""
  aspNetUserRole: AspNetUserRole

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `AspNetUser` that is related to this `AspNetUserRole`."""
  aspNetUserByUserId: AspNetUser

  """Reads a single `AspNetRole` that is related to this `AspNetUserRole`."""
  aspNetRoleByRoleId: AspNetRole

  """Reads a single `AspNetUser` that is related to this `AspNetUserRole`."""
  aspNetUserByAppUserId: AspNetUser

  """An edge for our `AspNetUserRole`. May be used by Relay 1."""
  aspNetUserRoleEdge(
    """The method to use when ordering `AspNetUserRole`."""
    orderBy: [AspNetUserRolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AspNetUserRolesEdge
}

"""All input for the create `AspNetUserRole` mutation."""
input CreateAspNetUserRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AspNetUserRole` to be created by this mutation."""
  aspNetUserRole: AspNetUserRoleInput!
}

"""An input for mutations affecting `AspNetUserRole`"""
input AspNetUserRoleInput {
  userId: String!
  roleId: String!
  appUserId: String
}

"""The output of our create `AspNetUserToken` mutation."""
type CreateAspNetUserTokenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AspNetUserToken` that was created by this mutation."""
  aspNetUserToken: AspNetUserToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `AspNetUser` that is related to this `AspNetUserToken`."""
  aspNetUserByUserId: AspNetUser

  """An edge for our `AspNetUserToken`. May be used by Relay 1."""
  aspNetUserTokenEdge(
    """The method to use when ordering `AspNetUserToken`."""
    orderBy: [AspNetUserTokensOrderBy!] = [PRIMARY_KEY_ASC]
  ): AspNetUserTokensEdge
}

"""All input for the create `AspNetUserToken` mutation."""
input CreateAspNetUserTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AspNetUserToken` to be created by this mutation."""
  aspNetUserToken: AspNetUserTokenInput!
}

"""An input for mutations affecting `AspNetUserToken`"""
input AspNetUserTokenInput {
  userId: String!
  loginProvider: String!
  name: String!
  value: String
}

"""The output of our create `AspNetUser` mutation."""
type CreateAspNetUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AspNetUser` that was created by this mutation."""
  aspNetUser: AspNetUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `AspNetUser`. May be used by Relay 1."""
  aspNetUserEdge(
    """The method to use when ordering `AspNetUser`."""
    orderBy: [AspNetUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): AspNetUsersEdge
}

"""All input for the create `AspNetUser` mutation."""
input CreateAspNetUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AspNetUser` to be created by this mutation."""
  aspNetUser: AspNetUserInput!
}

"""An input for mutations affecting `AspNetUser`"""
input AspNetUserInput {
  id: String!
  displayName: String!
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: Datetime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
}

"""The output of our create `RefreshToken` mutation."""
type CreateRefreshTokenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RefreshToken` that was created by this mutation."""
  refreshToken: RefreshToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `AspNetUser` that is related to this `RefreshToken`."""
  aspNetUserByAppUserId: AspNetUser

  """An edge for our `RefreshToken`. May be used by Relay 1."""
  refreshTokenEdge(
    """The method to use when ordering `RefreshToken`."""
    orderBy: [RefreshTokensOrderBy!] = [PRIMARY_KEY_ASC]
  ): RefreshTokensEdge
}

"""All input for the create `RefreshToken` mutation."""
input CreateRefreshTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RefreshToken` to be created by this mutation."""
  refreshToken: RefreshTokenInput!
}

"""An input for mutations affecting `RefreshToken`"""
input RefreshTokenInput {
  id: Int
  appUserId: String!
  token: String!
  expires: Datetime!
  revoked: Datetime
}

"""The output of our create `_Adre` mutation."""
type CreateAdrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `_Adre` that was created by this mutation."""
  _adre: _Adre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `_Adre`. May be used by Relay 1."""
  _adreEdge(
    """The method to use when ordering `_Adre`."""
    orderBy: [_AdresOrderBy!] = [PRIMARY_KEY_ASC]
  ): _AdresEdge
}

"""A `_Adre` edge in the connection."""
type _AdresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `_Adre` at the end of the edge."""
  node: _Adre!
}

"""Methods to use when ordering `_Adre`."""
enum _AdresOrderBy {
  NATURAL
  ADRESTYPE_ASC
  ADRESTYPE_DESC
  ADRES_GUID_ASC
  ADRES_GUID_DESC
  CDADRES_ASC
  CDADRES_DESC
  CDLAND_ASC
  CDLAND_DESC
  CDPERSOON_ASC
  CDPERSOON_DESC
  CDRELATIE_ASC
  CDRELATIE_DESC
  CDTAAL_ASC
  CDTAAL_DESC
  EMAIL_ASC
  EMAIL_DESC
  HOMEPAGE_ASC
  HOMEPAGE_DESC
  NAAM_ASC
  NAAM_DESC
  NAAMSTRAAT_ASC
  NAAMSTRAAT_DESC
  PERSOON_ASC
  PERSOON_DESC
  POSTCODE_ASC
  POSTCODE_DESC
  STRAAT_ASC
  STRAAT_DESC
  TELEFAX_ASC
  TELEFAX_DESC
  TELEFOON_ASC
  TELEFOON_DESC
  TELEFOONMOBIEL_ASC
  TELEFOONMOBIEL_DESC
  WOONPLAATS_ASC
  WOONPLAATS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `_Adre` mutation."""
input CreateAdreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `_Adre` to be created by this mutation."""
  _adre: _AdreInput!
}

"""An input for mutations affecting `_Adre`"""
input _AdreInput {
  adrestype: String!
  adresGuid: String!
  cdadres: Int
  cdland: String
  cdpersoon: String
  cdrelatie: Int
  cdtaal: String
  email: String
  homepage: String
  naam: String
  naamstraat: String
  persoon: String
  postcode: String
  straat: String
  telefax: String
  telefoon: String
  telefoonmobiel: String
  woonplaats: String
}

"""The output of our create `_Land` mutation."""
type CreateLandPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `_Land` that was created by this mutation."""
  _land: _Land

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `_Land`. May be used by Relay 1."""
  _landEdge(
    """The method to use when ordering `_Land`."""
    orderBy: [_LandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): _LandsEdge
}

"""A `_Land` edge in the connection."""
type _LandsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `_Land` at the end of the edge."""
  node: _Land!
}

"""Methods to use when ordering `_Land`."""
enum _LandsOrderBy {
  NATURAL
  CDLAND_ASC
  CDLAND_DESC
  OMSCHR_ASC
  OMSCHR_DESC
  CBSLAND_ASC
  CBSLAND_DESC
  CDEGLID_ASC
  CDEGLID_DESC
  ISOLAND_ASC
  ISOLAND_DESC
  RSZLAND_ASC
  RSZLAND_DESC
  SEPA_ASC
  SEPA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  OPPORTUNITIES_BY_CDLAND__COUNT_ASC
  OPPORTUNITIES_BY_CDLAND__COUNT_DESC
}

"""All input for the create `_Land` mutation."""
input CreateLandInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `_Land` to be created by this mutation."""
  _land: _LandInput!
}

"""An input for mutations affecting `_Land`"""
input _LandInput {
  cdland: String!
  omschr: String
  cbsland: String
  cdeglid: String
  isoland: String
  rszland: Int
  sepa: String
}

"""The output of our create `Aco` mutation."""
type CreateAcoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Aco` that was created by this mutation."""
  aco: Aco

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Aco`. May be used by Relay 1."""
  acoEdge(
    """The method to use when ordering `Aco`."""
    orderBy: [AcosOrderBy!] = [PRIMARY_KEY_ASC]
  ): AcosEdge
}

"""All input for the create `Aco` mutation."""
input CreateAcoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Aco` to be created by this mutation."""
  aco: AcoInput!
}

"""An input for mutations affecting `Aco`"""
input AcoInput {
  id: Int
  parentId: Int
  model: String
  foreignKey: Int
  alias: String
  lft: Int
  rght: Int
}

"""The output of our create `Action` mutation."""
type CreateActionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Action` that was created by this mutation."""
  action: Action

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Action`."""
  userByUserId: User

  """Reads a single `Group` that is related to this `Action`."""
  groupByGroupId: Group

  """Reads a single `Report` that is related to this `Action`."""
  reportByReportId: Report

  """Reads a single `User` that is related to this `Action`."""
  userByOwnerId: User

  """An edge for our `Action`. May be used by Relay 1."""
  actionEdge(
    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ActionsEdge
}

"""All input for the create `Action` mutation."""
input CreateActionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Action` to be created by this mutation."""
  action: ActionInput!
}

"""An input for mutations affecting `Action`"""
input ActionInput {
  id: Int
  action: String!
  userId: Int
  groupId: Int
  created: Datetime
  modified: Datetime
  closed: Boolean
  reportId: Int
  ownerId: Int!
  date: Date
  followUp: String
  endUserId: Int!
}

"""The output of our create `Application` mutation."""
type CreateApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Application` that was created by this mutation."""
  application: Application

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Application`."""
  userByOwnerId: User

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the create `Application` mutation."""
input CreateApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Application` to be created by this mutation."""
  application: ApplicationInput!
}

"""An input for mutations affecting `Application`"""
input ApplicationInput {
  id: Int
  _toolId: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int!
}

"""The output of our create `Area` mutation."""
type CreateAreaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Area` that was created by this mutation."""
  area: Area

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Floor` that is related to this `Area`."""
  floorByFloorId: Floor

  """Reads a single `User` that is related to this `Area`."""
  userByOwnerId: User

  """An edge for our `Area`. May be used by Relay 1."""
  areaEdge(
    """The method to use when ordering `Area`."""
    orderBy: [AreasOrderBy!] = [PRIMARY_KEY_ASC]
  ): AreasEdge
}

"""All input for the create `Area` mutation."""
input CreateAreaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Area` to be created by this mutation."""
  area: AreaInput!
}

"""An input for mutations affecting `Area`"""
input AreaInput {
  id: Int
  floorId: Int!
  name: String!
  created: Datetime
  modified: Datetime
  ownerId: Int
  remarks: String
}

"""The output of our create `Aro` mutation."""
type CreateAroPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Aro` that was created by this mutation."""
  aro: Aro

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Aro`. May be used by Relay 1."""
  aroEdge(
    """The method to use when ordering `Aro`."""
    orderBy: [ArosOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArosEdge
}

"""All input for the create `Aro` mutation."""
input CreateAroInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Aro` to be created by this mutation."""
  aro: AroInput!
}

"""An input for mutations affecting `Aro`"""
input AroInput {
  id: Int
  parentId: Int
  model: String
  foreignKey: Int
  alias: String
  lft: Int
  rght: Int
}

"""The output of our create `ArosAco` mutation."""
type CreateArosAcoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ArosAco` that was created by this mutation."""
  arosAco: ArosAco

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ArosAco`. May be used by Relay 1."""
  arosAcoEdge(
    """The method to use when ordering `ArosAco`."""
    orderBy: [ArosAcosOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArosAcosEdge
}

"""All input for the create `ArosAco` mutation."""
input CreateArosAcoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ArosAco` to be created by this mutation."""
  arosAco: ArosAcoInput!
}

"""An input for mutations affecting `ArosAco`"""
input ArosAcoInput {
  id: Int
  aroId: Int!
  acoId: Int!
  _create: String
  _read: String
  _update: String
  _delete: String
}

"""The output of our create `Artikel` mutation."""
type CreateArtikelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Artikel` that was created by this mutation."""
  artikel: Artikel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Artikel`. May be used by Relay 1."""
  artikelEdge(
    """The method to use when ordering `Artikel`."""
    orderBy: [ArtikelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArtikelsEdge
}

"""All input for the create `Artikel` mutation."""
input CreateArtikelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Artikel` to be created by this mutation."""
  artikel: ArtikelInput!
}

"""An input for mutations affecting `Artikel`"""
input ArtikelInput {
  cdartikel: String!
  zoeknaam: String
  omschr: String
  soort: String
  cdartgroep: String
  cdgrbrekening: String
  prijsper: BigFloat
  aantaldec: Int
  prijsincl: BigFloat
  prijsexcl: BigFloat
  verrekenprijs: BigFloat
  voorraad: BigFloat
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  eenheid: String
  btwcode: Int
  cdartkortgrp: String
  cdgoedcode: Int
  gewicht: BigFloat
  aanveenh: BigFloat
  inkvolgnr: Int
  uitloop: String
  aanmaakdatum: Date
  opweb: String
  magbon: String
  pakbon: String
  factuur: String
  cdgrbrekkort: String
  datumltstewijz: Date
  cdgrbrekdekking: String
  projOpslag: BigFloat
  projMutsoort: String
  eannummer: String
  afdrukSamOpOfferte: String
  samVersie: String
  assemblageArtikel: String
  margePerc: BigFloat
  guidItem: String
  sysCreate: String
  sysUpdate: String
  vvbestand: String
  vvgroep: String
  vvvrijvelda: String
  vvvrijveldb: String
  cdlandOorspr: String
}

"""The output of our create `ArtikelLog` mutation."""
type CreateArtikelLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ArtikelLog` that was created by this mutation."""
  artikelLog: ArtikelLog

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ArtikelLog`. May be used by Relay 1."""
  artikelLogEdge(
    """The method to use when ordering `ArtikelLog`."""
    orderBy: [ArtikelLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArtikelLogsEdge
}

"""All input for the create `ArtikelLog` mutation."""
input CreateArtikelLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ArtikelLog` to be created by this mutation."""
  artikelLog: ArtikelLogInput!
}

"""An input for mutations affecting `ArtikelLog`"""
input ArtikelLogInput {
  id: Int
  created: Datetime
  operation: String
  new: JSON
  old: JSON
}

"""The output of our create `Artikelomschr` mutation."""
type CreateArtikelomschrPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Artikelomschr` that was created by this mutation."""
  artikelomschr: Artikelomschr

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Artikelomschr`. May be used by Relay 1."""
  artikelomschrEdge(
    """The method to use when ordering `Artikelomschr`."""
    orderBy: [ArtikelomschrsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArtikelomschrsEdge
}

"""All input for the create `Artikelomschr` mutation."""
input CreateArtikelomschrInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Artikelomschr` to be created by this mutation."""
  artikelomschr: ArtikelomschrInput!
}

"""An input for mutations affecting `Artikelomschr`"""
input ArtikelomschrInput {
  cdartikel: String!
  cdtaal: String!
  omschr: String
  eenheid: String
}

"""The output of our create `Assembly` mutation."""
type CreateAssemblyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Assembly` that was created by this mutation."""
  assembly: Assembly

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `AssemblyType` that is related to this `Assembly`."""
  assemblyTypeByAssemblyTypeId: AssemblyType

  """Reads a single `User` that is related to this `Assembly`."""
  userByOwnerId: User

  """An edge for our `Assembly`. May be used by Relay 1."""
  assemblyEdge(
    """The method to use when ordering `Assembly`."""
    orderBy: [AssembliesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssembliesEdge
}

"""All input for the create `Assembly` mutation."""
input CreateAssemblyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Assembly` to be created by this mutation."""
  assembly: AssemblyInput!
}

"""An input for mutations affecting `Assembly`"""
input AssemblyInput {
  id: Int
  code: String
  startSerialNumber: String
  quantity: Int
  assemblyTypeId: Int
  ownerId: Int!
  created: Datetime!
  modified: Datetime
  completed: Boolean
  mvDoc: String
  checked: Boolean
  po: Boolean
}

"""The output of our create `AssemblyPart` mutation."""
type CreateAssemblyPartPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AssemblyPart` that was created by this mutation."""
  assemblyPart: AssemblyPart

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `AssemblyPart`."""
  userByOwnerId: User

  """An edge for our `AssemblyPart`. May be used by Relay 1."""
  assemblyPartEdge(
    """The method to use when ordering `AssemblyPart`."""
    orderBy: [AssemblyPartsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssemblyPartsEdge
}

"""All input for the create `AssemblyPart` mutation."""
input CreateAssemblyPartInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AssemblyPart` to be created by this mutation."""
  assemblyPart: AssemblyPartInput!
}

"""An input for mutations affecting `AssemblyPart`"""
input AssemblyPartInput {
  id: Int
  assemblyId: Int!
  cdartikel: String
  used1: String
  used2: String
  short: String
  po: String
  quantity: Float
  ownerId: Int!
  created: Datetime
  modified: Datetime
  ext: String
  xxx: String
  usedQuantity: String
  deliveryEstimate: String
  prijsper: BigFloat
  omschr: String
  zoeknaam: String
  bestcode: String
  locatie: String
  verrekenprijs: BigFloat
}

"""The output of our create `AssemblyTypePart` mutation."""
type CreateAssemblyTypePartPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AssemblyTypePart` that was created by this mutation."""
  assemblyTypePart: AssemblyTypePart

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `AssemblyType` that is related to this `AssemblyTypePart`.
  """
  assemblyTypeByAssemblyTypeId: AssemblyType

  """Reads a single `User` that is related to this `AssemblyTypePart`."""
  userByOwnerId: User

  """An edge for our `AssemblyTypePart`. May be used by Relay 1."""
  assemblyTypePartEdge(
    """The method to use when ordering `AssemblyTypePart`."""
    orderBy: [AssemblyTypePartsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssemblyTypePartsEdge
}

"""All input for the create `AssemblyTypePart` mutation."""
input CreateAssemblyTypePartInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AssemblyTypePart` to be created by this mutation."""
  assemblyTypePart: AssemblyTypePartInput!
}

"""An input for mutations affecting `AssemblyTypePart`"""
input AssemblyTypePartInput {
  id: Int
  assemblyTypeId: Int!
  cdartikel: String
  quantity: Float
  ownerId: Int!
  created: Datetime
  modified: Datetime
  prijsper: BigFloat
  omschr: String
  zoeknaam: String
  bestcode: String
  locatie: String
  verrekenprijs: BigFloat
}

"""The output of our create `AssemblyType` mutation."""
type CreateAssemblyTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AssemblyType` that was created by this mutation."""
  assemblyType: AssemblyType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `AssemblyType`."""
  userByOwnerId: User

  """Reads a single `Artikel` that is related to this `AssemblyType`."""
  artikelByCdartikel: Artikel

  """An edge for our `AssemblyType`. May be used by Relay 1."""
  assemblyTypeEdge(
    """The method to use when ordering `AssemblyType`."""
    orderBy: [AssemblyTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssemblyTypesEdge
}

"""All input for the create `AssemblyType` mutation."""
input CreateAssemblyTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AssemblyType` to be created by this mutation."""
  assemblyType: AssemblyTypeInput!
}

"""An input for mutations affecting `AssemblyType`"""
input AssemblyTypeInput {
  id: Int
  name: String
  cdartikel: String
  ownerId: Int!
  created: Datetime!
  modified: Datetime
}

"""The output of our create `Building` mutation."""
type CreateBuildingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Building` that was created by this mutation."""
  building: Building

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `EndUser` that is related to this `Building`."""
  endUserByEndUserId: EndUser

  """Reads a single `User` that is related to this `Building`."""
  userByOwnerId: User

  """An edge for our `Building`. May be used by Relay 1."""
  buildingEdge(
    """The method to use when ordering `Building`."""
    orderBy: [BuildingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BuildingsEdge
}

"""All input for the create `Building` mutation."""
input CreateBuildingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Building` to be created by this mutation."""
  building: BuildingInput!
}

"""An input for mutations affecting `Building`"""
input BuildingInput {
  id: Int
  endUserId: Int!
  name: String!
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""The output of our create `CalGas` mutation."""
type CreateCalGasPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CalGas` that was created by this mutation."""
  calGas: CalGas

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Gas` that is related to this `CalGas`."""
  gasByGasId: Gas

  """Reads a single `User` that is related to this `CalGas`."""
  userByOwnerId: User

  """An edge for our `CalGas`. May be used by Relay 1."""
  calGasEdge(
    """The method to use when ordering `CalGas`."""
    orderBy: [CalGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CalGasesEdge
}

"""All input for the create `CalGas` mutation."""
input CreateCalGasInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CalGas` to be created by this mutation."""
  calGas: CalGasInput!
}

"""An input for mutations affecting `CalGas`"""
input CalGasInput {
  id: Int
  gasId: Int!
  concentration: Float
  engineeringUnits: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  cdartikel: String
}

"""The output of our create `CatalogGroup` mutation."""
type CreateCatalogGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CatalogGroup` that was created by this mutation."""
  catalogGroup: CatalogGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CatalogGroup`."""
  userByOwnerId: User

  """An edge for our `CatalogGroup`. May be used by Relay 1."""
  catalogGroupEdge(
    """The method to use when ordering `CatalogGroup`."""
    orderBy: [CatalogGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CatalogGroupsEdge
}

"""All input for the create `CatalogGroup` mutation."""
input CreateCatalogGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CatalogGroup` to be created by this mutation."""
  catalogGroup: CatalogGroupInput!
}

"""An input for mutations affecting `CatalogGroup`"""
input CatalogGroupInput {
  id: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int!
  sortCode: String
}

"""The output of our create `CatalogItemFile` mutation."""
type CreateCatalogItemFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CatalogItemFile` that was created by this mutation."""
  catalogItemFile: CatalogItemFile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CatalogItemFile`."""
  userByOwnerId: User

  """
  Reads a single `CatalogItem` that is related to this `CatalogItemFile`.
  """
  catalogItemByCatalogItemId: CatalogItem

  """An edge for our `CatalogItemFile`. May be used by Relay 1."""
  catalogItemFileEdge(
    """The method to use when ordering `CatalogItemFile`."""
    orderBy: [CatalogItemFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CatalogItemFilesEdge
}

"""All input for the create `CatalogItemFile` mutation."""
input CreateCatalogItemFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CatalogItemFile` to be created by this mutation."""
  catalogItemFile: CatalogItemFileInput!
}

"""An input for mutations affecting `CatalogItemFile`"""
input CatalogItemFileInput {
  id: Int
  filename: String!
  created: Datetime
  modified: Datetime
  ownerId: Int
  catalogItemId: Int!
  type: Int!
}

"""The output of our create `CatalogItemRelation` mutation."""
type CreateCatalogItemRelationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CatalogItemRelation` that was created by this mutation."""
  catalogItemRelation: CatalogItemRelation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CatalogItem` that is related to this `CatalogItemRelation`.
  """
  catalogItemByParentCatalogItemId: CatalogItem

  """
  Reads a single `CatalogItem` that is related to this `CatalogItemRelation`.
  """
  catalogItemByChildCatalogItemId: CatalogItem

  """An edge for our `CatalogItemRelation`. May be used by Relay 1."""
  catalogItemRelationEdge(
    """The method to use when ordering `CatalogItemRelation`."""
    orderBy: [CatalogItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CatalogItemRelationsEdge
}

"""All input for the create `CatalogItemRelation` mutation."""
input CreateCatalogItemRelationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CatalogItemRelation` to be created by this mutation."""
  catalogItemRelation: CatalogItemRelationInput!
}

"""An input for mutations affecting `CatalogItemRelation`"""
input CatalogItemRelationInput {
  id: Int
  parentCatalogItemId: Int!
  childCatalogItemId: Int!
}

"""The output of our create `CatalogItem` mutation."""
type CreateCatalogItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CatalogItem` that was created by this mutation."""
  catalogItem: CatalogItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CatalogSubGroup` that is related to this `CatalogItem`.
  """
  catalogSubGroupByCatalogSubGroupId: CatalogSubGroup

  """Reads a single `User` that is related to this `CatalogItem`."""
  userByOwnerId: User

  """An edge for our `CatalogItem`. May be used by Relay 1."""
  catalogItemEdge(
    """The method to use when ordering `CatalogItem`."""
    orderBy: [CatalogItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CatalogItemsEdge
}

"""All input for the create `CatalogItem` mutation."""
input CreateCatalogItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CatalogItem` to be created by this mutation."""
  catalogItem: CatalogItemInput!
}

"""An input for mutations affecting `CatalogItem`"""
input CatalogItemInput {
  id: Int
  catalogSubGroupId: Int!
  cdartikel: String!
  remarks: String
  created: Datetime
  modified: Datetime
  ownerId: Int!
  defaultItem: Boolean
  sortCode: String
}

"""The output of our create `CatalogSubGroup` mutation."""
type CreateCatalogSubGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CatalogSubGroup` that was created by this mutation."""
  catalogSubGroup: CatalogSubGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CatalogSubGroup`."""
  userByOwnerId: User

  """
  Reads a single `CatalogGroup` that is related to this `CatalogSubGroup`.
  """
  catalogGroupByCatalogGroupId: CatalogGroup

  """An edge for our `CatalogSubGroup`. May be used by Relay 1."""
  catalogSubGroupEdge(
    """The method to use when ordering `CatalogSubGroup`."""
    orderBy: [CatalogSubGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CatalogSubGroupsEdge
}

"""All input for the create `CatalogSubGroup` mutation."""
input CreateCatalogSubGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CatalogSubGroup` to be created by this mutation."""
  catalogSubGroup: CatalogSubGroupInput!
}

"""An input for mutations affecting `CatalogSubGroup`"""
input CatalogSubGroupInput {
  id: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int!
  catalogGroupId: Int!
  sortCode: String
}

"""The output of our create `ChemicalCompound` mutation."""
type CreateChemicalCompoundPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChemicalCompound` that was created by this mutation."""
  chemicalCompound: ChemicalCompound

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `ChemicalCompound`."""
  userByOwnerId: User

  """An edge for our `ChemicalCompound`. May be used by Relay 1."""
  chemicalCompoundEdge(
    """The method to use when ordering `ChemicalCompound`."""
    orderBy: [ChemicalCompoundsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChemicalCompoundsEdge
}

"""All input for the create `ChemicalCompound` mutation."""
input CreateChemicalCompoundInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ChemicalCompound` to be created by this mutation."""
  chemicalCompound: ChemicalCompoundInput!
}

"""An input for mutations affecting `ChemicalCompound`"""
input ChemicalCompoundInput {
  id: Int
  name: String
  otherName: String
  formula: String
  cas: String
  icsc: String
  molarMass: Float
  density: Float
  url: String
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""The output of our create `DetectorLocation` mutation."""
type CreateDetectorLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DetectorLocation` that was created by this mutation."""
  detectorLocation: DetectorLocation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Detector` that is related to this `DetectorLocation`."""
  detectorByDetectorId: Detector

  """Reads a single `Area` that is related to this `DetectorLocation`."""
  areaByAreaId: Area

  """Reads a single `User` that is related to this `DetectorLocation`."""
  userByOwnerId: User

  """An edge for our `DetectorLocation`. May be used by Relay 1."""
  detectorLocationEdge(
    """The method to use when ordering `DetectorLocation`."""
    orderBy: [DetectorLocationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorLocationsEdge
}

"""All input for the create `DetectorLocation` mutation."""
input CreateDetectorLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DetectorLocation` to be created by this mutation."""
  detectorLocation: DetectorLocationInput!
}

"""An input for mutations affecting `DetectorLocation`"""
input DetectorLocationInput {
  id: Int
  detectorId: Int
  areaId: Int!
  created: Datetime
  modified: Datetime
  ownerId: Int
  address: Int
  bus: Int
}

"""The output of our create `DetectorOrder` mutation."""
type CreateDetectorOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DetectorOrder` that was created by this mutation."""
  detectorOrder: DetectorOrder

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Detector` that is related to this `DetectorOrder`."""
  detectorByDetectorId: Detector

  """Reads a single `User` that is related to this `DetectorOrder`."""
  userByOwnerId: User

  """An edge for our `DetectorOrder`. May be used by Relay 1."""
  detectorOrderEdge(
    """The method to use when ordering `DetectorOrder`."""
    orderBy: [DetectorOrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorOrdersEdge
}

"""All input for the create `DetectorOrder` mutation."""
input CreateDetectorOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DetectorOrder` to be created by this mutation."""
  detectorOrder: DetectorOrderInput!
}

"""An input for mutations affecting `DetectorOrder`"""
input DetectorOrderInput {
  id: Int
  detectorId: Int!
  completed: Boolean
  created: Datetime
  ownerId: Int!
  factuuropdracht: String!
  modified: Datetime
}

"""The output of our create `DetectorSensorLocation` mutation."""
type CreateDetectorSensorLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DetectorSensorLocation` that was created by this mutation."""
  detectorSensorLocation: DetectorSensorLocation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `DetectorSensor` that is related to this `DetectorSensorLocation`.
  """
  detectorSensorByDetectorSensorId: DetectorSensor

  """
  Reads a single `DetectorLocation` that is related to this `DetectorSensorLocation`.
  """
  detectorLocationByDetectorLocationId: DetectorLocation

  """
  Reads a single `User` that is related to this `DetectorSensorLocation`.
  """
  userByOwnerId: User

  """
  Reads a single `SamplePoint` that is related to this `DetectorSensorLocation`.
  """
  samplePointBySamplePointId: SamplePoint

  """
  Reads a single `Application` that is related to this `DetectorSensorLocation`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `License` that is related to this `DetectorSensorLocation`.
  """
  licenseByLicenseId: License

  """An edge for our `DetectorSensorLocation`. May be used by Relay 1."""
  detectorSensorLocationEdge(
    """The method to use when ordering `DetectorSensorLocation`."""
    orderBy: [DetectorSensorLocationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorSensorLocationsEdge
}

"""All input for the create `DetectorSensorLocation` mutation."""
input CreateDetectorSensorLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DetectorSensorLocation` to be created by this mutation."""
  detectorSensorLocation: DetectorSensorLocationInput!
}

"""An input for mutations affecting `DetectorSensorLocation`"""
input DetectorSensorLocationInput {
  id: Int
  detectorSensorId: Int!
  detectorLocationId: Int
  sensorReplacementIntervalMonths: Int
  sensorMaintenanceIntervalMonths: Int
  filterReplacementIntervalMonths: Int
  pyrolyserReplacementIntervalMonths: Int
  created: Datetime
  modified: Datetime
  ownerId: Int
  samplePointId: Int!
  applicationId: Int
  simsChannel: Int
  licenseId: Int
  simsTag: String
  remarks: String
}

"""The output of our create `DetectorSensorType` mutation."""
type CreateDetectorSensorTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DetectorSensorType` that was created by this mutation."""
  detectorSensorType: DetectorSensorType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SensorType` that is related to this `DetectorSensorType`.
  """
  sensorTypeBySensorTypeId: SensorType

  """Reads a single `User` that is related to this `DetectorSensorType`."""
  userByOwnerId: User

  """An edge for our `DetectorSensorType`. May be used by Relay 1."""
  detectorSensorTypeEdge(
    """The method to use when ordering `DetectorSensorType`."""
    orderBy: [DetectorSensorTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorSensorTypesEdge
}

"""All input for the create `DetectorSensorType` mutation."""
input CreateDetectorSensorTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DetectorSensorType` to be created by this mutation."""
  detectorSensorType: DetectorSensorTypeInput!
}

"""An input for mutations affecting `DetectorSensorType`"""
input DetectorSensorTypeInput {
  id: Int
  sensorTypeId: Int!
  detectorId: Int
  detectorPosition: Int
  ownerId: Int!
  created: Datetime
  modified: Datetime
}

"""The output of our create `DetectorSensor` mutation."""
type CreateDetectorSensorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DetectorSensor` that was created by this mutation."""
  detectorSensor: DetectorSensor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Detector` that is related to this `DetectorSensor`."""
  detectorByDetectorId: Detector

  """Reads a single `Sensor` that is related to this `DetectorSensor`."""
  sensorBySensorId: Sensor

  """Reads a single `Filter` that is related to this `DetectorSensor`."""
  filterByFilterId: Filter

  """Reads a single `Pyrolyser` that is related to this `DetectorSensor`."""
  pyrolyserByPyrolyserId: Pyrolyser

  """Reads a single `User` that is related to this `DetectorSensor`."""
  userByOwnerId: User

  """An edge for our `DetectorSensor`. May be used by Relay 1."""
  detectorSensorEdge(
    """The method to use when ordering `DetectorSensor`."""
    orderBy: [DetectorSensorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorSensorsEdge
}

"""All input for the create `DetectorSensor` mutation."""
input CreateDetectorSensorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DetectorSensor` to be created by this mutation."""
  detectorSensor: DetectorSensorInput!
}

"""An input for mutations affecting `DetectorSensor`"""
input DetectorSensorInput {
  id: Int
  detectorId: Int!
  detectorPosition: Int!
  sensorId: Int
  filterId: Int
  _filterLabelDate: Date
  pyrolyserId: Int
  _pyrolyserLabelDate: Date
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""The output of our create `DetectorType` mutation."""
type CreateDetectorTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DetectorType` that was created by this mutation."""
  detectorType: DetectorType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `DetectorType`."""
  userByOwnerId: User

  """An edge for our `DetectorType`. May be used by Relay 1."""
  detectorTypeEdge(
    """The method to use when ordering `DetectorType`."""
    orderBy: [DetectorTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorTypesEdge
}

"""All input for the create `DetectorType` mutation."""
input CreateDetectorTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DetectorType` to be created by this mutation."""
  detectorType: DetectorTypeInput!
}

"""An input for mutations affecting `DetectorType`"""
input DetectorTypeInput {
  id: Int
  obsolete: Boolean
  prefix: String
  code: String
  suffix: String
  sensorCount: Int
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""The output of our create `Detector` mutation."""
type CreateDetectorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Detector` that was created by this mutation."""
  detector: Detector

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `DetectorType` that is related to this `Detector`."""
  detectorTypeByDetectorTypeId: DetectorType

  """Reads a single `User` that is related to this `Detector`."""
  userByOwnerId: User

  """An edge for our `Detector`. May be used by Relay 1."""
  detectorEdge(
    """The method to use when ordering `Detector`."""
    orderBy: [DetectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorsEdge
}

"""All input for the create `Detector` mutation."""
input CreateDetectorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Detector` to be created by this mutation."""
  detector: DetectorInput!
}

"""An input for mutations affecting `Detector`"""
input DetectorInput {
  id: Int
  detectorTypeId: Int!
  serialNumber: String!
  labelDate: Date
  remarks: String
  created: Datetime
  ownerId: Int
  modified: Datetime
}

"""The output of our create `DpCard` mutation."""
type CreateDpCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DpCard` that was created by this mutation."""
  dpCard: DpCard

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `DpCard`."""
  userByOwnerId: User

  """An edge for our `DpCard`. May be used by Relay 1."""
  dpCardEdge(
    """The method to use when ordering `DpCard`."""
    orderBy: [DpCardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DpCardsEdge
}

"""All input for the create `DpCard` mutation."""
input CreateDpCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DpCard` to be created by this mutation."""
  dpCard: DpCardInput!
}

"""An input for mutations affecting `DpCard`"""
input DpCardInput {
  id: Int
  serialNumber: String
  ownerId: Int
  created: Datetime
  modified: Datetime
}

"""The output of our create `Electrolyte` mutation."""
type CreateElectrolytePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Electrolyte` that was created by this mutation."""
  electrolyte: Electrolyte

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Electrolyte`."""
  userByOwnerId: User

  """An edge for our `Electrolyte`. May be used by Relay 1."""
  electrolyteEdge(
    """The method to use when ordering `Electrolyte`."""
    orderBy: [ElectrolytesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ElectrolytesEdge
}

"""All input for the create `Electrolyte` mutation."""
input CreateElectrolyteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Electrolyte` to be created by this mutation."""
  electrolyte: ElectrolyteInput!
}

"""An input for mutations affecting `Electrolyte`"""
input ElectrolyteInput {
  id: Int
  name: String!
  created: Datetime
  modified: Datetime
  ownerId: Int
  replacementIntervalMonths: Int
  cdartikel: String!
  volume: Int
}

"""The output of our create `EndUser` mutation."""
type CreateEndUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EndUser` that was created by this mutation."""
  endUser: EndUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `EndUser`."""
  userByOwnerId: User

  """An edge for our `EndUser`. May be used by Relay 1."""
  endUserEdge(
    """The method to use when ordering `EndUser`."""
    orderBy: [EndUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): EndUsersEdge
}

"""All input for the create `EndUser` mutation."""
input CreateEndUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EndUser` to be created by this mutation."""
  endUser: EndUserInput!
}

"""An input for mutations affecting `EndUser`"""
input EndUserInput {
  id: Int
  name: String
  address1: String
  city: String
  country: String
  created: Datetime
  modified: Datetime
  formerName1: String
  formerName2: String
  address2: String
  zipCode: String
  region: String
  ownerId: Int
  subLocation: String!
  location: String!
  contactName: String
  contactEmail: String
  contactPhone: String
}

"""The output of our create `FactopdrachtArtikelExclusion` mutation."""
type CreateFactopdrachtArtikelExclusionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FactopdrachtArtikelExclusion` that was created by this mutation."""
  factopdrachtArtikelExclusion: FactopdrachtArtikelExclusion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `FactopdrachtArtikelExclusion`. May be used by Relay 1.
  """
  factopdrachtArtikelExclusionEdge(
    """The method to use when ordering `FactopdrachtArtikelExclusion`."""
    orderBy: [FactopdrachtArtikelExclusionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FactopdrachtArtikelExclusionsEdge
}

"""All input for the create `FactopdrachtArtikelExclusion` mutation."""
input CreateFactopdrachtArtikelExclusionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FactopdrachtArtikelExclusion` to be created by this mutation."""
  factopdrachtArtikelExclusion: FactopdrachtArtikelExclusionInput!
}

"""An input for mutations affecting `FactopdrachtArtikelExclusion`"""
input FactopdrachtArtikelExclusionInput {
  id: Int
  factuuropdracht: String!
  cdartikel: String!
}

"""The output of our create `FactopdrachtregelLineDate` mutation."""
type CreateFactopdrachtregelLineDatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FactopdrachtregelLineDate` that was created by this mutation."""
  factopdrachtregelLineDate: FactopdrachtregelLineDate

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FactopdrachtregelLineDate`. May be used by Relay 1."""
  factopdrachtregelLineDateEdge(
    """The method to use when ordering `FactopdrachtregelLineDate`."""
    orderBy: [FactopdrachtregelLineDatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FactopdrachtregelLineDatesEdge
}

"""All input for the create `FactopdrachtregelLineDate` mutation."""
input CreateFactopdrachtregelLineDateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FactopdrachtregelLineDate` to be created by this mutation."""
  factopdrachtregelLineDate: FactopdrachtregelLineDateInput!
}

"""An input for mutations affecting `FactopdrachtregelLineDate`"""
input FactopdrachtregelLineDateInput {
  id: Int
  aantalbesteld: BigFloat
  schedule: String!
  factopdrRglGuid: String!
}

"""The output of our create `FactopdrachtregelLineRemark` mutation."""
type CreateFactopdrachtregelLineRemarkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FactopdrachtregelLineRemark` that was created by this mutation."""
  factopdrachtregelLineRemark: FactopdrachtregelLineRemark

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `FactopdrachtregelLineRemark`.
  """
  userByUserId: User

  """An edge for our `FactopdrachtregelLineRemark`. May be used by Relay 1."""
  factopdrachtregelLineRemarkEdge(
    """The method to use when ordering `FactopdrachtregelLineRemark`."""
    orderBy: [FactopdrachtregelLineRemarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): FactopdrachtregelLineRemarksEdge
}

"""All input for the create `FactopdrachtregelLineRemark` mutation."""
input CreateFactopdrachtregelLineRemarkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FactopdrachtregelLineRemark` to be created by this mutation."""
  factopdrachtregelLineRemark: FactopdrachtregelLineRemarkInput!
}

"""An input for mutations affecting `FactopdrachtregelLineRemark`"""
input FactopdrachtregelLineRemarkInput {
  id: Int
  remark: String!
  attention: Boolean
  factopdrachtregelLineId: Int!
  userId: Int
}

"""The output of our create `FactopdrachtregelLineWeek` mutation."""
type CreateFactopdrachtregelLineWeekPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FactopdrachtregelLineWeek` that was created by this mutation."""
  factopdrachtregelLineWeek: FactopdrachtregelLineWeek

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FactopdrachtregelLineWeek`. May be used by Relay 1."""
  factopdrachtregelLineWeekEdge(
    """The method to use when ordering `FactopdrachtregelLineWeek`."""
    orderBy: [FactopdrachtregelLineWeeksOrderBy!] = [NATURAL]
  ): FactopdrachtregelLineWeeksEdge
}

"""All input for the create `FactopdrachtregelLineWeek` mutation."""
input CreateFactopdrachtregelLineWeekInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FactopdrachtregelLineWeek` to be created by this mutation."""
  factopdrachtregelLineWeek: FactopdrachtregelLineWeekInput!
}

"""An input for mutations affecting `FactopdrachtregelLineWeek`"""
input FactopdrachtregelLineWeekInput {
  id: Int
  aantalbesteld: BigFloat
  factopdrachtregelLineId: Int!
  yearWeek: Int!
}

"""The output of our create `FactopdrachtregelLine` mutation."""
type CreateFactopdrachtregelLinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FactopdrachtregelLine` that was created by this mutation."""
  factopdrachtregelLine: FactopdrachtregelLine

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FactopdrachtregelLine`. May be used by Relay 1."""
  factopdrachtregelLineEdge(
    """The method to use when ordering `FactopdrachtregelLine`."""
    orderBy: [FactopdrachtregelLinesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FactopdrachtregelLinesEdge
}

"""All input for the create `FactopdrachtregelLine` mutation."""
input CreateFactopdrachtregelLineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FactopdrachtregelLine` to be created by this mutation."""
  factopdrachtregelLine: FactopdrachtregelLineInput!
}

"""An input for mutations affecting `FactopdrachtregelLine`"""
input FactopdrachtregelLineInput {
  status: String
  factopdrRglGuid: String!
  id: Int
  poNumber: String
  poWeek: String
  targetDateOld: Date
  attention: Boolean
  aantalbesteldDp: BigFloat
  aantalbesteldHold: BigFloat
  targetYearWeek: Int
}

"""The output of our create `Factuur` mutation."""
type CreateFactuurPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Factuur` that was created by this mutation."""
  factuur: Factuur

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Factuur`."""
  userByOwnerId: User

  """Reads a single `User` that is related to this `Factuur`."""
  userByCheckedId: User

  """Reads a single `User` that is related to this `Factuur`."""
  userBySentId: User

  """An edge for our `Factuur`. May be used by Relay 1."""
  factuurEdge(
    """The method to use when ordering `Factuur`."""
    orderBy: [FactuursOrderBy!] = [PRIMARY_KEY_ASC]
  ): FactuursEdge
}

"""All input for the create `Factuur` mutation."""
input CreateFactuurInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Factuur` to be created by this mutation."""
  factuur: FactuurInput!
}

"""An input for mutations affecting `Factuur`"""
input FactuurInput {
  id: Int
  factuuropdracht: String!
  filename: String
  ownerId: Int!
  created: Datetime
  modified: Datetime
  checked: Boolean
  sent: Boolean
  checkedId: Int
  sentId: Int
}

"""The output of our create `Filter` mutation."""
type CreateFilterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Filter` that was created by this mutation."""
  filter: Filter

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Filter`."""
  userByOwnerId: User

  """An edge for our `Filter`. May be used by Relay 1."""
  filterEdge(
    """The method to use when ordering `Filter`."""
    orderBy: [FiltersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FiltersEdge
}

"""All input for the create `Filter` mutation."""
input CreateFilterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Filter` to be created by this mutation."""
  filter: FilterInput!
}

"""An input for mutations affecting `Filter`"""
input FilterInput {
  id: Int
  name: String!
  created: Datetime
  modified: Datetime
  ownerId: Int
  replacementIntervalMonths: Int
  cdartikel: String!
  consumable: Boolean
}

"""The output of our create `Floor` mutation."""
type CreateFloorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Floor` that was created by this mutation."""
  floor: Floor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Building` that is related to this `Floor`."""
  buildingByBuildingId: Building

  """Reads a single `User` that is related to this `Floor`."""
  userByOwnerId: User

  """An edge for our `Floor`. May be used by Relay 1."""
  floorEdge(
    """The method to use when ordering `Floor`."""
    orderBy: [FloorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FloorsEdge
}

"""All input for the create `Floor` mutation."""
input CreateFloorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Floor` to be created by this mutation."""
  floor: FloorInput!
}

"""An input for mutations affecting `Floor`"""
input FloorInput {
  id: Int
  buildingId: Int!
  name: String!
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""The output of our create `Gas` mutation."""
type CreateGasPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Gas` that was created by this mutation."""
  gas: Gas

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Gas`."""
  userByOwnerId: User

  """Reads a single `ChemicalCompound` that is related to this `Gas`."""
  chemicalCompoundByChemicalCompoundId: ChemicalCompound

  """An edge for our `Gas`. May be used by Relay 1."""
  gasEdge(
    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasesEdge
}

"""All input for the create `Gas` mutation."""
input CreateGasInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Gas` to be created by this mutation."""
  gas: GasInput!
}

"""An input for mutations affecting `Gas`"""
input GasInput {
  id: Int
  name: String
  formula: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  chemicalCompoundId: Int
}

"""The output of our create `GroupPermission` mutation."""
type CreateGroupPermissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GroupPermission` that was created by this mutation."""
  groupPermission: GroupPermission

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `GroupPermission`."""
  groupByGroupId: Group

  """An edge for our `GroupPermission`. May be used by Relay 1."""
  groupPermissionEdge(
    """The method to use when ordering `GroupPermission`."""
    orderBy: [GroupPermissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupPermissionsEdge
}

"""All input for the create `GroupPermission` mutation."""
input CreateGroupPermissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GroupPermission` to be created by this mutation."""
  groupPermission: GroupPermissionInput!
}

"""An input for mutations affecting `GroupPermission`"""
input GroupPermissionInput {
  id: Int
  writeIds: [Int]
  readIds: [Int]
  groupId: Int!
}

"""The output of our create `GroupRight` mutation."""
type CreateGroupRightPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GroupRight` that was created by this mutation."""
  groupRight: GroupRight

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `GroupRight`."""
  groupByGroupId: Group

  """An edge for our `GroupRight`. May be used by Relay 1."""
  groupRightEdge(
    """The method to use when ordering `GroupRight`."""
    orderBy: [GroupRightsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupRightsEdge
}

"""All input for the create `GroupRight` mutation."""
input CreateGroupRightInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GroupRight` to be created by this mutation."""
  groupRight: GroupRightInput!
}

"""An input for mutations affecting `GroupRight`"""
input GroupRightInput {
  id: Int
  groupId: Int
  path: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  authorized: Boolean!
}

"""The output of our create `Hardware` mutation."""
type CreateHardwarePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Hardware` that was created by this mutation."""
  hardware: Hardware

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Hardware`."""
  userByUserId: User

  """Reads a single `User` that is related to this `Hardware`."""
  userByOwnerId: User

  """An edge for our `Hardware`. May be used by Relay 1."""
  hardwareEdge(
    """The method to use when ordering `Hardware`."""
    orderBy: [HardwaresOrderBy!] = [PRIMARY_KEY_ASC]
  ): HardwaresEdge
}

"""All input for the create `Hardware` mutation."""
input CreateHardwareInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Hardware` to be created by this mutation."""
  hardware: HardwareInput!
}

"""An input for mutations affecting `Hardware`"""
input HardwareInput {
  id: Int
  type: String!
  serialNumber: String
  purchaseDate: Date
  remarks: String
  userId: Int
  ownerId: Int
  created: Datetime
  modified: Datetime
  specs: String
  model: String
  macAddress: String
  ipAddress: String
  operatingSystem: String
  ordernummer: String
  prijs: BigFloat
}

"""The output of our create `IncomingDocument` mutation."""
type CreateIncomingDocumentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `IncomingDocument` that was created by this mutation."""
  incomingDocument: IncomingDocument

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `IncomingDocument`."""
  userByOwnerId: User

  """Reads a single `User` that is related to this `IncomingDocument`."""
  userByUserId: User

  """An edge for our `IncomingDocument`. May be used by Relay 1."""
  incomingDocumentEdge(
    """The method to use when ordering `IncomingDocument`."""
    orderBy: [IncomingDocumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): IncomingDocumentsEdge
}

"""All input for the create `IncomingDocument` mutation."""
input CreateIncomingDocumentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `IncomingDocument` to be created by this mutation."""
  incomingDocument: IncomingDocumentInput!
}

"""An input for mutations affecting `IncomingDocument`"""
input IncomingDocumentInput {
  id: Int
  description: String
  amount: Float
  isovaluta: String
  type: String
  created: Datetime
  modified: Datetime
  ownerId: Int!
  userId: Int!
  date: Date
}

"""The output of our create `Inkoopgegeven` mutation."""
type CreateInkoopgegevenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Inkoopgegeven` that was created by this mutation."""
  inkoopgegeven: Inkoopgegeven

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Inkoopgegeven`. May be used by Relay 1."""
  inkoopgegevenEdge(
    """The method to use when ordering `Inkoopgegeven`."""
    orderBy: [InkoopgegevensOrderBy!] = [PRIMARY_KEY_ASC]
  ): InkoopgegevensEdge
}

"""All input for the create `Inkoopgegeven` mutation."""
input CreateInkoopgegevenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Inkoopgegeven` to be created by this mutation."""
  inkoopgegeven: InkoopgegevenInput!
}

"""An input for mutations affecting `Inkoopgegeven`"""
input InkoopgegevenInput {
  cdartikel: String!
  inkvolgnr: Int!
  cdcrediteur: String!
  voorkeur: String!
  bestcode: String
  cdvaluta: String
  inkoopprijs: BigFloat
  kortingperc: BigFloat
  besthoeveelheid: BigFloat
  opslpercinkoop: BigFloat
}

"""The output of our create `InkoopgegevensLog` mutation."""
type CreateInkoopgegevensLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InkoopgegevensLog` that was created by this mutation."""
  inkoopgegevensLog: InkoopgegevensLog

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `InkoopgegevensLog`. May be used by Relay 1."""
  inkoopgegevensLogEdge(
    """The method to use when ordering `InkoopgegevensLog`."""
    orderBy: [InkoopgegevensLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InkoopgegevensLogsEdge
}

"""All input for the create `InkoopgegevensLog` mutation."""
input CreateInkoopgegevensLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `InkoopgegevensLog` to be created by this mutation."""
  inkoopgegevensLog: InkoopgegevensLogInput!
}

"""An input for mutations affecting `InkoopgegevensLog`"""
input InkoopgegevensLogInput {
  id: Int
  created: Datetime
  operation: String
  new: JSON
  old: JSON
}

"""The output of our create `InkooporderregelLine` mutation."""
type CreateInkooporderregelLinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InkooporderregelLine` that was created by this mutation."""
  inkooporderregelLine: InkooporderregelLine

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `InkooporderregelLine`. May be used by Relay 1."""
  inkooporderregelLineEdge(
    """The method to use when ordering `InkooporderregelLine`."""
    orderBy: [InkooporderregelLinesOrderBy!] = [PRIMARY_KEY_ASC]
  ): InkooporderregelLinesEdge
}

"""All input for the create `InkooporderregelLine` mutation."""
input CreateInkooporderregelLineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `InkooporderregelLine` to be created by this mutation."""
  inkooporderregelLine: InkooporderregelLineInput!
}

"""An input for mutations affecting `InkooporderregelLine`"""
input InkooporderregelLineInput {
  _cdartikel: String
  _aantalbesteld: BigFloat
  _aantalopenstaand: BigFloat
  deliveryDate: Date
  remarks: String
  deliveryDateConfirmed: Boolean
  status: String
  inkopdrRglGuid: String
  factopdrRglGuid: String
  id: Int
  shipmentDate: Date
}

"""The output of our create `Item` mutation."""
type CreateItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Item` that was created by this mutation."""
  item: Item

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Item`."""
  userByOwnerId: User

  """Reads a single `EndUser` that is related to this `Item`."""
  endUserByEndUserId: EndUser

  """An edge for our `Item`. May be used by Relay 1."""
  itemEdge(
    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsEdge
}

"""All input for the create `Item` mutation."""
input CreateItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Item` to be created by this mutation."""
  item: ItemInput!
}

"""An input for mutations affecting `Item`"""
input ItemInput {
  id: Int
  cdartikel: String!
  serialNumber: String!
  labelDate: Date
  remarks: String
  created: Datetime
  modified: Datetime
  ownerId: Int!
  endUserId: Int
}

"""The output of our create `Job` mutation."""
type CreateJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Job` that was created by this mutation."""
  job: Job

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `EndUser` that is related to this `Job`."""
  endUserByEndUserId: EndUser

  """Reads a single `User` that is related to this `Job`."""
  userByOwnerId: User

  """An edge for our `Job`. May be used by Relay 1."""
  jobEdge(
    """The method to use when ordering `Job`."""
    orderBy: [JobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JobsEdge
}

"""All input for the create `Job` mutation."""
input CreateJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Job` to be created by this mutation."""
  job: JobInput!
}

"""An input for mutations affecting `Job`"""
input JobInput {
  id: Int
  factuuropdracht: String!
  endUserId: Int
  startDate: Date
  endDate: Date
  confirmed: Boolean
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""The output of our create `JunctionBox` mutation."""
type CreateJunctionBoxPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `JunctionBox` that was created by this mutation."""
  junctionBox: JunctionBox

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `JunctionBox`."""
  userByOwnerId: User

  """An edge for our `JunctionBox`. May be used by Relay 1."""
  junctionBoxEdge(
    """The method to use when ordering `JunctionBox`."""
    orderBy: [JunctionBoxesOrderBy!] = [PRIMARY_KEY_ASC]
  ): JunctionBoxesEdge
}

"""All input for the create `JunctionBox` mutation."""
input CreateJunctionBoxInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `JunctionBox` to be created by this mutation."""
  junctionBox: JunctionBoxInput!
}

"""An input for mutations affecting `JunctionBox`"""
input JunctionBoxInput {
  id: Int
  serialNumber: String
  ownerId: Int
  created: Datetime
  modified: Datetime
}

"""The output of our create `Lead` mutation."""
type CreateLeadPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Lead` that was created by this mutation."""
  lead: Lead

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Lead`."""
  userByOwnerId: User

  """An edge for our `Lead`. May be used by Relay 1."""
  leadEdge(
    """The method to use when ordering `Lead`."""
    orderBy: [LeadsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LeadsEdge
}

"""All input for the create `Lead` mutation."""
input CreateLeadInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Lead` to be created by this mutation."""
  lead: LeadInput!
}

"""An input for mutations affecting `Lead`"""
input LeadInput {
  id: Int
  country: String
  dateOfLastVisit: Date
  dateOfLastRequest: Date
  company: String
  lastName: String
  firstName: String
  telephone: String
  contactEmail: String
  webSite: String
  businessSector: String
  typeOfCompany: String
  address: String
  zipCode: String
  city: String
  requests: String
  clickThroughsToYourSite: String
  viewedElements: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  noOfEmployees: String
}

"""The output of our create `LicenseCustomer` mutation."""
type CreateLicenseCustomerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LicenseCustomer` that was created by this mutation."""
  licenseCustomer: LicenseCustomer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `LicenseCustomer`."""
  userByOwnerId: User

  """An edge for our `LicenseCustomer`. May be used by Relay 1."""
  licenseCustomerEdge(
    """The method to use when ordering `LicenseCustomer`."""
    orderBy: [LicenseCustomersOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicenseCustomersEdge
}

"""All input for the create `LicenseCustomer` mutation."""
input CreateLicenseCustomerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LicenseCustomer` to be created by this mutation."""
  licenseCustomer: LicenseCustomerInput!
}

"""An input for mutations affecting `LicenseCustomer`"""
input LicenseCustomerInput {
  id: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""The output of our create `LicenseModule` mutation."""
type CreateLicenseModulePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LicenseModule` that was created by this mutation."""
  licenseModule: LicenseModule

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `LicenseModule`."""
  userByOwnerId: User

  """An edge for our `LicenseModule`. May be used by Relay 1."""
  licenseModuleEdge(
    """The method to use when ordering `LicenseModule`."""
    orderBy: [LicenseModulesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicenseModulesEdge
}

"""All input for the create `LicenseModule` mutation."""
input CreateLicenseModuleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LicenseModule` to be created by this mutation."""
  licenseModule: LicenseModuleInput!
}

"""An input for mutations affecting `LicenseModule`"""
input LicenseModuleInput {
  id: Int
  name: String
  latestVersion: String
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""The output of our create `LicenseOrder` mutation."""
type CreateLicenseOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LicenseOrder` that was created by this mutation."""
  licenseOrder: LicenseOrder

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `License` that is related to this `LicenseOrder`."""
  licenseByLicenseId: License

  """
  Reads a single `LicenseRegistration` that is related to this `LicenseOrder`.
  """
  licenseRegistrationByLicenseRegistrationId: LicenseRegistration

  """Reads a single `User` that is related to this `LicenseOrder`."""
  userByOwnerId: User

  """An edge for our `LicenseOrder`. May be used by Relay 1."""
  licenseOrderEdge(
    """The method to use when ordering `LicenseOrder`."""
    orderBy: [LicenseOrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicenseOrdersEdge
}

"""All input for the create `LicenseOrder` mutation."""
input CreateLicenseOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LicenseOrder` to be created by this mutation."""
  licenseOrder: LicenseOrderInput!
}

"""An input for mutations affecting `LicenseOrder`"""
input LicenseOrderInput {
  id: Int
  licenseId: Int
  licenseRegistrationId: Int
  factuuropdracht: String!
  created: Datetime
  modified: Datetime
  ownerId: Int
  cdartikel: String
  offertenummer: String
  remarks: String
  cdSerialNumber: Int
}

"""The output of our create `LicenseRegistration` mutation."""
type CreateLicenseRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LicenseRegistration` that was created by this mutation."""
  licenseRegistration: LicenseRegistration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `License` that is related to this `LicenseRegistration`.
  """
  licenseByLicenseId: License

  """Reads a single `User` that is related to this `LicenseRegistration`."""
  userByOwnerId: User

  """An edge for our `LicenseRegistration`. May be used by Relay 1."""
  licenseRegistrationEdge(
    """The method to use when ordering `LicenseRegistration`."""
    orderBy: [LicenseRegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicenseRegistrationsEdge
}

"""All input for the create `LicenseRegistration` mutation."""
input CreateLicenseRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LicenseRegistration` to be created by this mutation."""
  licenseRegistration: LicenseRegistrationInput!
}

"""An input for mutations affecting `LicenseRegistration`"""
input LicenseRegistrationInput {
  id: Int
  hwType: Int
  registrationCode: String
  activationCode: String
  licenseId: Int
  expirationDate: Date
  hwCode: String
  computerName: String
  ipAddress: String
  created: Datetime
  ownerId: Int
  remarks: String
}

"""The output of our create `License` mutation."""
type CreateLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `License` that was created by this mutation."""
  license: License

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LicenseModule` that is related to this `License`."""
  licenseModuleByLicenseModuleId: LicenseModule

  """Reads a single `LicenseCustomer` that is related to this `License`."""
  licenseCustomerByLicenseCustomerId: LicenseCustomer

  """Reads a single `User` that is related to this `License`."""
  userByOwnerId: User

  """Reads a single `EndUser` that is related to this `License`."""
  endUserByEndUserId: EndUser

  """An edge for our `License`. May be used by Relay 1."""
  licenseEdge(
    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicensesEdge
}

"""All input for the create `License` mutation."""
input CreateLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `License` to be created by this mutation."""
  license: LicenseInput!
}

"""An input for mutations affecting `License`"""
input LicenseInput {
  id: Int
  licenseModuleId: Int
  moduleData: String
  licenseCode: String
  remarks: String
  licenseCustomerId: Int
  licenseId: Int
  durationMonths: Int
  durationDays: Int
  created: Datetime
  activate: Boolean
  ownerId: Int
  endUserId: Int
}

"""The output of our create `MaintenanceVisitLine` mutation."""
type CreateMaintenanceVisitLinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MaintenanceVisitLine` that was created by this mutation."""
  maintenanceVisitLine: MaintenanceVisitLine

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `MaintenanceVisit` that is related to this `MaintenanceVisitLine`.
  """
  maintenanceVisitByMaintenanceVisitId: MaintenanceVisit

  """
  Reads a single `DetectorSensorLocation` that is related to this `MaintenanceVisitLine`.
  """
  detectorSensorLocationByDetectorSensorLocationId: DetectorSensorLocation

  """
  Reads a single `DetectorSensor` that is related to this `MaintenanceVisitLine`.
  """
  detectorSensorByDetectorSensorId: DetectorSensor

  """
  Reads a single `Sensor` that is related to this `MaintenanceVisitLine`.
  """
  sensorBySensorId: Sensor

  """
  Reads a single `Sensor` that is related to this `MaintenanceVisitLine`.
  """
  sensorByOriginalSensorId: Sensor

  """
  Reads a single `CalGas` that is related to this `MaintenanceVisitLine`.
  """
  calGasByCalGasId: CalGas

  """
  Reads a single `Filter` that is related to this `MaintenanceVisitLine`.
  """
  filterByFilterId: Filter

  """
  Reads a single `Pyrolyser` that is related to this `MaintenanceVisitLine`.
  """
  pyrolyserByPyrolyserId: Pyrolyser

  """An edge for our `MaintenanceVisitLine`. May be used by Relay 1."""
  maintenanceVisitLineEdge(
    """The method to use when ordering `MaintenanceVisitLine`."""
    orderBy: [MaintenanceVisitLinesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MaintenanceVisitLinesEdge
}

"""All input for the create `MaintenanceVisitLine` mutation."""
input CreateMaintenanceVisitLineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MaintenanceVisitLine` to be created by this mutation."""
  maintenanceVisitLine: MaintenanceVisitLineInput!
}

"""An input for mutations affecting `MaintenanceVisitLine`"""
input MaintenanceVisitLineInput {
  id: Int
  maintenanceVisitId: Int!
  detectorSensorLocationId: Int!
  dateOld: Date
  remarkLine: Int
  day: Int
  success: Boolean
  detectorSensorId: Int
  sensorId: Int
  originalSensorId: Int
  concentration: Float
  calGasId: Int
  preResponse: Float
  response: Float
  spanSuccess: Boolean
  zeroSuccess: Boolean
  filterId: Int
  pyrolyserId: Int
  sensorMaintenanceDueDate: Date
  sensorInstallDueDate: Date
  filterInstallDueDate: Date
  pyrolyserInstallDueDate: Date
}

"""The output of our create `MaintenanceVisitRemark` mutation."""
type CreateMaintenanceVisitRemarkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MaintenanceVisitRemark` that was created by this mutation."""
  maintenanceVisitRemark: MaintenanceVisitRemark

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `MaintenanceVisit` that is related to this `MaintenanceVisitRemark`.
  """
  maintenanceVisitByMaintenanceVisitId: MaintenanceVisit

  """An edge for our `MaintenanceVisitRemark`. May be used by Relay 1."""
  maintenanceVisitRemarkEdge(
    """The method to use when ordering `MaintenanceVisitRemark`."""
    orderBy: [MaintenanceVisitRemarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): MaintenanceVisitRemarksEdge
}

"""All input for the create `MaintenanceVisitRemark` mutation."""
input CreateMaintenanceVisitRemarkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MaintenanceVisitRemark` to be created by this mutation."""
  maintenanceVisitRemark: MaintenanceVisitRemarkInput!
}

"""An input for mutations affecting `MaintenanceVisitRemark`"""
input MaintenanceVisitRemarkInput {
  id: Int
  maintenanceVisitId: Int!
  line: Int
  remarks: String
  cdartikel: String
  aantal: BigFloat
  cdmagazijn: String
  followUp: String
}

"""The output of our create `MaintenanceVisit` mutation."""
type CreateMaintenanceVisitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MaintenanceVisit` that was created by this mutation."""
  maintenanceVisit: MaintenanceVisit

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `EndUser` that is related to this `MaintenanceVisit`."""
  endUserByEndUserId: EndUser

  """Reads a single `User` that is related to this `MaintenanceVisit`."""
  userByUserId: User

  """Reads a single `User` that is related to this `MaintenanceVisit`."""
  userByOwnerId: User

  """An edge for our `MaintenanceVisit`. May be used by Relay 1."""
  maintenanceVisitEdge(
    """The method to use when ordering `MaintenanceVisit`."""
    orderBy: [MaintenanceVisitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MaintenanceVisitsEdge
}

"""All input for the create `MaintenanceVisit` mutation."""
input CreateMaintenanceVisitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MaintenanceVisit` to be created by this mutation."""
  maintenanceVisit: MaintenanceVisitInput!
}

"""An input for mutations affecting `MaintenanceVisit`"""
input MaintenanceVisitInput {
  id: Int
  endUserId: Int!
  userId: Int
  factuuropdracht: String
  date: Date!
  duration: Int!
  created: Datetime
  modified: Datetime
  ownerId: Int!
  checked: Boolean
  contactName: String
  contactEmail: String
  labourHours: BigFloat
  locked: Boolean
  contactPhone: String
  cdmagazijn: String
}

"""The output of our create `Membrane` mutation."""
type CreateMembranePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Membrane` that was created by this mutation."""
  membrane: Membrane

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Membrane`."""
  userByOwnerId: User

  """An edge for our `Membrane`. May be used by Relay 1."""
  membraneEdge(
    """The method to use when ordering `Membrane`."""
    orderBy: [MembranesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembranesEdge
}

"""All input for the create `Membrane` mutation."""
input CreateMembraneInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Membrane` to be created by this mutation."""
  membrane: MembraneInput!
}

"""An input for mutations affecting `Membrane`"""
input MembraneInput {
  id: Int
  name: String!
  created: Datetime
  modified: Datetime
  ownerId: Int
  replacementIntervalMonths: Int
  cdartikel: String!
  quantity: Int
}

"""The output of our create `ORing` mutation."""
type CreateORingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ORing` that was created by this mutation."""
  oRing: ORing

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `ORing`."""
  userByOwnerId: User

  """An edge for our `ORing`. May be used by Relay 1."""
  oRingEdge(
    """The method to use when ordering `ORing`."""
    orderBy: [ORingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ORingsEdge
}

"""All input for the create `ORing` mutation."""
input CreateORingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ORing` to be created by this mutation."""
  oRing: ORingInput!
}

"""An input for mutations affecting `ORing`"""
input ORingInput {
  id: Int
  name: String!
  created: Datetime
  modified: Datetime
  ownerId: Int
  replacementIntervalMonths: Int
  cdartikel: String!
  quantity: Int
}

"""The output of our create `OfferteRemark` mutation."""
type CreateOfferteRemarkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OfferteRemark` that was created by this mutation."""
  offerteRemark: OfferteRemark

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `OfferteRemark`."""
  userByOwnerId: User

  """An edge for our `OfferteRemark`. May be used by Relay 1."""
  offerteRemarkEdge(
    """The method to use when ordering `OfferteRemark`."""
    orderBy: [OfferteRemarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): OfferteRemarksEdge
}

"""All input for the create `OfferteRemark` mutation."""
input CreateOfferteRemarkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OfferteRemark` to be created by this mutation."""
  offerteRemark: OfferteRemarkInput!
}

"""An input for mutations affecting `OfferteRemark`"""
input OfferteRemarkInput {
  id: Int
  offerteId: String!
  actions: String
  actionDate: Date
  decisionDate: Date
  kans: BigFloat
  rejectRequest: Boolean
  statusApproved: Boolean
  name: String
  status: String
  competitors: String
  created: Datetime
  modified: Datetime
  ownerId: Int!
  representative: String
}

"""The output of our create `Opportunity` mutation."""
type CreateOpportunityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Opportunity` that was created by this mutation."""
  opportunity: Opportunity

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `_Land` that is related to this `Opportunity`."""
  _landByCdland: _Land

  """Reads a single `User` that is related to this `Opportunity`."""
  userByOwnerId: User

  """An edge for our `Opportunity`. May be used by Relay 1."""
  opportunityEdge(
    """The method to use when ordering `Opportunity`."""
    orderBy: [OpportunitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OpportunitiesEdge
}

"""All input for the create `Opportunity` mutation."""
input CreateOpportunityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Opportunity` to be created by this mutation."""
  opportunity: OpportunityInput!
}

"""An input for mutations affecting `Opportunity`"""
input OpportunityInput {
  id: Int
  source: String
  customer: String
  description: String
  amount: BigFloat
  cdland: String
  actions: String
  actionDate: Date
  cdvert: String
  created: Datetime
  modified: Datetime
  ownerId: Int!
  status: String
  distributor: String
  projectDate: Date
}

"""The output of our create `Permission` mutation."""
type CreatePermissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Permission` that was created by this mutation."""
  permission: Permission

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Permission`. May be used by Relay 1."""
  permissionEdge(
    """The method to use when ordering `Permission`."""
    orderBy: [PermissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermissionsEdge
}

"""All input for the create `Permission` mutation."""
input CreatePermissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Permission` to be created by this mutation."""
  permission: PermissionInput!
}

"""An input for mutations affecting `Permission`"""
input PermissionInput {
  id: Int
  name: String
}

"""The output of our create `PersoonRol` mutation."""
type CreatePersoonRolPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PersoonRol` that was created by this mutation."""
  persoonRol: PersoonRol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `PersoonRol`. May be used by Relay 1."""
  persoonRolEdge(
    """The method to use when ordering `PersoonRol`."""
    orderBy: [PersoonRolsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PersoonRolsEdge
}

"""All input for the create `PersoonRol` mutation."""
input CreatePersoonRolInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PersoonRol` to be created by this mutation."""
  persoonRol: PersoonRolInput!
}

"""An input for mutations affecting `PersoonRol`"""
input PersoonRolInput {
  persoonRolGuid: String!
  cdpersoon: String!
  cdrelatie: Int
  cdrol: String!
  rolcode: String
  voorkeur: String!
  cdfunctie: String
  cdafdeling: String
  limiet: BigFloat
  limietPerc: BigFloat
}

"""The output of our create `Plug` mutation."""
type CreatePlugPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Plug` that was created by this mutation."""
  plug: Plug

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Plug`."""
  userByOwnerId: User

  """An edge for our `Plug`. May be used by Relay 1."""
  plugEdge(
    """The method to use when ordering `Plug`."""
    orderBy: [PlugsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlugsEdge
}

"""All input for the create `Plug` mutation."""
input CreatePlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Plug` to be created by this mutation."""
  plug: PlugInput!
}

"""An input for mutations affecting `Plug`"""
input PlugInput {
  id: Int
  name: String!
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""The output of our create `Principle` mutation."""
type CreatePrinciplePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Principle` that was created by this mutation."""
  principle: Principle

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Principle`."""
  userByOwnerId: User

  """An edge for our `Principle`. May be used by Relay 1."""
  principleEdge(
    """The method to use when ordering `Principle`."""
    orderBy: [PrinciplesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PrinciplesEdge
}

"""All input for the create `Principle` mutation."""
input CreatePrincipleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Principle` to be created by this mutation."""
  principle: PrincipleInput!
}

"""An input for mutations affecting `Principle`"""
input PrincipleInput {
  id: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""The output of our create `Production` mutation."""
type CreateProductionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Production` that was created by this mutation."""
  production: Production

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Production`. May be used by Relay 1."""
  productionEdge(
    """The method to use when ordering `Production`."""
    orderBy: [ProductionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductionsEdge
}

"""All input for the create `Production` mutation."""
input CreateProductionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Production` to be created by this mutation."""
  production: ProductionInput!
}

"""An input for mutations affecting `Production`"""
input ProductionInput {
  id: Int
}

"""The output of our create `Pyrolyser` mutation."""
type CreatePyrolyserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Pyrolyser` that was created by this mutation."""
  pyrolyser: Pyrolyser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Pyrolyser`."""
  userByOwnerId: User

  """An edge for our `Pyrolyser`. May be used by Relay 1."""
  pyrolyserEdge(
    """The method to use when ordering `Pyrolyser`."""
    orderBy: [PyrolysersOrderBy!] = [PRIMARY_KEY_ASC]
  ): PyrolysersEdge
}

"""All input for the create `Pyrolyser` mutation."""
input CreatePyrolyserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Pyrolyser` to be created by this mutation."""
  pyrolyser: PyrolyserInput!
}

"""An input for mutations affecting `Pyrolyser`"""
input PyrolyserInput {
  id: Int
  name: String!
  created: Datetime
  modified: Datetime
  ownerId: Int
  replacementIntervalMonths: Int
  cdartikel: String!
}

"""The output of our create `Range` mutation."""
type CreateRangePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Range` that was created by this mutation."""
  range: Range

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Gas` that is related to this `Range`."""
  gasByGasId: Gas

  """Reads a single `User` that is related to this `Range`."""
  userByOwnerId: User

  """An edge for our `Range`. May be used by Relay 1."""
  rangeEdge(
    """The method to use when ordering `Range`."""
    orderBy: [RangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RangesEdge
}

"""All input for the create `Range` mutation."""
input CreateRangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Range` to be created by this mutation."""
  range: RangeInput!
}

"""An input for mutations affecting `Range`"""
input RangeInput {
  id: Int
  gasId: Int!
  lowEu: Float
  highEu: Float
  engineeringUnits: String
  alarm1Level: BigFloat
  alarm2Level: BigFloat
  warning1Level: BigFloat
  warning2Level: BigFloat
  alarm1DirectionUp: Boolean
  alarm2DirectionUp: Boolean
  alarmUnits: Boolean
  precision: Int
  created: Datetime
  modified: Datetime
  ownerId: Int
  highEuNumeric: BigFloat
  highEuBackup: Float
}

"""The output of our create `RcCard` mutation."""
type CreateRcCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RcCard` that was created by this mutation."""
  rcCard: RcCard

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `RcCard`."""
  userByOwnerId: User

  """An edge for our `RcCard`. May be used by Relay 1."""
  rcCardEdge(
    """The method to use when ordering `RcCard`."""
    orderBy: [RcCardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RcCardsEdge
}

"""All input for the create `RcCard` mutation."""
input CreateRcCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RcCard` to be created by this mutation."""
  rcCard: RcCardInput!
}

"""An input for mutations affecting `RcCard`"""
input RcCardInput {
  id: Int
  serialNumber: String
  ownerId: Int
  created: Datetime
  modified: Datetime
}

"""The output of our create `AnotherRefreshToken` mutation."""
type CreateAnotherRefreshTokenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AnotherRefreshToken` that was created by this mutation."""
  anotherRefreshToken: AnotherRefreshToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `AnotherRefreshToken`. May be used by Relay 1."""
  anotherRefreshTokenEdge(
    """The method to use when ordering `AnotherRefreshToken`."""
    orderBy: [AnotherRefreshTokensOrderBy!] = [NATURAL]
  ): AnotherRefreshTokensEdge
}

"""All input for the create `AnotherRefreshToken` mutation."""
input CreateAnotherRefreshTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AnotherRefreshToken` to be created by this mutation."""
  anotherRefreshToken: AnotherRefreshTokenInput!
}

"""An input for mutations affecting `AnotherRefreshToken`"""
input AnotherRefreshTokenInput {
  id: UUID!
  hashedValue: String!
  columnName: Int
  isBlackListed: Boolean
  lastUsed: Datetime
  created: Datetime
}

"""The output of our create `ReportDetector` mutation."""
type CreateReportDetectorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReportDetector` that was created by this mutation."""
  reportDetector: ReportDetector

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Report` that is related to this `ReportDetector`."""
  reportByReportId: Report

  """Reads a single `Detector` that is related to this `ReportDetector`."""
  detectorByDetectorId: Detector

  """An edge for our `ReportDetector`. May be used by Relay 1."""
  reportDetectorEdge(
    """The method to use when ordering `ReportDetector`."""
    orderBy: [ReportDetectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportDetectorsEdge
}

"""All input for the create `ReportDetector` mutation."""
input CreateReportDetectorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ReportDetector` to be created by this mutation."""
  reportDetector: ReportDetectorInput!
}

"""An input for mutations affecting `ReportDetector`"""
input ReportDetectorInput {
  id: Int
  reportId: Int
  detectorId: Int
}

"""The output of our create `ReportItem` mutation."""
type CreateReportItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReportItem` that was created by this mutation."""
  reportItem: ReportItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Report` that is related to this `ReportItem`."""
  reportByReportId: Report

  """Reads a single `Item` that is related to this `ReportItem`."""
  itemByItemId: Item

  """An edge for our `ReportItem`. May be used by Relay 1."""
  reportItemEdge(
    """The method to use when ordering `ReportItem`."""
    orderBy: [ReportItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportItemsEdge
}

"""All input for the create `ReportItem` mutation."""
input CreateReportItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ReportItem` to be created by this mutation."""
  reportItem: ReportItemInput!
}

"""An input for mutations affecting `ReportItem`"""
input ReportItemInput {
  id: Int
  reportId: Int!
  itemId: Int!
}

"""The output of our create `ReportSensor` mutation."""
type CreateReportSensorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReportSensor` that was created by this mutation."""
  reportSensor: ReportSensor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Report` that is related to this `ReportSensor`."""
  reportByReportId: Report

  """Reads a single `Sensor` that is related to this `ReportSensor`."""
  sensorBySensorId: Sensor

  """An edge for our `ReportSensor`. May be used by Relay 1."""
  reportSensorEdge(
    """The method to use when ordering `ReportSensor`."""
    orderBy: [ReportSensorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportSensorsEdge
}

"""All input for the create `ReportSensor` mutation."""
input CreateReportSensorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ReportSensor` to be created by this mutation."""
  reportSensor: ReportSensorInput!
}

"""An input for mutations affecting `ReportSensor`"""
input ReportSensorInput {
  id: Int
  reportId: Int
  sensorId: Int
}

"""The output of our create `Report` mutation."""
type CreateReportPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Report` that was created by this mutation."""
  report: Report

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Report`."""
  userByOwnerId: User

  """Reads a single `EndUser` that is related to this `Report`."""
  endUserByEndUserId: EndUser

  """Reads a single `User` that is related to this `Report`."""
  userByUserId: User

  """An edge for our `Report`. May be used by Relay 1."""
  reportEdge(
    """The method to use when ordering `Report`."""
    orderBy: [ReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportsEdge
}

"""All input for the create `Report` mutation."""
input CreateReportInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Report` to be created by this mutation."""
  report: ReportInput!
}

"""An input for mutations affecting `Report`"""
input ReportInput {
  created: Datetime
  modified: Datetime
  remarks: String
  ownerId: Int!
  endUserId: Int
  id: Int
  date: Date
  startup: Boolean
  maintenance: Boolean
  repair: Boolean
  extraWork: Boolean
  other: Boolean
  filename: String
  userId: Int!
  closedOld: Boolean
  tsrNumber: String
  closed: Boolean
  checkedTechcentre: Boolean
  factuuropdracht: String
  version: String
  destroyed: Boolean
  type: String!
}

"""The output of our create `Request` mutation."""
type CreateRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Request` that was created by this mutation."""
  request: Request

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Request`."""
  userByOwnerId: User

  """An edge for our `Request`. May be used by Relay 1."""
  requestEdge(
    """The method to use when ordering `Request`."""
    orderBy: [RequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RequestsEdge
}

"""All input for the create `Request` mutation."""
input CreateRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Request` to be created by this mutation."""
  request: RequestInput!
}

"""An input for mutations affecting `Request`"""
input RequestInput {
  id: Int
  tableName: String
  request: String
  created: Datetime
  modified: Datetime
  ownerId: Int!
  completed: Boolean
}

"""The output of our create `RxCard` mutation."""
type CreateRxCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RxCard` that was created by this mutation."""
  rxCard: RxCard

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `RxCard`."""
  userByOwnerId: User

  """An edge for our `RxCard`. May be used by Relay 1."""
  rxCardEdge(
    """The method to use when ordering `RxCard`."""
    orderBy: [RxCardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RxCardsEdge
}

"""All input for the create `RxCard` mutation."""
input CreateRxCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RxCard` to be created by this mutation."""
  rxCard: RxCardInput!
}

"""An input for mutations affecting `RxCard`"""
input RxCardInput {
  id: Int
  serialNumber: String
  ownerId: Int
  created: Datetime
  modified: Datetime
}

"""The output of our create `SamplePoint` mutation."""
type CreateSamplePointPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SamplePoint` that was created by this mutation."""
  samplePoint: SamplePoint

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `SamplePoint`."""
  userByOwnerId: User

  """Reads a single `Area` that is related to this `SamplePoint`."""
  areaByAreaId: Area

  """An edge for our `SamplePoint`. May be used by Relay 1."""
  samplePointEdge(
    """The method to use when ordering `SamplePoint`."""
    orderBy: [SamplePointsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SamplePointsEdge
}

"""All input for the create `SamplePoint` mutation."""
input CreateSamplePointInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SamplePoint` to be created by this mutation."""
  samplePoint: SamplePointInput!
}

"""An input for mutations affecting `SamplePoint`"""
input SamplePointInput {
  id: Int
  name: String!
  created: Datetime
  modified: Datetime
  ownerId: Int
  areaId: Int!
}

"""The output of our create `SensorBaseType` mutation."""
type CreateSensorBaseTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorBaseType` that was created by this mutation."""
  sensorBaseType: SensorBaseType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Principle` that is related to this `SensorBaseType`."""
  principleByPrincipleId: Principle

  """An edge for our `SensorBaseType`. May be used by Relay 1."""
  sensorBaseTypeEdge(
    """The method to use when ordering `SensorBaseType`."""
    orderBy: [SensorBaseTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorBaseTypesEdge
}

"""All input for the create `SensorBaseType` mutation."""
input CreateSensorBaseTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SensorBaseType` to be created by this mutation."""
  sensorBaseType: SensorBaseTypeInput!
}

"""An input for mutations affecting `SensorBaseType`"""
input SensorBaseTypeInput {
  id: Int
  prefix: String
  suffix: String
  principleId: Int
  ownerId: Int
  created: Datetime
  modified: Datetime
  series: String
  maintenanceIntervalMonths: Int
  quotationIntervalMonths: Int
  replacementIntervalMonths: Int
  volume: Int
}

"""The output of our create `SensorElementLocation` mutation."""
type CreateSensorElementLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorElementLocation` that was created by this mutation."""
  sensorElementLocation: SensorElementLocation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `DetectorSensorLocation` that is related to this `SensorElementLocation`.
  """
  detectorSensorLocationByDetectorSensorLocationId: DetectorSensorLocation

  """
  Reads a single `SensorElement` that is related to this `SensorElementLocation`.
  """
  sensorElementBySensorElementId: SensorElement

  """Reads a single `User` that is related to this `SensorElementLocation`."""
  userByOwnerId: User

  """An edge for our `SensorElementLocation`. May be used by Relay 1."""
  sensorElementLocationEdge(
    """The method to use when ordering `SensorElementLocation`."""
    orderBy: [SensorElementLocationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorElementLocationsEdge
}

"""All input for the create `SensorElementLocation` mutation."""
input CreateSensorElementLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SensorElementLocation` to be created by this mutation."""
  sensorElementLocation: SensorElementLocationInput!
}

"""An input for mutations affecting `SensorElementLocation`"""
input SensorElementLocationInput {
  id: Int
  detectorSensorLocationId: Int!
  sensorElementId: Int
  created: Datetime
  modified: Datetime
  ownerId: Int!
}

"""The output of our create `SensorElementLog` mutation."""
type CreateSensorElementLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorElementLog` that was created by this mutation."""
  sensorElementLog: SensorElementLog

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SensorElement` that is related to this `SensorElementLog`.
  """
  sensorElementBySensorElementId: SensorElement

  """Reads a single `Sensor` that is related to this `SensorElementLog`."""
  sensorBySensorId: Sensor

  """An edge for our `SensorElementLog`. May be used by Relay 1."""
  sensorElementLogEdge(
    """The method to use when ordering `SensorElementLog`."""
    orderBy: [SensorElementLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorElementLogsEdge
}

"""All input for the create `SensorElementLog` mutation."""
input CreateSensorElementLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SensorElementLog` to be created by this mutation."""
  sensorElementLog: SensorElementLogInput!
}

"""An input for mutations affecting `SensorElementLog`"""
input SensorElementLogInput {
  id: Int
  time: Datetime!
  sensorElementId: Int!
  sensorId: Int
  sensorPosition: Int
  ownerId: Int!
}

"""The output of our create `SensorElementType` mutation."""
type CreateSensorElementTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorElementType` that was created by this mutation."""
  sensorElementType: SensorElementType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `SensorElementType`."""
  userByOwnerId: User

  """
  Reads a single `SensorBaseType` that is related to this `SensorElementType`.
  """
  sensorBaseTypeBySensorBaseTypeId: SensorBaseType

  """Reads a single `Range` that is related to this `SensorElementType`."""
  rangeByRangeId: Range

  """Reads a single `Range` that is related to this `SensorElementType`."""
  rangeByCalRangeId: Range

  """An edge for our `SensorElementType`. May be used by Relay 1."""
  sensorElementTypeEdge(
    """The method to use when ordering `SensorElementType`."""
    orderBy: [SensorElementTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorElementTypesEdge
}

"""All input for the create `SensorElementType` mutation."""
input CreateSensorElementTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SensorElementType` to be created by this mutation."""
  sensorElementType: SensorElementTypeInput!
}

"""An input for mutations affecting `SensorElementType`"""
input SensorElementTypeInput {
  id: Int
  name: String
  replacementInterval: Int
  created: Datetime
  modified: Datetime
  ownerId: Int!
  sensorBaseTypeId: Int!
  rangeId: Int!
  calRangeId: Int!
}

"""The output of our create `SensorElement` mutation."""
type CreateSensorElementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorElement` that was created by this mutation."""
  sensorElement: SensorElement

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SensorElementType` that is related to this `SensorElement`.
  """
  sensorElementTypeBySensorElementTypeId: SensorElementType

  """Reads a single `User` that is related to this `SensorElement`."""
  userByOwnerId: User

  """An edge for our `SensorElement`. May be used by Relay 1."""
  sensorElementEdge(
    """The method to use when ordering `SensorElement`."""
    orderBy: [SensorElementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorElementsEdge
}

"""All input for the create `SensorElement` mutation."""
input CreateSensorElementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SensorElement` to be created by this mutation."""
  sensorElement: SensorElementInput!
}

"""An input for mutations affecting `SensorElement`"""
input SensorElementInput {
  id: Int
  sensorElementTypeId: Int!
  serialNumber: String
  created: Datetime
  modified: Datetime
  ownerId: Int!
  labelDate: Date
}

"""The output of our create `SensorOrder` mutation."""
type CreateSensorOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorOrder` that was created by this mutation."""
  sensorOrder: SensorOrder

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sensor` that is related to this `SensorOrder`."""
  sensorBySensorId: Sensor

  """Reads a single `User` that is related to this `SensorOrder`."""
  userByOwnerId: User

  """Reads a single `User` that is related to this `SensorOrder`."""
  userByCheckedUserId: User

  """Reads a single `User` that is related to this `SensorOrder`."""
  userByVerifiedUserId: User

  """
  Reads a single `Factureeropdracht` that is related to this `SensorOrder`.
  """
  factureeropdrachtByFactuuropdracht: Factureeropdracht

  """An edge for our `SensorOrder`. May be used by Relay 1."""
  sensorOrderEdge(
    """The method to use when ordering `SensorOrder`."""
    orderBy: [SensorOrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorOrdersEdge
}

"""All input for the create `SensorOrder` mutation."""
input CreateSensorOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SensorOrder` to be created by this mutation."""
  sensorOrder: SensorOrderInput!
}

"""An input for mutations affecting `SensorOrder`"""
input SensorOrderInput {
  id: Int
  sensorId: Int!
  created: Datetime
  ownerId: Int!
  checkedUserId: Int
  verifiedUserId: Int
  factuuropdracht: String!
  modified: Datetime
}

"""The output of our create `SensorSensorElement` mutation."""
type CreateSensorSensorElementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorSensorElement` that was created by this mutation."""
  sensorSensorElement: SensorSensorElement

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sensor` that is related to this `SensorSensorElement`."""
  sensorBySensorId: Sensor

  """
  Reads a single `SensorElement` that is related to this `SensorSensorElement`.
  """
  sensorElementBySensorElementId: SensorElement

  """Reads a single `User` that is related to this `SensorSensorElement`."""
  userByOwnerId: User

  """An edge for our `SensorSensorElement`. May be used by Relay 1."""
  sensorSensorElementEdge(
    """The method to use when ordering `SensorSensorElement`."""
    orderBy: [SensorSensorElementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorSensorElementsEdge
}

"""All input for the create `SensorSensorElement` mutation."""
input CreateSensorSensorElementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SensorSensorElement` to be created by this mutation."""
  sensorSensorElement: SensorSensorElementInput!
}

"""An input for mutations affecting `SensorSensorElement`"""
input SensorSensorElementInput {
  id: Int
  sensorId: Int!
  sensorElementId: Int!
  sensorPosition: Int!
  installed: Date
  created: Datetime
  modified: Datetime
  ownerId: Int!
}

"""The output of our create `SensorSetting` mutation."""
type CreateSensorSettingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorSetting` that was created by this mutation."""
  sensorSetting: SensorSetting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SensorSetting`. May be used by Relay 1."""
  sensorSettingEdge(
    """The method to use when ordering `SensorSetting`."""
    orderBy: [SensorSettingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorSettingsEdge
}

"""All input for the create `SensorSetting` mutation."""
input CreateSensorSettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SensorSetting` to be created by this mutation."""
  sensorSetting: SensorSettingInput!
}

"""An input for mutations affecting `SensorSetting`"""
input SensorSettingInput {
  id: Int
  typeTarget: String
  type: String
  version: String
  target: String
  min: BigFloat
  max: BigFloat
  units: String
  nDec: Int
  gas: String
  flow: BigFloat
  sw5: String
  sw6: String
  electrolyte: String
  membrane: String
  oRing: String
  restr: String
  battery: String
  seal: String
  plug: String
  sw4: String
  battConn: String
  alarmUnits: Int
  alarm1Percentage: BigFloat
  alarm1Units: BigFloat
  alarm1Current: Int
  alarm1Direction: Int
  alarm2Percentage: BigFloat
  alarm2Units: BigFloat
  alarm2Current: Int
  alarm2Direction: Int
  warningPercentageA1: BigFloat
  warningCurrent: Int
  calFlow: BigFloat
  byPassFlow: BigFloat
  pyroType: String
  pyroVoltage: BigFloat
  span100K: String
  span10K: String
  span1K: String
}

"""The output of our create `SensorTestResult` mutation."""
type CreateSensorTestResultPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorTestResult` that was created by this mutation."""
  sensorTestResult: SensorTestResult

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sensor` that is related to this `SensorTestResult`."""
  sensorBySensorId: Sensor

  """Reads a single `User` that is related to this `SensorTestResult`."""
  userByOwnerId: User

  """Reads a single `User` that is related to this `SensorTestResult`."""
  userByUserId: User

  """Reads a single `CalGas` that is related to this `SensorTestResult`."""
  calGasByFsCalGasId: CalGas

  """
  Reads a single `SensorOrder` that is related to this `SensorTestResult`.
  """
  sensorOrderBySensorOrderId: SensorOrder

  """An edge for our `SensorTestResult`. May be used by Relay 1."""
  sensorTestResultEdge(
    """The method to use when ordering `SensorTestResult`."""
    orderBy: [SensorTestResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorTestResultsEdge
}

"""All input for the create `SensorTestResult` mutation."""
input CreateSensorTestResultInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SensorTestResult` to be created by this mutation."""
  sensorTestResult: SensorTestResultInput!
}

"""An input for mutations affecting `SensorTestResult`"""
input SensorTestResultInput {
  id: Int
  sensorId: Int!
  date: Date
  zeroResponse: Float!
  spanResponse: Float!
  created: Datetime
  modified: Datetime
  ownerId: Int!
  factuuropdrachtOld: String
  userId: Int!
  fsCalGasId: Int
  usedSpanConcentration: Float
  sensorOrderId: Int
}

"""The output of our create `SensorType` mutation."""
type CreateSensorTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorType` that was created by this mutation."""
  sensorType: SensorType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Electrolyte` that is related to this `SensorType`."""
  electrolyteByElectrolyteId: Electrolyte

  """Reads a single `Membrane` that is related to this `SensorType`."""
  membraneByMembraneId: Membrane

  """Reads a single `ORing` that is related to this `SensorType`."""
  oRingByORingId: ORing

  """Reads a single `Pyrolyser` that is related to this `SensorType`."""
  pyrolyserByPyrolyserId: Pyrolyser

  """Reads a single `Filter` that is related to this `SensorType`."""
  filterByFilterId: Filter

  """Reads a single `Range` that is related to this `SensorType`."""
  rangeByRangeId: Range

  """Reads a single `SensorBaseType` that is related to this `SensorType`."""
  sensorBaseTypeBySensorBaseTypeId: SensorBaseType

  """Reads a single `User` that is related to this `SensorType`."""
  userByOwnerId: User

  """Reads a single `CalGas` that is related to this `SensorType`."""
  calGasByCalGasId: CalGas

  """Reads a single `Plug` that is related to this `SensorType`."""
  plugByPlugId: Plug

  """An edge for our `SensorType`. May be used by Relay 1."""
  sensorTypeEdge(
    """The method to use when ordering `SensorType`."""
    orderBy: [SensorTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorTypesEdge
}

"""All input for the create `SensorType` mutation."""
input CreateSensorTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SensorType` to be created by this mutation."""
  sensorType: SensorTypeInput!
}

"""An input for mutations affecting `SensorType`"""
input SensorTypeInput {
  id: Int
  sensorTypeId: Int
  electrolyteId: Int
  membraneId: Int
  oRingId: Int
  pyrolyserId: Int
  filterId: Int
  battery: Boolean
  restrictor: Boolean
  membraneSeal: Boolean
  rangeId: Int!
  flowRate: Float
  calFlowRate: Float
  code: String!
  obsolete: Boolean
  pyrolyserVoltage: Float
  principleId: Int
  sensorBaseTypeId: Int!
  created: Datetime
  modified: Datetime
  ownerId: Int!
  model: String!
  calGasId: Int!
  siliconeSheet: Boolean
  elementCount: Int
  maintenanceIntervalMonths: Int
  replacementIntervalMonths: Int
  cdartikel: String
  volume: Int
  calResponse: Float
  electrodeCount: Int
  biasMv: Int
  direction: Boolean
  lowElectrolyte: Boolean
  spanResistor: BigFloat
  plugId: Int
  transportSwitch: Boolean
}

"""The output of our create `Software` mutation."""
type CreateSoftwarePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Software` that was created by this mutation."""
  software: Software

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Hardware` that is related to this `Software`."""
  hardwareByHardwareId: Hardware

  """Reads a single `User` that is related to this `Software`."""
  userByOwnerId: User

  """An edge for our `Software`. May be used by Relay 1."""
  softwareEdge(
    """The method to use when ordering `Software`."""
    orderBy: [SoftwaresOrderBy!] = [PRIMARY_KEY_ASC]
  ): SoftwaresEdge
}

"""All input for the create `Software` mutation."""
input CreateSoftwareInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Software` to be created by this mutation."""
  software: SoftwareInput!
}

"""An input for mutations affecting `Software`"""
input SoftwareInput {
  id: Int
  type: String!
  serialNumber: String
  purchaseDate: Date
  hardwareId: Int
  ownerId: Int
  remarks: String
  created: Datetime
  modified: Datetime
  registrationCode: String
  activationCode: String
  login: String
  password: String
}

"""The output of our create `StockGroup` mutation."""
type CreateStockGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StockGroup` that was created by this mutation."""
  stockGroup: StockGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `StockGroup`."""
  userByOwnerId: User

  """An edge for our `StockGroup`. May be used by Relay 1."""
  stockGroupEdge(
    """The method to use when ordering `StockGroup`."""
    orderBy: [StockGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): StockGroupsEdge
}

"""All input for the create `StockGroup` mutation."""
input CreateStockGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `StockGroup` to be created by this mutation."""
  stockGroup: StockGroupInput!
}

"""An input for mutations affecting `StockGroup`"""
input StockGroupInput {
  id: Int
  name: String
  ownerId: Int!
  created: Datetime!
  modified: Datetime
}

"""The output of our create `StockItem` mutation."""
type CreateStockItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StockItem` that was created by this mutation."""
  stockItem: StockItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `StockGroup` that is related to this `StockItem`."""
  stockGroupByStockGroupId: StockGroup

  """Reads a single `User` that is related to this `StockItem`."""
  userByOwnerId: User

  """An edge for our `StockItem`. May be used by Relay 1."""
  stockItemEdge(
    """The method to use when ordering `StockItem`."""
    orderBy: [StockItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): StockItemsEdge
}

"""All input for the create `StockItem` mutation."""
input CreateStockItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `StockItem` to be created by this mutation."""
  stockItem: StockItemInput!
}

"""An input for mutations affecting `StockItem`"""
input StockItemInput {
  id: Int
  stockGroupId: Int!
  cdartikel: String!
  ownerId: Int!
  created: Datetime
  modified: Datetime
  prijsper: Float
  action: String
}

"""The output of our create `StockSupplier` mutation."""
type CreateStockSupplierPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StockSupplier` that was created by this mutation."""
  stockSupplier: StockSupplier

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `StockSupplier`."""
  userByOwnerId: User

  """An edge for our `StockSupplier`. May be used by Relay 1."""
  stockSupplierEdge(
    """The method to use when ordering `StockSupplier`."""
    orderBy: [StockSuppliersOrderBy!] = [PRIMARY_KEY_ASC]
  ): StockSuppliersEdge
}

"""All input for the create `StockSupplier` mutation."""
input CreateStockSupplierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `StockSupplier` to be created by this mutation."""
  stockSupplier: StockSupplierInput!
}

"""An input for mutations affecting `StockSupplier`"""
input StockSupplierInput {
  id: Int
  cdcrediteur: String!
  ownerId: Int!
  created: Datetime
  modified: Datetime
  name: String
  shipmentDays: Int
  shipmentDay: Int
}

"""The output of our create `Task` mutation."""
type CreateTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Task` that was created by this mutation."""
  task: Task

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Task`."""
  userByOwnerId: User

  """An edge for our `Task`. May be used by Relay 1."""
  taskEdge(
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksEdge
}

"""All input for the create `Task` mutation."""
input CreateTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Task` to be created by this mutation."""
  task: TaskInput!
}

"""An input for mutations affecting `Task`"""
input TaskInput {
  id: Int
  code: String
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  groupCode: Int
  sortCode: Int
  wbsoStartDate: Date
  wbsoEndDate: Date
  description: String
}

"""The output of our create `TempFactopdrachtregel` mutation."""
type CreateTempFactopdrachtregelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TempFactopdrachtregel` that was created by this mutation."""
  tempFactopdrachtregel: TempFactopdrachtregel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TempFactopdrachtregel`. May be used by Relay 1."""
  tempFactopdrachtregelEdge(
    """The method to use when ordering `TempFactopdrachtregel`."""
    orderBy: [TempFactopdrachtregelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TempFactopdrachtregelsEdge
}

"""All input for the create `TempFactopdrachtregel` mutation."""
input CreateTempFactopdrachtregelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TempFactopdrachtregel` to be created by this mutation."""
  tempFactopdrachtregel: TempFactopdrachtregelInput!
}

"""An input for mutations affecting `TempFactopdrachtregel`"""
input TempFactopdrachtregelInput {
  id: String!
  factuuropdracht: String!
  factuurregel: Int!
  hoofdregel: Int
  soort: String
  cdartikel: String
  omschr: String
  eenheid: String
  aantaldec: Int
  aantalgeleverd: BigFloat
  prijs: BigFloat
  prijsper: BigFloat
  kortingperc: BigFloat
  factbedragincl: BigFloat
  factbedragexcl: BigFloat
  btwcode: Int
  btwperc: BigFloat
  cdgrbrekening: String
  nettoomzet: BigFloat
  kostprijs: BigFloat
  statcode: String
  aantalbesteld: BigFloat
  aantalleveren: BigFloat
  datum: Date
  cdstatus: String
  aantalnaleveren: BigFloat
  tekstmagb: String
  cdmagazijn: String
  cdgrbrekomzvj: String
  factbedragexclvj: BigFloat
  aantalgereserv: BigFloat
  kvc: String
  cdkostenplaats: String
  cddossier: String
  cdgrbrekkort: String
  cdwerknemer: String
  weeknummer: Int
  factopdrRglGuid: String
  koppelMetInkoop: String
  cddeelproject: String
  cdtermijn: Int
  bonnummer: String
  projMutsoort: String
  voorschot: Int
  cdgrbkostprijs: String
  cdgrbdekking: String
  samVersie: String
  declarabel: String
  vvvrijvelda: String
}

"""The output of our create `TempLicense` mutation."""
type CreateTempLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TempLicense` that was created by this mutation."""
  tempLicense: TempLicense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TempLicense`. May be used by Relay 1."""
  tempLicenseEdge(
    """The method to use when ordering `TempLicense`."""
    orderBy: [TempLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TempLicensesEdge
}

"""All input for the create `TempLicense` mutation."""
input CreateTempLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TempLicense` to be created by this mutation."""
  tempLicense: TempLicenseInput!
}

"""An input for mutations affecting `TempLicense`"""
input TempLicenseInput {
  id: Int
  moduletype: Int
  moduledata: String
  licensecode: String
  remarks: String
  customerkey: Int
  licenseid: Int
  durationmonths: Int
  durationdays: Int
  creationtime: Datetime
  ordercode: Int
  activate: Int
}

"""The output of our create `TempRegistrationHistory` mutation."""
type CreateTempRegistrationHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TempRegistrationHistory` that was created by this mutation."""
  tempRegistrationHistory: TempRegistrationHistory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TempRegistrationHistory`. May be used by Relay 1."""
  tempRegistrationHistoryEdge(
    """The method to use when ordering `TempRegistrationHistory`."""
    orderBy: [TempRegistrationHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TempRegistrationHistoriesEdge
}

"""All input for the create `TempRegistrationHistory` mutation."""
input CreateTempRegistrationHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TempRegistrationHistory` to be created by this mutation."""
  tempRegistrationHistory: TempRegistrationHistoryInput!
}

"""An input for mutations affecting `TempRegistrationHistory`"""
input TempRegistrationHistoryInput {
  id: Int
  activationCode: String
  registrationId: Int
  expirationDate: Date
  orderCode: String
}

"""The output of our create `TempRegistration` mutation."""
type CreateTempRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TempRegistration` that was created by this mutation."""
  tempRegistration: TempRegistration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TempRegistration`. May be used by Relay 1."""
  tempRegistrationEdge(
    """The method to use when ordering `TempRegistration`."""
    orderBy: [TempRegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TempRegistrationsEdge
}

"""All input for the create `TempRegistration` mutation."""
input CreateTempRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TempRegistration` to be created by this mutation."""
  tempRegistration: TempRegistrationInput!
}

"""An input for mutations affecting `TempRegistration`"""
input TempRegistrationInput {
  id: Int
  hwType: Int
  registrationCode: String
  activationCode: String
  licenseId: Int
  expirationDate: Date
  hwCode: String
  computerName: String
  ipAddress: String
  orderCode: String
}

"""The output of our create `TempRegistrations2` mutation."""
type CreateTempRegistrations2Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TempRegistrations2` that was created by this mutation."""
  tempRegistrations2: TempRegistrations2

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TempRegistrations2`. May be used by Relay 1."""
  tempRegistrations2Edge(
    """The method to use when ordering `TempRegistrations2`."""
    orderBy: [TempRegistrations2SOrderBy!] = [PRIMARY_KEY_ASC]
  ): TempRegistrations2SEdge
}

"""All input for the create `TempRegistrations2` mutation."""
input CreateTempRegistrations2Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TempRegistrations2` to be created by this mutation."""
  tempRegistrations2: TempRegistrations2Input!
}

"""An input for mutations affecting `TempRegistrations2`"""
input TempRegistrations2Input {
  id: Int
  hwType: Int
  registrationCode: String
  activationCode: String
  licenseId: Int
  expirationDate: Date
  hwCode: String
  computerName: String
  ipAddress: String
  orderCode: String
}

"""The output of our create `Test` mutation."""
type CreateTestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Test` that was created by this mutation."""
  test: Test

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Test`. May be used by Relay 1."""
  testEdge(
    """The method to use when ordering `Test`."""
    orderBy: [TestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TestsEdge
}

"""All input for the create `Test` mutation."""
input CreateTestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Test` to be created by this mutation."""
  test: TestInput!
}

"""An input for mutations affecting `Test`"""
input TestInput {
  id: Int
  detectorSensorLocationId: Int!
  date: Datetime
  day: Int
  success: Boolean
  sensorId: Int
  originalSensorId: Int
  filterId: Int
  pyrolyserId: Int
}

"""The output of our create `UserRight` mutation."""
type CreateUserRightPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserRight` that was created by this mutation."""
  userRight: UserRight

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserRight`."""
  userByUserId: User

  """An edge for our `UserRight`. May be used by Relay 1."""
  userRightEdge(
    """The method to use when ordering `UserRight`."""
    orderBy: [UserRightsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserRightsEdge
}

"""All input for the create `UserRight` mutation."""
input CreateUserRightInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserRight` to be created by this mutation."""
  userRight: UserRightInput!
}

"""An input for mutations affecting `UserRight`"""
input UserRightInput {
  id: Int
  userId: Int
  path: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  authorized: Boolean!
}

"""The output of our create `UserTask` mutation."""
type CreateUserTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserTask` that was created by this mutation."""
  userTask: UserTask

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserTask`."""
  userByUserId: User

  """Reads a single `Task` that is related to this `UserTask`."""
  taskByTaskId: Task

  """Reads a single `User` that is related to this `UserTask`."""
  userByOwnerId: User

  """An edge for our `UserTask`. May be used by Relay 1."""
  userTaskEdge(
    """The method to use when ordering `UserTask`."""
    orderBy: [UserTasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserTasksEdge
}

"""All input for the create `UserTask` mutation."""
input CreateUserTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserTask` to be created by this mutation."""
  userTask: UserTaskInput!
}

"""An input for mutations affecting `UserTask`"""
input UserTaskInput {
  id: Int
  userId: Int
  taskId: Int
  created: Datetime
  modified: Datetime
  ownerId: Int
  qualifiesForOvertime: Boolean
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `User`."""
  groupByGroupId: Group

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""An input for mutations affecting `User`"""
input UserInput {
  id: Int
  username: String
  password: String
  created: Datetime
  modified: Datetime
  groupId: Int
  initials: String
  fullname: String
  holidayStartBalance: Int
  overtimeStartBalance: Int
  url: String
  weeklyHoursFullAccess: Boolean
}

"""The output of our create `Voorraden` mutation."""
type CreateVoorradenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Voorraden` that was created by this mutation."""
  voorraden: Voorraden

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Voorraden`. May be used by Relay 1."""
  voorradenEdge(
    """The method to use when ordering `Voorraden`."""
    orderBy: [VoorradensOrderBy!] = [PRIMARY_KEY_ASC]
  ): VoorradensEdge
}

"""All input for the create `Voorraden` mutation."""
input CreateVoorradenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Voorraden` to be created by this mutation."""
  voorraden: VoorradenInput!
}

"""An input for mutations affecting `Voorraden`"""
input VoorradenInput {
  cdartikel: String!
  cdmagazijn: String!
  locatie: String
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  voorraad: BigFloat
  leveren: BigFloat
  geleverd: BigFloat
  besteld: BigFloat
  inkopen: BigFloat
  gereserveerd: BigFloat
  assemblbij: BigFloat
  assemblaf: BigFloat
}

"""The output of our create `VoorradenLog` mutation."""
type CreateVoorradenLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `VoorradenLog` that was created by this mutation."""
  voorradenLog: VoorradenLog

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `VoorradenLog`. May be used by Relay 1."""
  voorradenLogEdge(
    """The method to use when ordering `VoorradenLog`."""
    orderBy: [VoorradenLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): VoorradenLogsEdge
}

"""All input for the create `VoorradenLog` mutation."""
input CreateVoorradenLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `VoorradenLog` to be created by this mutation."""
  voorradenLog: VoorradenLogInput!
}

"""An input for mutations affecting `VoorradenLog`"""
input VoorradenLogInput {
  id: Int
  created: Datetime
  operation: String
  new: JSON
  old: JSON
}

"""The output of our create `WeeklyHourRemark` mutation."""
type CreateWeeklyHourRemarkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `WeeklyHourRemark` that was created by this mutation."""
  weeklyHourRemark: WeeklyHourRemark

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `WeeklyHourRemark`."""
  userByUserId: User

  """Reads a single `Task` that is related to this `WeeklyHourRemark`."""
  taskByTaskId: Task

  """Reads a single `User` that is related to this `WeeklyHourRemark`."""
  userByOwnerId: User

  """An edge for our `WeeklyHourRemark`. May be used by Relay 1."""
  weeklyHourRemarkEdge(
    """The method to use when ordering `WeeklyHourRemark`."""
    orderBy: [WeeklyHourRemarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): WeeklyHourRemarksEdge
}

"""All input for the create `WeeklyHourRemark` mutation."""
input CreateWeeklyHourRemarkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `WeeklyHourRemark` to be created by this mutation."""
  weeklyHourRemark: WeeklyHourRemarkInput!
}

"""An input for mutations affecting `WeeklyHourRemark`"""
input WeeklyHourRemarkInput {
  id: Int
  userId: Int
  taskId: Int
  date: Date
  created: Datetime
  modified: Datetime
  ownerId: Int
  remark: String
}

"""The output of our create `WeeklyHour` mutation."""
type CreateWeeklyHourPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `WeeklyHour` that was created by this mutation."""
  weeklyHour: WeeklyHour

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `WeeklyHour`."""
  userByUserId: User

  """Reads a single `Task` that is related to this `WeeklyHour`."""
  taskByTaskId: Task

  """Reads a single `User` that is related to this `WeeklyHour`."""
  userByOwnerId: User

  """An edge for our `WeeklyHour`. May be used by Relay 1."""
  weeklyHourEdge(
    """The method to use when ordering `WeeklyHour`."""
    orderBy: [WeeklyHoursOrderBy!] = [PRIMARY_KEY_ASC]
  ): WeeklyHoursEdge
}

"""All input for the create `WeeklyHour` mutation."""
input CreateWeeklyHourInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `WeeklyHour` to be created by this mutation."""
  weeklyHour: WeeklyHourInput!
}

"""An input for mutations affecting `WeeklyHour`"""
input WeeklyHourInput {
  id: Int
  userId: Int!
  taskId: Int!
  startTime: Datetime
  endTime: Datetime
  created: Datetime
  modified: Datetime
  ownerId: Int
  office: Boolean
}

"""The output of our update `AspNetRoleClaim` mutation."""
type UpdateAspNetRoleClaimPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AspNetRoleClaim` that was updated by this mutation."""
  aspNetRoleClaim: AspNetRoleClaim

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `AspNetRole` that is related to this `AspNetRoleClaim`."""
  aspNetRoleByRoleId: AspNetRole

  """An edge for our `AspNetRoleClaim`. May be used by Relay 1."""
  aspNetRoleClaimEdge(
    """The method to use when ordering `AspNetRoleClaim`."""
    orderBy: [AspNetRoleClaimsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AspNetRoleClaimsEdge
}

"""All input for the `updateAspNetRoleClaim` mutation."""
input UpdateAspNetRoleClaimInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AspNetRoleClaim` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AspNetRoleClaim` being updated.
  """
  aspNetRoleClaimPatch: AspNetRoleClaimPatch!
}

"""
Represents an update to a `AspNetRoleClaim`. Fields that are set will be updated.
"""
input AspNetRoleClaimPatch {
  id: Int
  roleId: String
  claimType: String
  claimValue: String
}

"""All input for the `updateAspNetRoleClaimById` mutation."""
input UpdateAspNetRoleClaimByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AspNetRoleClaim` being updated.
  """
  aspNetRoleClaimPatch: AspNetRoleClaimPatch!
  id: Int!
}

"""The output of our update `AspNetRole` mutation."""
type UpdateAspNetRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AspNetRole` that was updated by this mutation."""
  aspNetRole: AspNetRole

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `AspNetRole`. May be used by Relay 1."""
  aspNetRoleEdge(
    """The method to use when ordering `AspNetRole`."""
    orderBy: [AspNetRolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AspNetRolesEdge
}

"""All input for the `updateAspNetRole` mutation."""
input UpdateAspNetRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AspNetRole` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AspNetRole` being updated.
  """
  aspNetRolePatch: AspNetRolePatch!
}

"""
Represents an update to a `AspNetRole`. Fields that are set will be updated.
"""
input AspNetRolePatch {
  id: String
  name: String
  normalizedName: String
  concurrencyStamp: String
}

"""All input for the `updateAspNetRoleById` mutation."""
input UpdateAspNetRoleByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AspNetRole` being updated.
  """
  aspNetRolePatch: AspNetRolePatch!
  id: String!
}

"""The output of our update `AspNetUserClaim` mutation."""
type UpdateAspNetUserClaimPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AspNetUserClaim` that was updated by this mutation."""
  aspNetUserClaim: AspNetUserClaim

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `AspNetUser` that is related to this `AspNetUserClaim`."""
  aspNetUserByUserId: AspNetUser

  """An edge for our `AspNetUserClaim`. May be used by Relay 1."""
  aspNetUserClaimEdge(
    """The method to use when ordering `AspNetUserClaim`."""
    orderBy: [AspNetUserClaimsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AspNetUserClaimsEdge
}

"""All input for the `updateAspNetUserClaim` mutation."""
input UpdateAspNetUserClaimInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AspNetUserClaim` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AspNetUserClaim` being updated.
  """
  aspNetUserClaimPatch: AspNetUserClaimPatch!
}

"""
Represents an update to a `AspNetUserClaim`. Fields that are set will be updated.
"""
input AspNetUserClaimPatch {
  id: Int
  userId: String
  claimType: String
  claimValue: String
}

"""All input for the `updateAspNetUserClaimById` mutation."""
input UpdateAspNetUserClaimByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AspNetUserClaim` being updated.
  """
  aspNetUserClaimPatch: AspNetUserClaimPatch!
  id: Int!
}

"""The output of our update `AspNetUserLogin` mutation."""
type UpdateAspNetUserLoginPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AspNetUserLogin` that was updated by this mutation."""
  aspNetUserLogin: AspNetUserLogin

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `AspNetUser` that is related to this `AspNetUserLogin`."""
  aspNetUserByUserId: AspNetUser

  """An edge for our `AspNetUserLogin`. May be used by Relay 1."""
  aspNetUserLoginEdge(
    """The method to use when ordering `AspNetUserLogin`."""
    orderBy: [AspNetUserLoginsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AspNetUserLoginsEdge
}

"""All input for the `updateAspNetUserLogin` mutation."""
input UpdateAspNetUserLoginInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AspNetUserLogin` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AspNetUserLogin` being updated.
  """
  aspNetUserLoginPatch: AspNetUserLoginPatch!
}

"""
Represents an update to a `AspNetUserLogin`. Fields that are set will be updated.
"""
input AspNetUserLoginPatch {
  loginProvider: String
  providerKey: String
  providerDisplayName: String
  userId: String
}

"""
All input for the `updateAspNetUserLoginByLoginProviderAndProviderKey` mutation.
"""
input UpdateAspNetUserLoginByLoginProviderAndProviderKeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AspNetUserLogin` being updated.
  """
  aspNetUserLoginPatch: AspNetUserLoginPatch!
  loginProvider: String!
  providerKey: String!
}

"""The output of our update `AspNetUserRole` mutation."""
type UpdateAspNetUserRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AspNetUserRole` that was updated by this mutation."""
  aspNetUserRole: AspNetUserRole

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `AspNetUser` that is related to this `AspNetUserRole`."""
  aspNetUserByUserId: AspNetUser

  """Reads a single `AspNetRole` that is related to this `AspNetUserRole`."""
  aspNetRoleByRoleId: AspNetRole

  """Reads a single `AspNetUser` that is related to this `AspNetUserRole`."""
  aspNetUserByAppUserId: AspNetUser

  """An edge for our `AspNetUserRole`. May be used by Relay 1."""
  aspNetUserRoleEdge(
    """The method to use when ordering `AspNetUserRole`."""
    orderBy: [AspNetUserRolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AspNetUserRolesEdge
}

"""All input for the `updateAspNetUserRole` mutation."""
input UpdateAspNetUserRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AspNetUserRole` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AspNetUserRole` being updated.
  """
  aspNetUserRolePatch: AspNetUserRolePatch!
}

"""
Represents an update to a `AspNetUserRole`. Fields that are set will be updated.
"""
input AspNetUserRolePatch {
  userId: String
  roleId: String
  appUserId: String
}

"""All input for the `updateAspNetUserRoleByUserIdAndRoleId` mutation."""
input UpdateAspNetUserRoleByUserIdAndRoleIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AspNetUserRole` being updated.
  """
  aspNetUserRolePatch: AspNetUserRolePatch!
  userId: String!
  roleId: String!
}

"""The output of our update `AspNetUserToken` mutation."""
type UpdateAspNetUserTokenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AspNetUserToken` that was updated by this mutation."""
  aspNetUserToken: AspNetUserToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `AspNetUser` that is related to this `AspNetUserToken`."""
  aspNetUserByUserId: AspNetUser

  """An edge for our `AspNetUserToken`. May be used by Relay 1."""
  aspNetUserTokenEdge(
    """The method to use when ordering `AspNetUserToken`."""
    orderBy: [AspNetUserTokensOrderBy!] = [PRIMARY_KEY_ASC]
  ): AspNetUserTokensEdge
}

"""All input for the `updateAspNetUserToken` mutation."""
input UpdateAspNetUserTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AspNetUserToken` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AspNetUserToken` being updated.
  """
  aspNetUserTokenPatch: AspNetUserTokenPatch!
}

"""
Represents an update to a `AspNetUserToken`. Fields that are set will be updated.
"""
input AspNetUserTokenPatch {
  userId: String
  loginProvider: String
  name: String
  value: String
}

"""
All input for the `updateAspNetUserTokenByUserIdAndLoginProviderAndName` mutation.
"""
input UpdateAspNetUserTokenByUserIdAndLoginProviderAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AspNetUserToken` being updated.
  """
  aspNetUserTokenPatch: AspNetUserTokenPatch!
  userId: String!
  loginProvider: String!
  name: String!
}

"""The output of our update `AspNetUser` mutation."""
type UpdateAspNetUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AspNetUser` that was updated by this mutation."""
  aspNetUser: AspNetUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `AspNetUser`. May be used by Relay 1."""
  aspNetUserEdge(
    """The method to use when ordering `AspNetUser`."""
    orderBy: [AspNetUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): AspNetUsersEdge
}

"""All input for the `updateAspNetUser` mutation."""
input UpdateAspNetUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AspNetUser` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AspNetUser` being updated.
  """
  aspNetUserPatch: AspNetUserPatch!
}

"""
Represents an update to a `AspNetUser`. Fields that are set will be updated.
"""
input AspNetUserPatch {
  id: String
  displayName: String
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean
  twoFactorEnabled: Boolean
  lockoutEnd: Datetime
  lockoutEnabled: Boolean
  accessFailedCount: Int
}

"""All input for the `updateAspNetUserById` mutation."""
input UpdateAspNetUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AspNetUser` being updated.
  """
  aspNetUserPatch: AspNetUserPatch!
  id: String!
}

"""The output of our update `RefreshToken` mutation."""
type UpdateRefreshTokenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RefreshToken` that was updated by this mutation."""
  refreshToken: RefreshToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `AspNetUser` that is related to this `RefreshToken`."""
  aspNetUserByAppUserId: AspNetUser

  """An edge for our `RefreshToken`. May be used by Relay 1."""
  refreshTokenEdge(
    """The method to use when ordering `RefreshToken`."""
    orderBy: [RefreshTokensOrderBy!] = [PRIMARY_KEY_ASC]
  ): RefreshTokensEdge
}

"""All input for the `updateRefreshToken` mutation."""
input UpdateRefreshTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RefreshToken` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RefreshToken` being updated.
  """
  refreshTokenPatch: RefreshTokenPatch!
}

"""
Represents an update to a `RefreshToken`. Fields that are set will be updated.
"""
input RefreshTokenPatch {
  id: Int
  appUserId: String
  token: String
  expires: Datetime
  revoked: Datetime
}

"""All input for the `updateRefreshTokenById` mutation."""
input UpdateRefreshTokenByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RefreshToken` being updated.
  """
  refreshTokenPatch: RefreshTokenPatch!
  id: Int!
}

"""The output of our update `_Adre` mutation."""
type UpdateAdrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `_Adre` that was updated by this mutation."""
  _adre: _Adre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `_Adre`. May be used by Relay 1."""
  _adreEdge(
    """The method to use when ordering `_Adre`."""
    orderBy: [_AdresOrderBy!] = [PRIMARY_KEY_ASC]
  ): _AdresEdge
}

"""All input for the `updateAdre` mutation."""
input UpdateAdreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `_Adre` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `_Adre` being updated.
  """
  _adrePatch: _AdrePatch!
}

"""
Represents an update to a `_Adre`. Fields that are set will be updated.
"""
input _AdrePatch {
  adrestype: String
  adresGuid: String
  cdadres: Int
  cdland: String
  cdpersoon: String
  cdrelatie: Int
  cdtaal: String
  email: String
  homepage: String
  naam: String
  naamstraat: String
  persoon: String
  postcode: String
  straat: String
  telefax: String
  telefoon: String
  telefoonmobiel: String
  woonplaats: String
}

"""All input for the `updateAdreByAdresGuid` mutation."""
input UpdateAdreByAdresGuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `_Adre` being updated.
  """
  _adrePatch: _AdrePatch!
  adresGuid: String!
}

"""The output of our update `_Land` mutation."""
type UpdateLandPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `_Land` that was updated by this mutation."""
  _land: _Land

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `_Land`. May be used by Relay 1."""
  _landEdge(
    """The method to use when ordering `_Land`."""
    orderBy: [_LandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): _LandsEdge
}

"""All input for the `updateLand` mutation."""
input UpdateLandInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `_Land` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `_Land` being updated.
  """
  _landPatch: _LandPatch!
}

"""
Represents an update to a `_Land`. Fields that are set will be updated.
"""
input _LandPatch {
  cdland: String
  omschr: String
  cbsland: String
  cdeglid: String
  isoland: String
  rszland: Int
  sepa: String
}

"""All input for the `updateLandByCdland` mutation."""
input UpdateLandByCdlandInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `_Land` being updated.
  """
  _landPatch: _LandPatch!
  cdland: String!
}

"""The output of our update `Aco` mutation."""
type UpdateAcoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Aco` that was updated by this mutation."""
  aco: Aco

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Aco`. May be used by Relay 1."""
  acoEdge(
    """The method to use when ordering `Aco`."""
    orderBy: [AcosOrderBy!] = [PRIMARY_KEY_ASC]
  ): AcosEdge
}

"""All input for the `updateAco` mutation."""
input UpdateAcoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Aco` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Aco` being updated.
  """
  acoPatch: AcoPatch!
}

"""Represents an update to a `Aco`. Fields that are set will be updated."""
input AcoPatch {
  id: Int
  parentId: Int
  model: String
  foreignKey: Int
  alias: String
  lft: Int
  rght: Int
}

"""All input for the `updateAcoById` mutation."""
input UpdateAcoByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Aco` being updated.
  """
  acoPatch: AcoPatch!
  id: Int!
}

"""The output of our update `Action` mutation."""
type UpdateActionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Action` that was updated by this mutation."""
  action: Action

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Action`."""
  userByUserId: User

  """Reads a single `Group` that is related to this `Action`."""
  groupByGroupId: Group

  """Reads a single `Report` that is related to this `Action`."""
  reportByReportId: Report

  """Reads a single `User` that is related to this `Action`."""
  userByOwnerId: User

  """An edge for our `Action`. May be used by Relay 1."""
  actionEdge(
    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ActionsEdge
}

"""All input for the `updateAction` mutation."""
input UpdateActionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Action` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Action` being updated.
  """
  actionPatch: ActionPatch!
}

"""
Represents an update to a `Action`. Fields that are set will be updated.
"""
input ActionPatch {
  id: Int
  action: String
  userId: Int
  groupId: Int
  created: Datetime
  modified: Datetime
  closed: Boolean
  reportId: Int
  ownerId: Int
  date: Date
  followUp: String
  endUserId: Int
}

"""All input for the `updateActionById` mutation."""
input UpdateActionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Action` being updated.
  """
  actionPatch: ActionPatch!
  id: Int!
}

"""The output of our update `Application` mutation."""
type UpdateApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Application` that was updated by this mutation."""
  application: Application

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Application`."""
  userByOwnerId: User

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the `updateApplication` mutation."""
input UpdateApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Application` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Application` being updated.
  """
  applicationPatch: ApplicationPatch!
}

"""
Represents an update to a `Application`. Fields that are set will be updated.
"""
input ApplicationPatch {
  id: Int
  _toolId: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""All input for the `updateApplicationById` mutation."""
input UpdateApplicationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Application` being updated.
  """
  applicationPatch: ApplicationPatch!
  id: Int!
}

"""All input for the `updateApplicationByName` mutation."""
input UpdateApplicationByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Application` being updated.
  """
  applicationPatch: ApplicationPatch!
  name: String!
}

"""The output of our update `Area` mutation."""
type UpdateAreaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Area` that was updated by this mutation."""
  area: Area

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Floor` that is related to this `Area`."""
  floorByFloorId: Floor

  """Reads a single `User` that is related to this `Area`."""
  userByOwnerId: User

  """An edge for our `Area`. May be used by Relay 1."""
  areaEdge(
    """The method to use when ordering `Area`."""
    orderBy: [AreasOrderBy!] = [PRIMARY_KEY_ASC]
  ): AreasEdge
}

"""All input for the `updateArea` mutation."""
input UpdateAreaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Area` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Area` being updated.
  """
  areaPatch: AreaPatch!
}

"""Represents an update to a `Area`. Fields that are set will be updated."""
input AreaPatch {
  id: Int
  floorId: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  remarks: String
}

"""All input for the `updateAreaById` mutation."""
input UpdateAreaByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Area` being updated.
  """
  areaPatch: AreaPatch!
  id: Int!
}

"""All input for the `updateAreaByFloorIdAndName` mutation."""
input UpdateAreaByFloorIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Area` being updated.
  """
  areaPatch: AreaPatch!
  floorId: Int!
  name: String!
}

"""The output of our update `Aro` mutation."""
type UpdateAroPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Aro` that was updated by this mutation."""
  aro: Aro

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Aro`. May be used by Relay 1."""
  aroEdge(
    """The method to use when ordering `Aro`."""
    orderBy: [ArosOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArosEdge
}

"""All input for the `updateAro` mutation."""
input UpdateAroInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Aro` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Aro` being updated.
  """
  aroPatch: AroPatch!
}

"""Represents an update to a `Aro`. Fields that are set will be updated."""
input AroPatch {
  id: Int
  parentId: Int
  model: String
  foreignKey: Int
  alias: String
  lft: Int
  rght: Int
}

"""All input for the `updateAroById` mutation."""
input UpdateAroByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Aro` being updated.
  """
  aroPatch: AroPatch!
  id: Int!
}

"""The output of our update `ArosAco` mutation."""
type UpdateArosAcoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ArosAco` that was updated by this mutation."""
  arosAco: ArosAco

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ArosAco`. May be used by Relay 1."""
  arosAcoEdge(
    """The method to use when ordering `ArosAco`."""
    orderBy: [ArosAcosOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArosAcosEdge
}

"""All input for the `updateArosAco` mutation."""
input UpdateArosAcoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ArosAco` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ArosAco` being updated.
  """
  arosAcoPatch: ArosAcoPatch!
}

"""
Represents an update to a `ArosAco`. Fields that are set will be updated.
"""
input ArosAcoPatch {
  id: Int
  aroId: Int
  acoId: Int
  _create: String
  _read: String
  _update: String
  _delete: String
}

"""All input for the `updateArosAcoById` mutation."""
input UpdateArosAcoByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ArosAco` being updated.
  """
  arosAcoPatch: ArosAcoPatch!
  id: Int!
}

"""The output of our update `Artikel` mutation."""
type UpdateArtikelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Artikel` that was updated by this mutation."""
  artikel: Artikel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Artikel`. May be used by Relay 1."""
  artikelEdge(
    """The method to use when ordering `Artikel`."""
    orderBy: [ArtikelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArtikelsEdge
}

"""All input for the `updateArtikel` mutation."""
input UpdateArtikelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Artikel` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Artikel` being updated.
  """
  artikelPatch: ArtikelPatch!
}

"""
Represents an update to a `Artikel`. Fields that are set will be updated.
"""
input ArtikelPatch {
  cdartikel: String
  zoeknaam: String
  omschr: String
  soort: String
  cdartgroep: String
  cdgrbrekening: String
  prijsper: BigFloat
  aantaldec: Int
  prijsincl: BigFloat
  prijsexcl: BigFloat
  verrekenprijs: BigFloat
  voorraad: BigFloat
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  eenheid: String
  btwcode: Int
  cdartkortgrp: String
  cdgoedcode: Int
  gewicht: BigFloat
  aanveenh: BigFloat
  inkvolgnr: Int
  uitloop: String
  aanmaakdatum: Date
  opweb: String
  magbon: String
  pakbon: String
  factuur: String
  cdgrbrekkort: String
  datumltstewijz: Date
  cdgrbrekdekking: String
  projOpslag: BigFloat
  projMutsoort: String
  eannummer: String
  afdrukSamOpOfferte: String
  samVersie: String
  assemblageArtikel: String
  margePerc: BigFloat
  guidItem: String
  sysCreate: String
  sysUpdate: String
  vvbestand: String
  vvgroep: String
  vvvrijvelda: String
  vvvrijveldb: String
  cdlandOorspr: String
}

"""All input for the `updateArtikelByCdartikel` mutation."""
input UpdateArtikelByCdartikelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Artikel` being updated.
  """
  artikelPatch: ArtikelPatch!
  cdartikel: String!
}

"""The output of our update `ArtikelLog` mutation."""
type UpdateArtikelLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ArtikelLog` that was updated by this mutation."""
  artikelLog: ArtikelLog

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ArtikelLog`. May be used by Relay 1."""
  artikelLogEdge(
    """The method to use when ordering `ArtikelLog`."""
    orderBy: [ArtikelLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArtikelLogsEdge
}

"""All input for the `updateArtikelLog` mutation."""
input UpdateArtikelLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ArtikelLog` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ArtikelLog` being updated.
  """
  artikelLogPatch: ArtikelLogPatch!
}

"""
Represents an update to a `ArtikelLog`. Fields that are set will be updated.
"""
input ArtikelLogPatch {
  id: Int
  created: Datetime
  operation: String
  new: JSON
  old: JSON
}

"""All input for the `updateArtikelLogById` mutation."""
input UpdateArtikelLogByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ArtikelLog` being updated.
  """
  artikelLogPatch: ArtikelLogPatch!
  id: Int!
}

"""The output of our update `Artikelomschr` mutation."""
type UpdateArtikelomschrPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Artikelomschr` that was updated by this mutation."""
  artikelomschr: Artikelomschr

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Artikelomschr`. May be used by Relay 1."""
  artikelomschrEdge(
    """The method to use when ordering `Artikelomschr`."""
    orderBy: [ArtikelomschrsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArtikelomschrsEdge
}

"""All input for the `updateArtikelomschr` mutation."""
input UpdateArtikelomschrInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Artikelomschr` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Artikelomschr` being updated.
  """
  artikelomschrPatch: ArtikelomschrPatch!
}

"""
Represents an update to a `Artikelomschr`. Fields that are set will be updated.
"""
input ArtikelomschrPatch {
  cdartikel: String
  cdtaal: String
  omschr: String
  eenheid: String
}

"""All input for the `updateArtikelomschrByCdartikelAndCdtaal` mutation."""
input UpdateArtikelomschrByCdartikelAndCdtaalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Artikelomschr` being updated.
  """
  artikelomschrPatch: ArtikelomschrPatch!
  cdartikel: String!
  cdtaal: String!
}

"""The output of our update `Assembly` mutation."""
type UpdateAssemblyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Assembly` that was updated by this mutation."""
  assembly: Assembly

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `AssemblyType` that is related to this `Assembly`."""
  assemblyTypeByAssemblyTypeId: AssemblyType

  """Reads a single `User` that is related to this `Assembly`."""
  userByOwnerId: User

  """An edge for our `Assembly`. May be used by Relay 1."""
  assemblyEdge(
    """The method to use when ordering `Assembly`."""
    orderBy: [AssembliesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssembliesEdge
}

"""All input for the `updateAssembly` mutation."""
input UpdateAssemblyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Assembly` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Assembly` being updated.
  """
  assemblyPatch: AssemblyPatch!
}

"""
Represents an update to a `Assembly`. Fields that are set will be updated.
"""
input AssemblyPatch {
  id: Int
  code: String
  startSerialNumber: String
  quantity: Int
  assemblyTypeId: Int
  ownerId: Int
  created: Datetime
  modified: Datetime
  completed: Boolean
  mvDoc: String
  checked: Boolean
  po: Boolean
}

"""All input for the `updateAssemblyById` mutation."""
input UpdateAssemblyByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Assembly` being updated.
  """
  assemblyPatch: AssemblyPatch!
  id: Int!
}

"""All input for the `updateAssemblyByCode` mutation."""
input UpdateAssemblyByCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Assembly` being updated.
  """
  assemblyPatch: AssemblyPatch!
  code: String!
}

"""The output of our update `AssemblyPart` mutation."""
type UpdateAssemblyPartPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AssemblyPart` that was updated by this mutation."""
  assemblyPart: AssemblyPart

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `AssemblyPart`."""
  userByOwnerId: User

  """An edge for our `AssemblyPart`. May be used by Relay 1."""
  assemblyPartEdge(
    """The method to use when ordering `AssemblyPart`."""
    orderBy: [AssemblyPartsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssemblyPartsEdge
}

"""All input for the `updateAssemblyPart` mutation."""
input UpdateAssemblyPartInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AssemblyPart` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AssemblyPart` being updated.
  """
  assemblyPartPatch: AssemblyPartPatch!
}

"""
Represents an update to a `AssemblyPart`. Fields that are set will be updated.
"""
input AssemblyPartPatch {
  id: Int
  assemblyId: Int
  cdartikel: String
  used1: String
  used2: String
  short: String
  po: String
  quantity: Float
  ownerId: Int
  created: Datetime
  modified: Datetime
  ext: String
  xxx: String
  usedQuantity: String
  deliveryEstimate: String
  prijsper: BigFloat
  omschr: String
  zoeknaam: String
  bestcode: String
  locatie: String
  verrekenprijs: BigFloat
}

"""All input for the `updateAssemblyPartById` mutation."""
input UpdateAssemblyPartByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AssemblyPart` being updated.
  """
  assemblyPartPatch: AssemblyPartPatch!
  id: Int!
}

"""
All input for the `updateAssemblyPartByAssemblyIdAndCdartikel` mutation.
"""
input UpdateAssemblyPartByAssemblyIdAndCdartikelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AssemblyPart` being updated.
  """
  assemblyPartPatch: AssemblyPartPatch!
  assemblyId: Int!
  cdartikel: String!
}

"""The output of our update `AssemblyTypePart` mutation."""
type UpdateAssemblyTypePartPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AssemblyTypePart` that was updated by this mutation."""
  assemblyTypePart: AssemblyTypePart

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `AssemblyType` that is related to this `AssemblyTypePart`.
  """
  assemblyTypeByAssemblyTypeId: AssemblyType

  """Reads a single `User` that is related to this `AssemblyTypePart`."""
  userByOwnerId: User

  """An edge for our `AssemblyTypePart`. May be used by Relay 1."""
  assemblyTypePartEdge(
    """The method to use when ordering `AssemblyTypePart`."""
    orderBy: [AssemblyTypePartsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssemblyTypePartsEdge
}

"""All input for the `updateAssemblyTypePart` mutation."""
input UpdateAssemblyTypePartInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AssemblyTypePart` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AssemblyTypePart` being updated.
  """
  assemblyTypePartPatch: AssemblyTypePartPatch!
}

"""
Represents an update to a `AssemblyTypePart`. Fields that are set will be updated.
"""
input AssemblyTypePartPatch {
  id: Int
  assemblyTypeId: Int
  cdartikel: String
  quantity: Float
  ownerId: Int
  created: Datetime
  modified: Datetime
  prijsper: BigFloat
  omschr: String
  zoeknaam: String
  bestcode: String
  locatie: String
  verrekenprijs: BigFloat
}

"""All input for the `updateAssemblyTypePartById` mutation."""
input UpdateAssemblyTypePartByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AssemblyTypePart` being updated.
  """
  assemblyTypePartPatch: AssemblyTypePartPatch!
  id: Int!
}

"""
All input for the `updateAssemblyTypePartByAssemblyTypeIdAndCdartikel` mutation.
"""
input UpdateAssemblyTypePartByAssemblyTypeIdAndCdartikelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AssemblyTypePart` being updated.
  """
  assemblyTypePartPatch: AssemblyTypePartPatch!
  assemblyTypeId: Int!
  cdartikel: String!
}

"""The output of our update `AssemblyType` mutation."""
type UpdateAssemblyTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AssemblyType` that was updated by this mutation."""
  assemblyType: AssemblyType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `AssemblyType`."""
  userByOwnerId: User

  """Reads a single `Artikel` that is related to this `AssemblyType`."""
  artikelByCdartikel: Artikel

  """An edge for our `AssemblyType`. May be used by Relay 1."""
  assemblyTypeEdge(
    """The method to use when ordering `AssemblyType`."""
    orderBy: [AssemblyTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssemblyTypesEdge
}

"""All input for the `updateAssemblyType` mutation."""
input UpdateAssemblyTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AssemblyType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AssemblyType` being updated.
  """
  assemblyTypePatch: AssemblyTypePatch!
}

"""
Represents an update to a `AssemblyType`. Fields that are set will be updated.
"""
input AssemblyTypePatch {
  id: Int
  name: String
  cdartikel: String
  ownerId: Int
  created: Datetime
  modified: Datetime
}

"""All input for the `updateAssemblyTypeById` mutation."""
input UpdateAssemblyTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AssemblyType` being updated.
  """
  assemblyTypePatch: AssemblyTypePatch!
  id: Int!
}

"""The output of our update `Building` mutation."""
type UpdateBuildingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Building` that was updated by this mutation."""
  building: Building

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `EndUser` that is related to this `Building`."""
  endUserByEndUserId: EndUser

  """Reads a single `User` that is related to this `Building`."""
  userByOwnerId: User

  """An edge for our `Building`. May be used by Relay 1."""
  buildingEdge(
    """The method to use when ordering `Building`."""
    orderBy: [BuildingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BuildingsEdge
}

"""All input for the `updateBuilding` mutation."""
input UpdateBuildingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Building` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Building` being updated.
  """
  buildingPatch: BuildingPatch!
}

"""
Represents an update to a `Building`. Fields that are set will be updated.
"""
input BuildingPatch {
  id: Int
  endUserId: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""All input for the `updateBuildingById` mutation."""
input UpdateBuildingByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Building` being updated.
  """
  buildingPatch: BuildingPatch!
  id: Int!
}

"""All input for the `updateBuildingByEndUserIdAndName` mutation."""
input UpdateBuildingByEndUserIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Building` being updated.
  """
  buildingPatch: BuildingPatch!
  endUserId: Int!
  name: String!
}

"""The output of our update `CalGas` mutation."""
type UpdateCalGasPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CalGas` that was updated by this mutation."""
  calGas: CalGas

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Gas` that is related to this `CalGas`."""
  gasByGasId: Gas

  """Reads a single `User` that is related to this `CalGas`."""
  userByOwnerId: User

  """An edge for our `CalGas`. May be used by Relay 1."""
  calGasEdge(
    """The method to use when ordering `CalGas`."""
    orderBy: [CalGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CalGasesEdge
}

"""All input for the `updateCalGas` mutation."""
input UpdateCalGasInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CalGas` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CalGas` being updated.
  """
  calGasPatch: CalGasPatch!
}

"""
Represents an update to a `CalGas`. Fields that are set will be updated.
"""
input CalGasPatch {
  id: Int
  gasId: Int
  concentration: Float
  engineeringUnits: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  cdartikel: String
}

"""All input for the `updateCalGasById` mutation."""
input UpdateCalGasByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CalGas` being updated.
  """
  calGasPatch: CalGasPatch!
  id: Int!
}

"""
All input for the `updateCalGasByConcentrationAndEngineeringUnitsAndGasId` mutation.
"""
input UpdateCalGasByConcentrationAndEngineeringUnitsAndGasIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CalGas` being updated.
  """
  calGasPatch: CalGasPatch!
  concentration: Float!
  engineeringUnits: String!
  gasId: Int!
}

"""The output of our update `CatalogGroup` mutation."""
type UpdateCatalogGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CatalogGroup` that was updated by this mutation."""
  catalogGroup: CatalogGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CatalogGroup`."""
  userByOwnerId: User

  """An edge for our `CatalogGroup`. May be used by Relay 1."""
  catalogGroupEdge(
    """The method to use when ordering `CatalogGroup`."""
    orderBy: [CatalogGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CatalogGroupsEdge
}

"""All input for the `updateCatalogGroup` mutation."""
input UpdateCatalogGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CatalogGroup` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CatalogGroup` being updated.
  """
  catalogGroupPatch: CatalogGroupPatch!
}

"""
Represents an update to a `CatalogGroup`. Fields that are set will be updated.
"""
input CatalogGroupPatch {
  id: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  sortCode: String
}

"""All input for the `updateCatalogGroupById` mutation."""
input UpdateCatalogGroupByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CatalogGroup` being updated.
  """
  catalogGroupPatch: CatalogGroupPatch!
  id: Int!
}

"""The output of our update `CatalogItemFile` mutation."""
type UpdateCatalogItemFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CatalogItemFile` that was updated by this mutation."""
  catalogItemFile: CatalogItemFile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CatalogItemFile`."""
  userByOwnerId: User

  """
  Reads a single `CatalogItem` that is related to this `CatalogItemFile`.
  """
  catalogItemByCatalogItemId: CatalogItem

  """An edge for our `CatalogItemFile`. May be used by Relay 1."""
  catalogItemFileEdge(
    """The method to use when ordering `CatalogItemFile`."""
    orderBy: [CatalogItemFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CatalogItemFilesEdge
}

"""All input for the `updateCatalogItemFile` mutation."""
input UpdateCatalogItemFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CatalogItemFile` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CatalogItemFile` being updated.
  """
  catalogItemFilePatch: CatalogItemFilePatch!
}

"""
Represents an update to a `CatalogItemFile`. Fields that are set will be updated.
"""
input CatalogItemFilePatch {
  id: Int
  filename: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  catalogItemId: Int
  type: Int
}

"""All input for the `updateCatalogItemFileById` mutation."""
input UpdateCatalogItemFileByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CatalogItemFile` being updated.
  """
  catalogItemFilePatch: CatalogItemFilePatch!
  id: Int!
}

"""The output of our update `CatalogItemRelation` mutation."""
type UpdateCatalogItemRelationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CatalogItemRelation` that was updated by this mutation."""
  catalogItemRelation: CatalogItemRelation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CatalogItem` that is related to this `CatalogItemRelation`.
  """
  catalogItemByParentCatalogItemId: CatalogItem

  """
  Reads a single `CatalogItem` that is related to this `CatalogItemRelation`.
  """
  catalogItemByChildCatalogItemId: CatalogItem

  """An edge for our `CatalogItemRelation`. May be used by Relay 1."""
  catalogItemRelationEdge(
    """The method to use when ordering `CatalogItemRelation`."""
    orderBy: [CatalogItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CatalogItemRelationsEdge
}

"""All input for the `updateCatalogItemRelation` mutation."""
input UpdateCatalogItemRelationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CatalogItemRelation` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CatalogItemRelation` being updated.
  """
  catalogItemRelationPatch: CatalogItemRelationPatch!
}

"""
Represents an update to a `CatalogItemRelation`. Fields that are set will be updated.
"""
input CatalogItemRelationPatch {
  id: Int
  parentCatalogItemId: Int
  childCatalogItemId: Int
}

"""All input for the `updateCatalogItemRelationById` mutation."""
input UpdateCatalogItemRelationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CatalogItemRelation` being updated.
  """
  catalogItemRelationPatch: CatalogItemRelationPatch!
  id: Int!
}

"""The output of our update `CatalogItem` mutation."""
type UpdateCatalogItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CatalogItem` that was updated by this mutation."""
  catalogItem: CatalogItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CatalogSubGroup` that is related to this `CatalogItem`.
  """
  catalogSubGroupByCatalogSubGroupId: CatalogSubGroup

  """Reads a single `User` that is related to this `CatalogItem`."""
  userByOwnerId: User

  """An edge for our `CatalogItem`. May be used by Relay 1."""
  catalogItemEdge(
    """The method to use when ordering `CatalogItem`."""
    orderBy: [CatalogItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CatalogItemsEdge
}

"""All input for the `updateCatalogItem` mutation."""
input UpdateCatalogItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CatalogItem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CatalogItem` being updated.
  """
  catalogItemPatch: CatalogItemPatch!
}

"""
Represents an update to a `CatalogItem`. Fields that are set will be updated.
"""
input CatalogItemPatch {
  id: Int
  catalogSubGroupId: Int
  cdartikel: String
  remarks: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  defaultItem: Boolean
  sortCode: String
}

"""All input for the `updateCatalogItemById` mutation."""
input UpdateCatalogItemByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CatalogItem` being updated.
  """
  catalogItemPatch: CatalogItemPatch!
  id: Int!
}

"""The output of our update `CatalogSubGroup` mutation."""
type UpdateCatalogSubGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CatalogSubGroup` that was updated by this mutation."""
  catalogSubGroup: CatalogSubGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CatalogSubGroup`."""
  userByOwnerId: User

  """
  Reads a single `CatalogGroup` that is related to this `CatalogSubGroup`.
  """
  catalogGroupByCatalogGroupId: CatalogGroup

  """An edge for our `CatalogSubGroup`. May be used by Relay 1."""
  catalogSubGroupEdge(
    """The method to use when ordering `CatalogSubGroup`."""
    orderBy: [CatalogSubGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CatalogSubGroupsEdge
}

"""All input for the `updateCatalogSubGroup` mutation."""
input UpdateCatalogSubGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CatalogSubGroup` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CatalogSubGroup` being updated.
  """
  catalogSubGroupPatch: CatalogSubGroupPatch!
}

"""
Represents an update to a `CatalogSubGroup`. Fields that are set will be updated.
"""
input CatalogSubGroupPatch {
  id: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  catalogGroupId: Int
  sortCode: String
}

"""All input for the `updateCatalogSubGroupById` mutation."""
input UpdateCatalogSubGroupByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CatalogSubGroup` being updated.
  """
  catalogSubGroupPatch: CatalogSubGroupPatch!
  id: Int!
}

"""The output of our update `ChemicalCompound` mutation."""
type UpdateChemicalCompoundPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChemicalCompound` that was updated by this mutation."""
  chemicalCompound: ChemicalCompound

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `ChemicalCompound`."""
  userByOwnerId: User

  """An edge for our `ChemicalCompound`. May be used by Relay 1."""
  chemicalCompoundEdge(
    """The method to use when ordering `ChemicalCompound`."""
    orderBy: [ChemicalCompoundsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChemicalCompoundsEdge
}

"""All input for the `updateChemicalCompound` mutation."""
input UpdateChemicalCompoundInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChemicalCompound` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ChemicalCompound` being updated.
  """
  chemicalCompoundPatch: ChemicalCompoundPatch!
}

"""
Represents an update to a `ChemicalCompound`. Fields that are set will be updated.
"""
input ChemicalCompoundPatch {
  id: Int
  name: String
  otherName: String
  formula: String
  cas: String
  icsc: String
  molarMass: Float
  density: Float
  url: String
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""All input for the `updateChemicalCompoundById` mutation."""
input UpdateChemicalCompoundByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChemicalCompound` being updated.
  """
  chemicalCompoundPatch: ChemicalCompoundPatch!
  id: Int!
}

"""The output of our update `DetectorLocation` mutation."""
type UpdateDetectorLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DetectorLocation` that was updated by this mutation."""
  detectorLocation: DetectorLocation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Detector` that is related to this `DetectorLocation`."""
  detectorByDetectorId: Detector

  """Reads a single `Area` that is related to this `DetectorLocation`."""
  areaByAreaId: Area

  """Reads a single `User` that is related to this `DetectorLocation`."""
  userByOwnerId: User

  """An edge for our `DetectorLocation`. May be used by Relay 1."""
  detectorLocationEdge(
    """The method to use when ordering `DetectorLocation`."""
    orderBy: [DetectorLocationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorLocationsEdge
}

"""All input for the `updateDetectorLocation` mutation."""
input UpdateDetectorLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DetectorLocation` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `DetectorLocation` being updated.
  """
  detectorLocationPatch: DetectorLocationPatch!
}

"""
Represents an update to a `DetectorLocation`. Fields that are set will be updated.
"""
input DetectorLocationPatch {
  id: Int
  detectorId: Int
  areaId: Int
  created: Datetime
  modified: Datetime
  ownerId: Int
  address: Int
  bus: Int
}

"""All input for the `updateDetectorLocationById` mutation."""
input UpdateDetectorLocationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DetectorLocation` being updated.
  """
  detectorLocationPatch: DetectorLocationPatch!
  id: Int!
}

"""All input for the `updateDetectorLocationByDetectorId` mutation."""
input UpdateDetectorLocationByDetectorIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DetectorLocation` being updated.
  """
  detectorLocationPatch: DetectorLocationPatch!
  detectorId: Int!
}

"""The output of our update `DetectorOrder` mutation."""
type UpdateDetectorOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DetectorOrder` that was updated by this mutation."""
  detectorOrder: DetectorOrder

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Detector` that is related to this `DetectorOrder`."""
  detectorByDetectorId: Detector

  """Reads a single `User` that is related to this `DetectorOrder`."""
  userByOwnerId: User

  """An edge for our `DetectorOrder`. May be used by Relay 1."""
  detectorOrderEdge(
    """The method to use when ordering `DetectorOrder`."""
    orderBy: [DetectorOrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorOrdersEdge
}

"""All input for the `updateDetectorOrder` mutation."""
input UpdateDetectorOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DetectorOrder` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `DetectorOrder` being updated.
  """
  detectorOrderPatch: DetectorOrderPatch!
}

"""
Represents an update to a `DetectorOrder`. Fields that are set will be updated.
"""
input DetectorOrderPatch {
  id: Int
  detectorId: Int
  completed: Boolean
  created: Datetime
  ownerId: Int
  factuuropdracht: String
  modified: Datetime
}

"""All input for the `updateDetectorOrderById` mutation."""
input UpdateDetectorOrderByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DetectorOrder` being updated.
  """
  detectorOrderPatch: DetectorOrderPatch!
  id: Int!
}

"""
All input for the `updateDetectorOrderByFactuuropdrachtAndDetectorId` mutation.
"""
input UpdateDetectorOrderByFactuuropdrachtAndDetectorIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DetectorOrder` being updated.
  """
  detectorOrderPatch: DetectorOrderPatch!
  factuuropdracht: String!
  detectorId: Int!
}

"""The output of our update `DetectorSensorLocation` mutation."""
type UpdateDetectorSensorLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DetectorSensorLocation` that was updated by this mutation."""
  detectorSensorLocation: DetectorSensorLocation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `DetectorSensor` that is related to this `DetectorSensorLocation`.
  """
  detectorSensorByDetectorSensorId: DetectorSensor

  """
  Reads a single `DetectorLocation` that is related to this `DetectorSensorLocation`.
  """
  detectorLocationByDetectorLocationId: DetectorLocation

  """
  Reads a single `User` that is related to this `DetectorSensorLocation`.
  """
  userByOwnerId: User

  """
  Reads a single `SamplePoint` that is related to this `DetectorSensorLocation`.
  """
  samplePointBySamplePointId: SamplePoint

  """
  Reads a single `Application` that is related to this `DetectorSensorLocation`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `License` that is related to this `DetectorSensorLocation`.
  """
  licenseByLicenseId: License

  """An edge for our `DetectorSensorLocation`. May be used by Relay 1."""
  detectorSensorLocationEdge(
    """The method to use when ordering `DetectorSensorLocation`."""
    orderBy: [DetectorSensorLocationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorSensorLocationsEdge
}

"""All input for the `updateDetectorSensorLocation` mutation."""
input UpdateDetectorSensorLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DetectorSensorLocation` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `DetectorSensorLocation` being updated.
  """
  detectorSensorLocationPatch: DetectorSensorLocationPatch!
}

"""
Represents an update to a `DetectorSensorLocation`. Fields that are set will be updated.
"""
input DetectorSensorLocationPatch {
  id: Int
  detectorSensorId: Int
  detectorLocationId: Int
  sensorReplacementIntervalMonths: Int
  sensorMaintenanceIntervalMonths: Int
  filterReplacementIntervalMonths: Int
  pyrolyserReplacementIntervalMonths: Int
  created: Datetime
  modified: Datetime
  ownerId: Int
  samplePointId: Int
  applicationId: Int
  simsChannel: Int
  licenseId: Int
  simsTag: String
  remarks: String
}

"""All input for the `updateDetectorSensorLocationById` mutation."""
input UpdateDetectorSensorLocationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DetectorSensorLocation` being updated.
  """
  detectorSensorLocationPatch: DetectorSensorLocationPatch!
  id: Int!
}

"""
All input for the `updateDetectorSensorLocationByDetectorSensorId` mutation.
"""
input UpdateDetectorSensorLocationByDetectorSensorIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DetectorSensorLocation` being updated.
  """
  detectorSensorLocationPatch: DetectorSensorLocationPatch!
  detectorSensorId: Int!
}

"""
All input for the `updateDetectorSensorLocationByLicenseIdAndSimsChannel` mutation.
"""
input UpdateDetectorSensorLocationByLicenseIdAndSimsChannelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DetectorSensorLocation` being updated.
  """
  detectorSensorLocationPatch: DetectorSensorLocationPatch!
  licenseId: Int!
  simsChannel: Int!
}

"""The output of our update `DetectorSensorType` mutation."""
type UpdateDetectorSensorTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DetectorSensorType` that was updated by this mutation."""
  detectorSensorType: DetectorSensorType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SensorType` that is related to this `DetectorSensorType`.
  """
  sensorTypeBySensorTypeId: SensorType

  """Reads a single `User` that is related to this `DetectorSensorType`."""
  userByOwnerId: User

  """An edge for our `DetectorSensorType`. May be used by Relay 1."""
  detectorSensorTypeEdge(
    """The method to use when ordering `DetectorSensorType`."""
    orderBy: [DetectorSensorTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorSensorTypesEdge
}

"""All input for the `updateDetectorSensorType` mutation."""
input UpdateDetectorSensorTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DetectorSensorType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `DetectorSensorType` being updated.
  """
  detectorSensorTypePatch: DetectorSensorTypePatch!
}

"""
Represents an update to a `DetectorSensorType`. Fields that are set will be updated.
"""
input DetectorSensorTypePatch {
  id: Int
  sensorTypeId: Int
  detectorId: Int
  detectorPosition: Int
  ownerId: Int
  created: Datetime
  modified: Datetime
}

"""All input for the `updateDetectorSensorTypeById` mutation."""
input UpdateDetectorSensorTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DetectorSensorType` being updated.
  """
  detectorSensorTypePatch: DetectorSensorTypePatch!
  id: Int!
}

"""
All input for the `updateDetectorSensorTypeByDetectorIdAndDetectorPosition` mutation.
"""
input UpdateDetectorSensorTypeByDetectorIdAndDetectorPositionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DetectorSensorType` being updated.
  """
  detectorSensorTypePatch: DetectorSensorTypePatch!
  detectorId: Int!
  detectorPosition: Int!
}

"""The output of our update `DetectorSensor` mutation."""
type UpdateDetectorSensorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DetectorSensor` that was updated by this mutation."""
  detectorSensor: DetectorSensor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Detector` that is related to this `DetectorSensor`."""
  detectorByDetectorId: Detector

  """Reads a single `Sensor` that is related to this `DetectorSensor`."""
  sensorBySensorId: Sensor

  """Reads a single `Filter` that is related to this `DetectorSensor`."""
  filterByFilterId: Filter

  """Reads a single `Pyrolyser` that is related to this `DetectorSensor`."""
  pyrolyserByPyrolyserId: Pyrolyser

  """Reads a single `User` that is related to this `DetectorSensor`."""
  userByOwnerId: User

  """An edge for our `DetectorSensor`. May be used by Relay 1."""
  detectorSensorEdge(
    """The method to use when ordering `DetectorSensor`."""
    orderBy: [DetectorSensorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorSensorsEdge
}

"""All input for the `updateDetectorSensor` mutation."""
input UpdateDetectorSensorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DetectorSensor` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `DetectorSensor` being updated.
  """
  detectorSensorPatch: DetectorSensorPatch!
}

"""
Represents an update to a `DetectorSensor`. Fields that are set will be updated.
"""
input DetectorSensorPatch {
  id: Int
  detectorId: Int
  detectorPosition: Int
  sensorId: Int
  filterId: Int
  _filterLabelDate: Date
  pyrolyserId: Int
  _pyrolyserLabelDate: Date
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""All input for the `updateDetectorSensorById` mutation."""
input UpdateDetectorSensorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DetectorSensor` being updated.
  """
  detectorSensorPatch: DetectorSensorPatch!
  id: Int!
}

"""
All input for the `updateDetectorSensorByDetectorIdAndDetectorPosition` mutation.
"""
input UpdateDetectorSensorByDetectorIdAndDetectorPositionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DetectorSensor` being updated.
  """
  detectorSensorPatch: DetectorSensorPatch!
  detectorId: Int!
  detectorPosition: Int!
}

"""All input for the `updateDetectorSensorBySensorId` mutation."""
input UpdateDetectorSensorBySensorIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DetectorSensor` being updated.
  """
  detectorSensorPatch: DetectorSensorPatch!
  sensorId: Int!
}

"""The output of our update `DetectorType` mutation."""
type UpdateDetectorTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DetectorType` that was updated by this mutation."""
  detectorType: DetectorType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `DetectorType`."""
  userByOwnerId: User

  """An edge for our `DetectorType`. May be used by Relay 1."""
  detectorTypeEdge(
    """The method to use when ordering `DetectorType`."""
    orderBy: [DetectorTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorTypesEdge
}

"""All input for the `updateDetectorType` mutation."""
input UpdateDetectorTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DetectorType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `DetectorType` being updated.
  """
  detectorTypePatch: DetectorTypePatch!
}

"""
Represents an update to a `DetectorType`. Fields that are set will be updated.
"""
input DetectorTypePatch {
  id: Int
  obsolete: Boolean
  prefix: String
  code: String
  suffix: String
  sensorCount: Int
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""All input for the `updateDetectorTypeById` mutation."""
input UpdateDetectorTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DetectorType` being updated.
  """
  detectorTypePatch: DetectorTypePatch!
  id: Int!
}

"""
All input for the `updateDetectorTypeByPrefixAndCodeAndSuffix` mutation.
"""
input UpdateDetectorTypeByPrefixAndCodeAndSuffixInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DetectorType` being updated.
  """
  detectorTypePatch: DetectorTypePatch!
  prefix: String!
  code: String!
  suffix: String!
}

"""The output of our update `Detector` mutation."""
type UpdateDetectorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Detector` that was updated by this mutation."""
  detector: Detector

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `DetectorType` that is related to this `Detector`."""
  detectorTypeByDetectorTypeId: DetectorType

  """Reads a single `User` that is related to this `Detector`."""
  userByOwnerId: User

  """An edge for our `Detector`. May be used by Relay 1."""
  detectorEdge(
    """The method to use when ordering `Detector`."""
    orderBy: [DetectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorsEdge
}

"""All input for the `updateDetector` mutation."""
input UpdateDetectorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Detector` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Detector` being updated.
  """
  detectorPatch: DetectorPatch!
}

"""
Represents an update to a `Detector`. Fields that are set will be updated.
"""
input DetectorPatch {
  id: Int
  detectorTypeId: Int
  serialNumber: String
  labelDate: Date
  remarks: String
  created: Datetime
  ownerId: Int
  modified: Datetime
}

"""All input for the `updateDetectorById` mutation."""
input UpdateDetectorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Detector` being updated.
  """
  detectorPatch: DetectorPatch!
  id: Int!
}

"""
All input for the `updateDetectorBySerialNumberAndDetectorTypeId` mutation.
"""
input UpdateDetectorBySerialNumberAndDetectorTypeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Detector` being updated.
  """
  detectorPatch: DetectorPatch!
  serialNumber: String!
  detectorTypeId: Int!
}

"""The output of our update `DpCard` mutation."""
type UpdateDpCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DpCard` that was updated by this mutation."""
  dpCard: DpCard

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `DpCard`."""
  userByOwnerId: User

  """An edge for our `DpCard`. May be used by Relay 1."""
  dpCardEdge(
    """The method to use when ordering `DpCard`."""
    orderBy: [DpCardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DpCardsEdge
}

"""All input for the `updateDpCard` mutation."""
input UpdateDpCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DpCard` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `DpCard` being updated.
  """
  dpCardPatch: DpCardPatch!
}

"""
Represents an update to a `DpCard`. Fields that are set will be updated.
"""
input DpCardPatch {
  id: Int
  serialNumber: String
  ownerId: Int
  created: Datetime
  modified: Datetime
}

"""All input for the `updateDpCardById` mutation."""
input UpdateDpCardByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DpCard` being updated.
  """
  dpCardPatch: DpCardPatch!
  id: Int!
}

"""The output of our update `Electrolyte` mutation."""
type UpdateElectrolytePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Electrolyte` that was updated by this mutation."""
  electrolyte: Electrolyte

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Electrolyte`."""
  userByOwnerId: User

  """An edge for our `Electrolyte`. May be used by Relay 1."""
  electrolyteEdge(
    """The method to use when ordering `Electrolyte`."""
    orderBy: [ElectrolytesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ElectrolytesEdge
}

"""All input for the `updateElectrolyte` mutation."""
input UpdateElectrolyteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Electrolyte` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Electrolyte` being updated.
  """
  electrolytePatch: ElectrolytePatch!
}

"""
Represents an update to a `Electrolyte`. Fields that are set will be updated.
"""
input ElectrolytePatch {
  id: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  replacementIntervalMonths: Int
  cdartikel: String
  volume: Int
}

"""All input for the `updateElectrolyteById` mutation."""
input UpdateElectrolyteByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Electrolyte` being updated.
  """
  electrolytePatch: ElectrolytePatch!
  id: Int!
}

"""All input for the `updateElectrolyteByName` mutation."""
input UpdateElectrolyteByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Electrolyte` being updated.
  """
  electrolytePatch: ElectrolytePatch!
  name: String!
}

"""The output of our update `EndUser` mutation."""
type UpdateEndUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EndUser` that was updated by this mutation."""
  endUser: EndUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `EndUser`."""
  userByOwnerId: User

  """An edge for our `EndUser`. May be used by Relay 1."""
  endUserEdge(
    """The method to use when ordering `EndUser`."""
    orderBy: [EndUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): EndUsersEdge
}

"""All input for the `updateEndUser` mutation."""
input UpdateEndUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EndUser` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EndUser` being updated.
  """
  endUserPatch: EndUserPatch!
}

"""
Represents an update to a `EndUser`. Fields that are set will be updated.
"""
input EndUserPatch {
  id: Int
  name: String
  address1: String
  city: String
  country: String
  created: Datetime
  modified: Datetime
  formerName1: String
  formerName2: String
  address2: String
  zipCode: String
  region: String
  ownerId: Int
  subLocation: String
  location: String
  contactName: String
  contactEmail: String
  contactPhone: String
}

"""All input for the `updateEndUserById` mutation."""
input UpdateEndUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EndUser` being updated.
  """
  endUserPatch: EndUserPatch!
  id: Int!
}

"""
All input for the `updateEndUserByNameAndLocationAndSubLocation` mutation.
"""
input UpdateEndUserByNameAndLocationAndSubLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EndUser` being updated.
  """
  endUserPatch: EndUserPatch!
  name: String!
  location: String!
  subLocation: String!
}

"""The output of our update `FactopdrachtArtikelExclusion` mutation."""
type UpdateFactopdrachtArtikelExclusionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FactopdrachtArtikelExclusion` that was updated by this mutation."""
  factopdrachtArtikelExclusion: FactopdrachtArtikelExclusion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `FactopdrachtArtikelExclusion`. May be used by Relay 1.
  """
  factopdrachtArtikelExclusionEdge(
    """The method to use when ordering `FactopdrachtArtikelExclusion`."""
    orderBy: [FactopdrachtArtikelExclusionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FactopdrachtArtikelExclusionsEdge
}

"""All input for the `updateFactopdrachtArtikelExclusion` mutation."""
input UpdateFactopdrachtArtikelExclusionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FactopdrachtArtikelExclusion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FactopdrachtArtikelExclusion` being updated.
  """
  factopdrachtArtikelExclusionPatch: FactopdrachtArtikelExclusionPatch!
}

"""
Represents an update to a `FactopdrachtArtikelExclusion`. Fields that are set will be updated.
"""
input FactopdrachtArtikelExclusionPatch {
  id: Int
  factuuropdracht: String
  cdartikel: String
}

"""All input for the `updateFactopdrachtArtikelExclusionById` mutation."""
input UpdateFactopdrachtArtikelExclusionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FactopdrachtArtikelExclusion` being updated.
  """
  factopdrachtArtikelExclusionPatch: FactopdrachtArtikelExclusionPatch!
  id: Int!
}

"""
All input for the `updateFactopdrachtArtikelExclusionByFactuuropdrachtAndCdartikel` mutation.
"""
input UpdateFactopdrachtArtikelExclusionByFactuuropdrachtAndCdartikelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FactopdrachtArtikelExclusion` being updated.
  """
  factopdrachtArtikelExclusionPatch: FactopdrachtArtikelExclusionPatch!
  factuuropdracht: String!
  cdartikel: String!
}

"""The output of our update `FactopdrachtregelLineDate` mutation."""
type UpdateFactopdrachtregelLineDatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FactopdrachtregelLineDate` that was updated by this mutation."""
  factopdrachtregelLineDate: FactopdrachtregelLineDate

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FactopdrachtregelLineDate`. May be used by Relay 1."""
  factopdrachtregelLineDateEdge(
    """The method to use when ordering `FactopdrachtregelLineDate`."""
    orderBy: [FactopdrachtregelLineDatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FactopdrachtregelLineDatesEdge
}

"""All input for the `updateFactopdrachtregelLineDate` mutation."""
input UpdateFactopdrachtregelLineDateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FactopdrachtregelLineDate` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FactopdrachtregelLineDate` being updated.
  """
  factopdrachtregelLineDatePatch: FactopdrachtregelLineDatePatch!
}

"""
Represents an update to a `FactopdrachtregelLineDate`. Fields that are set will be updated.
"""
input FactopdrachtregelLineDatePatch {
  id: Int
  aantalbesteld: BigFloat
  schedule: String
  factopdrRglGuid: String
}

"""All input for the `updateFactopdrachtregelLineDateById` mutation."""
input UpdateFactopdrachtregelLineDateByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FactopdrachtregelLineDate` being updated.
  """
  factopdrachtregelLineDatePatch: FactopdrachtregelLineDatePatch!
  id: Int!
}

"""The output of our update `FactopdrachtregelLineRemark` mutation."""
type UpdateFactopdrachtregelLineRemarkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FactopdrachtregelLineRemark` that was updated by this mutation."""
  factopdrachtregelLineRemark: FactopdrachtregelLineRemark

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `FactopdrachtregelLineRemark`.
  """
  userByUserId: User

  """An edge for our `FactopdrachtregelLineRemark`. May be used by Relay 1."""
  factopdrachtregelLineRemarkEdge(
    """The method to use when ordering `FactopdrachtregelLineRemark`."""
    orderBy: [FactopdrachtregelLineRemarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): FactopdrachtregelLineRemarksEdge
}

"""All input for the `updateFactopdrachtregelLineRemark` mutation."""
input UpdateFactopdrachtregelLineRemarkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FactopdrachtregelLineRemark` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FactopdrachtregelLineRemark` being updated.
  """
  factopdrachtregelLineRemarkPatch: FactopdrachtregelLineRemarkPatch!
}

"""
Represents an update to a `FactopdrachtregelLineRemark`. Fields that are set will be updated.
"""
input FactopdrachtregelLineRemarkPatch {
  id: Int
  remark: String
  attention: Boolean
  factopdrachtregelLineId: Int
  userId: Int
}

"""All input for the `updateFactopdrachtregelLineRemarkById` mutation."""
input UpdateFactopdrachtregelLineRemarkByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FactopdrachtregelLineRemark` being updated.
  """
  factopdrachtregelLineRemarkPatch: FactopdrachtregelLineRemarkPatch!
  id: Int!
}

"""The output of our update `FactopdrachtregelLine` mutation."""
type UpdateFactopdrachtregelLinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FactopdrachtregelLine` that was updated by this mutation."""
  factopdrachtregelLine: FactopdrachtregelLine

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FactopdrachtregelLine`. May be used by Relay 1."""
  factopdrachtregelLineEdge(
    """The method to use when ordering `FactopdrachtregelLine`."""
    orderBy: [FactopdrachtregelLinesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FactopdrachtregelLinesEdge
}

"""All input for the `updateFactopdrachtregelLine` mutation."""
input UpdateFactopdrachtregelLineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FactopdrachtregelLine` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FactopdrachtregelLine` being updated.
  """
  factopdrachtregelLinePatch: FactopdrachtregelLinePatch!
}

"""
Represents an update to a `FactopdrachtregelLine`. Fields that are set will be updated.
"""
input FactopdrachtregelLinePatch {
  status: String
  factopdrRglGuid: String
  id: Int
  poNumber: String
  poWeek: String
  targetDateOld: Date
  attention: Boolean
  aantalbesteldDp: BigFloat
  aantalbesteldHold: BigFloat
  targetYearWeek: Int
}

"""
All input for the `updateFactopdrachtregelLineByFactopdrRglGuid` mutation.
"""
input UpdateFactopdrachtregelLineByFactopdrRglGuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FactopdrachtregelLine` being updated.
  """
  factopdrachtregelLinePatch: FactopdrachtregelLinePatch!
  factopdrRglGuid: String!
}

"""All input for the `updateFactopdrachtregelLineById` mutation."""
input UpdateFactopdrachtregelLineByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FactopdrachtregelLine` being updated.
  """
  factopdrachtregelLinePatch: FactopdrachtregelLinePatch!
  id: Int!
}

"""The output of our update `Factuur` mutation."""
type UpdateFactuurPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Factuur` that was updated by this mutation."""
  factuur: Factuur

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Factuur`."""
  userByOwnerId: User

  """Reads a single `User` that is related to this `Factuur`."""
  userByCheckedId: User

  """Reads a single `User` that is related to this `Factuur`."""
  userBySentId: User

  """An edge for our `Factuur`. May be used by Relay 1."""
  factuurEdge(
    """The method to use when ordering `Factuur`."""
    orderBy: [FactuursOrderBy!] = [PRIMARY_KEY_ASC]
  ): FactuursEdge
}

"""All input for the `updateFactuur` mutation."""
input UpdateFactuurInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Factuur` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Factuur` being updated.
  """
  factuurPatch: FactuurPatch!
}

"""
Represents an update to a `Factuur`. Fields that are set will be updated.
"""
input FactuurPatch {
  id: Int
  factuuropdracht: String
  filename: String
  ownerId: Int
  created: Datetime
  modified: Datetime
  checked: Boolean
  sent: Boolean
  checkedId: Int
  sentId: Int
}

"""All input for the `updateFactuurById` mutation."""
input UpdateFactuurByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Factuur` being updated.
  """
  factuurPatch: FactuurPatch!
  id: Int!
}

"""All input for the `updateFactuurByFactuuropdracht` mutation."""
input UpdateFactuurByFactuuropdrachtInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Factuur` being updated.
  """
  factuurPatch: FactuurPatch!
  factuuropdracht: String!
}

"""The output of our update `Filter` mutation."""
type UpdateFilterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Filter` that was updated by this mutation."""
  filter: Filter

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Filter`."""
  userByOwnerId: User

  """An edge for our `Filter`. May be used by Relay 1."""
  filterEdge(
    """The method to use when ordering `Filter`."""
    orderBy: [FiltersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FiltersEdge
}

"""All input for the `updateFilter` mutation."""
input UpdateFilterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Filter` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Filter` being updated.
  """
  filterPatch: FilterPatch!
}

"""
Represents an update to a `Filter`. Fields that are set will be updated.
"""
input FilterPatch {
  id: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  replacementIntervalMonths: Int
  cdartikel: String
  consumable: Boolean
}

"""All input for the `updateFilterById` mutation."""
input UpdateFilterByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Filter` being updated.
  """
  filterPatch: FilterPatch!
  id: Int!
}

"""All input for the `updateFilterByName` mutation."""
input UpdateFilterByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Filter` being updated.
  """
  filterPatch: FilterPatch!
  name: String!
}

"""The output of our update `Floor` mutation."""
type UpdateFloorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Floor` that was updated by this mutation."""
  floor: Floor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Building` that is related to this `Floor`."""
  buildingByBuildingId: Building

  """Reads a single `User` that is related to this `Floor`."""
  userByOwnerId: User

  """An edge for our `Floor`. May be used by Relay 1."""
  floorEdge(
    """The method to use when ordering `Floor`."""
    orderBy: [FloorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FloorsEdge
}

"""All input for the `updateFloor` mutation."""
input UpdateFloorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Floor` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Floor` being updated.
  """
  floorPatch: FloorPatch!
}

"""
Represents an update to a `Floor`. Fields that are set will be updated.
"""
input FloorPatch {
  id: Int
  buildingId: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""All input for the `updateFloorById` mutation."""
input UpdateFloorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Floor` being updated.
  """
  floorPatch: FloorPatch!
  id: Int!
}

"""All input for the `updateFloorByBuildingIdAndName` mutation."""
input UpdateFloorByBuildingIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Floor` being updated.
  """
  floorPatch: FloorPatch!
  buildingId: Int!
  name: String!
}

"""The output of our update `Gas` mutation."""
type UpdateGasPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Gas` that was updated by this mutation."""
  gas: Gas

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Gas`."""
  userByOwnerId: User

  """Reads a single `ChemicalCompound` that is related to this `Gas`."""
  chemicalCompoundByChemicalCompoundId: ChemicalCompound

  """An edge for our `Gas`. May be used by Relay 1."""
  gasEdge(
    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasesEdge
}

"""All input for the `updateGas` mutation."""
input UpdateGasInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Gas` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Gas` being updated.
  """
  gasPatch: GasPatch!
}

"""Represents an update to a `Gas`. Fields that are set will be updated."""
input GasPatch {
  id: Int
  name: String
  formula: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  chemicalCompoundId: Int
}

"""All input for the `updateGasById` mutation."""
input UpdateGasByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Gas` being updated.
  """
  gasPatch: GasPatch!
  id: Int!
}

"""All input for the `updateGasByName` mutation."""
input UpdateGasByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Gas` being updated.
  """
  gasPatch: GasPatch!
  name: String!
}

"""The output of our update `GroupPermission` mutation."""
type UpdateGroupPermissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GroupPermission` that was updated by this mutation."""
  groupPermission: GroupPermission

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `GroupPermission`."""
  groupByGroupId: Group

  """An edge for our `GroupPermission`. May be used by Relay 1."""
  groupPermissionEdge(
    """The method to use when ordering `GroupPermission`."""
    orderBy: [GroupPermissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupPermissionsEdge
}

"""All input for the `updateGroupPermission` mutation."""
input UpdateGroupPermissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GroupPermission` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GroupPermission` being updated.
  """
  groupPermissionPatch: GroupPermissionPatch!
}

"""
Represents an update to a `GroupPermission`. Fields that are set will be updated.
"""
input GroupPermissionPatch {
  id: Int
  writeIds: [Int]
  readIds: [Int]
  groupId: Int
}

"""All input for the `updateGroupPermissionById` mutation."""
input UpdateGroupPermissionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GroupPermission` being updated.
  """
  groupPermissionPatch: GroupPermissionPatch!
  id: Int!
}

"""All input for the `updateGroupPermissionByGroupId` mutation."""
input UpdateGroupPermissionByGroupIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GroupPermission` being updated.
  """
  groupPermissionPatch: GroupPermissionPatch!
  groupId: Int!
}

"""The output of our update `GroupRight` mutation."""
type UpdateGroupRightPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GroupRight` that was updated by this mutation."""
  groupRight: GroupRight

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `GroupRight`."""
  groupByGroupId: Group

  """An edge for our `GroupRight`. May be used by Relay 1."""
  groupRightEdge(
    """The method to use when ordering `GroupRight`."""
    orderBy: [GroupRightsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupRightsEdge
}

"""All input for the `updateGroupRight` mutation."""
input UpdateGroupRightInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GroupRight` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GroupRight` being updated.
  """
  groupRightPatch: GroupRightPatch!
}

"""
Represents an update to a `GroupRight`. Fields that are set will be updated.
"""
input GroupRightPatch {
  id: Int
  groupId: Int
  path: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  authorized: Boolean
}

"""All input for the `updateGroupRightById` mutation."""
input UpdateGroupRightByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GroupRight` being updated.
  """
  groupRightPatch: GroupRightPatch!
  id: Int!
}

"""All input for the `updateGroupRightByGroupIdAndPath` mutation."""
input UpdateGroupRightByGroupIdAndPathInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GroupRight` being updated.
  """
  groupRightPatch: GroupRightPatch!
  groupId: Int!
  path: String!
}

"""The output of our update `Group` mutation."""
type UpdateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was updated by this mutation."""
  group: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Group`."""
  userByOwnerId: User

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsEdge
}

"""All input for the `updateGroup` mutation."""
input UpdateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Group` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  groupPatch: GroupPatch!
}

"""
Represents an update to a `Group`. Fields that are set will be updated.
"""
input GroupPatch {
  id: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""All input for the `updateGroupById` mutation."""
input UpdateGroupByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  groupPatch: GroupPatch!
  id: Int!
}

"""The output of our update `Hardware` mutation."""
type UpdateHardwarePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Hardware` that was updated by this mutation."""
  hardware: Hardware

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Hardware`."""
  userByUserId: User

  """Reads a single `User` that is related to this `Hardware`."""
  userByOwnerId: User

  """An edge for our `Hardware`. May be used by Relay 1."""
  hardwareEdge(
    """The method to use when ordering `Hardware`."""
    orderBy: [HardwaresOrderBy!] = [PRIMARY_KEY_ASC]
  ): HardwaresEdge
}

"""All input for the `updateHardware` mutation."""
input UpdateHardwareInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Hardware` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Hardware` being updated.
  """
  hardwarePatch: HardwarePatch!
}

"""
Represents an update to a `Hardware`. Fields that are set will be updated.
"""
input HardwarePatch {
  id: Int
  type: String
  serialNumber: String
  purchaseDate: Date
  remarks: String
  userId: Int
  ownerId: Int
  created: Datetime
  modified: Datetime
  specs: String
  model: String
  macAddress: String
  ipAddress: String
  operatingSystem: String
  ordernummer: String
  prijs: BigFloat
}

"""All input for the `updateHardwareById` mutation."""
input UpdateHardwareByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Hardware` being updated.
  """
  hardwarePatch: HardwarePatch!
  id: Int!
}

"""The output of our update `IncomingDocument` mutation."""
type UpdateIncomingDocumentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `IncomingDocument` that was updated by this mutation."""
  incomingDocument: IncomingDocument

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `IncomingDocument`."""
  userByOwnerId: User

  """Reads a single `User` that is related to this `IncomingDocument`."""
  userByUserId: User

  """An edge for our `IncomingDocument`. May be used by Relay 1."""
  incomingDocumentEdge(
    """The method to use when ordering `IncomingDocument`."""
    orderBy: [IncomingDocumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): IncomingDocumentsEdge
}

"""All input for the `updateIncomingDocument` mutation."""
input UpdateIncomingDocumentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `IncomingDocument` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `IncomingDocument` being updated.
  """
  incomingDocumentPatch: IncomingDocumentPatch!
}

"""
Represents an update to a `IncomingDocument`. Fields that are set will be updated.
"""
input IncomingDocumentPatch {
  id: Int
  description: String
  amount: Float
  isovaluta: String
  type: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  userId: Int
  date: Date
}

"""All input for the `updateIncomingDocumentById` mutation."""
input UpdateIncomingDocumentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `IncomingDocument` being updated.
  """
  incomingDocumentPatch: IncomingDocumentPatch!
  id: Int!
}

"""The output of our update `Inkoopgegeven` mutation."""
type UpdateInkoopgegevenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Inkoopgegeven` that was updated by this mutation."""
  inkoopgegeven: Inkoopgegeven

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Inkoopgegeven`. May be used by Relay 1."""
  inkoopgegevenEdge(
    """The method to use when ordering `Inkoopgegeven`."""
    orderBy: [InkoopgegevensOrderBy!] = [PRIMARY_KEY_ASC]
  ): InkoopgegevensEdge
}

"""All input for the `updateInkoopgegeven` mutation."""
input UpdateInkoopgegevenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Inkoopgegeven` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Inkoopgegeven` being updated.
  """
  inkoopgegevenPatch: InkoopgegevenPatch!
}

"""
Represents an update to a `Inkoopgegeven`. Fields that are set will be updated.
"""
input InkoopgegevenPatch {
  cdartikel: String
  inkvolgnr: Int
  cdcrediteur: String
  voorkeur: String
  bestcode: String
  cdvaluta: String
  inkoopprijs: BigFloat
  kortingperc: BigFloat
  besthoeveelheid: BigFloat
  opslpercinkoop: BigFloat
}

"""
All input for the `updateInkoopgegevenByCdartikelAndInkvolgnr` mutation.
"""
input UpdateInkoopgegevenByCdartikelAndInkvolgnrInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Inkoopgegeven` being updated.
  """
  inkoopgegevenPatch: InkoopgegevenPatch!
  cdartikel: String!
  inkvolgnr: Int!
}

"""The output of our update `InkoopgegevensLog` mutation."""
type UpdateInkoopgegevensLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InkoopgegevensLog` that was updated by this mutation."""
  inkoopgegevensLog: InkoopgegevensLog

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `InkoopgegevensLog`. May be used by Relay 1."""
  inkoopgegevensLogEdge(
    """The method to use when ordering `InkoopgegevensLog`."""
    orderBy: [InkoopgegevensLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InkoopgegevensLogsEdge
}

"""All input for the `updateInkoopgegevensLog` mutation."""
input UpdateInkoopgegevensLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `InkoopgegevensLog` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `InkoopgegevensLog` being updated.
  """
  inkoopgegevensLogPatch: InkoopgegevensLogPatch!
}

"""
Represents an update to a `InkoopgegevensLog`. Fields that are set will be updated.
"""
input InkoopgegevensLogPatch {
  id: Int
  created: Datetime
  operation: String
  new: JSON
  old: JSON
}

"""All input for the `updateInkoopgegevensLogById` mutation."""
input UpdateInkoopgegevensLogByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `InkoopgegevensLog` being updated.
  """
  inkoopgegevensLogPatch: InkoopgegevensLogPatch!
  id: Int!
}

"""The output of our update `InkooporderregelLine` mutation."""
type UpdateInkooporderregelLinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InkooporderregelLine` that was updated by this mutation."""
  inkooporderregelLine: InkooporderregelLine

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `InkooporderregelLine`. May be used by Relay 1."""
  inkooporderregelLineEdge(
    """The method to use when ordering `InkooporderregelLine`."""
    orderBy: [InkooporderregelLinesOrderBy!] = [PRIMARY_KEY_ASC]
  ): InkooporderregelLinesEdge
}

"""All input for the `updateInkooporderregelLine` mutation."""
input UpdateInkooporderregelLineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `InkooporderregelLine` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `InkooporderregelLine` being updated.
  """
  inkooporderregelLinePatch: InkooporderregelLinePatch!
}

"""
Represents an update to a `InkooporderregelLine`. Fields that are set will be updated.
"""
input InkooporderregelLinePatch {
  _cdartikel: String
  _aantalbesteld: BigFloat
  _aantalopenstaand: BigFloat
  deliveryDate: Date
  remarks: String
  deliveryDateConfirmed: Boolean
  status: String
  inkopdrRglGuid: String
  factopdrRglGuid: String
  id: Int
  shipmentDate: Date
}

"""
All input for the `updateInkooporderregelLineByInkopdrRglGuid` mutation.
"""
input UpdateInkooporderregelLineByInkopdrRglGuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `InkooporderregelLine` being updated.
  """
  inkooporderregelLinePatch: InkooporderregelLinePatch!
  inkopdrRglGuid: String!
}

"""All input for the `updateInkooporderregelLineById` mutation."""
input UpdateInkooporderregelLineByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `InkooporderregelLine` being updated.
  """
  inkooporderregelLinePatch: InkooporderregelLinePatch!
  id: Int!
}

"""The output of our update `Item` mutation."""
type UpdateItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Item` that was updated by this mutation."""
  item: Item

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Item`."""
  userByOwnerId: User

  """Reads a single `EndUser` that is related to this `Item`."""
  endUserByEndUserId: EndUser

  """An edge for our `Item`. May be used by Relay 1."""
  itemEdge(
    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsEdge
}

"""All input for the `updateItem` mutation."""
input UpdateItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Item` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Item` being updated.
  """
  itemPatch: ItemPatch!
}

"""Represents an update to a `Item`. Fields that are set will be updated."""
input ItemPatch {
  id: Int
  cdartikel: String
  serialNumber: String
  labelDate: Date
  remarks: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  endUserId: Int
}

"""All input for the `updateItemById` mutation."""
input UpdateItemByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Item` being updated.
  """
  itemPatch: ItemPatch!
  id: Int!
}

"""All input for the `updateItemByCdartikelAndSerialNumber` mutation."""
input UpdateItemByCdartikelAndSerialNumberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Item` being updated.
  """
  itemPatch: ItemPatch!
  cdartikel: String!
  serialNumber: String!
}

"""The output of our update `Job` mutation."""
type UpdateJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Job` that was updated by this mutation."""
  job: Job

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `EndUser` that is related to this `Job`."""
  endUserByEndUserId: EndUser

  """Reads a single `User` that is related to this `Job`."""
  userByOwnerId: User

  """An edge for our `Job`. May be used by Relay 1."""
  jobEdge(
    """The method to use when ordering `Job`."""
    orderBy: [JobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JobsEdge
}

"""All input for the `updateJob` mutation."""
input UpdateJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Job` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Job` being updated.
  """
  jobPatch: JobPatch!
}

"""Represents an update to a `Job`. Fields that are set will be updated."""
input JobPatch {
  id: Int
  factuuropdracht: String
  endUserId: Int
  startDate: Date
  endDate: Date
  confirmed: Boolean
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""All input for the `updateJobById` mutation."""
input UpdateJobByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Job` being updated.
  """
  jobPatch: JobPatch!
  id: Int!
}

"""The output of our update `JunctionBox` mutation."""
type UpdateJunctionBoxPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `JunctionBox` that was updated by this mutation."""
  junctionBox: JunctionBox

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `JunctionBox`."""
  userByOwnerId: User

  """An edge for our `JunctionBox`. May be used by Relay 1."""
  junctionBoxEdge(
    """The method to use when ordering `JunctionBox`."""
    orderBy: [JunctionBoxesOrderBy!] = [PRIMARY_KEY_ASC]
  ): JunctionBoxesEdge
}

"""All input for the `updateJunctionBox` mutation."""
input UpdateJunctionBoxInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `JunctionBox` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `JunctionBox` being updated.
  """
  junctionBoxPatch: JunctionBoxPatch!
}

"""
Represents an update to a `JunctionBox`. Fields that are set will be updated.
"""
input JunctionBoxPatch {
  id: Int
  serialNumber: String
  ownerId: Int
  created: Datetime
  modified: Datetime
}

"""All input for the `updateJunctionBoxById` mutation."""
input UpdateJunctionBoxByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `JunctionBox` being updated.
  """
  junctionBoxPatch: JunctionBoxPatch!
  id: Int!
}

"""The output of our update `Lead` mutation."""
type UpdateLeadPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Lead` that was updated by this mutation."""
  lead: Lead

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Lead`."""
  userByOwnerId: User

  """An edge for our `Lead`. May be used by Relay 1."""
  leadEdge(
    """The method to use when ordering `Lead`."""
    orderBy: [LeadsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LeadsEdge
}

"""All input for the `updateLead` mutation."""
input UpdateLeadInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Lead` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Lead` being updated.
  """
  leadPatch: LeadPatch!
}

"""Represents an update to a `Lead`. Fields that are set will be updated."""
input LeadPatch {
  id: Int
  country: String
  dateOfLastVisit: Date
  dateOfLastRequest: Date
  company: String
  lastName: String
  firstName: String
  telephone: String
  contactEmail: String
  webSite: String
  businessSector: String
  typeOfCompany: String
  address: String
  zipCode: String
  city: String
  requests: String
  clickThroughsToYourSite: String
  viewedElements: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  noOfEmployees: String
}

"""All input for the `updateLeadById` mutation."""
input UpdateLeadByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Lead` being updated.
  """
  leadPatch: LeadPatch!
  id: Int!
}

"""The output of our update `LicenseCustomer` mutation."""
type UpdateLicenseCustomerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LicenseCustomer` that was updated by this mutation."""
  licenseCustomer: LicenseCustomer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `LicenseCustomer`."""
  userByOwnerId: User

  """An edge for our `LicenseCustomer`. May be used by Relay 1."""
  licenseCustomerEdge(
    """The method to use when ordering `LicenseCustomer`."""
    orderBy: [LicenseCustomersOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicenseCustomersEdge
}

"""All input for the `updateLicenseCustomer` mutation."""
input UpdateLicenseCustomerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LicenseCustomer` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LicenseCustomer` being updated.
  """
  licenseCustomerPatch: LicenseCustomerPatch!
}

"""
Represents an update to a `LicenseCustomer`. Fields that are set will be updated.
"""
input LicenseCustomerPatch {
  id: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""All input for the `updateLicenseCustomerById` mutation."""
input UpdateLicenseCustomerByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LicenseCustomer` being updated.
  """
  licenseCustomerPatch: LicenseCustomerPatch!
  id: Int!
}

"""The output of our update `LicenseModule` mutation."""
type UpdateLicenseModulePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LicenseModule` that was updated by this mutation."""
  licenseModule: LicenseModule

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `LicenseModule`."""
  userByOwnerId: User

  """An edge for our `LicenseModule`. May be used by Relay 1."""
  licenseModuleEdge(
    """The method to use when ordering `LicenseModule`."""
    orderBy: [LicenseModulesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicenseModulesEdge
}

"""All input for the `updateLicenseModule` mutation."""
input UpdateLicenseModuleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LicenseModule` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LicenseModule` being updated.
  """
  licenseModulePatch: LicenseModulePatch!
}

"""
Represents an update to a `LicenseModule`. Fields that are set will be updated.
"""
input LicenseModulePatch {
  id: Int
  name: String
  latestVersion: String
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""All input for the `updateLicenseModuleById` mutation."""
input UpdateLicenseModuleByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LicenseModule` being updated.
  """
  licenseModulePatch: LicenseModulePatch!
  id: Int!
}

"""The output of our update `LicenseOrder` mutation."""
type UpdateLicenseOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LicenseOrder` that was updated by this mutation."""
  licenseOrder: LicenseOrder

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `License` that is related to this `LicenseOrder`."""
  licenseByLicenseId: License

  """
  Reads a single `LicenseRegistration` that is related to this `LicenseOrder`.
  """
  licenseRegistrationByLicenseRegistrationId: LicenseRegistration

  """Reads a single `User` that is related to this `LicenseOrder`."""
  userByOwnerId: User

  """An edge for our `LicenseOrder`. May be used by Relay 1."""
  licenseOrderEdge(
    """The method to use when ordering `LicenseOrder`."""
    orderBy: [LicenseOrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicenseOrdersEdge
}

"""All input for the `updateLicenseOrder` mutation."""
input UpdateLicenseOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LicenseOrder` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LicenseOrder` being updated.
  """
  licenseOrderPatch: LicenseOrderPatch!
}

"""
Represents an update to a `LicenseOrder`. Fields that are set will be updated.
"""
input LicenseOrderPatch {
  id: Int
  licenseId: Int
  licenseRegistrationId: Int
  factuuropdracht: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  cdartikel: String
  offertenummer: String
  remarks: String
  cdSerialNumber: Int
}

"""All input for the `updateLicenseOrderById` mutation."""
input UpdateLicenseOrderByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LicenseOrder` being updated.
  """
  licenseOrderPatch: LicenseOrderPatch!
  id: Int!
}

"""
All input for the `updateLicenseOrderByLicenseIdAndFactuuropdracht` mutation.
"""
input UpdateLicenseOrderByLicenseIdAndFactuuropdrachtInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LicenseOrder` being updated.
  """
  licenseOrderPatch: LicenseOrderPatch!
  licenseId: Int!
  factuuropdracht: String!
}

"""
All input for the `updateLicenseOrderByLicenseRegistrationIdAndFactuuropdracht` mutation.
"""
input UpdateLicenseOrderByLicenseRegistrationIdAndFactuuropdrachtInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LicenseOrder` being updated.
  """
  licenseOrderPatch: LicenseOrderPatch!
  licenseRegistrationId: Int!
  factuuropdracht: String!
}

"""The output of our update `LicenseRegistration` mutation."""
type UpdateLicenseRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LicenseRegistration` that was updated by this mutation."""
  licenseRegistration: LicenseRegistration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `License` that is related to this `LicenseRegistration`.
  """
  licenseByLicenseId: License

  """Reads a single `User` that is related to this `LicenseRegistration`."""
  userByOwnerId: User

  """An edge for our `LicenseRegistration`. May be used by Relay 1."""
  licenseRegistrationEdge(
    """The method to use when ordering `LicenseRegistration`."""
    orderBy: [LicenseRegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicenseRegistrationsEdge
}

"""All input for the `updateLicenseRegistration` mutation."""
input UpdateLicenseRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LicenseRegistration` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LicenseRegistration` being updated.
  """
  licenseRegistrationPatch: LicenseRegistrationPatch!
}

"""
Represents an update to a `LicenseRegistration`. Fields that are set will be updated.
"""
input LicenseRegistrationPatch {
  id: Int
  hwType: Int
  registrationCode: String
  activationCode: String
  licenseId: Int
  expirationDate: Date
  hwCode: String
  computerName: String
  ipAddress: String
  created: Datetime
  ownerId: Int
  remarks: String
}

"""All input for the `updateLicenseRegistrationById` mutation."""
input UpdateLicenseRegistrationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LicenseRegistration` being updated.
  """
  licenseRegistrationPatch: LicenseRegistrationPatch!
  id: Int!
}

"""The output of our update `License` mutation."""
type UpdateLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `License` that was updated by this mutation."""
  license: License

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LicenseModule` that is related to this `License`."""
  licenseModuleByLicenseModuleId: LicenseModule

  """Reads a single `LicenseCustomer` that is related to this `License`."""
  licenseCustomerByLicenseCustomerId: LicenseCustomer

  """Reads a single `User` that is related to this `License`."""
  userByOwnerId: User

  """Reads a single `EndUser` that is related to this `License`."""
  endUserByEndUserId: EndUser

  """An edge for our `License`. May be used by Relay 1."""
  licenseEdge(
    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicensesEdge
}

"""All input for the `updateLicense` mutation."""
input UpdateLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `License` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `License` being updated.
  """
  licensePatch: LicensePatch!
}

"""
Represents an update to a `License`. Fields that are set will be updated.
"""
input LicensePatch {
  id: Int
  licenseModuleId: Int
  moduleData: String
  licenseCode: String
  remarks: String
  licenseCustomerId: Int
  licenseId: Int
  durationMonths: Int
  durationDays: Int
  created: Datetime
  activate: Boolean
  ownerId: Int
  endUserId: Int
}

"""All input for the `updateLicenseById` mutation."""
input UpdateLicenseByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `License` being updated.
  """
  licensePatch: LicensePatch!
  id: Int!
}

"""The output of our update `MaintenanceVisitLine` mutation."""
type UpdateMaintenanceVisitLinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MaintenanceVisitLine` that was updated by this mutation."""
  maintenanceVisitLine: MaintenanceVisitLine

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `MaintenanceVisit` that is related to this `MaintenanceVisitLine`.
  """
  maintenanceVisitByMaintenanceVisitId: MaintenanceVisit

  """
  Reads a single `DetectorSensorLocation` that is related to this `MaintenanceVisitLine`.
  """
  detectorSensorLocationByDetectorSensorLocationId: DetectorSensorLocation

  """
  Reads a single `DetectorSensor` that is related to this `MaintenanceVisitLine`.
  """
  detectorSensorByDetectorSensorId: DetectorSensor

  """
  Reads a single `Sensor` that is related to this `MaintenanceVisitLine`.
  """
  sensorBySensorId: Sensor

  """
  Reads a single `Sensor` that is related to this `MaintenanceVisitLine`.
  """
  sensorByOriginalSensorId: Sensor

  """
  Reads a single `CalGas` that is related to this `MaintenanceVisitLine`.
  """
  calGasByCalGasId: CalGas

  """
  Reads a single `Filter` that is related to this `MaintenanceVisitLine`.
  """
  filterByFilterId: Filter

  """
  Reads a single `Pyrolyser` that is related to this `MaintenanceVisitLine`.
  """
  pyrolyserByPyrolyserId: Pyrolyser

  """An edge for our `MaintenanceVisitLine`. May be used by Relay 1."""
  maintenanceVisitLineEdge(
    """The method to use when ordering `MaintenanceVisitLine`."""
    orderBy: [MaintenanceVisitLinesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MaintenanceVisitLinesEdge
}

"""All input for the `updateMaintenanceVisitLine` mutation."""
input UpdateMaintenanceVisitLineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MaintenanceVisitLine` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MaintenanceVisitLine` being updated.
  """
  maintenanceVisitLinePatch: MaintenanceVisitLinePatch!
}

"""
Represents an update to a `MaintenanceVisitLine`. Fields that are set will be updated.
"""
input MaintenanceVisitLinePatch {
  id: Int
  maintenanceVisitId: Int
  detectorSensorLocationId: Int
  dateOld: Date
  remarkLine: Int
  day: Int
  success: Boolean
  detectorSensorId: Int
  sensorId: Int
  originalSensorId: Int
  concentration: Float
  calGasId: Int
  preResponse: Float
  response: Float
  spanSuccess: Boolean
  zeroSuccess: Boolean
  filterId: Int
  pyrolyserId: Int
  sensorMaintenanceDueDate: Date
  sensorInstallDueDate: Date
  filterInstallDueDate: Date
  pyrolyserInstallDueDate: Date
}

"""All input for the `updateMaintenanceVisitLineById` mutation."""
input UpdateMaintenanceVisitLineByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MaintenanceVisitLine` being updated.
  """
  maintenanceVisitLinePatch: MaintenanceVisitLinePatch!
  id: Int!
}

"""
All input for the `updateMaintenanceVisitLineByMaintenanceVisitIdAndDetectorSensorLocationId` mutation.
"""
input UpdateMaintenanceVisitLineByMaintenanceVisitIdAndDetectorSensorLocationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MaintenanceVisitLine` being updated.
  """
  maintenanceVisitLinePatch: MaintenanceVisitLinePatch!
  maintenanceVisitId: Int!
  detectorSensorLocationId: Int!
}

"""The output of our update `MaintenanceVisitRemark` mutation."""
type UpdateMaintenanceVisitRemarkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MaintenanceVisitRemark` that was updated by this mutation."""
  maintenanceVisitRemark: MaintenanceVisitRemark

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `MaintenanceVisit` that is related to this `MaintenanceVisitRemark`.
  """
  maintenanceVisitByMaintenanceVisitId: MaintenanceVisit

  """An edge for our `MaintenanceVisitRemark`. May be used by Relay 1."""
  maintenanceVisitRemarkEdge(
    """The method to use when ordering `MaintenanceVisitRemark`."""
    orderBy: [MaintenanceVisitRemarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): MaintenanceVisitRemarksEdge
}

"""All input for the `updateMaintenanceVisitRemark` mutation."""
input UpdateMaintenanceVisitRemarkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MaintenanceVisitRemark` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MaintenanceVisitRemark` being updated.
  """
  maintenanceVisitRemarkPatch: MaintenanceVisitRemarkPatch!
}

"""
Represents an update to a `MaintenanceVisitRemark`. Fields that are set will be updated.
"""
input MaintenanceVisitRemarkPatch {
  id: Int
  maintenanceVisitId: Int
  line: Int
  remarks: String
  cdartikel: String
  aantal: BigFloat
  cdmagazijn: String
  followUp: String
}

"""All input for the `updateMaintenanceVisitRemarkById` mutation."""
input UpdateMaintenanceVisitRemarkByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MaintenanceVisitRemark` being updated.
  """
  maintenanceVisitRemarkPatch: MaintenanceVisitRemarkPatch!
  id: Int!
}

"""
All input for the `updateMaintenanceVisitRemarkByMaintenanceVisitIdAndLine` mutation.
"""
input UpdateMaintenanceVisitRemarkByMaintenanceVisitIdAndLineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MaintenanceVisitRemark` being updated.
  """
  maintenanceVisitRemarkPatch: MaintenanceVisitRemarkPatch!
  maintenanceVisitId: Int!
  line: Int!
}

"""The output of our update `MaintenanceVisit` mutation."""
type UpdateMaintenanceVisitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MaintenanceVisit` that was updated by this mutation."""
  maintenanceVisit: MaintenanceVisit

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `EndUser` that is related to this `MaintenanceVisit`."""
  endUserByEndUserId: EndUser

  """Reads a single `User` that is related to this `MaintenanceVisit`."""
  userByUserId: User

  """Reads a single `User` that is related to this `MaintenanceVisit`."""
  userByOwnerId: User

  """An edge for our `MaintenanceVisit`. May be used by Relay 1."""
  maintenanceVisitEdge(
    """The method to use when ordering `MaintenanceVisit`."""
    orderBy: [MaintenanceVisitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MaintenanceVisitsEdge
}

"""All input for the `updateMaintenanceVisit` mutation."""
input UpdateMaintenanceVisitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MaintenanceVisit` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MaintenanceVisit` being updated.
  """
  maintenanceVisitPatch: MaintenanceVisitPatch!
}

"""
Represents an update to a `MaintenanceVisit`. Fields that are set will be updated.
"""
input MaintenanceVisitPatch {
  id: Int
  endUserId: Int
  userId: Int
  factuuropdracht: String
  date: Date
  duration: Int
  created: Datetime
  modified: Datetime
  ownerId: Int
  checked: Boolean
  contactName: String
  contactEmail: String
  labourHours: BigFloat
  locked: Boolean
  contactPhone: String
  cdmagazijn: String
}

"""All input for the `updateMaintenanceVisitById` mutation."""
input UpdateMaintenanceVisitByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MaintenanceVisit` being updated.
  """
  maintenanceVisitPatch: MaintenanceVisitPatch!
  id: Int!
}

"""The output of our update `Membrane` mutation."""
type UpdateMembranePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Membrane` that was updated by this mutation."""
  membrane: Membrane

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Membrane`."""
  userByOwnerId: User

  """An edge for our `Membrane`. May be used by Relay 1."""
  membraneEdge(
    """The method to use when ordering `Membrane`."""
    orderBy: [MembranesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembranesEdge
}

"""All input for the `updateMembrane` mutation."""
input UpdateMembraneInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Membrane` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Membrane` being updated.
  """
  membranePatch: MembranePatch!
}

"""
Represents an update to a `Membrane`. Fields that are set will be updated.
"""
input MembranePatch {
  id: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  replacementIntervalMonths: Int
  cdartikel: String
  quantity: Int
}

"""All input for the `updateMembraneById` mutation."""
input UpdateMembraneByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Membrane` being updated.
  """
  membranePatch: MembranePatch!
  id: Int!
}

"""All input for the `updateMembraneByName` mutation."""
input UpdateMembraneByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Membrane` being updated.
  """
  membranePatch: MembranePatch!
  name: String!
}

"""The output of our update `ORing` mutation."""
type UpdateORingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ORing` that was updated by this mutation."""
  oRing: ORing

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `ORing`."""
  userByOwnerId: User

  """An edge for our `ORing`. May be used by Relay 1."""
  oRingEdge(
    """The method to use when ordering `ORing`."""
    orderBy: [ORingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ORingsEdge
}

"""All input for the `updateORing` mutation."""
input UpdateORingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ORing` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ORing` being updated.
  """
  oRingPatch: ORingPatch!
}

"""
Represents an update to a `ORing`. Fields that are set will be updated.
"""
input ORingPatch {
  id: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  replacementIntervalMonths: Int
  cdartikel: String
  quantity: Int
}

"""All input for the `updateORingById` mutation."""
input UpdateORingByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ORing` being updated.
  """
  oRingPatch: ORingPatch!
  id: Int!
}

"""All input for the `updateORingByName` mutation."""
input UpdateORingByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ORing` being updated.
  """
  oRingPatch: ORingPatch!
  name: String!
}

"""The output of our update `OfferteRemark` mutation."""
type UpdateOfferteRemarkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OfferteRemark` that was updated by this mutation."""
  offerteRemark: OfferteRemark

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `OfferteRemark`."""
  userByOwnerId: User

  """An edge for our `OfferteRemark`. May be used by Relay 1."""
  offerteRemarkEdge(
    """The method to use when ordering `OfferteRemark`."""
    orderBy: [OfferteRemarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): OfferteRemarksEdge
}

"""All input for the `updateOfferteRemark` mutation."""
input UpdateOfferteRemarkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OfferteRemark` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `OfferteRemark` being updated.
  """
  offerteRemarkPatch: OfferteRemarkPatch!
}

"""
Represents an update to a `OfferteRemark`. Fields that are set will be updated.
"""
input OfferteRemarkPatch {
  id: Int
  offerteId: String
  actions: String
  actionDate: Date
  decisionDate: Date
  kans: BigFloat
  rejectRequest: Boolean
  statusApproved: Boolean
  name: String
  status: String
  competitors: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  representative: String
}

"""All input for the `updateOfferteRemarkById` mutation."""
input UpdateOfferteRemarkByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OfferteRemark` being updated.
  """
  offerteRemarkPatch: OfferteRemarkPatch!
  id: Int!
}

"""All input for the `updateOfferteRemarkByOfferteId` mutation."""
input UpdateOfferteRemarkByOfferteIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OfferteRemark` being updated.
  """
  offerteRemarkPatch: OfferteRemarkPatch!
  offerteId: String!
}

"""The output of our update `Opportunity` mutation."""
type UpdateOpportunityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Opportunity` that was updated by this mutation."""
  opportunity: Opportunity

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `_Land` that is related to this `Opportunity`."""
  _landByCdland: _Land

  """Reads a single `User` that is related to this `Opportunity`."""
  userByOwnerId: User

  """An edge for our `Opportunity`. May be used by Relay 1."""
  opportunityEdge(
    """The method to use when ordering `Opportunity`."""
    orderBy: [OpportunitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OpportunitiesEdge
}

"""All input for the `updateOpportunity` mutation."""
input UpdateOpportunityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Opportunity` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Opportunity` being updated.
  """
  opportunityPatch: OpportunityPatch!
}

"""
Represents an update to a `Opportunity`. Fields that are set will be updated.
"""
input OpportunityPatch {
  id: Int
  source: String
  customer: String
  description: String
  amount: BigFloat
  cdland: String
  actions: String
  actionDate: Date
  cdvert: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  status: String
  distributor: String
  projectDate: Date
}

"""All input for the `updateOpportunityById` mutation."""
input UpdateOpportunityByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Opportunity` being updated.
  """
  opportunityPatch: OpportunityPatch!
  id: Int!
}

"""The output of our update `Permission` mutation."""
type UpdatePermissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Permission` that was updated by this mutation."""
  permission: Permission

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Permission`. May be used by Relay 1."""
  permissionEdge(
    """The method to use when ordering `Permission`."""
    orderBy: [PermissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermissionsEdge
}

"""All input for the `updatePermission` mutation."""
input UpdatePermissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Permission` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Permission` being updated.
  """
  permissionPatch: PermissionPatch!
}

"""
Represents an update to a `Permission`. Fields that are set will be updated.
"""
input PermissionPatch {
  id: Int
  name: String
}

"""All input for the `updatePermissionById` mutation."""
input UpdatePermissionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Permission` being updated.
  """
  permissionPatch: PermissionPatch!
  id: Int!
}

"""The output of our update `PersoonRol` mutation."""
type UpdatePersoonRolPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PersoonRol` that was updated by this mutation."""
  persoonRol: PersoonRol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `PersoonRol`. May be used by Relay 1."""
  persoonRolEdge(
    """The method to use when ordering `PersoonRol`."""
    orderBy: [PersoonRolsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PersoonRolsEdge
}

"""All input for the `updatePersoonRol` mutation."""
input UpdatePersoonRolInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PersoonRol` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PersoonRol` being updated.
  """
  persoonRolPatch: PersoonRolPatch!
}

"""
Represents an update to a `PersoonRol`. Fields that are set will be updated.
"""
input PersoonRolPatch {
  persoonRolGuid: String
  cdpersoon: String
  cdrelatie: Int
  cdrol: String
  rolcode: String
  voorkeur: String
  cdfunctie: String
  cdafdeling: String
  limiet: BigFloat
  limietPerc: BigFloat
}

"""All input for the `updatePersoonRolByPersoonRolGuid` mutation."""
input UpdatePersoonRolByPersoonRolGuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PersoonRol` being updated.
  """
  persoonRolPatch: PersoonRolPatch!
  persoonRolGuid: String!
}

"""The output of our update `Plug` mutation."""
type UpdatePlugPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Plug` that was updated by this mutation."""
  plug: Plug

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Plug`."""
  userByOwnerId: User

  """An edge for our `Plug`. May be used by Relay 1."""
  plugEdge(
    """The method to use when ordering `Plug`."""
    orderBy: [PlugsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlugsEdge
}

"""All input for the `updatePlug` mutation."""
input UpdatePlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Plug` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Plug` being updated.
  """
  plugPatch: PlugPatch!
}

"""Represents an update to a `Plug`. Fields that are set will be updated."""
input PlugPatch {
  id: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""All input for the `updatePlugById` mutation."""
input UpdatePlugByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Plug` being updated.
  """
  plugPatch: PlugPatch!
  id: Int!
}

"""All input for the `updatePlugByName` mutation."""
input UpdatePlugByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Plug` being updated.
  """
  plugPatch: PlugPatch!
  name: String!
}

"""The output of our update `Principle` mutation."""
type UpdatePrinciplePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Principle` that was updated by this mutation."""
  principle: Principle

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Principle`."""
  userByOwnerId: User

  """An edge for our `Principle`. May be used by Relay 1."""
  principleEdge(
    """The method to use when ordering `Principle`."""
    orderBy: [PrinciplesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PrinciplesEdge
}

"""All input for the `updatePrinciple` mutation."""
input UpdatePrincipleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Principle` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Principle` being updated.
  """
  principlePatch: PrinciplePatch!
}

"""
Represents an update to a `Principle`. Fields that are set will be updated.
"""
input PrinciplePatch {
  id: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""All input for the `updatePrincipleById` mutation."""
input UpdatePrincipleByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Principle` being updated.
  """
  principlePatch: PrinciplePatch!
  id: Int!
}

"""All input for the `updatePrincipleByName` mutation."""
input UpdatePrincipleByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Principle` being updated.
  """
  principlePatch: PrinciplePatch!
  name: String!
}

"""The output of our update `Production` mutation."""
type UpdateProductionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Production` that was updated by this mutation."""
  production: Production

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Production`. May be used by Relay 1."""
  productionEdge(
    """The method to use when ordering `Production`."""
    orderBy: [ProductionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductionsEdge
}

"""All input for the `updateProduction` mutation."""
input UpdateProductionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Production` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Production` being updated.
  """
  productionPatch: ProductionPatch!
}

"""
Represents an update to a `Production`. Fields that are set will be updated.
"""
input ProductionPatch {
  id: Int
}

"""All input for the `updateProductionById` mutation."""
input UpdateProductionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Production` being updated.
  """
  productionPatch: ProductionPatch!
  id: Int!
}

"""The output of our update `Pyrolyser` mutation."""
type UpdatePyrolyserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Pyrolyser` that was updated by this mutation."""
  pyrolyser: Pyrolyser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Pyrolyser`."""
  userByOwnerId: User

  """An edge for our `Pyrolyser`. May be used by Relay 1."""
  pyrolyserEdge(
    """The method to use when ordering `Pyrolyser`."""
    orderBy: [PyrolysersOrderBy!] = [PRIMARY_KEY_ASC]
  ): PyrolysersEdge
}

"""All input for the `updatePyrolyser` mutation."""
input UpdatePyrolyserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Pyrolyser` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Pyrolyser` being updated.
  """
  pyrolyserPatch: PyrolyserPatch!
}

"""
Represents an update to a `Pyrolyser`. Fields that are set will be updated.
"""
input PyrolyserPatch {
  id: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  replacementIntervalMonths: Int
  cdartikel: String
}

"""All input for the `updatePyrolyserById` mutation."""
input UpdatePyrolyserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Pyrolyser` being updated.
  """
  pyrolyserPatch: PyrolyserPatch!
  id: Int!
}

"""All input for the `updatePyrolyserByName` mutation."""
input UpdatePyrolyserByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Pyrolyser` being updated.
  """
  pyrolyserPatch: PyrolyserPatch!
  name: String!
}

"""The output of our update `Range` mutation."""
type UpdateRangePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Range` that was updated by this mutation."""
  range: Range

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Gas` that is related to this `Range`."""
  gasByGasId: Gas

  """Reads a single `User` that is related to this `Range`."""
  userByOwnerId: User

  """An edge for our `Range`. May be used by Relay 1."""
  rangeEdge(
    """The method to use when ordering `Range`."""
    orderBy: [RangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RangesEdge
}

"""All input for the `updateRange` mutation."""
input UpdateRangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Range` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Range` being updated.
  """
  rangePatch: RangePatch!
}

"""
Represents an update to a `Range`. Fields that are set will be updated.
"""
input RangePatch {
  id: Int
  gasId: Int
  lowEu: Float
  highEu: Float
  engineeringUnits: String
  alarm1Level: BigFloat
  alarm2Level: BigFloat
  warning1Level: BigFloat
  warning2Level: BigFloat
  alarm1DirectionUp: Boolean
  alarm2DirectionUp: Boolean
  alarmUnits: Boolean
  precision: Int
  created: Datetime
  modified: Datetime
  ownerId: Int
  highEuNumeric: BigFloat
  highEuBackup: Float
}

"""All input for the `updateRangeById` mutation."""
input UpdateRangeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Range` being updated.
  """
  rangePatch: RangePatch!
  id: Int!
}

"""
All input for the `updateRangeByLowEuAndHighEuAndEngineeringUnitsAndGasId` mutation.
"""
input UpdateRangeByLowEuAndHighEuAndEngineeringUnitsAndGasIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Range` being updated.
  """
  rangePatch: RangePatch!
  lowEu: Float!
  highEu: Float!
  engineeringUnits: String!
  gasId: Int!
}

"""The output of our update `RcCard` mutation."""
type UpdateRcCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RcCard` that was updated by this mutation."""
  rcCard: RcCard

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `RcCard`."""
  userByOwnerId: User

  """An edge for our `RcCard`. May be used by Relay 1."""
  rcCardEdge(
    """The method to use when ordering `RcCard`."""
    orderBy: [RcCardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RcCardsEdge
}

"""All input for the `updateRcCard` mutation."""
input UpdateRcCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RcCard` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RcCard` being updated.
  """
  rcCardPatch: RcCardPatch!
}

"""
Represents an update to a `RcCard`. Fields that are set will be updated.
"""
input RcCardPatch {
  id: Int
  serialNumber: String
  ownerId: Int
  created: Datetime
  modified: Datetime
}

"""All input for the `updateRcCardById` mutation."""
input UpdateRcCardByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RcCard` being updated.
  """
  rcCardPatch: RcCardPatch!
  id: Int!
}

"""The output of our update `ReportDetector` mutation."""
type UpdateReportDetectorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReportDetector` that was updated by this mutation."""
  reportDetector: ReportDetector

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Report` that is related to this `ReportDetector`."""
  reportByReportId: Report

  """Reads a single `Detector` that is related to this `ReportDetector`."""
  detectorByDetectorId: Detector

  """An edge for our `ReportDetector`. May be used by Relay 1."""
  reportDetectorEdge(
    """The method to use when ordering `ReportDetector`."""
    orderBy: [ReportDetectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportDetectorsEdge
}

"""All input for the `updateReportDetector` mutation."""
input UpdateReportDetectorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReportDetector` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ReportDetector` being updated.
  """
  reportDetectorPatch: ReportDetectorPatch!
}

"""
Represents an update to a `ReportDetector`. Fields that are set will be updated.
"""
input ReportDetectorPatch {
  id: Int
  reportId: Int
  detectorId: Int
}

"""All input for the `updateReportDetectorById` mutation."""
input UpdateReportDetectorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ReportDetector` being updated.
  """
  reportDetectorPatch: ReportDetectorPatch!
  id: Int!
}

"""
All input for the `updateReportDetectorByReportIdAndDetectorId` mutation.
"""
input UpdateReportDetectorByReportIdAndDetectorIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ReportDetector` being updated.
  """
  reportDetectorPatch: ReportDetectorPatch!
  reportId: Int!
  detectorId: Int!
}

"""The output of our update `ReportItem` mutation."""
type UpdateReportItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReportItem` that was updated by this mutation."""
  reportItem: ReportItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Report` that is related to this `ReportItem`."""
  reportByReportId: Report

  """Reads a single `Item` that is related to this `ReportItem`."""
  itemByItemId: Item

  """An edge for our `ReportItem`. May be used by Relay 1."""
  reportItemEdge(
    """The method to use when ordering `ReportItem`."""
    orderBy: [ReportItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportItemsEdge
}

"""All input for the `updateReportItem` mutation."""
input UpdateReportItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReportItem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ReportItem` being updated.
  """
  reportItemPatch: ReportItemPatch!
}

"""
Represents an update to a `ReportItem`. Fields that are set will be updated.
"""
input ReportItemPatch {
  id: Int
  reportId: Int
  itemId: Int
}

"""All input for the `updateReportItemById` mutation."""
input UpdateReportItemByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ReportItem` being updated.
  """
  reportItemPatch: ReportItemPatch!
  id: Int!
}

"""The output of our update `ReportSensor` mutation."""
type UpdateReportSensorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReportSensor` that was updated by this mutation."""
  reportSensor: ReportSensor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Report` that is related to this `ReportSensor`."""
  reportByReportId: Report

  """Reads a single `Sensor` that is related to this `ReportSensor`."""
  sensorBySensorId: Sensor

  """An edge for our `ReportSensor`. May be used by Relay 1."""
  reportSensorEdge(
    """The method to use when ordering `ReportSensor`."""
    orderBy: [ReportSensorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportSensorsEdge
}

"""All input for the `updateReportSensor` mutation."""
input UpdateReportSensorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReportSensor` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ReportSensor` being updated.
  """
  reportSensorPatch: ReportSensorPatch!
}

"""
Represents an update to a `ReportSensor`. Fields that are set will be updated.
"""
input ReportSensorPatch {
  id: Int
  reportId: Int
  sensorId: Int
}

"""All input for the `updateReportSensorById` mutation."""
input UpdateReportSensorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ReportSensor` being updated.
  """
  reportSensorPatch: ReportSensorPatch!
  id: Int!
}

"""All input for the `updateReportSensorByReportIdAndSensorId` mutation."""
input UpdateReportSensorByReportIdAndSensorIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ReportSensor` being updated.
  """
  reportSensorPatch: ReportSensorPatch!
  reportId: Int!
  sensorId: Int!
}

"""The output of our update `Report` mutation."""
type UpdateReportPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Report` that was updated by this mutation."""
  report: Report

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Report`."""
  userByOwnerId: User

  """Reads a single `EndUser` that is related to this `Report`."""
  endUserByEndUserId: EndUser

  """Reads a single `User` that is related to this `Report`."""
  userByUserId: User

  """An edge for our `Report`. May be used by Relay 1."""
  reportEdge(
    """The method to use when ordering `Report`."""
    orderBy: [ReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportsEdge
}

"""All input for the `updateReport` mutation."""
input UpdateReportInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Report` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Report` being updated.
  """
  reportPatch: ReportPatch!
}

"""
Represents an update to a `Report`. Fields that are set will be updated.
"""
input ReportPatch {
  created: Datetime
  modified: Datetime
  remarks: String
  ownerId: Int
  endUserId: Int
  id: Int
  date: Date
  startup: Boolean
  maintenance: Boolean
  repair: Boolean
  extraWork: Boolean
  other: Boolean
  filename: String
  userId: Int
  closedOld: Boolean
  tsrNumber: String
  closed: Boolean
  checkedTechcentre: Boolean
  factuuropdracht: String
  version: String
  destroyed: Boolean
  type: String
}

"""All input for the `updateReportById` mutation."""
input UpdateReportByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Report` being updated.
  """
  reportPatch: ReportPatch!
  id: Int!
}

"""All input for the `updateReportByFilename` mutation."""
input UpdateReportByFilenameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Report` being updated.
  """
  reportPatch: ReportPatch!
  filename: String!
}

"""All input for the `updateReportByTsrNumberAndVersion` mutation."""
input UpdateReportByTsrNumberAndVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Report` being updated.
  """
  reportPatch: ReportPatch!
  tsrNumber: String!
  version: String!
}

"""The output of our update `Request` mutation."""
type UpdateRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Request` that was updated by this mutation."""
  request: Request

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Request`."""
  userByOwnerId: User

  """An edge for our `Request`. May be used by Relay 1."""
  requestEdge(
    """The method to use when ordering `Request`."""
    orderBy: [RequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RequestsEdge
}

"""All input for the `updateRequest` mutation."""
input UpdateRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Request` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Request` being updated.
  """
  requestPatch: RequestPatch!
}

"""
Represents an update to a `Request`. Fields that are set will be updated.
"""
input RequestPatch {
  id: Int
  tableName: String
  request: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  completed: Boolean
}

"""All input for the `updateRequestById` mutation."""
input UpdateRequestByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Request` being updated.
  """
  requestPatch: RequestPatch!
  id: Int!
}

"""The output of our update `RxCard` mutation."""
type UpdateRxCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RxCard` that was updated by this mutation."""
  rxCard: RxCard

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `RxCard`."""
  userByOwnerId: User

  """An edge for our `RxCard`. May be used by Relay 1."""
  rxCardEdge(
    """The method to use when ordering `RxCard`."""
    orderBy: [RxCardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RxCardsEdge
}

"""All input for the `updateRxCard` mutation."""
input UpdateRxCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RxCard` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RxCard` being updated.
  """
  rxCardPatch: RxCardPatch!
}

"""
Represents an update to a `RxCard`. Fields that are set will be updated.
"""
input RxCardPatch {
  id: Int
  serialNumber: String
  ownerId: Int
  created: Datetime
  modified: Datetime
}

"""All input for the `updateRxCardById` mutation."""
input UpdateRxCardByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RxCard` being updated.
  """
  rxCardPatch: RxCardPatch!
  id: Int!
}

"""The output of our update `SamplePoint` mutation."""
type UpdateSamplePointPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SamplePoint` that was updated by this mutation."""
  samplePoint: SamplePoint

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `SamplePoint`."""
  userByOwnerId: User

  """Reads a single `Area` that is related to this `SamplePoint`."""
  areaByAreaId: Area

  """An edge for our `SamplePoint`. May be used by Relay 1."""
  samplePointEdge(
    """The method to use when ordering `SamplePoint`."""
    orderBy: [SamplePointsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SamplePointsEdge
}

"""All input for the `updateSamplePoint` mutation."""
input UpdateSamplePointInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SamplePoint` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SamplePoint` being updated.
  """
  samplePointPatch: SamplePointPatch!
}

"""
Represents an update to a `SamplePoint`. Fields that are set will be updated.
"""
input SamplePointPatch {
  id: Int
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  areaId: Int
}

"""All input for the `updateSamplePointById` mutation."""
input UpdateSamplePointByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SamplePoint` being updated.
  """
  samplePointPatch: SamplePointPatch!
  id: Int!
}

"""All input for the `updateSamplePointByAreaIdAndName` mutation."""
input UpdateSamplePointByAreaIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SamplePoint` being updated.
  """
  samplePointPatch: SamplePointPatch!
  areaId: Int!
  name: String!
}

"""The output of our update `SensorBaseType` mutation."""
type UpdateSensorBaseTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorBaseType` that was updated by this mutation."""
  sensorBaseType: SensorBaseType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Principle` that is related to this `SensorBaseType`."""
  principleByPrincipleId: Principle

  """An edge for our `SensorBaseType`. May be used by Relay 1."""
  sensorBaseTypeEdge(
    """The method to use when ordering `SensorBaseType`."""
    orderBy: [SensorBaseTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorBaseTypesEdge
}

"""All input for the `updateSensorBaseType` mutation."""
input UpdateSensorBaseTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SensorBaseType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SensorBaseType` being updated.
  """
  sensorBaseTypePatch: SensorBaseTypePatch!
}

"""
Represents an update to a `SensorBaseType`. Fields that are set will be updated.
"""
input SensorBaseTypePatch {
  id: Int
  prefix: String
  suffix: String
  principleId: Int
  ownerId: Int
  created: Datetime
  modified: Datetime
  series: String
  maintenanceIntervalMonths: Int
  quotationIntervalMonths: Int
  replacementIntervalMonths: Int
  volume: Int
}

"""All input for the `updateSensorBaseTypeById` mutation."""
input UpdateSensorBaseTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SensorBaseType` being updated.
  """
  sensorBaseTypePatch: SensorBaseTypePatch!
  id: Int!
}

"""All input for the `updateSensorBaseTypeByPrefixAndSuffix` mutation."""
input UpdateSensorBaseTypeByPrefixAndSuffixInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SensorBaseType` being updated.
  """
  sensorBaseTypePatch: SensorBaseTypePatch!
  prefix: String!
  suffix: String!
}

"""The output of our update `SensorElementLocation` mutation."""
type UpdateSensorElementLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorElementLocation` that was updated by this mutation."""
  sensorElementLocation: SensorElementLocation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `DetectorSensorLocation` that is related to this `SensorElementLocation`.
  """
  detectorSensorLocationByDetectorSensorLocationId: DetectorSensorLocation

  """
  Reads a single `SensorElement` that is related to this `SensorElementLocation`.
  """
  sensorElementBySensorElementId: SensorElement

  """Reads a single `User` that is related to this `SensorElementLocation`."""
  userByOwnerId: User

  """An edge for our `SensorElementLocation`. May be used by Relay 1."""
  sensorElementLocationEdge(
    """The method to use when ordering `SensorElementLocation`."""
    orderBy: [SensorElementLocationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorElementLocationsEdge
}

"""All input for the `updateSensorElementLocation` mutation."""
input UpdateSensorElementLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SensorElementLocation` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SensorElementLocation` being updated.
  """
  sensorElementLocationPatch: SensorElementLocationPatch!
}

"""
Represents an update to a `SensorElementLocation`. Fields that are set will be updated.
"""
input SensorElementLocationPatch {
  id: Int
  detectorSensorLocationId: Int
  sensorElementId: Int
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""All input for the `updateSensorElementLocationById` mutation."""
input UpdateSensorElementLocationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SensorElementLocation` being updated.
  """
  sensorElementLocationPatch: SensorElementLocationPatch!
  id: Int!
}

"""
All input for the `updateSensorElementLocationBySensorElementId` mutation.
"""
input UpdateSensorElementLocationBySensorElementIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SensorElementLocation` being updated.
  """
  sensorElementLocationPatch: SensorElementLocationPatch!
  sensorElementId: Int!
}

"""The output of our update `SensorElementLog` mutation."""
type UpdateSensorElementLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorElementLog` that was updated by this mutation."""
  sensorElementLog: SensorElementLog

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SensorElement` that is related to this `SensorElementLog`.
  """
  sensorElementBySensorElementId: SensorElement

  """Reads a single `Sensor` that is related to this `SensorElementLog`."""
  sensorBySensorId: Sensor

  """An edge for our `SensorElementLog`. May be used by Relay 1."""
  sensorElementLogEdge(
    """The method to use when ordering `SensorElementLog`."""
    orderBy: [SensorElementLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorElementLogsEdge
}

"""All input for the `updateSensorElementLog` mutation."""
input UpdateSensorElementLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SensorElementLog` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SensorElementLog` being updated.
  """
  sensorElementLogPatch: SensorElementLogPatch!
}

"""
Represents an update to a `SensorElementLog`. Fields that are set will be updated.
"""
input SensorElementLogPatch {
  id: Int
  time: Datetime
  sensorElementId: Int
  sensorId: Int
  sensorPosition: Int
  ownerId: Int
}

"""All input for the `updateSensorElementLogById` mutation."""
input UpdateSensorElementLogByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SensorElementLog` being updated.
  """
  sensorElementLogPatch: SensorElementLogPatch!
  id: Int!
}

"""The output of our update `SensorElementType` mutation."""
type UpdateSensorElementTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorElementType` that was updated by this mutation."""
  sensorElementType: SensorElementType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `SensorElementType`."""
  userByOwnerId: User

  """
  Reads a single `SensorBaseType` that is related to this `SensorElementType`.
  """
  sensorBaseTypeBySensorBaseTypeId: SensorBaseType

  """Reads a single `Range` that is related to this `SensorElementType`."""
  rangeByRangeId: Range

  """Reads a single `Range` that is related to this `SensorElementType`."""
  rangeByCalRangeId: Range

  """An edge for our `SensorElementType`. May be used by Relay 1."""
  sensorElementTypeEdge(
    """The method to use when ordering `SensorElementType`."""
    orderBy: [SensorElementTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorElementTypesEdge
}

"""All input for the `updateSensorElementType` mutation."""
input UpdateSensorElementTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SensorElementType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SensorElementType` being updated.
  """
  sensorElementTypePatch: SensorElementTypePatch!
}

"""
Represents an update to a `SensorElementType`. Fields that are set will be updated.
"""
input SensorElementTypePatch {
  id: Int
  name: String
  replacementInterval: Int
  created: Datetime
  modified: Datetime
  ownerId: Int
  sensorBaseTypeId: Int
  rangeId: Int
  calRangeId: Int
}

"""All input for the `updateSensorElementTypeById` mutation."""
input UpdateSensorElementTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SensorElementType` being updated.
  """
  sensorElementTypePatch: SensorElementTypePatch!
  id: Int!
}

"""The output of our update `SensorElement` mutation."""
type UpdateSensorElementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorElement` that was updated by this mutation."""
  sensorElement: SensorElement

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SensorElementType` that is related to this `SensorElement`.
  """
  sensorElementTypeBySensorElementTypeId: SensorElementType

  """Reads a single `User` that is related to this `SensorElement`."""
  userByOwnerId: User

  """An edge for our `SensorElement`. May be used by Relay 1."""
  sensorElementEdge(
    """The method to use when ordering `SensorElement`."""
    orderBy: [SensorElementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorElementsEdge
}

"""All input for the `updateSensorElement` mutation."""
input UpdateSensorElementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SensorElement` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SensorElement` being updated.
  """
  sensorElementPatch: SensorElementPatch!
}

"""
Represents an update to a `SensorElement`. Fields that are set will be updated.
"""
input SensorElementPatch {
  id: Int
  sensorElementTypeId: Int
  serialNumber: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  labelDate: Date
}

"""All input for the `updateSensorElementById` mutation."""
input UpdateSensorElementByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SensorElement` being updated.
  """
  sensorElementPatch: SensorElementPatch!
  id: Int!
}

"""The output of our update `SensorOrder` mutation."""
type UpdateSensorOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorOrder` that was updated by this mutation."""
  sensorOrder: SensorOrder

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sensor` that is related to this `SensorOrder`."""
  sensorBySensorId: Sensor

  """Reads a single `User` that is related to this `SensorOrder`."""
  userByOwnerId: User

  """Reads a single `User` that is related to this `SensorOrder`."""
  userByCheckedUserId: User

  """Reads a single `User` that is related to this `SensorOrder`."""
  userByVerifiedUserId: User

  """
  Reads a single `Factureeropdracht` that is related to this `SensorOrder`.
  """
  factureeropdrachtByFactuuropdracht: Factureeropdracht

  """An edge for our `SensorOrder`. May be used by Relay 1."""
  sensorOrderEdge(
    """The method to use when ordering `SensorOrder`."""
    orderBy: [SensorOrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorOrdersEdge
}

"""All input for the `updateSensorOrder` mutation."""
input UpdateSensorOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SensorOrder` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SensorOrder` being updated.
  """
  sensorOrderPatch: SensorOrderPatch!
}

"""
Represents an update to a `SensorOrder`. Fields that are set will be updated.
"""
input SensorOrderPatch {
  id: Int
  sensorId: Int
  created: Datetime
  ownerId: Int
  checkedUserId: Int
  verifiedUserId: Int
  factuuropdracht: String
  modified: Datetime
}

"""All input for the `updateSensorOrderById` mutation."""
input UpdateSensorOrderByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SensorOrder` being updated.
  """
  sensorOrderPatch: SensorOrderPatch!
  id: Int!
}

"""
All input for the `updateSensorOrderBySensorIdAndFactuuropdracht` mutation.
"""
input UpdateSensorOrderBySensorIdAndFactuuropdrachtInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SensorOrder` being updated.
  """
  sensorOrderPatch: SensorOrderPatch!
  sensorId: Int!
  factuuropdracht: String!
}

"""The output of our update `SensorSensorElement` mutation."""
type UpdateSensorSensorElementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorSensorElement` that was updated by this mutation."""
  sensorSensorElement: SensorSensorElement

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sensor` that is related to this `SensorSensorElement`."""
  sensorBySensorId: Sensor

  """
  Reads a single `SensorElement` that is related to this `SensorSensorElement`.
  """
  sensorElementBySensorElementId: SensorElement

  """Reads a single `User` that is related to this `SensorSensorElement`."""
  userByOwnerId: User

  """An edge for our `SensorSensorElement`. May be used by Relay 1."""
  sensorSensorElementEdge(
    """The method to use when ordering `SensorSensorElement`."""
    orderBy: [SensorSensorElementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorSensorElementsEdge
}

"""All input for the `updateSensorSensorElement` mutation."""
input UpdateSensorSensorElementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SensorSensorElement` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SensorSensorElement` being updated.
  """
  sensorSensorElementPatch: SensorSensorElementPatch!
}

"""
Represents an update to a `SensorSensorElement`. Fields that are set will be updated.
"""
input SensorSensorElementPatch {
  id: Int
  sensorId: Int
  sensorElementId: Int
  sensorPosition: Int
  installed: Date
  created: Datetime
  modified: Datetime
  ownerId: Int
}

"""All input for the `updateSensorSensorElementById` mutation."""
input UpdateSensorSensorElementByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SensorSensorElement` being updated.
  """
  sensorSensorElementPatch: SensorSensorElementPatch!
  id: Int!
}

"""
All input for the `updateSensorSensorElementBySensorIdAndSensorPosition` mutation.
"""
input UpdateSensorSensorElementBySensorIdAndSensorPositionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SensorSensorElement` being updated.
  """
  sensorSensorElementPatch: SensorSensorElementPatch!
  sensorId: Int!
  sensorPosition: Int!
}

"""
All input for the `updateSensorSensorElementBySensorElementId` mutation.
"""
input UpdateSensorSensorElementBySensorElementIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SensorSensorElement` being updated.
  """
  sensorSensorElementPatch: SensorSensorElementPatch!
  sensorElementId: Int!
}

"""The output of our update `SensorSetting` mutation."""
type UpdateSensorSettingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorSetting` that was updated by this mutation."""
  sensorSetting: SensorSetting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SensorSetting`. May be used by Relay 1."""
  sensorSettingEdge(
    """The method to use when ordering `SensorSetting`."""
    orderBy: [SensorSettingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorSettingsEdge
}

"""All input for the `updateSensorSetting` mutation."""
input UpdateSensorSettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SensorSetting` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SensorSetting` being updated.
  """
  sensorSettingPatch: SensorSettingPatch!
}

"""
Represents an update to a `SensorSetting`. Fields that are set will be updated.
"""
input SensorSettingPatch {
  id: Int
  typeTarget: String
  type: String
  version: String
  target: String
  min: BigFloat
  max: BigFloat
  units: String
  nDec: Int
  gas: String
  flow: BigFloat
  sw5: String
  sw6: String
  electrolyte: String
  membrane: String
  oRing: String
  restr: String
  battery: String
  seal: String
  plug: String
  sw4: String
  battConn: String
  alarmUnits: Int
  alarm1Percentage: BigFloat
  alarm1Units: BigFloat
  alarm1Current: Int
  alarm1Direction: Int
  alarm2Percentage: BigFloat
  alarm2Units: BigFloat
  alarm2Current: Int
  alarm2Direction: Int
  warningPercentageA1: BigFloat
  warningCurrent: Int
  calFlow: BigFloat
  byPassFlow: BigFloat
  pyroType: String
  pyroVoltage: BigFloat
  span100K: String
  span10K: String
  span1K: String
}

"""All input for the `updateSensorSettingById` mutation."""
input UpdateSensorSettingByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SensorSetting` being updated.
  """
  sensorSettingPatch: SensorSettingPatch!
  id: Int!
}

"""All input for the `updateSensorSettingByTypeTarget` mutation."""
input UpdateSensorSettingByTypeTargetInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SensorSetting` being updated.
  """
  sensorSettingPatch: SensorSettingPatch!
  typeTarget: String!
}

"""The output of our update `SensorTestResult` mutation."""
type UpdateSensorTestResultPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorTestResult` that was updated by this mutation."""
  sensorTestResult: SensorTestResult

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sensor` that is related to this `SensorTestResult`."""
  sensorBySensorId: Sensor

  """Reads a single `User` that is related to this `SensorTestResult`."""
  userByOwnerId: User

  """Reads a single `User` that is related to this `SensorTestResult`."""
  userByUserId: User

  """Reads a single `CalGas` that is related to this `SensorTestResult`."""
  calGasByFsCalGasId: CalGas

  """
  Reads a single `SensorOrder` that is related to this `SensorTestResult`.
  """
  sensorOrderBySensorOrderId: SensorOrder

  """An edge for our `SensorTestResult`. May be used by Relay 1."""
  sensorTestResultEdge(
    """The method to use when ordering `SensorTestResult`."""
    orderBy: [SensorTestResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorTestResultsEdge
}

"""All input for the `updateSensorTestResult` mutation."""
input UpdateSensorTestResultInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SensorTestResult` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SensorTestResult` being updated.
  """
  sensorTestResultPatch: SensorTestResultPatch!
}

"""
Represents an update to a `SensorTestResult`. Fields that are set will be updated.
"""
input SensorTestResultPatch {
  id: Int
  sensorId: Int
  date: Date
  zeroResponse: Float
  spanResponse: Float
  created: Datetime
  modified: Datetime
  ownerId: Int
  factuuropdrachtOld: String
  userId: Int
  fsCalGasId: Int
  usedSpanConcentration: Float
  sensorOrderId: Int
}

"""All input for the `updateSensorTestResultById` mutation."""
input UpdateSensorTestResultByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SensorTestResult` being updated.
  """
  sensorTestResultPatch: SensorTestResultPatch!
  id: Int!
}

"""The output of our update `SensorType` mutation."""
type UpdateSensorTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorType` that was updated by this mutation."""
  sensorType: SensorType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Electrolyte` that is related to this `SensorType`."""
  electrolyteByElectrolyteId: Electrolyte

  """Reads a single `Membrane` that is related to this `SensorType`."""
  membraneByMembraneId: Membrane

  """Reads a single `ORing` that is related to this `SensorType`."""
  oRingByORingId: ORing

  """Reads a single `Pyrolyser` that is related to this `SensorType`."""
  pyrolyserByPyrolyserId: Pyrolyser

  """Reads a single `Filter` that is related to this `SensorType`."""
  filterByFilterId: Filter

  """Reads a single `Range` that is related to this `SensorType`."""
  rangeByRangeId: Range

  """Reads a single `SensorBaseType` that is related to this `SensorType`."""
  sensorBaseTypeBySensorBaseTypeId: SensorBaseType

  """Reads a single `User` that is related to this `SensorType`."""
  userByOwnerId: User

  """Reads a single `CalGas` that is related to this `SensorType`."""
  calGasByCalGasId: CalGas

  """Reads a single `Plug` that is related to this `SensorType`."""
  plugByPlugId: Plug

  """An edge for our `SensorType`. May be used by Relay 1."""
  sensorTypeEdge(
    """The method to use when ordering `SensorType`."""
    orderBy: [SensorTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorTypesEdge
}

"""All input for the `updateSensorType` mutation."""
input UpdateSensorTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SensorType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SensorType` being updated.
  """
  sensorTypePatch: SensorTypePatch!
}

"""
Represents an update to a `SensorType`. Fields that are set will be updated.
"""
input SensorTypePatch {
  id: Int
  sensorTypeId: Int
  electrolyteId: Int
  membraneId: Int
  oRingId: Int
  pyrolyserId: Int
  filterId: Int
  battery: Boolean
  restrictor: Boolean
  membraneSeal: Boolean
  rangeId: Int
  flowRate: Float
  calFlowRate: Float
  code: String
  obsolete: Boolean
  pyrolyserVoltage: Float
  principleId: Int
  sensorBaseTypeId: Int
  created: Datetime
  modified: Datetime
  ownerId: Int
  model: String
  calGasId: Int
  siliconeSheet: Boolean
  elementCount: Int
  maintenanceIntervalMonths: Int
  replacementIntervalMonths: Int
  cdartikel: String
  volume: Int
  calResponse: Float
  electrodeCount: Int
  biasMv: Int
  direction: Boolean
  lowElectrolyte: Boolean
  spanResistor: BigFloat
  plugId: Int
  transportSwitch: Boolean
}

"""All input for the `updateSensorTypeById` mutation."""
input UpdateSensorTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SensorType` being updated.
  """
  sensorTypePatch: SensorTypePatch!
  id: Int!
}

"""All input for the `updateSensorTypeBySensorTypeId` mutation."""
input UpdateSensorTypeBySensorTypeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SensorType` being updated.
  """
  sensorTypePatch: SensorTypePatch!
  sensorTypeId: Int!
}

"""
All input for the `updateSensorTypeBySensorBaseTypeIdAndRangeIdAndCodeAndModelAndPyrolyserId` mutation.
"""
input UpdateSensorTypeBySensorBaseTypeIdAndRangeIdAndCodeAndModelAndPyrolyserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SensorType` being updated.
  """
  sensorTypePatch: SensorTypePatch!
  sensorBaseTypeId: Int!
  rangeId: Int!
  code: String!
  model: String!
  pyrolyserId: Int!
}

"""The output of our update `Sensor` mutation."""
type UpdateSensorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Sensor` that was updated by this mutation."""
  sensor: Sensor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Sensor`."""
  userByOwnerId: User

  """Reads a single `SensorType` that is related to this `Sensor`."""
  sensorTypeBySensorTypeId: SensorType

  """An edge for our `Sensor`. May be used by Relay 1."""
  sensorEdge(
    """The method to use when ordering `Sensor`."""
    orderBy: [SensorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorsEdge
}

"""All input for the `updateSensor` mutation."""
input UpdateSensorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Sensor` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Sensor` being updated.
  """
  sensorPatch: SensorPatch!
}

"""
Represents an update to a `Sensor`. Fields that are set will be updated.
"""
input SensorPatch {
  id: Int
  serialNumber: String
  labelDate: Date
  remarks: String
  created: Datetime
  ownerId: Int
  modified: Datetime
  sensorTypeId: Int
}

"""All input for the `updateSensorById` mutation."""
input UpdateSensorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Sensor` being updated.
  """
  sensorPatch: SensorPatch!
  id: Int!
}

"""
All input for the `updateSensorBySerialNumberAndSensorTypeId` mutation.
"""
input UpdateSensorBySerialNumberAndSensorTypeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Sensor` being updated.
  """
  sensorPatch: SensorPatch!
  serialNumber: String!
  sensorTypeId: Int!
}

"""The output of our update `Software` mutation."""
type UpdateSoftwarePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Software` that was updated by this mutation."""
  software: Software

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Hardware` that is related to this `Software`."""
  hardwareByHardwareId: Hardware

  """Reads a single `User` that is related to this `Software`."""
  userByOwnerId: User

  """An edge for our `Software`. May be used by Relay 1."""
  softwareEdge(
    """The method to use when ordering `Software`."""
    orderBy: [SoftwaresOrderBy!] = [PRIMARY_KEY_ASC]
  ): SoftwaresEdge
}

"""All input for the `updateSoftware` mutation."""
input UpdateSoftwareInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Software` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Software` being updated.
  """
  softwarePatch: SoftwarePatch!
}

"""
Represents an update to a `Software`. Fields that are set will be updated.
"""
input SoftwarePatch {
  id: Int
  type: String
  serialNumber: String
  purchaseDate: Date
  hardwareId: Int
  ownerId: Int
  remarks: String
  created: Datetime
  modified: Datetime
  registrationCode: String
  activationCode: String
  login: String
  password: String
}

"""All input for the `updateSoftwareById` mutation."""
input UpdateSoftwareByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Software` being updated.
  """
  softwarePatch: SoftwarePatch!
  id: Int!
}

"""The output of our update `StockGroup` mutation."""
type UpdateStockGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StockGroup` that was updated by this mutation."""
  stockGroup: StockGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `StockGroup`."""
  userByOwnerId: User

  """An edge for our `StockGroup`. May be used by Relay 1."""
  stockGroupEdge(
    """The method to use when ordering `StockGroup`."""
    orderBy: [StockGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): StockGroupsEdge
}

"""All input for the `updateStockGroup` mutation."""
input UpdateStockGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StockGroup` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `StockGroup` being updated.
  """
  stockGroupPatch: StockGroupPatch!
}

"""
Represents an update to a `StockGroup`. Fields that are set will be updated.
"""
input StockGroupPatch {
  id: Int
  name: String
  ownerId: Int
  created: Datetime
  modified: Datetime
}

"""All input for the `updateStockGroupById` mutation."""
input UpdateStockGroupByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `StockGroup` being updated.
  """
  stockGroupPatch: StockGroupPatch!
  id: Int!
}

"""The output of our update `StockItem` mutation."""
type UpdateStockItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StockItem` that was updated by this mutation."""
  stockItem: StockItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `StockGroup` that is related to this `StockItem`."""
  stockGroupByStockGroupId: StockGroup

  """Reads a single `User` that is related to this `StockItem`."""
  userByOwnerId: User

  """An edge for our `StockItem`. May be used by Relay 1."""
  stockItemEdge(
    """The method to use when ordering `StockItem`."""
    orderBy: [StockItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): StockItemsEdge
}

"""All input for the `updateStockItem` mutation."""
input UpdateStockItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StockItem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `StockItem` being updated.
  """
  stockItemPatch: StockItemPatch!
}

"""
Represents an update to a `StockItem`. Fields that are set will be updated.
"""
input StockItemPatch {
  id: Int
  stockGroupId: Int
  cdartikel: String
  ownerId: Int
  created: Datetime
  modified: Datetime
  prijsper: Float
  action: String
}

"""All input for the `updateStockItemById` mutation."""
input UpdateStockItemByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `StockItem` being updated.
  """
  stockItemPatch: StockItemPatch!
  id: Int!
}

"""
All input for the `updateStockItemByStockGroupIdAndCdartikel` mutation.
"""
input UpdateStockItemByStockGroupIdAndCdartikelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `StockItem` being updated.
  """
  stockItemPatch: StockItemPatch!
  stockGroupId: Int!
  cdartikel: String!
}

"""The output of our update `StockSupplier` mutation."""
type UpdateStockSupplierPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StockSupplier` that was updated by this mutation."""
  stockSupplier: StockSupplier

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `StockSupplier`."""
  userByOwnerId: User

  """An edge for our `StockSupplier`. May be used by Relay 1."""
  stockSupplierEdge(
    """The method to use when ordering `StockSupplier`."""
    orderBy: [StockSuppliersOrderBy!] = [PRIMARY_KEY_ASC]
  ): StockSuppliersEdge
}

"""All input for the `updateStockSupplier` mutation."""
input UpdateStockSupplierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StockSupplier` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `StockSupplier` being updated.
  """
  stockSupplierPatch: StockSupplierPatch!
}

"""
Represents an update to a `StockSupplier`. Fields that are set will be updated.
"""
input StockSupplierPatch {
  id: Int
  cdcrediteur: String
  ownerId: Int
  created: Datetime
  modified: Datetime
  name: String
  shipmentDays: Int
  shipmentDay: Int
}

"""All input for the `updateStockSupplierById` mutation."""
input UpdateStockSupplierByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `StockSupplier` being updated.
  """
  stockSupplierPatch: StockSupplierPatch!
  id: Int!
}

"""The output of our update `Task` mutation."""
type UpdateTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Task` that was updated by this mutation."""
  task: Task

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Task`."""
  userByOwnerId: User

  """An edge for our `Task`. May be used by Relay 1."""
  taskEdge(
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksEdge
}

"""All input for the `updateTask` mutation."""
input UpdateTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Task` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Task` being updated.
  """
  taskPatch: TaskPatch!
}

"""Represents an update to a `Task`. Fields that are set will be updated."""
input TaskPatch {
  id: Int
  code: String
  name: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  groupCode: Int
  sortCode: Int
  wbsoStartDate: Date
  wbsoEndDate: Date
  description: String
}

"""All input for the `updateTaskById` mutation."""
input UpdateTaskByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Task` being updated.
  """
  taskPatch: TaskPatch!
  id: Int!
}

"""The output of our update `TempFactopdrachtregel` mutation."""
type UpdateTempFactopdrachtregelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TempFactopdrachtregel` that was updated by this mutation."""
  tempFactopdrachtregel: TempFactopdrachtregel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TempFactopdrachtregel`. May be used by Relay 1."""
  tempFactopdrachtregelEdge(
    """The method to use when ordering `TempFactopdrachtregel`."""
    orderBy: [TempFactopdrachtregelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TempFactopdrachtregelsEdge
}

"""All input for the `updateTempFactopdrachtregel` mutation."""
input UpdateTempFactopdrachtregelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TempFactopdrachtregel` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TempFactopdrachtregel` being updated.
  """
  tempFactopdrachtregelPatch: TempFactopdrachtregelPatch!
}

"""
Represents an update to a `TempFactopdrachtregel`. Fields that are set will be updated.
"""
input TempFactopdrachtregelPatch {
  id: String
  factuuropdracht: String
  factuurregel: Int
  hoofdregel: Int
  soort: String
  cdartikel: String
  omschr: String
  eenheid: String
  aantaldec: Int
  aantalgeleverd: BigFloat
  prijs: BigFloat
  prijsper: BigFloat
  kortingperc: BigFloat
  factbedragincl: BigFloat
  factbedragexcl: BigFloat
  btwcode: Int
  btwperc: BigFloat
  cdgrbrekening: String
  nettoomzet: BigFloat
  kostprijs: BigFloat
  statcode: String
  aantalbesteld: BigFloat
  aantalleveren: BigFloat
  datum: Date
  cdstatus: String
  aantalnaleveren: BigFloat
  tekstmagb: String
  cdmagazijn: String
  cdgrbrekomzvj: String
  factbedragexclvj: BigFloat
  aantalgereserv: BigFloat
  kvc: String
  cdkostenplaats: String
  cddossier: String
  cdgrbrekkort: String
  cdwerknemer: String
  weeknummer: Int
  factopdrRglGuid: String
  koppelMetInkoop: String
  cddeelproject: String
  cdtermijn: Int
  bonnummer: String
  projMutsoort: String
  voorschot: Int
  cdgrbkostprijs: String
  cdgrbdekking: String
  samVersie: String
  declarabel: String
  vvvrijvelda: String
}

"""All input for the `updateTempFactopdrachtregelById` mutation."""
input UpdateTempFactopdrachtregelByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TempFactopdrachtregel` being updated.
  """
  tempFactopdrachtregelPatch: TempFactopdrachtregelPatch!
  id: String!
}

"""
All input for the `updateTempFactopdrachtregelByFactuuropdrachtAndFactuurregel` mutation.
"""
input UpdateTempFactopdrachtregelByFactuuropdrachtAndFactuurregelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TempFactopdrachtregel` being updated.
  """
  tempFactopdrachtregelPatch: TempFactopdrachtregelPatch!
  factuuropdracht: String!
  factuurregel: Int!
}

"""The output of our update `TempLicense` mutation."""
type UpdateTempLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TempLicense` that was updated by this mutation."""
  tempLicense: TempLicense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TempLicense`. May be used by Relay 1."""
  tempLicenseEdge(
    """The method to use when ordering `TempLicense`."""
    orderBy: [TempLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TempLicensesEdge
}

"""All input for the `updateTempLicense` mutation."""
input UpdateTempLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TempLicense` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TempLicense` being updated.
  """
  tempLicensePatch: TempLicensePatch!
}

"""
Represents an update to a `TempLicense`. Fields that are set will be updated.
"""
input TempLicensePatch {
  id: Int
  moduletype: Int
  moduledata: String
  licensecode: String
  remarks: String
  customerkey: Int
  licenseid: Int
  durationmonths: Int
  durationdays: Int
  creationtime: Datetime
  ordercode: Int
  activate: Int
}

"""All input for the `updateTempLicenseById` mutation."""
input UpdateTempLicenseByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TempLicense` being updated.
  """
  tempLicensePatch: TempLicensePatch!
  id: Int!
}

"""The output of our update `TempRegistrationHistory` mutation."""
type UpdateTempRegistrationHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TempRegistrationHistory` that was updated by this mutation."""
  tempRegistrationHistory: TempRegistrationHistory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TempRegistrationHistory`. May be used by Relay 1."""
  tempRegistrationHistoryEdge(
    """The method to use when ordering `TempRegistrationHistory`."""
    orderBy: [TempRegistrationHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TempRegistrationHistoriesEdge
}

"""All input for the `updateTempRegistrationHistory` mutation."""
input UpdateTempRegistrationHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TempRegistrationHistory` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TempRegistrationHistory` being updated.
  """
  tempRegistrationHistoryPatch: TempRegistrationHistoryPatch!
}

"""
Represents an update to a `TempRegistrationHistory`. Fields that are set will be updated.
"""
input TempRegistrationHistoryPatch {
  id: Int
  activationCode: String
  registrationId: Int
  expirationDate: Date
  orderCode: String
}

"""All input for the `updateTempRegistrationHistoryById` mutation."""
input UpdateTempRegistrationHistoryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TempRegistrationHistory` being updated.
  """
  tempRegistrationHistoryPatch: TempRegistrationHistoryPatch!
  id: Int!
}

"""The output of our update `TempRegistration` mutation."""
type UpdateTempRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TempRegistration` that was updated by this mutation."""
  tempRegistration: TempRegistration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TempRegistration`. May be used by Relay 1."""
  tempRegistrationEdge(
    """The method to use when ordering `TempRegistration`."""
    orderBy: [TempRegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TempRegistrationsEdge
}

"""All input for the `updateTempRegistration` mutation."""
input UpdateTempRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TempRegistration` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TempRegistration` being updated.
  """
  tempRegistrationPatch: TempRegistrationPatch!
}

"""
Represents an update to a `TempRegistration`. Fields that are set will be updated.
"""
input TempRegistrationPatch {
  id: Int
  hwType: Int
  registrationCode: String
  activationCode: String
  licenseId: Int
  expirationDate: Date
  hwCode: String
  computerName: String
  ipAddress: String
  orderCode: String
}

"""All input for the `updateTempRegistrationById` mutation."""
input UpdateTempRegistrationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TempRegistration` being updated.
  """
  tempRegistrationPatch: TempRegistrationPatch!
  id: Int!
}

"""The output of our update `TempRegistrations2` mutation."""
type UpdateTempRegistrations2Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TempRegistrations2` that was updated by this mutation."""
  tempRegistrations2: TempRegistrations2

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TempRegistrations2`. May be used by Relay 1."""
  tempRegistrations2Edge(
    """The method to use when ordering `TempRegistrations2`."""
    orderBy: [TempRegistrations2SOrderBy!] = [PRIMARY_KEY_ASC]
  ): TempRegistrations2SEdge
}

"""All input for the `updateTempRegistrations2` mutation."""
input UpdateTempRegistrations2Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TempRegistrations2` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TempRegistrations2` being updated.
  """
  tempRegistrations2Patch: TempRegistrations2Patch!
}

"""
Represents an update to a `TempRegistrations2`. Fields that are set will be updated.
"""
input TempRegistrations2Patch {
  id: Int
  hwType: Int
  registrationCode: String
  activationCode: String
  licenseId: Int
  expirationDate: Date
  hwCode: String
  computerName: String
  ipAddress: String
  orderCode: String
}

"""All input for the `updateTempRegistrations2ById` mutation."""
input UpdateTempRegistrations2ByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TempRegistrations2` being updated.
  """
  tempRegistrations2Patch: TempRegistrations2Patch!
  id: Int!
}

"""The output of our update `Test` mutation."""
type UpdateTestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Test` that was updated by this mutation."""
  test: Test

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Test`. May be used by Relay 1."""
  testEdge(
    """The method to use when ordering `Test`."""
    orderBy: [TestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TestsEdge
}

"""All input for the `updateTest` mutation."""
input UpdateTestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Test` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Test` being updated.
  """
  testPatch: TestPatch!
}

"""Represents an update to a `Test`. Fields that are set will be updated."""
input TestPatch {
  id: Int
  detectorSensorLocationId: Int
  date: Datetime
  day: Int
  success: Boolean
  sensorId: Int
  originalSensorId: Int
  filterId: Int
  pyrolyserId: Int
}

"""All input for the `updateTestById` mutation."""
input UpdateTestByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Test` being updated.
  """
  testPatch: TestPatch!
  id: Int!
}

"""The output of our update `UserRight` mutation."""
type UpdateUserRightPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserRight` that was updated by this mutation."""
  userRight: UserRight

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserRight`."""
  userByUserId: User

  """An edge for our `UserRight`. May be used by Relay 1."""
  userRightEdge(
    """The method to use when ordering `UserRight`."""
    orderBy: [UserRightsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserRightsEdge
}

"""All input for the `updateUserRight` mutation."""
input UpdateUserRightInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserRight` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserRight` being updated.
  """
  userRightPatch: UserRightPatch!
}

"""
Represents an update to a `UserRight`. Fields that are set will be updated.
"""
input UserRightPatch {
  id: Int
  userId: Int
  path: String
  created: Datetime
  modified: Datetime
  ownerId: Int
  authorized: Boolean
}

"""All input for the `updateUserRightById` mutation."""
input UpdateUserRightByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserRight` being updated.
  """
  userRightPatch: UserRightPatch!
  id: Int!
}

"""All input for the `updateUserRightByUserIdAndPath` mutation."""
input UpdateUserRightByUserIdAndPathInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserRight` being updated.
  """
  userRightPatch: UserRightPatch!
  userId: Int!
  path: String!
}

"""The output of our update `UserTask` mutation."""
type UpdateUserTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserTask` that was updated by this mutation."""
  userTask: UserTask

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserTask`."""
  userByUserId: User

  """Reads a single `Task` that is related to this `UserTask`."""
  taskByTaskId: Task

  """Reads a single `User` that is related to this `UserTask`."""
  userByOwnerId: User

  """An edge for our `UserTask`. May be used by Relay 1."""
  userTaskEdge(
    """The method to use when ordering `UserTask`."""
    orderBy: [UserTasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserTasksEdge
}

"""All input for the `updateUserTask` mutation."""
input UpdateUserTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserTask` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserTask` being updated.
  """
  userTaskPatch: UserTaskPatch!
}

"""
Represents an update to a `UserTask`. Fields that are set will be updated.
"""
input UserTaskPatch {
  id: Int
  userId: Int
  taskId: Int
  created: Datetime
  modified: Datetime
  ownerId: Int
  qualifiesForOvertime: Boolean
}

"""All input for the `updateUserTaskById` mutation."""
input UpdateUserTaskByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserTask` being updated.
  """
  userTaskPatch: UserTaskPatch!
  id: Int!
}

"""All input for the `updateUserTaskByUserIdAndTaskId` mutation."""
input UpdateUserTaskByUserIdAndTaskIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserTask` being updated.
  """
  userTaskPatch: UserTaskPatch!
  userId: Int!
  taskId: Int!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `User`."""
  groupByGroupId: Group

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  id: Int
  username: String
  password: String
  created: Datetime
  modified: Datetime
  groupId: Int
  initials: String
  fullname: String
  holidayStartBalance: Int
  overtimeStartBalance: Int
  url: String
  weeklyHoursFullAccess: Boolean
}

"""All input for the `updateUserById` mutation."""
input UpdateUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  id: Int!
}

"""All input for the `updateUserByUsername` mutation."""
input UpdateUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  username: String!
}

"""The output of our update `Voorraden` mutation."""
type UpdateVoorradenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Voorraden` that was updated by this mutation."""
  voorraden: Voorraden

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Voorraden`. May be used by Relay 1."""
  voorradenEdge(
    """The method to use when ordering `Voorraden`."""
    orderBy: [VoorradensOrderBy!] = [PRIMARY_KEY_ASC]
  ): VoorradensEdge
}

"""All input for the `updateVoorraden` mutation."""
input UpdateVoorradenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Voorraden` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Voorraden` being updated.
  """
  voorradenPatch: VoorradenPatch!
}

"""
Represents an update to a `Voorraden`. Fields that are set will be updated.
"""
input VoorradenPatch {
  cdartikel: String
  cdmagazijn: String
  locatie: String
  minvoorraad: BigFloat
  maxvoorraad: BigFloat
  voorraad: BigFloat
  leveren: BigFloat
  geleverd: BigFloat
  besteld: BigFloat
  inkopen: BigFloat
  gereserveerd: BigFloat
  assemblbij: BigFloat
  assemblaf: BigFloat
}

"""All input for the `updateVoorradenByCdartikelAndCdmagazijn` mutation."""
input UpdateVoorradenByCdartikelAndCdmagazijnInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Voorraden` being updated.
  """
  voorradenPatch: VoorradenPatch!
  cdartikel: String!
  cdmagazijn: String!
}

"""The output of our update `VoorradenLog` mutation."""
type UpdateVoorradenLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `VoorradenLog` that was updated by this mutation."""
  voorradenLog: VoorradenLog

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `VoorradenLog`. May be used by Relay 1."""
  voorradenLogEdge(
    """The method to use when ordering `VoorradenLog`."""
    orderBy: [VoorradenLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): VoorradenLogsEdge
}

"""All input for the `updateVoorradenLog` mutation."""
input UpdateVoorradenLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `VoorradenLog` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `VoorradenLog` being updated.
  """
  voorradenLogPatch: VoorradenLogPatch!
}

"""
Represents an update to a `VoorradenLog`. Fields that are set will be updated.
"""
input VoorradenLogPatch {
  id: Int
  created: Datetime
  operation: String
  new: JSON
  old: JSON
}

"""All input for the `updateVoorradenLogById` mutation."""
input UpdateVoorradenLogByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `VoorradenLog` being updated.
  """
  voorradenLogPatch: VoorradenLogPatch!
  id: Int!
}

"""The output of our update `WeeklyHourRemark` mutation."""
type UpdateWeeklyHourRemarkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `WeeklyHourRemark` that was updated by this mutation."""
  weeklyHourRemark: WeeklyHourRemark

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `WeeklyHourRemark`."""
  userByUserId: User

  """Reads a single `Task` that is related to this `WeeklyHourRemark`."""
  taskByTaskId: Task

  """Reads a single `User` that is related to this `WeeklyHourRemark`."""
  userByOwnerId: User

  """An edge for our `WeeklyHourRemark`. May be used by Relay 1."""
  weeklyHourRemarkEdge(
    """The method to use when ordering `WeeklyHourRemark`."""
    orderBy: [WeeklyHourRemarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): WeeklyHourRemarksEdge
}

"""All input for the `updateWeeklyHourRemark` mutation."""
input UpdateWeeklyHourRemarkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `WeeklyHourRemark` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `WeeklyHourRemark` being updated.
  """
  weeklyHourRemarkPatch: WeeklyHourRemarkPatch!
}

"""
Represents an update to a `WeeklyHourRemark`. Fields that are set will be updated.
"""
input WeeklyHourRemarkPatch {
  id: Int
  userId: Int
  taskId: Int
  date: Date
  created: Datetime
  modified: Datetime
  ownerId: Int
  remark: String
}

"""All input for the `updateWeeklyHourRemarkById` mutation."""
input UpdateWeeklyHourRemarkByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `WeeklyHourRemark` being updated.
  """
  weeklyHourRemarkPatch: WeeklyHourRemarkPatch!
  id: Int!
}

"""
All input for the `updateWeeklyHourRemarkByUserIdAndTaskIdAndDate` mutation.
"""
input UpdateWeeklyHourRemarkByUserIdAndTaskIdAndDateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `WeeklyHourRemark` being updated.
  """
  weeklyHourRemarkPatch: WeeklyHourRemarkPatch!
  userId: Int!
  taskId: Int!
  date: Date!
}

"""The output of our update `WeeklyHour` mutation."""
type UpdateWeeklyHourPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `WeeklyHour` that was updated by this mutation."""
  weeklyHour: WeeklyHour

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `WeeklyHour`."""
  userByUserId: User

  """Reads a single `Task` that is related to this `WeeklyHour`."""
  taskByTaskId: Task

  """Reads a single `User` that is related to this `WeeklyHour`."""
  userByOwnerId: User

  """An edge for our `WeeklyHour`. May be used by Relay 1."""
  weeklyHourEdge(
    """The method to use when ordering `WeeklyHour`."""
    orderBy: [WeeklyHoursOrderBy!] = [PRIMARY_KEY_ASC]
  ): WeeklyHoursEdge
}

"""All input for the `updateWeeklyHour` mutation."""
input UpdateWeeklyHourInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `WeeklyHour` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `WeeklyHour` being updated.
  """
  weeklyHourPatch: WeeklyHourPatch!
}

"""
Represents an update to a `WeeklyHour`. Fields that are set will be updated.
"""
input WeeklyHourPatch {
  id: Int
  userId: Int
  taskId: Int
  startTime: Datetime
  endTime: Datetime
  created: Datetime
  modified: Datetime
  ownerId: Int
  office: Boolean
}

"""All input for the `updateWeeklyHourById` mutation."""
input UpdateWeeklyHourByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `WeeklyHour` being updated.
  """
  weeklyHourPatch: WeeklyHourPatch!
  id: Int!
}

"""The output of our delete `AspNetRoleClaim` mutation."""
type DeleteAspNetRoleClaimPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AspNetRoleClaim` that was deleted by this mutation."""
  aspNetRoleClaim: AspNetRoleClaim
  deletedAspNetRoleClaimId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `AspNetRole` that is related to this `AspNetRoleClaim`."""
  aspNetRoleByRoleId: AspNetRole

  """An edge for our `AspNetRoleClaim`. May be used by Relay 1."""
  aspNetRoleClaimEdge(
    """The method to use when ordering `AspNetRoleClaim`."""
    orderBy: [AspNetRoleClaimsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AspNetRoleClaimsEdge
}

"""All input for the `deleteAspNetRoleClaim` mutation."""
input DeleteAspNetRoleClaimInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AspNetRoleClaim` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAspNetRoleClaimById` mutation."""
input DeleteAspNetRoleClaimByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `AspNetRole` mutation."""
type DeleteAspNetRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AspNetRole` that was deleted by this mutation."""
  aspNetRole: AspNetRole
  deletedAspNetRoleId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `AspNetRole`. May be used by Relay 1."""
  aspNetRoleEdge(
    """The method to use when ordering `AspNetRole`."""
    orderBy: [AspNetRolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AspNetRolesEdge
}

"""All input for the `deleteAspNetRole` mutation."""
input DeleteAspNetRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AspNetRole` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAspNetRoleById` mutation."""
input DeleteAspNetRoleByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `AspNetUserClaim` mutation."""
type DeleteAspNetUserClaimPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AspNetUserClaim` that was deleted by this mutation."""
  aspNetUserClaim: AspNetUserClaim
  deletedAspNetUserClaimId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `AspNetUser` that is related to this `AspNetUserClaim`."""
  aspNetUserByUserId: AspNetUser

  """An edge for our `AspNetUserClaim`. May be used by Relay 1."""
  aspNetUserClaimEdge(
    """The method to use when ordering `AspNetUserClaim`."""
    orderBy: [AspNetUserClaimsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AspNetUserClaimsEdge
}

"""All input for the `deleteAspNetUserClaim` mutation."""
input DeleteAspNetUserClaimInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AspNetUserClaim` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAspNetUserClaimById` mutation."""
input DeleteAspNetUserClaimByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `AspNetUserLogin` mutation."""
type DeleteAspNetUserLoginPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AspNetUserLogin` that was deleted by this mutation."""
  aspNetUserLogin: AspNetUserLogin
  deletedAspNetUserLoginId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `AspNetUser` that is related to this `AspNetUserLogin`."""
  aspNetUserByUserId: AspNetUser

  """An edge for our `AspNetUserLogin`. May be used by Relay 1."""
  aspNetUserLoginEdge(
    """The method to use when ordering `AspNetUserLogin`."""
    orderBy: [AspNetUserLoginsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AspNetUserLoginsEdge
}

"""All input for the `deleteAspNetUserLogin` mutation."""
input DeleteAspNetUserLoginInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AspNetUserLogin` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteAspNetUserLoginByLoginProviderAndProviderKey` mutation.
"""
input DeleteAspNetUserLoginByLoginProviderAndProviderKeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  loginProvider: String!
  providerKey: String!
}

"""The output of our delete `AspNetUserRole` mutation."""
type DeleteAspNetUserRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AspNetUserRole` that was deleted by this mutation."""
  aspNetUserRole: AspNetUserRole
  deletedAspNetUserRoleId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `AspNetUser` that is related to this `AspNetUserRole`."""
  aspNetUserByUserId: AspNetUser

  """Reads a single `AspNetRole` that is related to this `AspNetUserRole`."""
  aspNetRoleByRoleId: AspNetRole

  """Reads a single `AspNetUser` that is related to this `AspNetUserRole`."""
  aspNetUserByAppUserId: AspNetUser

  """An edge for our `AspNetUserRole`. May be used by Relay 1."""
  aspNetUserRoleEdge(
    """The method to use when ordering `AspNetUserRole`."""
    orderBy: [AspNetUserRolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AspNetUserRolesEdge
}

"""All input for the `deleteAspNetUserRole` mutation."""
input DeleteAspNetUserRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AspNetUserRole` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAspNetUserRoleByUserIdAndRoleId` mutation."""
input DeleteAspNetUserRoleByUserIdAndRoleIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: String!
  roleId: String!
}

"""The output of our delete `AspNetUserToken` mutation."""
type DeleteAspNetUserTokenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AspNetUserToken` that was deleted by this mutation."""
  aspNetUserToken: AspNetUserToken
  deletedAspNetUserTokenId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `AspNetUser` that is related to this `AspNetUserToken`."""
  aspNetUserByUserId: AspNetUser

  """An edge for our `AspNetUserToken`. May be used by Relay 1."""
  aspNetUserTokenEdge(
    """The method to use when ordering `AspNetUserToken`."""
    orderBy: [AspNetUserTokensOrderBy!] = [PRIMARY_KEY_ASC]
  ): AspNetUserTokensEdge
}

"""All input for the `deleteAspNetUserToken` mutation."""
input DeleteAspNetUserTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AspNetUserToken` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteAspNetUserTokenByUserIdAndLoginProviderAndName` mutation.
"""
input DeleteAspNetUserTokenByUserIdAndLoginProviderAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: String!
  loginProvider: String!
  name: String!
}

"""The output of our delete `AspNetUser` mutation."""
type DeleteAspNetUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AspNetUser` that was deleted by this mutation."""
  aspNetUser: AspNetUser
  deletedAspNetUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `AspNetUser`. May be used by Relay 1."""
  aspNetUserEdge(
    """The method to use when ordering `AspNetUser`."""
    orderBy: [AspNetUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): AspNetUsersEdge
}

"""All input for the `deleteAspNetUser` mutation."""
input DeleteAspNetUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AspNetUser` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAspNetUserById` mutation."""
input DeleteAspNetUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `RefreshToken` mutation."""
type DeleteRefreshTokenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RefreshToken` that was deleted by this mutation."""
  refreshToken: RefreshToken
  deletedRefreshTokenId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `AspNetUser` that is related to this `RefreshToken`."""
  aspNetUserByAppUserId: AspNetUser

  """An edge for our `RefreshToken`. May be used by Relay 1."""
  refreshTokenEdge(
    """The method to use when ordering `RefreshToken`."""
    orderBy: [RefreshTokensOrderBy!] = [PRIMARY_KEY_ASC]
  ): RefreshTokensEdge
}

"""All input for the `deleteRefreshToken` mutation."""
input DeleteRefreshTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RefreshToken` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRefreshTokenById` mutation."""
input DeleteRefreshTokenByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `_Adre` mutation."""
type DeleteAdrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `_Adre` that was deleted by this mutation."""
  _adre: _Adre
  deletedAdreId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `_Adre`. May be used by Relay 1."""
  _adreEdge(
    """The method to use when ordering `_Adre`."""
    orderBy: [_AdresOrderBy!] = [PRIMARY_KEY_ASC]
  ): _AdresEdge
}

"""All input for the `deleteAdre` mutation."""
input DeleteAdreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `_Adre` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAdreByAdresGuid` mutation."""
input DeleteAdreByAdresGuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  adresGuid: String!
}

"""The output of our delete `_Land` mutation."""
type DeleteLandPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `_Land` that was deleted by this mutation."""
  _land: _Land
  deletedLandId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `_Land`. May be used by Relay 1."""
  _landEdge(
    """The method to use when ordering `_Land`."""
    orderBy: [_LandsOrderBy!] = [PRIMARY_KEY_ASC]
  ): _LandsEdge
}

"""All input for the `deleteLand` mutation."""
input DeleteLandInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `_Land` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLandByCdland` mutation."""
input DeleteLandByCdlandInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  cdland: String!
}

"""The output of our delete `Aco` mutation."""
type DeleteAcoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Aco` that was deleted by this mutation."""
  aco: Aco
  deletedAcoId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Aco`. May be used by Relay 1."""
  acoEdge(
    """The method to use when ordering `Aco`."""
    orderBy: [AcosOrderBy!] = [PRIMARY_KEY_ASC]
  ): AcosEdge
}

"""All input for the `deleteAco` mutation."""
input DeleteAcoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Aco` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAcoById` mutation."""
input DeleteAcoByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Action` mutation."""
type DeleteActionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Action` that was deleted by this mutation."""
  action: Action
  deletedActionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Action`."""
  userByUserId: User

  """Reads a single `Group` that is related to this `Action`."""
  groupByGroupId: Group

  """Reads a single `Report` that is related to this `Action`."""
  reportByReportId: Report

  """Reads a single `User` that is related to this `Action`."""
  userByOwnerId: User

  """An edge for our `Action`. May be used by Relay 1."""
  actionEdge(
    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ActionsEdge
}

"""All input for the `deleteAction` mutation."""
input DeleteActionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Action` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteActionById` mutation."""
input DeleteActionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Application` mutation."""
type DeleteApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Application` that was deleted by this mutation."""
  application: Application
  deletedApplicationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Application`."""
  userByOwnerId: User

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the `deleteApplication` mutation."""
input DeleteApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Application` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteApplicationById` mutation."""
input DeleteApplicationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteApplicationByName` mutation."""
input DeleteApplicationByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""The output of our delete `Area` mutation."""
type DeleteAreaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Area` that was deleted by this mutation."""
  area: Area
  deletedAreaId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Floor` that is related to this `Area`."""
  floorByFloorId: Floor

  """Reads a single `User` that is related to this `Area`."""
  userByOwnerId: User

  """An edge for our `Area`. May be used by Relay 1."""
  areaEdge(
    """The method to use when ordering `Area`."""
    orderBy: [AreasOrderBy!] = [PRIMARY_KEY_ASC]
  ): AreasEdge
}

"""All input for the `deleteArea` mutation."""
input DeleteAreaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Area` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAreaById` mutation."""
input DeleteAreaByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteAreaByFloorIdAndName` mutation."""
input DeleteAreaByFloorIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  floorId: Int!
  name: String!
}

"""The output of our delete `Aro` mutation."""
type DeleteAroPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Aro` that was deleted by this mutation."""
  aro: Aro
  deletedAroId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Aro`. May be used by Relay 1."""
  aroEdge(
    """The method to use when ordering `Aro`."""
    orderBy: [ArosOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArosEdge
}

"""All input for the `deleteAro` mutation."""
input DeleteAroInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Aro` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAroById` mutation."""
input DeleteAroByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `ArosAco` mutation."""
type DeleteArosAcoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ArosAco` that was deleted by this mutation."""
  arosAco: ArosAco
  deletedArosAcoId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ArosAco`. May be used by Relay 1."""
  arosAcoEdge(
    """The method to use when ordering `ArosAco`."""
    orderBy: [ArosAcosOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArosAcosEdge
}

"""All input for the `deleteArosAco` mutation."""
input DeleteArosAcoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ArosAco` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteArosAcoById` mutation."""
input DeleteArosAcoByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Artikel` mutation."""
type DeleteArtikelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Artikel` that was deleted by this mutation."""
  artikel: Artikel
  deletedArtikelId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Artikel`. May be used by Relay 1."""
  artikelEdge(
    """The method to use when ordering `Artikel`."""
    orderBy: [ArtikelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArtikelsEdge
}

"""All input for the `deleteArtikel` mutation."""
input DeleteArtikelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Artikel` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteArtikelByCdartikel` mutation."""
input DeleteArtikelByCdartikelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  cdartikel: String!
}

"""The output of our delete `ArtikelLog` mutation."""
type DeleteArtikelLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ArtikelLog` that was deleted by this mutation."""
  artikelLog: ArtikelLog
  deletedArtikelLogId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ArtikelLog`. May be used by Relay 1."""
  artikelLogEdge(
    """The method to use when ordering `ArtikelLog`."""
    orderBy: [ArtikelLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArtikelLogsEdge
}

"""All input for the `deleteArtikelLog` mutation."""
input DeleteArtikelLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ArtikelLog` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteArtikelLogById` mutation."""
input DeleteArtikelLogByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Artikelomschr` mutation."""
type DeleteArtikelomschrPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Artikelomschr` that was deleted by this mutation."""
  artikelomschr: Artikelomschr
  deletedArtikelomschrId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Artikelomschr`. May be used by Relay 1."""
  artikelomschrEdge(
    """The method to use when ordering `Artikelomschr`."""
    orderBy: [ArtikelomschrsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArtikelomschrsEdge
}

"""All input for the `deleteArtikelomschr` mutation."""
input DeleteArtikelomschrInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Artikelomschr` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteArtikelomschrByCdartikelAndCdtaal` mutation."""
input DeleteArtikelomschrByCdartikelAndCdtaalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  cdartikel: String!
  cdtaal: String!
}

"""The output of our delete `Assembly` mutation."""
type DeleteAssemblyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Assembly` that was deleted by this mutation."""
  assembly: Assembly
  deletedAssemblyId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `AssemblyType` that is related to this `Assembly`."""
  assemblyTypeByAssemblyTypeId: AssemblyType

  """Reads a single `User` that is related to this `Assembly`."""
  userByOwnerId: User

  """An edge for our `Assembly`. May be used by Relay 1."""
  assemblyEdge(
    """The method to use when ordering `Assembly`."""
    orderBy: [AssembliesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssembliesEdge
}

"""All input for the `deleteAssembly` mutation."""
input DeleteAssemblyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Assembly` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAssemblyById` mutation."""
input DeleteAssemblyByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteAssemblyByCode` mutation."""
input DeleteAssemblyByCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  code: String!
}

"""The output of our delete `AssemblyPart` mutation."""
type DeleteAssemblyPartPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AssemblyPart` that was deleted by this mutation."""
  assemblyPart: AssemblyPart
  deletedAssemblyPartId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `AssemblyPart`."""
  userByOwnerId: User

  """An edge for our `AssemblyPart`. May be used by Relay 1."""
  assemblyPartEdge(
    """The method to use when ordering `AssemblyPart`."""
    orderBy: [AssemblyPartsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssemblyPartsEdge
}

"""All input for the `deleteAssemblyPart` mutation."""
input DeleteAssemblyPartInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AssemblyPart` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAssemblyPartById` mutation."""
input DeleteAssemblyPartByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteAssemblyPartByAssemblyIdAndCdartikel` mutation.
"""
input DeleteAssemblyPartByAssemblyIdAndCdartikelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  assemblyId: Int!
  cdartikel: String!
}

"""The output of our delete `AssemblyTypePart` mutation."""
type DeleteAssemblyTypePartPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AssemblyTypePart` that was deleted by this mutation."""
  assemblyTypePart: AssemblyTypePart
  deletedAssemblyTypePartId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `AssemblyType` that is related to this `AssemblyTypePart`.
  """
  assemblyTypeByAssemblyTypeId: AssemblyType

  """Reads a single `User` that is related to this `AssemblyTypePart`."""
  userByOwnerId: User

  """An edge for our `AssemblyTypePart`. May be used by Relay 1."""
  assemblyTypePartEdge(
    """The method to use when ordering `AssemblyTypePart`."""
    orderBy: [AssemblyTypePartsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssemblyTypePartsEdge
}

"""All input for the `deleteAssemblyTypePart` mutation."""
input DeleteAssemblyTypePartInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AssemblyTypePart` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAssemblyTypePartById` mutation."""
input DeleteAssemblyTypePartByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteAssemblyTypePartByAssemblyTypeIdAndCdartikel` mutation.
"""
input DeleteAssemblyTypePartByAssemblyTypeIdAndCdartikelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  assemblyTypeId: Int!
  cdartikel: String!
}

"""The output of our delete `AssemblyType` mutation."""
type DeleteAssemblyTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AssemblyType` that was deleted by this mutation."""
  assemblyType: AssemblyType
  deletedAssemblyTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `AssemblyType`."""
  userByOwnerId: User

  """Reads a single `Artikel` that is related to this `AssemblyType`."""
  artikelByCdartikel: Artikel

  """An edge for our `AssemblyType`. May be used by Relay 1."""
  assemblyTypeEdge(
    """The method to use when ordering `AssemblyType`."""
    orderBy: [AssemblyTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssemblyTypesEdge
}

"""All input for the `deleteAssemblyType` mutation."""
input DeleteAssemblyTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AssemblyType` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAssemblyTypeById` mutation."""
input DeleteAssemblyTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Building` mutation."""
type DeleteBuildingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Building` that was deleted by this mutation."""
  building: Building
  deletedBuildingId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `EndUser` that is related to this `Building`."""
  endUserByEndUserId: EndUser

  """Reads a single `User` that is related to this `Building`."""
  userByOwnerId: User

  """An edge for our `Building`. May be used by Relay 1."""
  buildingEdge(
    """The method to use when ordering `Building`."""
    orderBy: [BuildingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BuildingsEdge
}

"""All input for the `deleteBuilding` mutation."""
input DeleteBuildingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Building` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteBuildingById` mutation."""
input DeleteBuildingByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteBuildingByEndUserIdAndName` mutation."""
input DeleteBuildingByEndUserIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  endUserId: Int!
  name: String!
}

"""The output of our delete `CalGas` mutation."""
type DeleteCalGasPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CalGas` that was deleted by this mutation."""
  calGas: CalGas
  deletedCalGasId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Gas` that is related to this `CalGas`."""
  gasByGasId: Gas

  """Reads a single `User` that is related to this `CalGas`."""
  userByOwnerId: User

  """An edge for our `CalGas`. May be used by Relay 1."""
  calGasEdge(
    """The method to use when ordering `CalGas`."""
    orderBy: [CalGasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CalGasesEdge
}

"""All input for the `deleteCalGas` mutation."""
input DeleteCalGasInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CalGas` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCalGasById` mutation."""
input DeleteCalGasByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteCalGasByConcentrationAndEngineeringUnitsAndGasId` mutation.
"""
input DeleteCalGasByConcentrationAndEngineeringUnitsAndGasIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  concentration: Float!
  engineeringUnits: String!
  gasId: Int!
}

"""The output of our delete `CatalogGroup` mutation."""
type DeleteCatalogGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CatalogGroup` that was deleted by this mutation."""
  catalogGroup: CatalogGroup
  deletedCatalogGroupId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CatalogGroup`."""
  userByOwnerId: User

  """An edge for our `CatalogGroup`. May be used by Relay 1."""
  catalogGroupEdge(
    """The method to use when ordering `CatalogGroup`."""
    orderBy: [CatalogGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CatalogGroupsEdge
}

"""All input for the `deleteCatalogGroup` mutation."""
input DeleteCatalogGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CatalogGroup` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCatalogGroupById` mutation."""
input DeleteCatalogGroupByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `CatalogItemFile` mutation."""
type DeleteCatalogItemFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CatalogItemFile` that was deleted by this mutation."""
  catalogItemFile: CatalogItemFile
  deletedCatalogItemFileId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CatalogItemFile`."""
  userByOwnerId: User

  """
  Reads a single `CatalogItem` that is related to this `CatalogItemFile`.
  """
  catalogItemByCatalogItemId: CatalogItem

  """An edge for our `CatalogItemFile`. May be used by Relay 1."""
  catalogItemFileEdge(
    """The method to use when ordering `CatalogItemFile`."""
    orderBy: [CatalogItemFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CatalogItemFilesEdge
}

"""All input for the `deleteCatalogItemFile` mutation."""
input DeleteCatalogItemFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CatalogItemFile` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCatalogItemFileById` mutation."""
input DeleteCatalogItemFileByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `CatalogItemRelation` mutation."""
type DeleteCatalogItemRelationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CatalogItemRelation` that was deleted by this mutation."""
  catalogItemRelation: CatalogItemRelation
  deletedCatalogItemRelationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CatalogItem` that is related to this `CatalogItemRelation`.
  """
  catalogItemByParentCatalogItemId: CatalogItem

  """
  Reads a single `CatalogItem` that is related to this `CatalogItemRelation`.
  """
  catalogItemByChildCatalogItemId: CatalogItem

  """An edge for our `CatalogItemRelation`. May be used by Relay 1."""
  catalogItemRelationEdge(
    """The method to use when ordering `CatalogItemRelation`."""
    orderBy: [CatalogItemRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CatalogItemRelationsEdge
}

"""All input for the `deleteCatalogItemRelation` mutation."""
input DeleteCatalogItemRelationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CatalogItemRelation` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCatalogItemRelationById` mutation."""
input DeleteCatalogItemRelationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `CatalogItem` mutation."""
type DeleteCatalogItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CatalogItem` that was deleted by this mutation."""
  catalogItem: CatalogItem
  deletedCatalogItemId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CatalogSubGroup` that is related to this `CatalogItem`.
  """
  catalogSubGroupByCatalogSubGroupId: CatalogSubGroup

  """Reads a single `User` that is related to this `CatalogItem`."""
  userByOwnerId: User

  """An edge for our `CatalogItem`. May be used by Relay 1."""
  catalogItemEdge(
    """The method to use when ordering `CatalogItem`."""
    orderBy: [CatalogItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CatalogItemsEdge
}

"""All input for the `deleteCatalogItem` mutation."""
input DeleteCatalogItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CatalogItem` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCatalogItemById` mutation."""
input DeleteCatalogItemByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `CatalogSubGroup` mutation."""
type DeleteCatalogSubGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CatalogSubGroup` that was deleted by this mutation."""
  catalogSubGroup: CatalogSubGroup
  deletedCatalogSubGroupId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CatalogSubGroup`."""
  userByOwnerId: User

  """
  Reads a single `CatalogGroup` that is related to this `CatalogSubGroup`.
  """
  catalogGroupByCatalogGroupId: CatalogGroup

  """An edge for our `CatalogSubGroup`. May be used by Relay 1."""
  catalogSubGroupEdge(
    """The method to use when ordering `CatalogSubGroup`."""
    orderBy: [CatalogSubGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CatalogSubGroupsEdge
}

"""All input for the `deleteCatalogSubGroup` mutation."""
input DeleteCatalogSubGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CatalogSubGroup` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCatalogSubGroupById` mutation."""
input DeleteCatalogSubGroupByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `ChemicalCompound` mutation."""
type DeleteChemicalCompoundPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChemicalCompound` that was deleted by this mutation."""
  chemicalCompound: ChemicalCompound
  deletedChemicalCompoundId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `ChemicalCompound`."""
  userByOwnerId: User

  """An edge for our `ChemicalCompound`. May be used by Relay 1."""
  chemicalCompoundEdge(
    """The method to use when ordering `ChemicalCompound`."""
    orderBy: [ChemicalCompoundsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChemicalCompoundsEdge
}

"""All input for the `deleteChemicalCompound` mutation."""
input DeleteChemicalCompoundInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChemicalCompound` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteChemicalCompoundById` mutation."""
input DeleteChemicalCompoundByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `DetectorLocation` mutation."""
type DeleteDetectorLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DetectorLocation` that was deleted by this mutation."""
  detectorLocation: DetectorLocation
  deletedDetectorLocationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Detector` that is related to this `DetectorLocation`."""
  detectorByDetectorId: Detector

  """Reads a single `Area` that is related to this `DetectorLocation`."""
  areaByAreaId: Area

  """Reads a single `User` that is related to this `DetectorLocation`."""
  userByOwnerId: User

  """An edge for our `DetectorLocation`. May be used by Relay 1."""
  detectorLocationEdge(
    """The method to use when ordering `DetectorLocation`."""
    orderBy: [DetectorLocationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorLocationsEdge
}

"""All input for the `deleteDetectorLocation` mutation."""
input DeleteDetectorLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DetectorLocation` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDetectorLocationById` mutation."""
input DeleteDetectorLocationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteDetectorLocationByDetectorId` mutation."""
input DeleteDetectorLocationByDetectorIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  detectorId: Int!
}

"""The output of our delete `DetectorOrder` mutation."""
type DeleteDetectorOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DetectorOrder` that was deleted by this mutation."""
  detectorOrder: DetectorOrder
  deletedDetectorOrderId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Detector` that is related to this `DetectorOrder`."""
  detectorByDetectorId: Detector

  """Reads a single `User` that is related to this `DetectorOrder`."""
  userByOwnerId: User

  """An edge for our `DetectorOrder`. May be used by Relay 1."""
  detectorOrderEdge(
    """The method to use when ordering `DetectorOrder`."""
    orderBy: [DetectorOrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorOrdersEdge
}

"""All input for the `deleteDetectorOrder` mutation."""
input DeleteDetectorOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DetectorOrder` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDetectorOrderById` mutation."""
input DeleteDetectorOrderByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteDetectorOrderByFactuuropdrachtAndDetectorId` mutation.
"""
input DeleteDetectorOrderByFactuuropdrachtAndDetectorIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  factuuropdracht: String!
  detectorId: Int!
}

"""The output of our delete `DetectorSensorLocation` mutation."""
type DeleteDetectorSensorLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DetectorSensorLocation` that was deleted by this mutation."""
  detectorSensorLocation: DetectorSensorLocation
  deletedDetectorSensorLocationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `DetectorSensor` that is related to this `DetectorSensorLocation`.
  """
  detectorSensorByDetectorSensorId: DetectorSensor

  """
  Reads a single `DetectorLocation` that is related to this `DetectorSensorLocation`.
  """
  detectorLocationByDetectorLocationId: DetectorLocation

  """
  Reads a single `User` that is related to this `DetectorSensorLocation`.
  """
  userByOwnerId: User

  """
  Reads a single `SamplePoint` that is related to this `DetectorSensorLocation`.
  """
  samplePointBySamplePointId: SamplePoint

  """
  Reads a single `Application` that is related to this `DetectorSensorLocation`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `License` that is related to this `DetectorSensorLocation`.
  """
  licenseByLicenseId: License

  """An edge for our `DetectorSensorLocation`. May be used by Relay 1."""
  detectorSensorLocationEdge(
    """The method to use when ordering `DetectorSensorLocation`."""
    orderBy: [DetectorSensorLocationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorSensorLocationsEdge
}

"""All input for the `deleteDetectorSensorLocation` mutation."""
input DeleteDetectorSensorLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DetectorSensorLocation` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDetectorSensorLocationById` mutation."""
input DeleteDetectorSensorLocationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteDetectorSensorLocationByDetectorSensorId` mutation.
"""
input DeleteDetectorSensorLocationByDetectorSensorIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  detectorSensorId: Int!
}

"""
All input for the `deleteDetectorSensorLocationByLicenseIdAndSimsChannel` mutation.
"""
input DeleteDetectorSensorLocationByLicenseIdAndSimsChannelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  licenseId: Int!
  simsChannel: Int!
}

"""The output of our delete `DetectorSensorType` mutation."""
type DeleteDetectorSensorTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DetectorSensorType` that was deleted by this mutation."""
  detectorSensorType: DetectorSensorType
  deletedDetectorSensorTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SensorType` that is related to this `DetectorSensorType`.
  """
  sensorTypeBySensorTypeId: SensorType

  """Reads a single `User` that is related to this `DetectorSensorType`."""
  userByOwnerId: User

  """An edge for our `DetectorSensorType`. May be used by Relay 1."""
  detectorSensorTypeEdge(
    """The method to use when ordering `DetectorSensorType`."""
    orderBy: [DetectorSensorTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorSensorTypesEdge
}

"""All input for the `deleteDetectorSensorType` mutation."""
input DeleteDetectorSensorTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DetectorSensorType` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDetectorSensorTypeById` mutation."""
input DeleteDetectorSensorTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteDetectorSensorTypeByDetectorIdAndDetectorPosition` mutation.
"""
input DeleteDetectorSensorTypeByDetectorIdAndDetectorPositionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  detectorId: Int!
  detectorPosition: Int!
}

"""The output of our delete `DetectorSensor` mutation."""
type DeleteDetectorSensorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DetectorSensor` that was deleted by this mutation."""
  detectorSensor: DetectorSensor
  deletedDetectorSensorId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Detector` that is related to this `DetectorSensor`."""
  detectorByDetectorId: Detector

  """Reads a single `Sensor` that is related to this `DetectorSensor`."""
  sensorBySensorId: Sensor

  """Reads a single `Filter` that is related to this `DetectorSensor`."""
  filterByFilterId: Filter

  """Reads a single `Pyrolyser` that is related to this `DetectorSensor`."""
  pyrolyserByPyrolyserId: Pyrolyser

  """Reads a single `User` that is related to this `DetectorSensor`."""
  userByOwnerId: User

  """An edge for our `DetectorSensor`. May be used by Relay 1."""
  detectorSensorEdge(
    """The method to use when ordering `DetectorSensor`."""
    orderBy: [DetectorSensorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorSensorsEdge
}

"""All input for the `deleteDetectorSensor` mutation."""
input DeleteDetectorSensorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DetectorSensor` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDetectorSensorById` mutation."""
input DeleteDetectorSensorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteDetectorSensorByDetectorIdAndDetectorPosition` mutation.
"""
input DeleteDetectorSensorByDetectorIdAndDetectorPositionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  detectorId: Int!
  detectorPosition: Int!
}

"""All input for the `deleteDetectorSensorBySensorId` mutation."""
input DeleteDetectorSensorBySensorIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sensorId: Int!
}

"""The output of our delete `DetectorType` mutation."""
type DeleteDetectorTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DetectorType` that was deleted by this mutation."""
  detectorType: DetectorType
  deletedDetectorTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `DetectorType`."""
  userByOwnerId: User

  """An edge for our `DetectorType`. May be used by Relay 1."""
  detectorTypeEdge(
    """The method to use when ordering `DetectorType`."""
    orderBy: [DetectorTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorTypesEdge
}

"""All input for the `deleteDetectorType` mutation."""
input DeleteDetectorTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DetectorType` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDetectorTypeById` mutation."""
input DeleteDetectorTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteDetectorTypeByPrefixAndCodeAndSuffix` mutation.
"""
input DeleteDetectorTypeByPrefixAndCodeAndSuffixInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  prefix: String!
  code: String!
  suffix: String!
}

"""The output of our delete `Detector` mutation."""
type DeleteDetectorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Detector` that was deleted by this mutation."""
  detector: Detector
  deletedDetectorId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `DetectorType` that is related to this `Detector`."""
  detectorTypeByDetectorTypeId: DetectorType

  """Reads a single `User` that is related to this `Detector`."""
  userByOwnerId: User

  """An edge for our `Detector`. May be used by Relay 1."""
  detectorEdge(
    """The method to use when ordering `Detector`."""
    orderBy: [DetectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorsEdge
}

"""All input for the `deleteDetector` mutation."""
input DeleteDetectorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Detector` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDetectorById` mutation."""
input DeleteDetectorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteDetectorBySerialNumberAndDetectorTypeId` mutation.
"""
input DeleteDetectorBySerialNumberAndDetectorTypeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  serialNumber: String!
  detectorTypeId: Int!
}

"""The output of our delete `DpCard` mutation."""
type DeleteDpCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DpCard` that was deleted by this mutation."""
  dpCard: DpCard
  deletedDpCardId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `DpCard`."""
  userByOwnerId: User

  """An edge for our `DpCard`. May be used by Relay 1."""
  dpCardEdge(
    """The method to use when ordering `DpCard`."""
    orderBy: [DpCardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DpCardsEdge
}

"""All input for the `deleteDpCard` mutation."""
input DeleteDpCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DpCard` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDpCardById` mutation."""
input DeleteDpCardByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Electrolyte` mutation."""
type DeleteElectrolytePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Electrolyte` that was deleted by this mutation."""
  electrolyte: Electrolyte
  deletedElectrolyteId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Electrolyte`."""
  userByOwnerId: User

  """An edge for our `Electrolyte`. May be used by Relay 1."""
  electrolyteEdge(
    """The method to use when ordering `Electrolyte`."""
    orderBy: [ElectrolytesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ElectrolytesEdge
}

"""All input for the `deleteElectrolyte` mutation."""
input DeleteElectrolyteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Electrolyte` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteElectrolyteById` mutation."""
input DeleteElectrolyteByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteElectrolyteByName` mutation."""
input DeleteElectrolyteByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""The output of our delete `EndUser` mutation."""
type DeleteEndUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EndUser` that was deleted by this mutation."""
  endUser: EndUser
  deletedEndUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `EndUser`."""
  userByOwnerId: User

  """An edge for our `EndUser`. May be used by Relay 1."""
  endUserEdge(
    """The method to use when ordering `EndUser`."""
    orderBy: [EndUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): EndUsersEdge
}

"""All input for the `deleteEndUser` mutation."""
input DeleteEndUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EndUser` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteEndUserById` mutation."""
input DeleteEndUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteEndUserByNameAndLocationAndSubLocation` mutation.
"""
input DeleteEndUserByNameAndLocationAndSubLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
  location: String!
  subLocation: String!
}

"""The output of our delete `FactopdrachtArtikelExclusion` mutation."""
type DeleteFactopdrachtArtikelExclusionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FactopdrachtArtikelExclusion` that was deleted by this mutation."""
  factopdrachtArtikelExclusion: FactopdrachtArtikelExclusion
  deletedFactopdrachtArtikelExclusionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `FactopdrachtArtikelExclusion`. May be used by Relay 1.
  """
  factopdrachtArtikelExclusionEdge(
    """The method to use when ordering `FactopdrachtArtikelExclusion`."""
    orderBy: [FactopdrachtArtikelExclusionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FactopdrachtArtikelExclusionsEdge
}

"""All input for the `deleteFactopdrachtArtikelExclusion` mutation."""
input DeleteFactopdrachtArtikelExclusionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FactopdrachtArtikelExclusion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFactopdrachtArtikelExclusionById` mutation."""
input DeleteFactopdrachtArtikelExclusionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteFactopdrachtArtikelExclusionByFactuuropdrachtAndCdartikel` mutation.
"""
input DeleteFactopdrachtArtikelExclusionByFactuuropdrachtAndCdartikelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  factuuropdracht: String!
  cdartikel: String!
}

"""The output of our delete `FactopdrachtregelLineDate` mutation."""
type DeleteFactopdrachtregelLineDatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FactopdrachtregelLineDate` that was deleted by this mutation."""
  factopdrachtregelLineDate: FactopdrachtregelLineDate
  deletedFactopdrachtregelLineDateId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FactopdrachtregelLineDate`. May be used by Relay 1."""
  factopdrachtregelLineDateEdge(
    """The method to use when ordering `FactopdrachtregelLineDate`."""
    orderBy: [FactopdrachtregelLineDatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FactopdrachtregelLineDatesEdge
}

"""All input for the `deleteFactopdrachtregelLineDate` mutation."""
input DeleteFactopdrachtregelLineDateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FactopdrachtregelLineDate` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFactopdrachtregelLineDateById` mutation."""
input DeleteFactopdrachtregelLineDateByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `FactopdrachtregelLineRemark` mutation."""
type DeleteFactopdrachtregelLineRemarkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FactopdrachtregelLineRemark` that was deleted by this mutation."""
  factopdrachtregelLineRemark: FactopdrachtregelLineRemark
  deletedFactopdrachtregelLineRemarkId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `FactopdrachtregelLineRemark`.
  """
  userByUserId: User

  """An edge for our `FactopdrachtregelLineRemark`. May be used by Relay 1."""
  factopdrachtregelLineRemarkEdge(
    """The method to use when ordering `FactopdrachtregelLineRemark`."""
    orderBy: [FactopdrachtregelLineRemarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): FactopdrachtregelLineRemarksEdge
}

"""All input for the `deleteFactopdrachtregelLineRemark` mutation."""
input DeleteFactopdrachtregelLineRemarkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FactopdrachtregelLineRemark` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFactopdrachtregelLineRemarkById` mutation."""
input DeleteFactopdrachtregelLineRemarkByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `FactopdrachtregelLine` mutation."""
type DeleteFactopdrachtregelLinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FactopdrachtregelLine` that was deleted by this mutation."""
  factopdrachtregelLine: FactopdrachtregelLine
  deletedFactopdrachtregelLineId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FactopdrachtregelLine`. May be used by Relay 1."""
  factopdrachtregelLineEdge(
    """The method to use when ordering `FactopdrachtregelLine`."""
    orderBy: [FactopdrachtregelLinesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FactopdrachtregelLinesEdge
}

"""All input for the `deleteFactopdrachtregelLine` mutation."""
input DeleteFactopdrachtregelLineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FactopdrachtregelLine` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteFactopdrachtregelLineByFactopdrRglGuid` mutation.
"""
input DeleteFactopdrachtregelLineByFactopdrRglGuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  factopdrRglGuid: String!
}

"""All input for the `deleteFactopdrachtregelLineById` mutation."""
input DeleteFactopdrachtregelLineByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Factuur` mutation."""
type DeleteFactuurPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Factuur` that was deleted by this mutation."""
  factuur: Factuur
  deletedFactuurId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Factuur`."""
  userByOwnerId: User

  """Reads a single `User` that is related to this `Factuur`."""
  userByCheckedId: User

  """Reads a single `User` that is related to this `Factuur`."""
  userBySentId: User

  """An edge for our `Factuur`. May be used by Relay 1."""
  factuurEdge(
    """The method to use when ordering `Factuur`."""
    orderBy: [FactuursOrderBy!] = [PRIMARY_KEY_ASC]
  ): FactuursEdge
}

"""All input for the `deleteFactuur` mutation."""
input DeleteFactuurInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Factuur` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFactuurById` mutation."""
input DeleteFactuurByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteFactuurByFactuuropdracht` mutation."""
input DeleteFactuurByFactuuropdrachtInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  factuuropdracht: String!
}

"""The output of our delete `Filter` mutation."""
type DeleteFilterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Filter` that was deleted by this mutation."""
  filter: Filter
  deletedFilterId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Filter`."""
  userByOwnerId: User

  """An edge for our `Filter`. May be used by Relay 1."""
  filterEdge(
    """The method to use when ordering `Filter`."""
    orderBy: [FiltersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FiltersEdge
}

"""All input for the `deleteFilter` mutation."""
input DeleteFilterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Filter` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFilterById` mutation."""
input DeleteFilterByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteFilterByName` mutation."""
input DeleteFilterByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""The output of our delete `Floor` mutation."""
type DeleteFloorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Floor` that was deleted by this mutation."""
  floor: Floor
  deletedFloorId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Building` that is related to this `Floor`."""
  buildingByBuildingId: Building

  """Reads a single `User` that is related to this `Floor`."""
  userByOwnerId: User

  """An edge for our `Floor`. May be used by Relay 1."""
  floorEdge(
    """The method to use when ordering `Floor`."""
    orderBy: [FloorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FloorsEdge
}

"""All input for the `deleteFloor` mutation."""
input DeleteFloorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Floor` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFloorById` mutation."""
input DeleteFloorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteFloorByBuildingIdAndName` mutation."""
input DeleteFloorByBuildingIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  buildingId: Int!
  name: String!
}

"""The output of our delete `Gas` mutation."""
type DeleteGasPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Gas` that was deleted by this mutation."""
  gas: Gas
  deletedGasId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Gas`."""
  userByOwnerId: User

  """Reads a single `ChemicalCompound` that is related to this `Gas`."""
  chemicalCompoundByChemicalCompoundId: ChemicalCompound

  """An edge for our `Gas`. May be used by Relay 1."""
  gasEdge(
    """The method to use when ordering `Gas`."""
    orderBy: [GasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GasesEdge
}

"""All input for the `deleteGas` mutation."""
input DeleteGasInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Gas` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGasById` mutation."""
input DeleteGasByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteGasByName` mutation."""
input DeleteGasByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""The output of our delete `GroupPermission` mutation."""
type DeleteGroupPermissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GroupPermission` that was deleted by this mutation."""
  groupPermission: GroupPermission
  deletedGroupPermissionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `GroupPermission`."""
  groupByGroupId: Group

  """An edge for our `GroupPermission`. May be used by Relay 1."""
  groupPermissionEdge(
    """The method to use when ordering `GroupPermission`."""
    orderBy: [GroupPermissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupPermissionsEdge
}

"""All input for the `deleteGroupPermission` mutation."""
input DeleteGroupPermissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GroupPermission` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGroupPermissionById` mutation."""
input DeleteGroupPermissionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteGroupPermissionByGroupId` mutation."""
input DeleteGroupPermissionByGroupIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int!
}

"""The output of our delete `GroupRight` mutation."""
type DeleteGroupRightPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GroupRight` that was deleted by this mutation."""
  groupRight: GroupRight
  deletedGroupRightId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `GroupRight`."""
  groupByGroupId: Group

  """An edge for our `GroupRight`. May be used by Relay 1."""
  groupRightEdge(
    """The method to use when ordering `GroupRight`."""
    orderBy: [GroupRightsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupRightsEdge
}

"""All input for the `deleteGroupRight` mutation."""
input DeleteGroupRightInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GroupRight` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGroupRightById` mutation."""
input DeleteGroupRightByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteGroupRightByGroupIdAndPath` mutation."""
input DeleteGroupRightByGroupIdAndPathInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int!
  path: String!
}

"""The output of our delete `Group` mutation."""
type DeleteGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was deleted by this mutation."""
  group: Group
  deletedGroupId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Group`."""
  userByOwnerId: User

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsEdge
}

"""All input for the `deleteGroup` mutation."""
input DeleteGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Group` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGroupById` mutation."""
input DeleteGroupByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Hardware` mutation."""
type DeleteHardwarePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Hardware` that was deleted by this mutation."""
  hardware: Hardware
  deletedHardwareId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Hardware`."""
  userByUserId: User

  """Reads a single `User` that is related to this `Hardware`."""
  userByOwnerId: User

  """An edge for our `Hardware`. May be used by Relay 1."""
  hardwareEdge(
    """The method to use when ordering `Hardware`."""
    orderBy: [HardwaresOrderBy!] = [PRIMARY_KEY_ASC]
  ): HardwaresEdge
}

"""All input for the `deleteHardware` mutation."""
input DeleteHardwareInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Hardware` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteHardwareById` mutation."""
input DeleteHardwareByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `IncomingDocument` mutation."""
type DeleteIncomingDocumentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `IncomingDocument` that was deleted by this mutation."""
  incomingDocument: IncomingDocument
  deletedIncomingDocumentId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `IncomingDocument`."""
  userByOwnerId: User

  """Reads a single `User` that is related to this `IncomingDocument`."""
  userByUserId: User

  """An edge for our `IncomingDocument`. May be used by Relay 1."""
  incomingDocumentEdge(
    """The method to use when ordering `IncomingDocument`."""
    orderBy: [IncomingDocumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): IncomingDocumentsEdge
}

"""All input for the `deleteIncomingDocument` mutation."""
input DeleteIncomingDocumentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `IncomingDocument` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteIncomingDocumentById` mutation."""
input DeleteIncomingDocumentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Inkoopgegeven` mutation."""
type DeleteInkoopgegevenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Inkoopgegeven` that was deleted by this mutation."""
  inkoopgegeven: Inkoopgegeven
  deletedInkoopgegevenId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Inkoopgegeven`. May be used by Relay 1."""
  inkoopgegevenEdge(
    """The method to use when ordering `Inkoopgegeven`."""
    orderBy: [InkoopgegevensOrderBy!] = [PRIMARY_KEY_ASC]
  ): InkoopgegevensEdge
}

"""All input for the `deleteInkoopgegeven` mutation."""
input DeleteInkoopgegevenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Inkoopgegeven` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteInkoopgegevenByCdartikelAndInkvolgnr` mutation.
"""
input DeleteInkoopgegevenByCdartikelAndInkvolgnrInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  cdartikel: String!
  inkvolgnr: Int!
}

"""The output of our delete `InkoopgegevensLog` mutation."""
type DeleteInkoopgegevensLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InkoopgegevensLog` that was deleted by this mutation."""
  inkoopgegevensLog: InkoopgegevensLog
  deletedInkoopgegevensLogId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `InkoopgegevensLog`. May be used by Relay 1."""
  inkoopgegevensLogEdge(
    """The method to use when ordering `InkoopgegevensLog`."""
    orderBy: [InkoopgegevensLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InkoopgegevensLogsEdge
}

"""All input for the `deleteInkoopgegevensLog` mutation."""
input DeleteInkoopgegevensLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `InkoopgegevensLog` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteInkoopgegevensLogById` mutation."""
input DeleteInkoopgegevensLogByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `InkooporderregelLine` mutation."""
type DeleteInkooporderregelLinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InkooporderregelLine` that was deleted by this mutation."""
  inkooporderregelLine: InkooporderregelLine
  deletedInkooporderregelLineId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `InkooporderregelLine`. May be used by Relay 1."""
  inkooporderregelLineEdge(
    """The method to use when ordering `InkooporderregelLine`."""
    orderBy: [InkooporderregelLinesOrderBy!] = [PRIMARY_KEY_ASC]
  ): InkooporderregelLinesEdge
}

"""All input for the `deleteInkooporderregelLine` mutation."""
input DeleteInkooporderregelLineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `InkooporderregelLine` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteInkooporderregelLineByInkopdrRglGuid` mutation.
"""
input DeleteInkooporderregelLineByInkopdrRglGuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  inkopdrRglGuid: String!
}

"""All input for the `deleteInkooporderregelLineById` mutation."""
input DeleteInkooporderregelLineByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Item` mutation."""
type DeleteItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Item` that was deleted by this mutation."""
  item: Item
  deletedItemId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Item`."""
  userByOwnerId: User

  """Reads a single `EndUser` that is related to this `Item`."""
  endUserByEndUserId: EndUser

  """An edge for our `Item`. May be used by Relay 1."""
  itemEdge(
    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsEdge
}

"""All input for the `deleteItem` mutation."""
input DeleteItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Item` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteItemById` mutation."""
input DeleteItemByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteItemByCdartikelAndSerialNumber` mutation."""
input DeleteItemByCdartikelAndSerialNumberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  cdartikel: String!
  serialNumber: String!
}

"""The output of our delete `Job` mutation."""
type DeleteJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Job` that was deleted by this mutation."""
  job: Job
  deletedJobId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `EndUser` that is related to this `Job`."""
  endUserByEndUserId: EndUser

  """Reads a single `User` that is related to this `Job`."""
  userByOwnerId: User

  """An edge for our `Job`. May be used by Relay 1."""
  jobEdge(
    """The method to use when ordering `Job`."""
    orderBy: [JobsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JobsEdge
}

"""All input for the `deleteJob` mutation."""
input DeleteJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Job` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteJobById` mutation."""
input DeleteJobByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `JunctionBox` mutation."""
type DeleteJunctionBoxPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `JunctionBox` that was deleted by this mutation."""
  junctionBox: JunctionBox
  deletedJunctionBoxId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `JunctionBox`."""
  userByOwnerId: User

  """An edge for our `JunctionBox`. May be used by Relay 1."""
  junctionBoxEdge(
    """The method to use when ordering `JunctionBox`."""
    orderBy: [JunctionBoxesOrderBy!] = [PRIMARY_KEY_ASC]
  ): JunctionBoxesEdge
}

"""All input for the `deleteJunctionBox` mutation."""
input DeleteJunctionBoxInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `JunctionBox` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteJunctionBoxById` mutation."""
input DeleteJunctionBoxByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Lead` mutation."""
type DeleteLeadPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Lead` that was deleted by this mutation."""
  lead: Lead
  deletedLeadId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Lead`."""
  userByOwnerId: User

  """An edge for our `Lead`. May be used by Relay 1."""
  leadEdge(
    """The method to use when ordering `Lead`."""
    orderBy: [LeadsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LeadsEdge
}

"""All input for the `deleteLead` mutation."""
input DeleteLeadInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Lead` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLeadById` mutation."""
input DeleteLeadByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `LicenseCustomer` mutation."""
type DeleteLicenseCustomerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LicenseCustomer` that was deleted by this mutation."""
  licenseCustomer: LicenseCustomer
  deletedLicenseCustomerId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `LicenseCustomer`."""
  userByOwnerId: User

  """An edge for our `LicenseCustomer`. May be used by Relay 1."""
  licenseCustomerEdge(
    """The method to use when ordering `LicenseCustomer`."""
    orderBy: [LicenseCustomersOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicenseCustomersEdge
}

"""All input for the `deleteLicenseCustomer` mutation."""
input DeleteLicenseCustomerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LicenseCustomer` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLicenseCustomerById` mutation."""
input DeleteLicenseCustomerByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `LicenseModule` mutation."""
type DeleteLicenseModulePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LicenseModule` that was deleted by this mutation."""
  licenseModule: LicenseModule
  deletedLicenseModuleId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `LicenseModule`."""
  userByOwnerId: User

  """An edge for our `LicenseModule`. May be used by Relay 1."""
  licenseModuleEdge(
    """The method to use when ordering `LicenseModule`."""
    orderBy: [LicenseModulesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicenseModulesEdge
}

"""All input for the `deleteLicenseModule` mutation."""
input DeleteLicenseModuleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LicenseModule` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLicenseModuleById` mutation."""
input DeleteLicenseModuleByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `LicenseOrder` mutation."""
type DeleteLicenseOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LicenseOrder` that was deleted by this mutation."""
  licenseOrder: LicenseOrder
  deletedLicenseOrderId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `License` that is related to this `LicenseOrder`."""
  licenseByLicenseId: License

  """
  Reads a single `LicenseRegistration` that is related to this `LicenseOrder`.
  """
  licenseRegistrationByLicenseRegistrationId: LicenseRegistration

  """Reads a single `User` that is related to this `LicenseOrder`."""
  userByOwnerId: User

  """An edge for our `LicenseOrder`. May be used by Relay 1."""
  licenseOrderEdge(
    """The method to use when ordering `LicenseOrder`."""
    orderBy: [LicenseOrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicenseOrdersEdge
}

"""All input for the `deleteLicenseOrder` mutation."""
input DeleteLicenseOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LicenseOrder` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLicenseOrderById` mutation."""
input DeleteLicenseOrderByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteLicenseOrderByLicenseIdAndFactuuropdracht` mutation.
"""
input DeleteLicenseOrderByLicenseIdAndFactuuropdrachtInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  licenseId: Int!
  factuuropdracht: String!
}

"""
All input for the `deleteLicenseOrderByLicenseRegistrationIdAndFactuuropdracht` mutation.
"""
input DeleteLicenseOrderByLicenseRegistrationIdAndFactuuropdrachtInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  licenseRegistrationId: Int!
  factuuropdracht: String!
}

"""The output of our delete `LicenseRegistration` mutation."""
type DeleteLicenseRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LicenseRegistration` that was deleted by this mutation."""
  licenseRegistration: LicenseRegistration
  deletedLicenseRegistrationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `License` that is related to this `LicenseRegistration`.
  """
  licenseByLicenseId: License

  """Reads a single `User` that is related to this `LicenseRegistration`."""
  userByOwnerId: User

  """An edge for our `LicenseRegistration`. May be used by Relay 1."""
  licenseRegistrationEdge(
    """The method to use when ordering `LicenseRegistration`."""
    orderBy: [LicenseRegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicenseRegistrationsEdge
}

"""All input for the `deleteLicenseRegistration` mutation."""
input DeleteLicenseRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LicenseRegistration` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLicenseRegistrationById` mutation."""
input DeleteLicenseRegistrationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `License` mutation."""
type DeleteLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `License` that was deleted by this mutation."""
  license: License
  deletedLicenseId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LicenseModule` that is related to this `License`."""
  licenseModuleByLicenseModuleId: LicenseModule

  """Reads a single `LicenseCustomer` that is related to this `License`."""
  licenseCustomerByLicenseCustomerId: LicenseCustomer

  """Reads a single `User` that is related to this `License`."""
  userByOwnerId: User

  """Reads a single `EndUser` that is related to this `License`."""
  endUserByEndUserId: EndUser

  """An edge for our `License`. May be used by Relay 1."""
  licenseEdge(
    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicensesEdge
}

"""All input for the `deleteLicense` mutation."""
input DeleteLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `License` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLicenseById` mutation."""
input DeleteLicenseByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `MaintenanceVisitLine` mutation."""
type DeleteMaintenanceVisitLinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MaintenanceVisitLine` that was deleted by this mutation."""
  maintenanceVisitLine: MaintenanceVisitLine
  deletedMaintenanceVisitLineId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `MaintenanceVisit` that is related to this `MaintenanceVisitLine`.
  """
  maintenanceVisitByMaintenanceVisitId: MaintenanceVisit

  """
  Reads a single `DetectorSensorLocation` that is related to this `MaintenanceVisitLine`.
  """
  detectorSensorLocationByDetectorSensorLocationId: DetectorSensorLocation

  """
  Reads a single `DetectorSensor` that is related to this `MaintenanceVisitLine`.
  """
  detectorSensorByDetectorSensorId: DetectorSensor

  """
  Reads a single `Sensor` that is related to this `MaintenanceVisitLine`.
  """
  sensorBySensorId: Sensor

  """
  Reads a single `Sensor` that is related to this `MaintenanceVisitLine`.
  """
  sensorByOriginalSensorId: Sensor

  """
  Reads a single `CalGas` that is related to this `MaintenanceVisitLine`.
  """
  calGasByCalGasId: CalGas

  """
  Reads a single `Filter` that is related to this `MaintenanceVisitLine`.
  """
  filterByFilterId: Filter

  """
  Reads a single `Pyrolyser` that is related to this `MaintenanceVisitLine`.
  """
  pyrolyserByPyrolyserId: Pyrolyser

  """An edge for our `MaintenanceVisitLine`. May be used by Relay 1."""
  maintenanceVisitLineEdge(
    """The method to use when ordering `MaintenanceVisitLine`."""
    orderBy: [MaintenanceVisitLinesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MaintenanceVisitLinesEdge
}

"""All input for the `deleteMaintenanceVisitLine` mutation."""
input DeleteMaintenanceVisitLineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MaintenanceVisitLine` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMaintenanceVisitLineById` mutation."""
input DeleteMaintenanceVisitLineByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteMaintenanceVisitLineByMaintenanceVisitIdAndDetectorSensorLocationId` mutation.
"""
input DeleteMaintenanceVisitLineByMaintenanceVisitIdAndDetectorSensorLocationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  maintenanceVisitId: Int!
  detectorSensorLocationId: Int!
}

"""The output of our delete `MaintenanceVisitRemark` mutation."""
type DeleteMaintenanceVisitRemarkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MaintenanceVisitRemark` that was deleted by this mutation."""
  maintenanceVisitRemark: MaintenanceVisitRemark
  deletedMaintenanceVisitRemarkId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `MaintenanceVisit` that is related to this `MaintenanceVisitRemark`.
  """
  maintenanceVisitByMaintenanceVisitId: MaintenanceVisit

  """An edge for our `MaintenanceVisitRemark`. May be used by Relay 1."""
  maintenanceVisitRemarkEdge(
    """The method to use when ordering `MaintenanceVisitRemark`."""
    orderBy: [MaintenanceVisitRemarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): MaintenanceVisitRemarksEdge
}

"""All input for the `deleteMaintenanceVisitRemark` mutation."""
input DeleteMaintenanceVisitRemarkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MaintenanceVisitRemark` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMaintenanceVisitRemarkById` mutation."""
input DeleteMaintenanceVisitRemarkByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteMaintenanceVisitRemarkByMaintenanceVisitIdAndLine` mutation.
"""
input DeleteMaintenanceVisitRemarkByMaintenanceVisitIdAndLineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  maintenanceVisitId: Int!
  line: Int!
}

"""The output of our delete `MaintenanceVisit` mutation."""
type DeleteMaintenanceVisitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MaintenanceVisit` that was deleted by this mutation."""
  maintenanceVisit: MaintenanceVisit
  deletedMaintenanceVisitId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `EndUser` that is related to this `MaintenanceVisit`."""
  endUserByEndUserId: EndUser

  """Reads a single `User` that is related to this `MaintenanceVisit`."""
  userByUserId: User

  """Reads a single `User` that is related to this `MaintenanceVisit`."""
  userByOwnerId: User

  """An edge for our `MaintenanceVisit`. May be used by Relay 1."""
  maintenanceVisitEdge(
    """The method to use when ordering `MaintenanceVisit`."""
    orderBy: [MaintenanceVisitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MaintenanceVisitsEdge
}

"""All input for the `deleteMaintenanceVisit` mutation."""
input DeleteMaintenanceVisitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MaintenanceVisit` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMaintenanceVisitById` mutation."""
input DeleteMaintenanceVisitByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Membrane` mutation."""
type DeleteMembranePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Membrane` that was deleted by this mutation."""
  membrane: Membrane
  deletedMembraneId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Membrane`."""
  userByOwnerId: User

  """An edge for our `Membrane`. May be used by Relay 1."""
  membraneEdge(
    """The method to use when ordering `Membrane`."""
    orderBy: [MembranesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembranesEdge
}

"""All input for the `deleteMembrane` mutation."""
input DeleteMembraneInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Membrane` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMembraneById` mutation."""
input DeleteMembraneByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteMembraneByName` mutation."""
input DeleteMembraneByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""The output of our delete `ORing` mutation."""
type DeleteORingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ORing` that was deleted by this mutation."""
  oRing: ORing
  deletedORingId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `ORing`."""
  userByOwnerId: User

  """An edge for our `ORing`. May be used by Relay 1."""
  oRingEdge(
    """The method to use when ordering `ORing`."""
    orderBy: [ORingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ORingsEdge
}

"""All input for the `deleteORing` mutation."""
input DeleteORingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ORing` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteORingById` mutation."""
input DeleteORingByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteORingByName` mutation."""
input DeleteORingByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""The output of our delete `OfferteRemark` mutation."""
type DeleteOfferteRemarkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OfferteRemark` that was deleted by this mutation."""
  offerteRemark: OfferteRemark
  deletedOfferteRemarkId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `OfferteRemark`."""
  userByOwnerId: User

  """An edge for our `OfferteRemark`. May be used by Relay 1."""
  offerteRemarkEdge(
    """The method to use when ordering `OfferteRemark`."""
    orderBy: [OfferteRemarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): OfferteRemarksEdge
}

"""All input for the `deleteOfferteRemark` mutation."""
input DeleteOfferteRemarkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OfferteRemark` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteOfferteRemarkById` mutation."""
input DeleteOfferteRemarkByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteOfferteRemarkByOfferteId` mutation."""
input DeleteOfferteRemarkByOfferteIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  offerteId: String!
}

"""The output of our delete `Opportunity` mutation."""
type DeleteOpportunityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Opportunity` that was deleted by this mutation."""
  opportunity: Opportunity
  deletedOpportunityId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `_Land` that is related to this `Opportunity`."""
  _landByCdland: _Land

  """Reads a single `User` that is related to this `Opportunity`."""
  userByOwnerId: User

  """An edge for our `Opportunity`. May be used by Relay 1."""
  opportunityEdge(
    """The method to use when ordering `Opportunity`."""
    orderBy: [OpportunitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OpportunitiesEdge
}

"""All input for the `deleteOpportunity` mutation."""
input DeleteOpportunityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Opportunity` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteOpportunityById` mutation."""
input DeleteOpportunityByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Permission` mutation."""
type DeletePermissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Permission` that was deleted by this mutation."""
  permission: Permission
  deletedPermissionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Permission`. May be used by Relay 1."""
  permissionEdge(
    """The method to use when ordering `Permission`."""
    orderBy: [PermissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermissionsEdge
}

"""All input for the `deletePermission` mutation."""
input DeletePermissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Permission` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePermissionById` mutation."""
input DeletePermissionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `PersoonRol` mutation."""
type DeletePersoonRolPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PersoonRol` that was deleted by this mutation."""
  persoonRol: PersoonRol
  deletedPersoonRolId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `PersoonRol`. May be used by Relay 1."""
  persoonRolEdge(
    """The method to use when ordering `PersoonRol`."""
    orderBy: [PersoonRolsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PersoonRolsEdge
}

"""All input for the `deletePersoonRol` mutation."""
input DeletePersoonRolInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PersoonRol` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePersoonRolByPersoonRolGuid` mutation."""
input DeletePersoonRolByPersoonRolGuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  persoonRolGuid: String!
}

"""The output of our delete `Plug` mutation."""
type DeletePlugPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Plug` that was deleted by this mutation."""
  plug: Plug
  deletedPlugId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Plug`."""
  userByOwnerId: User

  """An edge for our `Plug`. May be used by Relay 1."""
  plugEdge(
    """The method to use when ordering `Plug`."""
    orderBy: [PlugsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlugsEdge
}

"""All input for the `deletePlug` mutation."""
input DeletePlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Plug` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePlugById` mutation."""
input DeletePlugByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deletePlugByName` mutation."""
input DeletePlugByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""The output of our delete `Principle` mutation."""
type DeletePrinciplePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Principle` that was deleted by this mutation."""
  principle: Principle
  deletedPrincipleId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Principle`."""
  userByOwnerId: User

  """An edge for our `Principle`. May be used by Relay 1."""
  principleEdge(
    """The method to use when ordering `Principle`."""
    orderBy: [PrinciplesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PrinciplesEdge
}

"""All input for the `deletePrinciple` mutation."""
input DeletePrincipleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Principle` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePrincipleById` mutation."""
input DeletePrincipleByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deletePrincipleByName` mutation."""
input DeletePrincipleByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""The output of our delete `Production` mutation."""
type DeleteProductionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Production` that was deleted by this mutation."""
  production: Production
  deletedProductionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Production`. May be used by Relay 1."""
  productionEdge(
    """The method to use when ordering `Production`."""
    orderBy: [ProductionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductionsEdge
}

"""All input for the `deleteProduction` mutation."""
input DeleteProductionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Production` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteProductionById` mutation."""
input DeleteProductionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Pyrolyser` mutation."""
type DeletePyrolyserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Pyrolyser` that was deleted by this mutation."""
  pyrolyser: Pyrolyser
  deletedPyrolyserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Pyrolyser`."""
  userByOwnerId: User

  """An edge for our `Pyrolyser`. May be used by Relay 1."""
  pyrolyserEdge(
    """The method to use when ordering `Pyrolyser`."""
    orderBy: [PyrolysersOrderBy!] = [PRIMARY_KEY_ASC]
  ): PyrolysersEdge
}

"""All input for the `deletePyrolyser` mutation."""
input DeletePyrolyserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Pyrolyser` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePyrolyserById` mutation."""
input DeletePyrolyserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deletePyrolyserByName` mutation."""
input DeletePyrolyserByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""The output of our delete `Range` mutation."""
type DeleteRangePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Range` that was deleted by this mutation."""
  range: Range
  deletedRangeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Gas` that is related to this `Range`."""
  gasByGasId: Gas

  """Reads a single `User` that is related to this `Range`."""
  userByOwnerId: User

  """An edge for our `Range`. May be used by Relay 1."""
  rangeEdge(
    """The method to use when ordering `Range`."""
    orderBy: [RangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RangesEdge
}

"""All input for the `deleteRange` mutation."""
input DeleteRangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Range` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRangeById` mutation."""
input DeleteRangeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteRangeByLowEuAndHighEuAndEngineeringUnitsAndGasId` mutation.
"""
input DeleteRangeByLowEuAndHighEuAndEngineeringUnitsAndGasIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lowEu: Float!
  highEu: Float!
  engineeringUnits: String!
  gasId: Int!
}

"""The output of our delete `RcCard` mutation."""
type DeleteRcCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RcCard` that was deleted by this mutation."""
  rcCard: RcCard
  deletedRcCardId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `RcCard`."""
  userByOwnerId: User

  """An edge for our `RcCard`. May be used by Relay 1."""
  rcCardEdge(
    """The method to use when ordering `RcCard`."""
    orderBy: [RcCardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RcCardsEdge
}

"""All input for the `deleteRcCard` mutation."""
input DeleteRcCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RcCard` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRcCardById` mutation."""
input DeleteRcCardByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `ReportDetector` mutation."""
type DeleteReportDetectorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReportDetector` that was deleted by this mutation."""
  reportDetector: ReportDetector
  deletedReportDetectorId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Report` that is related to this `ReportDetector`."""
  reportByReportId: Report

  """Reads a single `Detector` that is related to this `ReportDetector`."""
  detectorByDetectorId: Detector

  """An edge for our `ReportDetector`. May be used by Relay 1."""
  reportDetectorEdge(
    """The method to use when ordering `ReportDetector`."""
    orderBy: [ReportDetectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportDetectorsEdge
}

"""All input for the `deleteReportDetector` mutation."""
input DeleteReportDetectorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReportDetector` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteReportDetectorById` mutation."""
input DeleteReportDetectorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteReportDetectorByReportIdAndDetectorId` mutation.
"""
input DeleteReportDetectorByReportIdAndDetectorIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  reportId: Int!
  detectorId: Int!
}

"""The output of our delete `ReportItem` mutation."""
type DeleteReportItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReportItem` that was deleted by this mutation."""
  reportItem: ReportItem
  deletedReportItemId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Report` that is related to this `ReportItem`."""
  reportByReportId: Report

  """Reads a single `Item` that is related to this `ReportItem`."""
  itemByItemId: Item

  """An edge for our `ReportItem`. May be used by Relay 1."""
  reportItemEdge(
    """The method to use when ordering `ReportItem`."""
    orderBy: [ReportItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportItemsEdge
}

"""All input for the `deleteReportItem` mutation."""
input DeleteReportItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReportItem` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteReportItemById` mutation."""
input DeleteReportItemByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `ReportSensor` mutation."""
type DeleteReportSensorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReportSensor` that was deleted by this mutation."""
  reportSensor: ReportSensor
  deletedReportSensorId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Report` that is related to this `ReportSensor`."""
  reportByReportId: Report

  """Reads a single `Sensor` that is related to this `ReportSensor`."""
  sensorBySensorId: Sensor

  """An edge for our `ReportSensor`. May be used by Relay 1."""
  reportSensorEdge(
    """The method to use when ordering `ReportSensor`."""
    orderBy: [ReportSensorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportSensorsEdge
}

"""All input for the `deleteReportSensor` mutation."""
input DeleteReportSensorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReportSensor` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteReportSensorById` mutation."""
input DeleteReportSensorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteReportSensorByReportIdAndSensorId` mutation."""
input DeleteReportSensorByReportIdAndSensorIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  reportId: Int!
  sensorId: Int!
}

"""The output of our delete `Report` mutation."""
type DeleteReportPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Report` that was deleted by this mutation."""
  report: Report
  deletedReportId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Report`."""
  userByOwnerId: User

  """Reads a single `EndUser` that is related to this `Report`."""
  endUserByEndUserId: EndUser

  """Reads a single `User` that is related to this `Report`."""
  userByUserId: User

  """An edge for our `Report`. May be used by Relay 1."""
  reportEdge(
    """The method to use when ordering `Report`."""
    orderBy: [ReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportsEdge
}

"""All input for the `deleteReport` mutation."""
input DeleteReportInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Report` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteReportById` mutation."""
input DeleteReportByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteReportByFilename` mutation."""
input DeleteReportByFilenameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  filename: String!
}

"""All input for the `deleteReportByTsrNumberAndVersion` mutation."""
input DeleteReportByTsrNumberAndVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tsrNumber: String!
  version: String!
}

"""The output of our delete `Request` mutation."""
type DeleteRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Request` that was deleted by this mutation."""
  request: Request
  deletedRequestId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Request`."""
  userByOwnerId: User

  """An edge for our `Request`. May be used by Relay 1."""
  requestEdge(
    """The method to use when ordering `Request`."""
    orderBy: [RequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RequestsEdge
}

"""All input for the `deleteRequest` mutation."""
input DeleteRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Request` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRequestById` mutation."""
input DeleteRequestByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `RxCard` mutation."""
type DeleteRxCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RxCard` that was deleted by this mutation."""
  rxCard: RxCard
  deletedRxCardId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `RxCard`."""
  userByOwnerId: User

  """An edge for our `RxCard`. May be used by Relay 1."""
  rxCardEdge(
    """The method to use when ordering `RxCard`."""
    orderBy: [RxCardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RxCardsEdge
}

"""All input for the `deleteRxCard` mutation."""
input DeleteRxCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RxCard` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRxCardById` mutation."""
input DeleteRxCardByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `SamplePoint` mutation."""
type DeleteSamplePointPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SamplePoint` that was deleted by this mutation."""
  samplePoint: SamplePoint
  deletedSamplePointId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `SamplePoint`."""
  userByOwnerId: User

  """Reads a single `Area` that is related to this `SamplePoint`."""
  areaByAreaId: Area

  """An edge for our `SamplePoint`. May be used by Relay 1."""
  samplePointEdge(
    """The method to use when ordering `SamplePoint`."""
    orderBy: [SamplePointsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SamplePointsEdge
}

"""All input for the `deleteSamplePoint` mutation."""
input DeleteSamplePointInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SamplePoint` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSamplePointById` mutation."""
input DeleteSamplePointByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSamplePointByAreaIdAndName` mutation."""
input DeleteSamplePointByAreaIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  areaId: Int!
  name: String!
}

"""The output of our delete `SensorBaseType` mutation."""
type DeleteSensorBaseTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorBaseType` that was deleted by this mutation."""
  sensorBaseType: SensorBaseType
  deletedSensorBaseTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Principle` that is related to this `SensorBaseType`."""
  principleByPrincipleId: Principle

  """An edge for our `SensorBaseType`. May be used by Relay 1."""
  sensorBaseTypeEdge(
    """The method to use when ordering `SensorBaseType`."""
    orderBy: [SensorBaseTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorBaseTypesEdge
}

"""All input for the `deleteSensorBaseType` mutation."""
input DeleteSensorBaseTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SensorBaseType` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSensorBaseTypeById` mutation."""
input DeleteSensorBaseTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSensorBaseTypeByPrefixAndSuffix` mutation."""
input DeleteSensorBaseTypeByPrefixAndSuffixInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  prefix: String!
  suffix: String!
}

"""The output of our delete `SensorElementLocation` mutation."""
type DeleteSensorElementLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorElementLocation` that was deleted by this mutation."""
  sensorElementLocation: SensorElementLocation
  deletedSensorElementLocationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `DetectorSensorLocation` that is related to this `SensorElementLocation`.
  """
  detectorSensorLocationByDetectorSensorLocationId: DetectorSensorLocation

  """
  Reads a single `SensorElement` that is related to this `SensorElementLocation`.
  """
  sensorElementBySensorElementId: SensorElement

  """Reads a single `User` that is related to this `SensorElementLocation`."""
  userByOwnerId: User

  """An edge for our `SensorElementLocation`. May be used by Relay 1."""
  sensorElementLocationEdge(
    """The method to use when ordering `SensorElementLocation`."""
    orderBy: [SensorElementLocationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorElementLocationsEdge
}

"""All input for the `deleteSensorElementLocation` mutation."""
input DeleteSensorElementLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SensorElementLocation` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSensorElementLocationById` mutation."""
input DeleteSensorElementLocationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteSensorElementLocationBySensorElementId` mutation.
"""
input DeleteSensorElementLocationBySensorElementIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sensorElementId: Int!
}

"""The output of our delete `SensorElementLog` mutation."""
type DeleteSensorElementLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorElementLog` that was deleted by this mutation."""
  sensorElementLog: SensorElementLog
  deletedSensorElementLogId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SensorElement` that is related to this `SensorElementLog`.
  """
  sensorElementBySensorElementId: SensorElement

  """Reads a single `Sensor` that is related to this `SensorElementLog`."""
  sensorBySensorId: Sensor

  """An edge for our `SensorElementLog`. May be used by Relay 1."""
  sensorElementLogEdge(
    """The method to use when ordering `SensorElementLog`."""
    orderBy: [SensorElementLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorElementLogsEdge
}

"""All input for the `deleteSensorElementLog` mutation."""
input DeleteSensorElementLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SensorElementLog` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSensorElementLogById` mutation."""
input DeleteSensorElementLogByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `SensorElementType` mutation."""
type DeleteSensorElementTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorElementType` that was deleted by this mutation."""
  sensorElementType: SensorElementType
  deletedSensorElementTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `SensorElementType`."""
  userByOwnerId: User

  """
  Reads a single `SensorBaseType` that is related to this `SensorElementType`.
  """
  sensorBaseTypeBySensorBaseTypeId: SensorBaseType

  """Reads a single `Range` that is related to this `SensorElementType`."""
  rangeByRangeId: Range

  """Reads a single `Range` that is related to this `SensorElementType`."""
  rangeByCalRangeId: Range

  """An edge for our `SensorElementType`. May be used by Relay 1."""
  sensorElementTypeEdge(
    """The method to use when ordering `SensorElementType`."""
    orderBy: [SensorElementTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorElementTypesEdge
}

"""All input for the `deleteSensorElementType` mutation."""
input DeleteSensorElementTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SensorElementType` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSensorElementTypeById` mutation."""
input DeleteSensorElementTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `SensorElement` mutation."""
type DeleteSensorElementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorElement` that was deleted by this mutation."""
  sensorElement: SensorElement
  deletedSensorElementId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SensorElementType` that is related to this `SensorElement`.
  """
  sensorElementTypeBySensorElementTypeId: SensorElementType

  """Reads a single `User` that is related to this `SensorElement`."""
  userByOwnerId: User

  """An edge for our `SensorElement`. May be used by Relay 1."""
  sensorElementEdge(
    """The method to use when ordering `SensorElement`."""
    orderBy: [SensorElementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorElementsEdge
}

"""All input for the `deleteSensorElement` mutation."""
input DeleteSensorElementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SensorElement` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSensorElementById` mutation."""
input DeleteSensorElementByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `SensorOrder` mutation."""
type DeleteSensorOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorOrder` that was deleted by this mutation."""
  sensorOrder: SensorOrder
  deletedSensorOrderId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sensor` that is related to this `SensorOrder`."""
  sensorBySensorId: Sensor

  """Reads a single `User` that is related to this `SensorOrder`."""
  userByOwnerId: User

  """Reads a single `User` that is related to this `SensorOrder`."""
  userByCheckedUserId: User

  """Reads a single `User` that is related to this `SensorOrder`."""
  userByVerifiedUserId: User

  """
  Reads a single `Factureeropdracht` that is related to this `SensorOrder`.
  """
  factureeropdrachtByFactuuropdracht: Factureeropdracht

  """An edge for our `SensorOrder`. May be used by Relay 1."""
  sensorOrderEdge(
    """The method to use when ordering `SensorOrder`."""
    orderBy: [SensorOrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorOrdersEdge
}

"""All input for the `deleteSensorOrder` mutation."""
input DeleteSensorOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SensorOrder` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSensorOrderById` mutation."""
input DeleteSensorOrderByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteSensorOrderBySensorIdAndFactuuropdracht` mutation.
"""
input DeleteSensorOrderBySensorIdAndFactuuropdrachtInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sensorId: Int!
  factuuropdracht: String!
}

"""The output of our delete `SensorSensorElement` mutation."""
type DeleteSensorSensorElementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorSensorElement` that was deleted by this mutation."""
  sensorSensorElement: SensorSensorElement
  deletedSensorSensorElementId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sensor` that is related to this `SensorSensorElement`."""
  sensorBySensorId: Sensor

  """
  Reads a single `SensorElement` that is related to this `SensorSensorElement`.
  """
  sensorElementBySensorElementId: SensorElement

  """Reads a single `User` that is related to this `SensorSensorElement`."""
  userByOwnerId: User

  """An edge for our `SensorSensorElement`. May be used by Relay 1."""
  sensorSensorElementEdge(
    """The method to use when ordering `SensorSensorElement`."""
    orderBy: [SensorSensorElementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorSensorElementsEdge
}

"""All input for the `deleteSensorSensorElement` mutation."""
input DeleteSensorSensorElementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SensorSensorElement` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSensorSensorElementById` mutation."""
input DeleteSensorSensorElementByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteSensorSensorElementBySensorIdAndSensorPosition` mutation.
"""
input DeleteSensorSensorElementBySensorIdAndSensorPositionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sensorId: Int!
  sensorPosition: Int!
}

"""
All input for the `deleteSensorSensorElementBySensorElementId` mutation.
"""
input DeleteSensorSensorElementBySensorElementIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sensorElementId: Int!
}

"""The output of our delete `SensorSetting` mutation."""
type DeleteSensorSettingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorSetting` that was deleted by this mutation."""
  sensorSetting: SensorSetting
  deletedSensorSettingId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SensorSetting`. May be used by Relay 1."""
  sensorSettingEdge(
    """The method to use when ordering `SensorSetting`."""
    orderBy: [SensorSettingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorSettingsEdge
}

"""All input for the `deleteSensorSetting` mutation."""
input DeleteSensorSettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SensorSetting` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSensorSettingById` mutation."""
input DeleteSensorSettingByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSensorSettingByTypeTarget` mutation."""
input DeleteSensorSettingByTypeTargetInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  typeTarget: String!
}

"""The output of our delete `SensorTestResult` mutation."""
type DeleteSensorTestResultPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorTestResult` that was deleted by this mutation."""
  sensorTestResult: SensorTestResult
  deletedSensorTestResultId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sensor` that is related to this `SensorTestResult`."""
  sensorBySensorId: Sensor

  """Reads a single `User` that is related to this `SensorTestResult`."""
  userByOwnerId: User

  """Reads a single `User` that is related to this `SensorTestResult`."""
  userByUserId: User

  """Reads a single `CalGas` that is related to this `SensorTestResult`."""
  calGasByFsCalGasId: CalGas

  """
  Reads a single `SensorOrder` that is related to this `SensorTestResult`.
  """
  sensorOrderBySensorOrderId: SensorOrder

  """An edge for our `SensorTestResult`. May be used by Relay 1."""
  sensorTestResultEdge(
    """The method to use when ordering `SensorTestResult`."""
    orderBy: [SensorTestResultsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorTestResultsEdge
}

"""All input for the `deleteSensorTestResult` mutation."""
input DeleteSensorTestResultInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SensorTestResult` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSensorTestResultById` mutation."""
input DeleteSensorTestResultByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `SensorType` mutation."""
type DeleteSensorTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SensorType` that was deleted by this mutation."""
  sensorType: SensorType
  deletedSensorTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Electrolyte` that is related to this `SensorType`."""
  electrolyteByElectrolyteId: Electrolyte

  """Reads a single `Membrane` that is related to this `SensorType`."""
  membraneByMembraneId: Membrane

  """Reads a single `ORing` that is related to this `SensorType`."""
  oRingByORingId: ORing

  """Reads a single `Pyrolyser` that is related to this `SensorType`."""
  pyrolyserByPyrolyserId: Pyrolyser

  """Reads a single `Filter` that is related to this `SensorType`."""
  filterByFilterId: Filter

  """Reads a single `Range` that is related to this `SensorType`."""
  rangeByRangeId: Range

  """Reads a single `SensorBaseType` that is related to this `SensorType`."""
  sensorBaseTypeBySensorBaseTypeId: SensorBaseType

  """Reads a single `User` that is related to this `SensorType`."""
  userByOwnerId: User

  """Reads a single `CalGas` that is related to this `SensorType`."""
  calGasByCalGasId: CalGas

  """Reads a single `Plug` that is related to this `SensorType`."""
  plugByPlugId: Plug

  """An edge for our `SensorType`. May be used by Relay 1."""
  sensorTypeEdge(
    """The method to use when ordering `SensorType`."""
    orderBy: [SensorTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorTypesEdge
}

"""All input for the `deleteSensorType` mutation."""
input DeleteSensorTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SensorType` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSensorTypeById` mutation."""
input DeleteSensorTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSensorTypeBySensorTypeId` mutation."""
input DeleteSensorTypeBySensorTypeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sensorTypeId: Int!
}

"""
All input for the `deleteSensorTypeBySensorBaseTypeIdAndRangeIdAndCodeAndModelAndPyrolyserId` mutation.
"""
input DeleteSensorTypeBySensorBaseTypeIdAndRangeIdAndCodeAndModelAndPyrolyserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sensorBaseTypeId: Int!
  rangeId: Int!
  code: String!
  model: String!
  pyrolyserId: Int!
}

"""The output of our delete `Sensor` mutation."""
type DeleteSensorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Sensor` that was deleted by this mutation."""
  sensor: Sensor
  deletedSensorId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Sensor`."""
  userByOwnerId: User

  """Reads a single `SensorType` that is related to this `Sensor`."""
  sensorTypeBySensorTypeId: SensorType

  """An edge for our `Sensor`. May be used by Relay 1."""
  sensorEdge(
    """The method to use when ordering `Sensor`."""
    orderBy: [SensorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SensorsEdge
}

"""All input for the `deleteSensor` mutation."""
input DeleteSensorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Sensor` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSensorById` mutation."""
input DeleteSensorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteSensorBySerialNumberAndSensorTypeId` mutation.
"""
input DeleteSensorBySerialNumberAndSensorTypeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  serialNumber: String!
  sensorTypeId: Int!
}

"""The output of our delete `Software` mutation."""
type DeleteSoftwarePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Software` that was deleted by this mutation."""
  software: Software
  deletedSoftwareId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Hardware` that is related to this `Software`."""
  hardwareByHardwareId: Hardware

  """Reads a single `User` that is related to this `Software`."""
  userByOwnerId: User

  """An edge for our `Software`. May be used by Relay 1."""
  softwareEdge(
    """The method to use when ordering `Software`."""
    orderBy: [SoftwaresOrderBy!] = [PRIMARY_KEY_ASC]
  ): SoftwaresEdge
}

"""All input for the `deleteSoftware` mutation."""
input DeleteSoftwareInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Software` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSoftwareById` mutation."""
input DeleteSoftwareByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `StockGroup` mutation."""
type DeleteStockGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StockGroup` that was deleted by this mutation."""
  stockGroup: StockGroup
  deletedStockGroupId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `StockGroup`."""
  userByOwnerId: User

  """An edge for our `StockGroup`. May be used by Relay 1."""
  stockGroupEdge(
    """The method to use when ordering `StockGroup`."""
    orderBy: [StockGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): StockGroupsEdge
}

"""All input for the `deleteStockGroup` mutation."""
input DeleteStockGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StockGroup` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteStockGroupById` mutation."""
input DeleteStockGroupByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `StockItem` mutation."""
type DeleteStockItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StockItem` that was deleted by this mutation."""
  stockItem: StockItem
  deletedStockItemId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `StockGroup` that is related to this `StockItem`."""
  stockGroupByStockGroupId: StockGroup

  """Reads a single `User` that is related to this `StockItem`."""
  userByOwnerId: User

  """An edge for our `StockItem`. May be used by Relay 1."""
  stockItemEdge(
    """The method to use when ordering `StockItem`."""
    orderBy: [StockItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): StockItemsEdge
}

"""All input for the `deleteStockItem` mutation."""
input DeleteStockItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StockItem` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteStockItemById` mutation."""
input DeleteStockItemByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteStockItemByStockGroupIdAndCdartikel` mutation.
"""
input DeleteStockItemByStockGroupIdAndCdartikelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  stockGroupId: Int!
  cdartikel: String!
}

"""The output of our delete `StockSupplier` mutation."""
type DeleteStockSupplierPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StockSupplier` that was deleted by this mutation."""
  stockSupplier: StockSupplier
  deletedStockSupplierId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `StockSupplier`."""
  userByOwnerId: User

  """An edge for our `StockSupplier`. May be used by Relay 1."""
  stockSupplierEdge(
    """The method to use when ordering `StockSupplier`."""
    orderBy: [StockSuppliersOrderBy!] = [PRIMARY_KEY_ASC]
  ): StockSuppliersEdge
}

"""All input for the `deleteStockSupplier` mutation."""
input DeleteStockSupplierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StockSupplier` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteStockSupplierById` mutation."""
input DeleteStockSupplierByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Task` mutation."""
type DeleteTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Task` that was deleted by this mutation."""
  task: Task
  deletedTaskId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Task`."""
  userByOwnerId: User

  """An edge for our `Task`. May be used by Relay 1."""
  taskEdge(
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksEdge
}

"""All input for the `deleteTask` mutation."""
input DeleteTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Task` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTaskById` mutation."""
input DeleteTaskByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `TempFactopdrachtregel` mutation."""
type DeleteTempFactopdrachtregelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TempFactopdrachtregel` that was deleted by this mutation."""
  tempFactopdrachtregel: TempFactopdrachtregel
  deletedTempFactopdrachtregelId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TempFactopdrachtregel`. May be used by Relay 1."""
  tempFactopdrachtregelEdge(
    """The method to use when ordering `TempFactopdrachtregel`."""
    orderBy: [TempFactopdrachtregelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TempFactopdrachtregelsEdge
}

"""All input for the `deleteTempFactopdrachtregel` mutation."""
input DeleteTempFactopdrachtregelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TempFactopdrachtregel` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTempFactopdrachtregelById` mutation."""
input DeleteTempFactopdrachtregelByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""
All input for the `deleteTempFactopdrachtregelByFactuuropdrachtAndFactuurregel` mutation.
"""
input DeleteTempFactopdrachtregelByFactuuropdrachtAndFactuurregelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  factuuropdracht: String!
  factuurregel: Int!
}

"""The output of our delete `TempLicense` mutation."""
type DeleteTempLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TempLicense` that was deleted by this mutation."""
  tempLicense: TempLicense
  deletedTempLicenseId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TempLicense`. May be used by Relay 1."""
  tempLicenseEdge(
    """The method to use when ordering `TempLicense`."""
    orderBy: [TempLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TempLicensesEdge
}

"""All input for the `deleteTempLicense` mutation."""
input DeleteTempLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TempLicense` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTempLicenseById` mutation."""
input DeleteTempLicenseByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `TempRegistrationHistory` mutation."""
type DeleteTempRegistrationHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TempRegistrationHistory` that was deleted by this mutation."""
  tempRegistrationHistory: TempRegistrationHistory
  deletedTempRegistrationHistoryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TempRegistrationHistory`. May be used by Relay 1."""
  tempRegistrationHistoryEdge(
    """The method to use when ordering `TempRegistrationHistory`."""
    orderBy: [TempRegistrationHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TempRegistrationHistoriesEdge
}

"""All input for the `deleteTempRegistrationHistory` mutation."""
input DeleteTempRegistrationHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TempRegistrationHistory` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTempRegistrationHistoryById` mutation."""
input DeleteTempRegistrationHistoryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `TempRegistration` mutation."""
type DeleteTempRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TempRegistration` that was deleted by this mutation."""
  tempRegistration: TempRegistration
  deletedTempRegistrationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TempRegistration`. May be used by Relay 1."""
  tempRegistrationEdge(
    """The method to use when ordering `TempRegistration`."""
    orderBy: [TempRegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TempRegistrationsEdge
}

"""All input for the `deleteTempRegistration` mutation."""
input DeleteTempRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TempRegistration` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTempRegistrationById` mutation."""
input DeleteTempRegistrationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `TempRegistrations2` mutation."""
type DeleteTempRegistrations2Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TempRegistrations2` that was deleted by this mutation."""
  tempRegistrations2: TempRegistrations2
  deletedTempRegistrations2Id: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TempRegistrations2`. May be used by Relay 1."""
  tempRegistrations2Edge(
    """The method to use when ordering `TempRegistrations2`."""
    orderBy: [TempRegistrations2SOrderBy!] = [PRIMARY_KEY_ASC]
  ): TempRegistrations2SEdge
}

"""All input for the `deleteTempRegistrations2` mutation."""
input DeleteTempRegistrations2Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TempRegistrations2` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTempRegistrations2ById` mutation."""
input DeleteTempRegistrations2ByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Test` mutation."""
type DeleteTestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Test` that was deleted by this mutation."""
  test: Test
  deletedTestId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Test`. May be used by Relay 1."""
  testEdge(
    """The method to use when ordering `Test`."""
    orderBy: [TestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TestsEdge
}

"""All input for the `deleteTest` mutation."""
input DeleteTestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Test` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTestById` mutation."""
input DeleteTestByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `UserRight` mutation."""
type DeleteUserRightPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserRight` that was deleted by this mutation."""
  userRight: UserRight
  deletedUserRightId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserRight`."""
  userByUserId: User

  """An edge for our `UserRight`. May be used by Relay 1."""
  userRightEdge(
    """The method to use when ordering `UserRight`."""
    orderBy: [UserRightsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserRightsEdge
}

"""All input for the `deleteUserRight` mutation."""
input DeleteUserRightInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserRight` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserRightById` mutation."""
input DeleteUserRightByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteUserRightByUserIdAndPath` mutation."""
input DeleteUserRightByUserIdAndPathInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: Int!
  path: String!
}

"""The output of our delete `UserTask` mutation."""
type DeleteUserTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserTask` that was deleted by this mutation."""
  userTask: UserTask
  deletedUserTaskId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserTask`."""
  userByUserId: User

  """Reads a single `Task` that is related to this `UserTask`."""
  taskByTaskId: Task

  """Reads a single `User` that is related to this `UserTask`."""
  userByOwnerId: User

  """An edge for our `UserTask`. May be used by Relay 1."""
  userTaskEdge(
    """The method to use when ordering `UserTask`."""
    orderBy: [UserTasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserTasksEdge
}

"""All input for the `deleteUserTask` mutation."""
input DeleteUserTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserTask` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserTaskById` mutation."""
input DeleteUserTaskByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteUserTaskByUserIdAndTaskId` mutation."""
input DeleteUserTaskByUserIdAndTaskIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: Int!
  taskId: Int!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `User`."""
  groupByGroupId: Group

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserById` mutation."""
input DeleteUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteUserByUsername` mutation."""
input DeleteUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
}

"""The output of our delete `UsersGroup` mutation."""
type DeleteUsersGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UsersGroup` that was deleted by this mutation."""
  usersGroup: UsersGroup
  deletedUsersGroupId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UsersGroup`."""
  userByUserId: User

  """Reads a single `Group` that is related to this `UsersGroup`."""
  groupByGroupId: Group

  """An edge for our `UsersGroup`. May be used by Relay 1."""
  usersGroupEdge(
    """The method to use when ordering `UsersGroup`."""
    orderBy: [UsersGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersGroupsEdge
}

"""All input for the `deleteUsersGroup` mutation."""
input DeleteUsersGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UsersGroup` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUsersGroupById` mutation."""
input DeleteUsersGroupByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteUsersGroupByUserIdAndGroupId` mutation."""
input DeleteUsersGroupByUserIdAndGroupIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: Int!
  groupId: Int!
}

"""The output of our delete `Voorraden` mutation."""
type DeleteVoorradenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Voorraden` that was deleted by this mutation."""
  voorraden: Voorraden
  deletedVoorradenId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Voorraden`. May be used by Relay 1."""
  voorradenEdge(
    """The method to use when ordering `Voorraden`."""
    orderBy: [VoorradensOrderBy!] = [PRIMARY_KEY_ASC]
  ): VoorradensEdge
}

"""All input for the `deleteVoorraden` mutation."""
input DeleteVoorradenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Voorraden` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteVoorradenByCdartikelAndCdmagazijn` mutation."""
input DeleteVoorradenByCdartikelAndCdmagazijnInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  cdartikel: String!
  cdmagazijn: String!
}

"""The output of our delete `VoorradenLog` mutation."""
type DeleteVoorradenLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `VoorradenLog` that was deleted by this mutation."""
  voorradenLog: VoorradenLog
  deletedVoorradenLogId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `VoorradenLog`. May be used by Relay 1."""
  voorradenLogEdge(
    """The method to use when ordering `VoorradenLog`."""
    orderBy: [VoorradenLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): VoorradenLogsEdge
}

"""All input for the `deleteVoorradenLog` mutation."""
input DeleteVoorradenLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `VoorradenLog` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteVoorradenLogById` mutation."""
input DeleteVoorradenLogByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `WeeklyHourRemark` mutation."""
type DeleteWeeklyHourRemarkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `WeeklyHourRemark` that was deleted by this mutation."""
  weeklyHourRemark: WeeklyHourRemark
  deletedWeeklyHourRemarkId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `WeeklyHourRemark`."""
  userByUserId: User

  """Reads a single `Task` that is related to this `WeeklyHourRemark`."""
  taskByTaskId: Task

  """Reads a single `User` that is related to this `WeeklyHourRemark`."""
  userByOwnerId: User

  """An edge for our `WeeklyHourRemark`. May be used by Relay 1."""
  weeklyHourRemarkEdge(
    """The method to use when ordering `WeeklyHourRemark`."""
    orderBy: [WeeklyHourRemarksOrderBy!] = [PRIMARY_KEY_ASC]
  ): WeeklyHourRemarksEdge
}

"""All input for the `deleteWeeklyHourRemark` mutation."""
input DeleteWeeklyHourRemarkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `WeeklyHourRemark` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteWeeklyHourRemarkById` mutation."""
input DeleteWeeklyHourRemarkByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteWeeklyHourRemarkByUserIdAndTaskIdAndDate` mutation.
"""
input DeleteWeeklyHourRemarkByUserIdAndTaskIdAndDateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: Int!
  taskId: Int!
  date: Date!
}

"""The output of our delete `WeeklyHour` mutation."""
type DeleteWeeklyHourPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `WeeklyHour` that was deleted by this mutation."""
  weeklyHour: WeeklyHour
  deletedWeeklyHourId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `WeeklyHour`."""
  userByUserId: User

  """Reads a single `Task` that is related to this `WeeklyHour`."""
  taskByTaskId: Task

  """Reads a single `User` that is related to this `WeeklyHour`."""
  userByOwnerId: User

  """An edge for our `WeeklyHour`. May be used by Relay 1."""
  weeklyHourEdge(
    """The method to use when ordering `WeeklyHour`."""
    orderBy: [WeeklyHoursOrderBy!] = [PRIMARY_KEY_ASC]
  ): WeeklyHoursEdge
}

"""All input for the `deleteWeeklyHour` mutation."""
input DeleteWeeklyHourInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `WeeklyHour` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteWeeklyHourById` mutation."""
input DeleteWeeklyHourByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our `authenticate` mutation."""
type AuthenticatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwtToken: JwtToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)
which securely represents claims between two parties.
"""
scalar JwtToken

"""All input for the `authenticate` mutation."""
input AuthenticateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
  password: String!
}

"""The output of our `createGroup` mutation."""
type CreateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  group: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Group`."""
  userByOwnerId: User

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsEdge
}

"""All input for the `createGroup` mutation."""
input CreateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String
}

"""The output of our `createGroupWithPermissions` mutation."""
type CreateGroupWithPermissionsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  results: [CreateGroupWithPermissionsRecord]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The return type of our `createGroupWithPermissions` mutation."""
type CreateGroupWithPermissionsRecord {
  groupD: Int
  groupPermissionId: Int
  name: String
  created: Datetime
  modified: Datetime
}

"""All input for the `createGroupWithPermissions` mutation."""
input CreateGroupWithPermissionsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pName: String
  pWriteIds: [Int]
  pReadIds: [Int]
}

"""The output of our `createSensors` mutation."""
type CreateSensorsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  sensors: [Sensor!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createSensors` mutation."""
input CreateSensorsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  factuuropdracht: String
  sensorTypeId: Int
  labelDate: Date
  calGasId: Int
  sensors: [CreateSensorInput]
}

"""An input for mutations affecting `CreateSensor`"""
input CreateSensorInput {
  serialNumber: String
  date: Date
  zeroResponse: Float
  spanResponse: Float
  usedSpanConcentration: Float
}

"""The output of our `createUserWithGroups` mutation."""
type CreateUserWithGroupsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  results: [CreateUserWithGroupsRecord]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The return type of our `createUserWithGroups` mutation."""
type CreateUserWithGroupsRecord {
  userId: Int
  username: String
  created: Datetime
  modified: Datetime
}

"""All input for the `createUserWithGroups` mutation."""
input CreateUserWithGroupsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pUsername: String
  pFullname: String
  pPassword: String
  pInitials: String
  pGroups: [Int]
}

"""The output of our `deleteGroupAndPermissions` mutation."""
type DeleteGroupAndPermissionsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGroupAndPermissions` mutation."""
input DeleteGroupAndPermissionsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pGroupId: Int
}

"""The output of our `deleteuserandgroups` mutation."""
type DeleteuserandgroupsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteuserandgroups` mutation."""
input DeleteuserandgroupsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pUserId: Int
}

"""The output of our `dueClass` mutation."""
type DueClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  string: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `dueClass` mutation."""
input DueClassInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  arg0: Date
  arg1: Date
}

"""The output of our `exchangeDetectors` mutation."""
type ExchangeDetectorsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `exchangeDetectors` mutation."""
input ExchangeDetectorsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sourceSerialNumber: String
  targetSerialNumber: String
}

"""The output of our `exchangeDetectorsById` mutation."""
type ExchangeDetectorsByIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  detectorSensors: [DetectorSensor!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `exchangeDetectorsById` mutation."""
input ExchangeDetectorsByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  srcDetectorId: Int
  dstDetectorId: Int
}

"""The output of our `exchangeSensors` mutation."""
type ExchangeSensorsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `exchangeSensors` mutation."""
input ExchangeSensorsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sourceSerialNumber: String
  targetSerialNumber: String
}

"""The output of our `exchangeSensorsById` mutation."""
type ExchangeSensorsByIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `exchangeSensorsById` mutation."""
input ExchangeSensorsByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sourceId: Int
  targetId: Int
}

"""The output of our `pc5109DSettings` mutation."""
type Pc5109DSettingsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  json: JSON

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `pc5109DSettings` mutation."""
input Pc5109DSettingsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  spanResistor: BigFloat
  biasMv: Int
  direction: Boolean
  zero: Boolean
  lowElectrolyte: Boolean
  electrodeCount: Int
  battery: Boolean
}

"""The output of our `pc5154BSettings` mutation."""
type Pc5154BSettingsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  json: JSON

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `pc5154BSettings` mutation."""
input Pc5154BSettingsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  direction: Boolean
  lowElectrolyte: Boolean
  powerMonitor: Boolean
}

"""The output of our `pc5155BSettings` mutation."""
type Pc5155BSettingsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  json: JSON

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `pc5155BSettings` mutation."""
input Pc5155BSettingsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  spanResistor: BigFloat
  biasMv: Int
}

"""The output of our `updateDetectorAndSensors` mutation."""
type UpdateDetectorAndSensorsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  detector: Detector

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `DetectorType` that is related to this `Detector`."""
  detectorTypeByDetectorTypeId: DetectorType

  """Reads a single `User` that is related to this `Detector`."""
  userByOwnerId: User

  """An edge for our `Detector`. May be used by Relay 1."""
  detectorEdge(
    """The method to use when ordering `Detector`."""
    orderBy: [DetectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorsEdge
}

"""All input for the `updateDetectorAndSensors` mutation."""
input UpdateDetectorAndSensorsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  endUserName: String
  endUserLocation: String
  endUserSubLocation: String
  buildingName: String
  floorName: String
  areaName: String
  typeName: String
  serialNumber: String
  bus: Int
  address: Int
  sensors: [UpdateDetectorAndSensorsSensorInput]
}

"""An input for mutations affecting `UpdateDetectorAndSensorsSensor`"""
input UpdateDetectorAndSensorsSensorInput {
  typeName: String
  serialNumber: String
  lowEu: Float
  highEu: Float
  engineeringUnits: String
  gasName: String
  filterName: String
  pyrolyserName: String
  endUserName: String
  endUserLocation: String
  endUserSubLocation: String
  buildingName: String
  floorName: String
  areaName: String
  samplePointName: String
  simsChannel: Int
  simsTag: String
}

"""The output of our `updateGroupWithPermissions` mutation."""
type UpdateGroupWithPermissionsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  results: [UpdateGroupWithPermissionsRecord]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The return type of our `updateGroupWithPermissions` mutation."""
type UpdateGroupWithPermissionsRecord {
  groupId: Int
  groupPermissionId: Int
  name: String
  created: Datetime
  modified: Datetime
}

"""All input for the `updateGroupWithPermissions` mutation."""
input UpdateGroupWithPermissionsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pGroupId: Int
  pName: String
  pWriteIds: [Int]
  pReadIds: [Int]
}

"""The output of our `updateUserGroups` mutation."""
type UpdateUserGroupsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `User`."""
  groupByGroupId: Group

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `updateUserGroups` mutation."""
input UpdateUserGroupsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: Int
  groupIds: [Int]
}

"""The output of our `updateUserWithGroups` mutation."""
type UpdateUserWithGroupsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateUserWithGroups` mutation."""
input UpdateUserWithGroupsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pUserId: Int
  pUsername: String
  pFullname: String
  pInitials: String
  pGroups: [Int]
  pPassword: String
}

"""The output of our `upsertDetectorSensorBySensorId` mutation."""
type UpsertDetectorSensorBySensorIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  detectorSensor: DetectorSensor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Detector` that is related to this `DetectorSensor`."""
  detectorByDetectorId: Detector

  """Reads a single `Sensor` that is related to this `DetectorSensor`."""
  sensorBySensorId: Sensor

  """Reads a single `Filter` that is related to this `DetectorSensor`."""
  filterByFilterId: Filter

  """Reads a single `Pyrolyser` that is related to this `DetectorSensor`."""
  pyrolyserByPyrolyserId: Pyrolyser

  """Reads a single `User` that is related to this `DetectorSensor`."""
  userByOwnerId: User

  """An edge for our `DetectorSensor`. May be used by Relay 1."""
  detectorSensorEdge(
    """The method to use when ordering `DetectorSensor`."""
    orderBy: [DetectorSensorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DetectorSensorsEdge
}

"""All input for the `upsertDetectorSensorBySensorId` mutation."""
input UpsertDetectorSensorBySensorIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sensorId: Int
  detectorId: Int
  detectorPosition: Int
  pyrolyserId: Int
  filterId: Int
}
